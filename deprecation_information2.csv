Community Updates â€” Requests 2.25.1 documentation,the requests extra is officially deprecated and will be removed in requests v2.26.0.,updated included ca bundle with new mistrusts and automated process for the future,features and improvements,features and improvements,urls with schemes that begin with http but are not http or https no longer have their host parts forced to lowercase.,"sessions and adapters are now picklable, i.e., can be used with the multiprocessing library","fixed regression from v2.12.1 for urls with schemes that begin with http . these urls have historically been processed as though they were http-schemed urls, and so have had parameters added. this was removed in v2.12.2 in an overzealous attempt to resolve problems with idna-encoding those urls. this change was reverted: the other fixes for idna-encoding have been judged to be sufficient to return to the behaviour requests had before v2.12.0.",pinning for chardet and idna now uses major version instead of minor. this hopefully reduces the need for releases everytime a dependency is updated.,fix error when urllib3 is unbundled and requests continues to use the vendored import location.,"fixed regression from 2.12.2 where non-string types were rejected in the basic auth parameters. while support for this behaviour has been readded, the behaviour is deprecated and will be removed in the future.","the json parameter to post and friends will now only be used if neither data nor files are present, consistent with the documentation.",session cookies not saved when session.request is called with return_response=false,"response is now a context manager, so can be used directly in a with statement without first having to be wrapped by contextlib.closing.",updated support for internationalized domain names from idna2003 to idna2008. this updated support is required for several forms of idns and is mandatory for .de domains.,certifi support was removed,added request.url attribute for context and redirects,the behavior of sessionredirectmixin was slightly altered. resolve_redirects will now detect a redirect by calling get_redirect_target instead of directly querying response.is_redirect and response.headers. advanced users will be able to process malformed redirects more easily.,support for connect timeouts! timeout now accepts a tuple which is used to set individual connect and read timeouts.,anything that is a subclass of mapping is now treated like a dictionary by the data= keyword argument.,"fixed several issues with idna-encoding urls that are technically invalid but which are widely accepted. requests will now attempt to idna-encode a url if it can but, if it fails, and the host contains only ascii characters, it will be passed through optimistically. this will allow users to opt-in to using idna2003 themselves if they want to, and will also allow technically invalid but still common hostnames.",the caseinsensitivedict used for http headers now behaves like a normal dictionary when references as string or viewed in the interpreter.,"cookies with , and _ allowed.",fixed a bug when using iter_content with decode_unicode=true for streamed bodies would raise attributeerror. this bug was introduced in 2.11.,fix error when requests is an install_requires dependency and python setup.py test is run. ,prevent hanging when using streaming uploads and digest auth when a 401 is received.,massive refactor and simplification,"if a request is made with a file-like object as the body and that request is redirected with a 307 or 308 status code, requests will now attempt to rewind the body object so it can be replayed.",fixed param handling with urls containing fragments.,sessions used by the functional api are always closed ,sessions are now closed in all cases when using the functional api rather than leaking and waiting for the garbage collector to clean them up.,"much improved handling of non-ascii location header values in redirects. fewer unicodedecodeerrors are encountered on python 2, and python 3 now correctly understands that latin-1 is unlikely to be the correct encoding.",changed a less-than to an equal-to and an or in the dependency markers to widen compatibility with older setuptools releases.,"requests is an elegant and simple http library for python, built for human beings. you are currently looking at the documentation of the development release.",post redirects now break rfc to do what browsers do: follow up with a get.,pyopenssl tls implementation is now only used if python either doesn t have an ssl module or doesn t support sni. previously pyopenssl was unconditionally used if available. this applies even if pyopenssl is installed via the requests extra ,"switch back to using chardet, since it has merged with charade.",reject header values that contain leading whitespace or newline characters to reduce risk of header smuggling.,forced basic is default authentication type,resolve redirects now receives and forwards all of the original arguments to the adapter. ,fixed an issue where unicode strings could not be used in basic auth.,fixed an issue where urls with leading whitespace would raise invalidschema errors.,"when users provide invalid paths to certificate bundle files or directories requests now raises ioerror, rather than failing at the time of the https request with a fairly inscrutable certificate validation error.",replace references of gittip with gratipay ,fixed an issue where some urls without the http or https schemes would still have http url preparation applied to them.,values of headers set by requests are now always the native string type.,features,requests v2.25.x will be the last release series with support for python 3.5.,significantly change how hooks are dispatched - hooks now receive all the arguments specified by the user when making a request so hooks can make a secondary request with the same parameters. this is especially necessary for authentication handler authors,actually added md5-sess to digest auth instead of pretending to like last time.,recommended packages and extensions,new features,new persistent sessions object and context manager,cve-2015-2296: fix handling of cookies on redirect. previously a cookie without a host value set would use the hostname for the redirected url exposing requests users to session fixation attacks and potentially cookie stealing. this was disclosed privately by matthew daley of .,"return connections to the pool when a chunked upload is successful, rather than leaking it.",changed the default user-agent string to avoid leaking data on linux: now contains only the requests version.,"added new method to httpadapter objects: httpadapter.proxy_headers. this should not be called directly, but improves the subclass interface.",cookies set by hooks are now correctly persisted on sessions.,changed the dependency markers to widen compatibility with older pip releases.,the timeout parameter now affects requests with both stream=true and stream=false equally.,"updated urllib3 to 1.10.4, resolving several bugs involving chunked transfer encoding and response framing.","requests now supports per-host proxies. this allows the proxies dictionary to have entries of the form { <scheme>://<hostname> : <proxy> }. host-specific proxies will be used in preference to the previously-supported scheme-specific ones, but the previous syntax will continue to work.",httplib.incompleteread exceptions caused by incorrect chunked encoding will now raise a requests chunkedencodingerror instead.,fixes incorrect parsing of proxy credentials that contain a literal or encoded # character.,added win_inet_pton as conditional dependency for the extra on windows with python 2.7.,"fixed an issue with json encoding detection, specifically detecting big-endian utf-32 with bom.",requests handling of unvendored dependencies is now more restrictive.,"if you d like to stay up to date on the community and development of requests, there are several options:",fixed cookies on sessions and on requests,add deprecation warnings to functions in requests.utils that will be removed in 3.0 ,"fixed issue where responses whose body had not been fully consumed would have the underlying connection closed but not returned to the connection pool, which could cause requests to hang in situations where the httpadapter had been configured to use a blocking connection pool.",fix regression where compressed data that was sent as chunked data was not properly decompressed. ,allow keyword arguments to be passed to json.loads via the response.json method,requests has officially stopped support for python 2.6.,added support for sha-256 and sha-512 digest auth algorithms.,added file attribute to post and put requests for multipart-encode file uploads.,restrict requests to http/1.1 and http/1.0 ,fixed bug with unintended authorization header stripping for redirects using default ports .,deprecated invalidmethodexception.,accept unicode methods in python 2.6 and 2.7.,allow usage of urllib3 s retry object with httpadapters ,"correctly handle digest auth headers with a malformed qop directive that contains no token, by treating it the same as if no qop directive was provided at all.","requests now tolerates empty passwords in proxy credentials, rather than stripping the credentials.",changed the proxy bypass implementation on windows: the proxy bypass check doesn t use forward and reverse dns requests anymore,requests has officially stopped support for python 3.4.,non-string objects can be passed in data values alongside files.,"requestexception is now a subclass of ioerror, not runtimeerror.","if no response.encoding is specified and chardet is available, response.text will guess an encoding.",update width of buttons and sidebar ,fix crash with custom method parameter to session.request ,"replace unicode errors on first pass, no need for second pass.","when using the preparedrequest flow, requests will now correctly handle a unicode-string method name on python 2. broken in 2.8.0.",dns resolution in proxy bypass no longer includes the username and password in the request. this also fixes the issue of dns queries failing on macos.,settings context manager and module,add forced basic authentication,fixed issue where non-utf8 reason phrases got severely mangled by falling back to decoding using iso 8859-1 instead.,requests will now use certifi if it is available.,copy pip s import machinery. when downstream redistributors remove requests.packages.urllib3 the import machinery will continue to let those same symbols work. example usage in requests documentation and 3rd-party libraries relying on the vendored copies of urllib3 will work without having to fallback to the system urllib3.,the iter_lines method on a response now accepts a delimiter with which to split the content ,"avoid data duplication when creating a request with str, bytes, or bytearray input to the files argument.",the change in how hooks are dispatched will likely cause a great deal of issues.,remove redundant generator for chunked transfer encoding,digest auth support is now thread safe.,cookies are now properly managed when 401 authentication responses are received.,cookies.get now supports default argument,"for file-like objects that are not sought to the very beginning, we now send the content length for the number of bytes we will actually read, rather than the total size of the file, allowing partial file uploads.",fragments are now properly maintained across redirects. ,handle unicodedecodeerrors when trying to deal with a unicode url that cannot be encoded in ascii. ,error messages for invalid headers now include the header name for easier debugging,attempt to quote parts of the url on redirect if unquoting and then quoting fails. ,fixed an issue encountered by some requests plugins where constructing a response object would cause response.content to raise an attributeerror.,verify ssl is default.,allow file uploads and post data together,resolve installation failure if multiprocessing is not available,the change in v2.0.0 to mandate explicit proxy schemes has been reverted. proxy schemes now default to http://.,"revert changes to our vendored certificate bundle. for more context see (#2455, #2456, and <link",support for proper chunk streams with boundaries.,fix how link headers are parsed using the regular expression library ,proxy urls now must have an explicit scheme. a missingschema exception will be raised if they don t.,removal of all hooks except response ,allow explicit content types to be specified for file data,use lists as dicts for parameters,"the verify keyword argument now supports being passed a path to a directory of ca certificates, not just a single-file bundle.","when using the preparedrequest flow, requests will now correctly respect the json parameter. broken in 2.8.0.",fixed issue where the all_proxy environment variable would be preferred over scheme-specific variables like http_proxy.,"this is the first release that follows our new release process. for more, see (link",don t send content-length header by default on get or head requests,note: code that was written to import against the requests.packages namespace previously will have to import code that rests at this module-level now.,resolve tests crash if multiprocessing is not able to determine the number of cpu cores,allow copying of preparedrequests without headers/cookies.,if there is no content in a response don t throw an error the second time that content is attempted to be read.,"when passed objects that throw exceptions from tell, send them via chunked transfer encoding instead of failing.",stop advertising compress as a supported content-encoding.,"students and teachers, save up to 60% on adobe creative cloud.",invalid percent-escape sequences now cause a requests invalidurl exception to be raised.,allow content-length header to always be overridden ,added md5-sess to digest auth,redirect resolution should now only occur when allow_redirects is true. ,this is not a backwards compatible change.,fix out-of-range issue with iter_lines.,add more references for interlinking ,warnings are now emitted when sending files opened in text mode.,"restricted httpdigestauth to only respond to auth challenges made on 4xx responses, rather than to all auth challenges.",no longer perform unnecessary content-length calculation for requests that won t use it. ,fix post redirects containing files.,cookies set on individual requests through a session ) are no longer persisted to the session.,fixed a bug where requests would not correctly correlate cookies set when using custom host headers if those host headers did not use the native string type for the platform.,warn user about possible slowdown when using cryptography version &lt; 1.3.4,fixed issue where requests would raise connectionerror instead of sslerror when encountering ssl problems when using urllib3 v1.22.,major proxy work thanks to @lukasa including parsing of proxy authentication from the proxy url,unencode http basic usernames and passwords extracted from urls.,requests removes authorization header from requests redirected from https to http on the same hostname. ,"301 and 302 redirects now change the verb to get for all verbs, not just post, improving browser compatibility.",will need to be re-written to be:,updated internal urllib3 and chardet.,strip content-type and transfer-encoding headers from the header block when following a redirect that transforms the verb from post/put to get.,the best way to track the development of requests is through the github repo.,automatic casting of urls to strings ,"added new method to session objects: session.prepare_request. this method updates and prepares a request object, and returns the corresponding preparedrequest object.",the dismayed person emoticon no longer has a big head. i m sure this is what you were all worrying about most.,fixed issue with unexpected importerror on windows system which do not support winreg module.,correctly honor decode_unicode even if it wasn t used earlier in the same response.,fixed problem where httplib.badstatusline would get raised if combining stream=true with contextlib.closing.,urlerrors are treated as explicitly raised r.requests.get; r.raise_for_status,much improved heuristics for guessing content lengths: requests will no longer read an entire stringio into memory.,should_bypass_proxies now handles uris without hostnames .,still handles request in the event of an httperror. ,fixed bug where using oauth 1 with body signature_type sent no data,"we now handle being passed a query string as a bytestring on python 3, by decoding it as utf-8.",the response.history parameter is now always a list.,"automatic decoding of unicode, based on http headers.",client certificates are ignored when verify=false,fix for oauth + posts,changed the internal calculation of elapsed request time to have higher resolution on windows.,added type checks to ensure that iter_content only accepts integers and none for chunk sizes.,added license to installed version.,change to bundled projects import logic to make it easier to unbundle requests downstream.,update css for theme ,new verify argument for ssl requests.,update vendored urllib3 to include ssl bug fixes,"usage of new charade project, which provides python 2 and 3 simultaneous chardet.",fix a bug in 2.8.0 where requests would raise connecttimeout instead of connectionerror,resolve regression introduced in 2.9.0 that made it impossible to send binary strings as bodies in python 3.,requests would incorrectly ignore a non-cidr ip address in the no_proxy environment variables: requests now treats it as a specific ip.,converted auth system to use simpler callable objects.,simply default accept-encoding,connection: keep-alive header is now sent automatically.,it is now possible to pass no_proxy as a key to the proxies dictionary to provide handling similar to the no_proxy environment variable.,timeouts now apply to read time if stream=false.,unicode url improvements for python 2.,improved tolerance for file-like objects that have no tell method but do have a seek method.,updated bundled certifi to 2017.4.17.,allows for custom auth handlers,full unicode url support,requests now supports idna v2.8.,removal of requests.async in favor of (link,"new unicode decoding system, based on over-ridable response.encoding.","clean up connections when we hit problems during chunked upload, rather than leaking them.",copy a preparedrequest s cookiejar more reliably when it is not an instance of requestscookiejar. ,running $ python -m requests.help now includes the installed version of idna.,properly handle the case where a server issuing digest authentication challenges provides both auth and auth-int qop-values. ,add link to changelog in sidebar ,requests now supports urllib3 v1.26.,requests.help no longer fails on python 2.6 due to the absence of ssl.openssl_version_number.,improved request object constructor,allow hooks to return responses that indicate errors.,fixed occasional typeerror when attempting to decode a json response that occurred in an error case. now correctly returns a valueerror.,avoid crashing when attempting to get authentication credentials from ~/.netrc when running as a user without a home directory.,removed use of cgi module to expedite library load time.,fixed issue where status_codes.py s init function failed trying to append to a __doc__ value of none.,exceptions now inherit from runtimeerror.,support for mixed case schemes.,headers set to none on the session are now correctly not sent.,support for proxies,append / to bare-domain urls before query insertion.,ensure that cookies are persisted over redirect.,new allow_redirects param for following non-get/head redirects,allow = in cookies.,added new method to session objects: session.update_request. this method updates a request object with the data stored on the session.,"new response property is_redirect, which is true when the library could have processed this response as a redirection .",minor performance improvement to request.content.,support for ip address ranges for no_proxy environment variable,relative redirect support,automatic expansion of parameterized headers.,fixed a bug when sending json data that could cause us to encounter obscure openssl errors in certain network conditions .,multiple calls to iter* fail with unhelpful error. ((link (link,new argument to the default connection adapter for passing a block argument
Release notes â€” pandas 1.2.4 documentation,the parameter numeric_only of categorical.min and categorical.max is deprecated and replaced with skipna ,futurewarning: using a dict with renaming is deprecated and,the type import pandas.tslib.nattype is deprecated and can be replaced by using type ,apply_index is deprecated and will be removed in a future version. use offset + other instead ,is deprecated and will be removed in a future version," futurewarning: pd.rolling_mean is deprecated for dataframe and will be removed in a future version, replace with",the method name index.sym_diff is deprecated and can be replaced by index.symmetric_difference ,"dateoffset.__call__ is deprecated and will be removed in a future version, use offset + other instead ",multiindex.to_hierarchical is deprecated and will be removed in a future version ,index.get_duplicates is deprecated and will be removed in a future version ,index.get_value is deprecated and will be removed in a future version ,the null_counts parameter of dataframe.info is deprecated and replaced by show_counts. it will be removed in a future version ,series.nonzero is deprecated and will be removed in a future version ,the inplace parameter of categorical.remove_unused_categories is deprecated and will be removed in a future version ,ndframe.get_ftype_counts is deprecated and will be removed in a future version ,index.summary is deprecated and will be removed in a future version ,"dataframe and panel constructors with invalid input will now raise valueerror rather than pandas.core.common.pandaserror, if called with scalar inputs and not axes; the exception pandaserror is removed as well. ","added top-level function read_excel to replace the following, the original api is deprecated and will be removed in a future version",the top-level pd.value_range has been deprecated and can be replaced by .describe ,"dataframe.lookup is deprecated and will be removed in a future version, use dataframe.melt and dataframe.loc instead ","dataframe and panel constructors with invalid input will now raise valueerror rather than pandaserror, if called with scalar inputs and not axes ","datetimearray.week and datetimearray.weekofyear are deprecated and will be removed in a future version, use datetimearray.isocalendar.week instead ",compact_ints and use_unsigned have been deprecated and will be removed in a future version ,"categorical.to_dense is deprecated and will be removed in a future version, use np.asarray instead ","pandas.tseries.frequencies.get_offset is deprecated and will be removed in a future version, use pandas.tseries.frequencies.to_offset instead ","timedelta.resolution is deprecated and replaced with timedelta.resolution_string. in a future version, timedelta.resolution will be changed to behave like the standard library datetime.timedelta.resolution ",pandas.stats.fama_macbeth routines are deprecated and will be removed in a future version ,as_recarray has been deprecated and will be removed in a future version ,"to be compatible with period addition and subtraction, pd.nat now supports addition and subtraction with int. previously it raised valueerror.",indexing with a list with missing labels is deprecated,indexing with a list with missing labels is deprecated,bug in series constructor with scalar and dtype=categoricaldtype where categories and ordered are not maintained ,"the index set operations + and - were deprecated in order to provide these for numeric type operations on certain index types. + can be replaced by .union or |, and - by .difference. further the method name index.diff is deprecated and can be replaced by index.difference ",series.reshape and categorical.reshape have been deprecated and will be removed in a subsequent release ,setting values with .loc using a positional slice is deprecated and will raise in a future version. use .loc with labels or .iloc with positions instead ,categorical.from_array has been deprecated and will be removed in a future version ,buffer_lines has been deprecated and will be removed in a future version ,using dataframe.rename_axis and series.rename_axis to alter index or column labels is now deprecated in favor of using .rename. rename_axis may still be used to alter the name of the index or columns .,"multiindex.labels has been deprecated and replaced by multiindex.codes. the functionality is unchanged. the new name better reflects the natures of these codes and makes the multiindex api more similar to the api for categoricalindex . as a consequence, other uses of the name labels in multiindex have also been deprecated and replaced with codes:","datetimeindex.week and datetimeindex.weekofyear are deprecated and will be removed in a future version, use datetimeindex.isocalendar.week instead ",the is_copy attribute is deprecated and will be removed in a future version .,sparselist has been deprecated and will be removed in a future version ,"this behavior has been corrected in version 0.18.0, which is consistent with other anchored offsets like monthbegin and yearbegin.","dataframe.tshift and series.tshift are deprecated and will be removed in a future version, use dataframe.shift and series.shift instead ",series.str.__iter__ was deprecated and will be removed in future releases .,datetimeindex.to_perioddelta is deprecated and will be removed in a future version. use index - index.to_period.to_timestamp instead ,"pandas.stats.ols, pandas.stats.plm and pandas.stats.var routines are deprecated and will be removed in a future version ",pandas.api.types.is_categorical is deprecated and will be removed in a future version; use pandas.api.types.is_categorical_dtype instead ,the by argument of dataframe.sort_index has been deprecated and will be removed in a future version.,the order parameter of factorize is deprecated and will be removed in a future release ,"the how keyword in periodindex.astype is deprecated and will be removed in a future version, use index.to_timestamp instead ",pandas.parser.overflowerror exception has been removed and has been replaced with python s built-in overflowerror exception ,skip_footer has been deprecated in favor of skipfooter and will be removed in a future version ,partial slicing on unordered datetimeindex objects with keys that are not in the index is deprecated and will be removed in a future version ,the attributes categorical labels and levels attributes are deprecated and renamed to codes and categories.,bug in to_datetime which raises unhandled overflowerror when called with mix of invalid dates and nan values with format='%y%m%d' and error='coerce' ,"the deprecated irow, icol, iget and iget_value methods are removed in favor of iloc and iat as explained here .","series.dt.week and series.dt.weekofyear are deprecated and will be removed in a future version, use series.dt.isocalendar.week instead ",removed the previously deprecated behavior of altering column or index labels with series.rename_axis or dataframe.rename_axis ,bug in dataframe.truncate and series.truncate where index was assumed to be monotone increasing ,"addition and subtraction of the base index type and of datetimeindex previously performed set operations . this behavior was already deprecated since 0.15.0 and .difference methods), and is now disabled. when possible, + and - are now used for element-wise operations, for example for concatenating strings or subtracting datetimes .",remove error raised due to duplicated input functions in named aggregation in dataframe.groupby and series.groupby. previously error will be raised if the same function is applied on the same column and now it is allowed if new assigned names are different. ,the following top-level pandas functions have been deprecated and will be removed in a future version ,the generate_bq_schema function is now deprecated and will be removed in a future version ,integer addition/subtraction with datetimes and timedeltas is deprecated,eval keyword argument truediv is deprecated and will be removed in a future version ,timestamp.fromisocalendar is now compatible with python 3.8 and above ,bug in .iloc when used with inplace addition or assignment and an int indexer on a multiindex causing the wrong indexes to be read from and written to ,# but setting names is not deprecated,pandas.core.datetools module has been deprecated and will be removed in a subsequent release ,"the default behaviour of series.str.match has changed from extracting groups to matching the pattern. the extracting behaviour was deprecated since pandas version 0.13.0 and can be done with the series.str.extract method . as a consequence, the as_indexer keyword is ignored and is deprecated.", futurewarning: pd.rolling_cov is deprecated for series and,the pivot_table/dataframe.pivot_table and crosstab functions now take arguments index and columns instead of rows and cols. a futurewarning is raised to alert that the old rows and cols arguments will not be supported in a future release ,"backtick quoting in dataframe.query and dataframe.eval can now also be used to use invalid identifiers like names that start with a digit, are python keywords, or are using single character operators. ","dateoffset.isanchored and datetoffset.onoffset are deprecated and will be removed in a future version, use dateoffset.is_anchored and dateoffset.is_on_offset instead ",the pandas.io.ga module which implements google-analytics support is deprecated and will be removed in a future version ,"values like 'yes' and 'no' are not interpreted as boolean by default, though this can be controlled by new true_values and false_values arguments:","for method multiindex.copy, the labels parameter has been deprecated and replaced by a codes parameter.",the dataframe.compound and series.compound methods are deprecated and will be removed in a future version .,drop_duplicates and duplicated s take_last keyword was deprecated in favor of keep. ,"the cut will now accept parameter ordered with default ordered=true. if ordered=false and no labels are provided, an error will be raised ",datetimeindex.shift and periodindex.shift now accept periods argument instead of n for consistency with index.shift and series.shift. using n throws a deprecation warning ,passing multiple axes to the axis parameter in dataframe.dropna has been deprecated and will be removed in a future version ,"sparsearray.all and sparsearray.any are now implemented to handle sparsearray, these were used but not implemented ","the existing methods series.sort, series.order, and dataframe.sort have been deprecated and will be removed in a future version.",bug in index and series created with nan and nat mixed data may not have datetime64 dtype ,the squeeze keyword in groupby is deprecated and will be removed in a future version ,dataframe.between_time and series.between_time now only parse a fixed set of time strings. parsing of date strings is no longer supported and raises a valueerror. ,adding or subtracting nan from a dataframe column with timedelta64 dtype will now raise a typeerror instead of returning all-nat. this is for compatibility with timedeltaindex and series behavior ,reindex now supports method='nearest' for frames or series with a monotonic increasing or decreasing index :,the parameter is_copy of series.take and dataframe.take has been deprecated and will be removed in a future version. ,"the signature of series.set_axis and dataframe.set_axis has been changed from set_axis to set_axis, for consistency with the rest of the api. the old signature is deprecated and will show a futurewarning ",dataframe.pivot_table and crosstab s rows and cols keyword arguments were removed in favor of index and columns ,fixed bug in series.max with datetime64-dtype failing to return nat when nulls are present and skipna=false is passed ,bug in pandas.core.window.rolling.median and pandas.core.window.rolling.quantile where incorrect results are returned with closed='left' and closed='neither' ,the fastpath keyword in the singleblockmanager constructor is deprecated and will be removed in a future version ,"furthermore, pd.to_timedelta has gained a similar api, of errors='raise'|'ignore'|'coerce', and the coerce keyword has been deprecated in favor of errors='coerce'.",removed the previously deprecated dataframe.reindex_axis and series.reindex_axis ,bug in index constructor with dtype=categoricaldtype where categories and ordered are not maintained ,"in gh4892 indexing with floating point numbers on a non-float64index was deprecated . in 0.18.0, this deprecation warning is removed and these will now raise a typeerror. ",the parameter label in lreshape has been deprecated and will be removed in a future version ,index.repeat and multiindex.repeat have deprecated the n parameter in favor of repeats ,"index.is_mixed is deprecated and will be removed in a future version, check index.inferred_type directly instead ",# should be replaced by,# should be replaced by,bug in left and right join of with multiindex may be inverted ,"the behavior of series.argmax and series.argmin have been deprecated in favor of series.idxmax and series.idxmin, respectively .",sparsepanel deprecated and will be removed in a future version .," will be removed in a future version, replace with"," will be removed in a future version, replace with",with,grouper and resample now supports the arguments origin and offset,holidays calendars are now available and can be used with the custombusinessday offset ,bug in multiindex.drop dropping more values than expected when index has duplicates and is not sorted ,additionally we no longer depend on feather-format for feather based storage and replaced it with references to pyarrow .,"using a scalar float indexer will be deprecated in a future version, but is allowed for now.","the series.ftype, series.ftypes and dataframe.ftypes methods are deprecated and will be removed in a future version. instead, use series.dtype and dataframe.dtypes .",dataframe.to_dict has deprecated accepting short names for orient and will raise in a future version ,bar now also supports tablewise application with axis=none and setting clipping range with vmin and vmax . nan values are also handled properly.,multiple offset aliases with decimal points are now supported ,"upsampling and calling .ohlc previously returned a series, basically identical to calling .asfreq. ohlc upsampling now returns a dataframe with columns open, high, low and close . this is consistent with downsampling and datetimeindex behavior.","the result of series.where is now a series with sparse values, like with other extension arrays ",styler.set_table_styles now allows the direct styling of rows and columns and can be chained ,dataframe has dropped the combineadd and combinemult methods in favor of add and mul respectively ,"date parser functions parse_date_time, parse_date_fields, parse_all_fields and generic_parser from pandas.io.date_converters are deprecated and will be removed in a future version; use to_datetime instead ",can be unpacked with,the msgpack format is deprecated as of 0.25 and will be removed in a future version. it is recommended to use pyarrow for on-the-wire transmission of pandas objects. ,the tz keyword in period.to_timestamp is deprecated and will be removed in a future version; use per.to_timestamp.tz_localize instead ,previous api will work but with deprecations,previous api will work but with deprecations,the center keyword in the dataframe.expanding function is deprecated and will be removed in a future version ,index.to_datetime and datetimeindex.to_datetime have been deprecated in favor of pd.to_datetime ,removed the previously deprecated keywords reduce and broadcast from dataframe.apply ,"when calling dataframe.describe with an empty categorical / object column, the top and freq columns were previously omitted, which was inconsistent with the output for non-empty columns. now the top and freq columns will always be included, with numpy.nan in the case of an empty dataframe ",bug in dataframe.to_json and series.to_json when used with lines=true and orient='records' the last line of the record is not appended with new line character ,fixed an issue with a duplicate index and duplicate selector with .loc , futurewarning: pd.rolling_mean is deprecated for series and,"support for slicing with monotonic decreasing indexes, even if start or stop is not found in the index :","this is a bug fix release from 0.9.0 and includes several new features and enhancements along with a large number of bug fixes. the new features include by-column sort order for dataframe and series, improved na handling for the rank method, masking functions for dataframe, and intraday time-series filtering for dataframe.",".ix supports mixed integer and label based access. it is primarily label based, but will fallback to integer positional access. .ix is the most general and will support any of the inputs to .loc and .iloc, as well as support for floating point label schemes. .ix is especially useful when dealing with mixed positional and label based hierarchical indexes.",following keywords are now acceptable for dataframe.plot with kind='bar' and kind='barh':,the pandas.options.display.mpl_style configuration has been deprecated and will be removed in a future version of pandas. this functionality is better handled by matplotlib s style sheets .,slicing series and dataframes with an monotonically increasing categoricalindex is now very fast and has speed comparable to slicing with an int64index. the speed increase is both when indexing by label and position slicing a monotonically increasing categoricalindex itself shows similar speed improvements as above ,the deprecated attributes _axis_names and _axis_numbers of dataframe and series will no longer show up in dir or inspect.getmembers calls ,mod and divmod operations are now defined on timedelta objects when operating with either timedelta-like or with numeric arguments. see the documentation here. ,"deprecate use of strings denoting units with m , y or y in to_timedelta ",bug in pd.pivot_table may raise typeerror or valueerror when index or columns is not scalar and values is not specified ,"removed deprecated behavior of series.argmin and series.argmax, use series.idxmin and series.idxmax for the old behavior ","fixed bug with values raising an error on a dataframe with duplicate columns and mixed dtypes, surfaced in ","new keywords iterator=boolean, and chunksize=number_in_a_chunk are provided to support iteration on select and select_as_multiple ",bug in series construction with categorical and dtype='category' is specified ,"this is a major release from 0.8.1 and includes several new features and enhancements along with a large number of bug fixes. new features include vectorized unicode encoding/decoding for series.str, to_latex method to dataframe, more flexible parsing of boolean values, and enabling the download of options data from yahoo! finance.","support for multi-dimensional indexing on a index is deprecated and will be removed in a future version, convert to a numpy array before indexing instead ",this is a new feature and is under active development. we ll be adding features an possibly making breaking changes in future releases. feedback is welcome.,and the differences in reindexing df with mi_2 and using method='pad' can be seen here:,this is a major release from 0.11.0 and includes several new features and enhancements along with a large number of bug fixes.,futurewarning: select is deprecated and will be removed in a future release. you can use .loc as a replacement,"bug in period and periodindex creation raises keyerror if freq=""minute"" is specified. note that minute freq is deprecated in v0.17.0, and recommended to use freq=""t"" instead ","previously indexing with a nullable boolean array containing na would raise a valueerror, however this is now permitted with na being treated as false. ","the functions pd.rolling_*, pd.expanding_*, and pd.ewm* are deprecated and replaced by the corresponding method call. note that the new suggested syntax includes all of the arguments ","added drop_duplicates and duplicated functions for removing duplicate dataframe rows and checking for duplicate rows, respectively ",index now supports duplicated and drop_duplicates. ,deprecated,"with matplotlib 2.0.0 and above, calculation of x limits for line plots is left to matplotlib, so that its new default settings are applied. ",pandas.api.types.is_datetimetz is deprecated in favor of pandas.api.types.is_datetime64tz ,bug in dataframe.pivot_table when margin is true and only column is defined ,bug in to_datetime with invalid dates and formats supplied ,bug in pandas.core.window.rolling.median and pandas.core.window.rolling.quantile where memoryerror is raised with empty window ,"the behavior of sum and prod on all-nan series/dataframes is now consistent and no longer depends on whether bottleneck is installed, and sum and prod on empty series now return nan instead of 0, see here.","series.rolling.apply, dataframe.rolling.apply, series.expanding.apply, and dataframe.expanding.apply have deprecated passing an np.array by default. one will need to pass the new raw parameter to be explicit about what is passed ","furthermore, previously you could change the ordered attribute of a categorical by just setting the attribute, e.g. cat.ordered=true; this is now deprecated and you should use cat.as_ordered or cat.as_unordered. these will by default return a new object and not modify the existing object. ","for reading and writing to filesystems other than local and reading from http, the optional dependency fsspec will be used to dispatch operations . this will give unchanged functionality for s3 and gcs storage, which were already supported, but also add support for several other storage implementations such as azure datalake and blob, ssh, ftp, dropbox and github. for docs and capabilities, see the fsspec docs.",dataframe.min and dataframe.max were not returning consistent results with series.min and series.max when called on objects initialized with empty pd.to_datetime,"when read_csv, read_sas and read_json are called with chunksize/iterator they can be used in a with statement as they return context-managers ","drop_duplicates and duplicated now accept a keep keyword to target first, last, and all duplicates. the take_last keyword is deprecated, see here ","bug in read_csv with engine='c': eof preceded by a comment, blank line, etc. was not handled correctly ",to_datetime now supports parsing formats containing timezone names and utc offsets from different timezones then converting them to utc by setting utc=true. this would return a datetimeindex with timezone at utc as opposed to an index with object dtype if utc=true is not set .,bug in resample with a timezone and certain offsets ,legacy offsets are deprecated ,bug in dataframe.to_csv and series.to_csv caused a valueerror when it was called with a filename in combination with mode containing a b ,nat now supports arithmetic operations with integers and floats.,"comparing timestamp with unsupported objects now returns notimplemented instead of raising typeerror. this implies that unsupported rich comparisons are delegated to the other object, and are now consistent with python 3 behavior for datetime objects ",performance improvement when comparing a categorical with a scalar and the scalar is not found in the categories ,bug in concat was not allowing for concatenation of dataframe and series with duplicate keys ,pandas.json_normalize is now exposed in the top-level namespace. usage of json_normalize as pandas.io.json.json_normalize is now deprecated and it is recommended to use json_normalize as pandas.json_normalize instead .,the options display.line_with and display.height are removed in favor of display.width and display.max_rows respectively ,fix regression where categorical.replace would replace with nan whenever the new value and replacement value were equal ,bug causing unicodeencodeerror when get_dummies called with unicode values and a prefix ,bug in dataframe.resample when there is a time change and resampling frequency is 12h or higher ,"this is a minor bug-fix release from 0.16.1 and includes a large number of bug fixes along some new features method), enhancements, and performance improvements.",dataframe.from_csv and series.from_csv have been deprecated in favor of read_csv ,the dataframe.drop_duplicates and dataframe.duplicated methods now take argument subset instead of cols to better align with dataframe.dropna. a futurewarning is raised to alert that the old cols arguments will not be supported in a future release ,dataframe.replace s infer_types parameter is removed and now performs conversion by default. ,"removed the previously deprecated keyword pat from series.str.partition and series.str.rpartition, use sep instead ",bug in clipboard functions on linux with python2 with unicode and separators ,bug in the categorical constructor with empty values and categories causing the .categories to be an empty float64index rather than an empty index with object dtype ,ability to read pickles containing categorical instances created with pre-0.16 version of pandas has been removed ,"this is a major release from 0.23.4 and includes a number of api changes, new features, enhancements, and performance improvements along with a large number of bug fixes.",bug in to_datetime which does not replace the invalid argument with nat when error is set to coerce ,series and index constructors now raise when the data is incompatible with a passed dtype= ,removed the previously deprecated keywords verbose and private_key from read_gbq ,dataframe.to_excel and dataframe.to_csv cols keyword argument was removed in favor of columns ,fixed bug where astype with equal dtype and copy=false would return a new object ,top-level pd.ordered_merge has been renamed to pd.merge_ordered and the original name will be removed in a future version ,bug in dataframe.groupby with grouper when there is a time change and grouping frequency is '1d' ,or with frequency as offset,improved performance of dataframe.median with axis=1 when bottleneck is not installed ,dataframe.query and dataframe.eval now supports quoting column names with backticks to refer to names with spaces ,fixed regression in rollinggroupby with sort=false not being respected ,bug in pd.qcut with a single quantile and an array with identical values ,"timestamp.min and timestamp.max now represent valid timestamp instances instead of the default datetime.min and datetime.max , thanks @sleepingpills",compression defaults in hdf stores now follow pytables standards. default is no compression and if complib is missing and complevel > 0 zlib is used ,# replaced with empty char,bug in series.replace when argument to_replace is of type dict/list and is used on a series containing <na> was raising a typeerror. the method now handles this by ignoring <na> values when doing the comparison for the replacement ,pandas.core.window.exponentialmovingwindow now supports a times argument that allows mean to be calculated with observations spaced by the timestamps in times ,holiday now raises notimplementederror if both offset and observance are used in the constructor instead of returning an incorrect result .,series.plot and dataframe.plot now accepts xlabel and ylabel parameters to present labels on x and y axis .,"in particular, upsampling and taking the sum or product is affected, as upsampling introduces missing values even if the original series was entirely valid.","note: the default behavior in 0.12 remains unchanged from prior versions, but starting with 0.13, the default to write and read multiindex columns will be in the new format. ","as using integer slices with .ix have different behavior depending on whether the slice is interpreted as position based or label based, it s usually better to be explicit and use .iloc or .loc.","this is a major release from 0.12.0 and includes a number of api changes, several new features and enhancements along with a large number of bug fixes.","index.droplevel is now implemented also for flat indexes, for compatibility with multiindex ",combining a categorical with integer categories and which contains missing values with a float dtype column in operations such as concat or append will now result in a float column instead of an object dtype column ,an undesired api breakage with functions taking the inplace option has been reverted and deprecation warnings added.,bug in left and right align of series with multiindex may be inverted ,"indexing with a list of labels, where one or more of the labels is missing, is deprecated and will raise a keyerror in a future version, see here.",removed the previously deprecated ordered and categories keyword arguments in astype ,fixed regression in groupby.agg which was failing on frames with multiindex columns and a custom function ,bug in pd.unique for arrays with the datetime64 or timedelta64 dtype that meant an array with object dtype was returned instead the original dtype ,"the data, base, strides, flags and itemsize properties of the series and index classes have been deprecated and will be removed in a future version .",improved performance and reduced memory when indexing with a multiindex ,fixed an issue with a duplicate index and assignment with a dtype change ,"read_html now rewinds seekable io objects after parse failure, before attempting to parse with a new parser. if a parser errors and the object is non-seekable, an informative error is raised suggesting the use of a different parser ","removed the previously deprecated keyword errors in timestamp.tz_localize, datetimeindex.tz_localize, and series.tz_localize ","note this disables the ability to read parquet files from directories on s3 again , which was added in the 1.0.4 release, but is now targeted for pandas 1.1.0.","chained assignment will now by default warn if the user is assigning to a copy. this can be changed with the option mode.chained_assignment, allowed options are raise/warn/none. see the docs.",series and index now support divmod which will return a tuple of series or indices. this behaves like a standard binary operator with regards to broadcasting rules .,"series.clip_lower, series.clip_upper, dataframe.clip_lower and dataframe.clip_upper are deprecated and will be removed in a future version. use series.clip, series.clip and the equivalent dataframe methods ",see dtypes and attributes and underlying data for more.,see dtypes and attributes and underlying data for more.,removed the previously deprecated select method of dataframe and series ,the dataframe.to_csv and dataframe.to_excel functions now takes argument columns instead of cols. a futurewarning is raised to alert that the old cols arguments will not be supported in a future release ,bug in dataframe.pivot_table which fails when the aggfunc arg is of type string. the behavior is now consistent with other methods like agg and apply ,addition and subtraction of integer or integer-dtype arrays with timestamp will now raise nullfrequencyerror instead of valueerror ," ...: # line_terminator does not work, and csv is saved with '\r\n'.","this is a major release from 0.10.1 and includes many new features and enhancements along with a large number of bug fixes. the methods of selecting data have had quite a number of additions, and dtype support is now full-fledged. there are also a number of important api changes that long-time pandas users should pay close attention to.",bug in dtypes being lost in dataframe.__invert__ with mixed dtypes and for extension-array backed series and dataframe ,"new instance variables for calls and puts are automatically created when a method that creates them is called. this works for current month where the instance variables are simply calls and puts. also works for future expiry months and save the instance variable as callsmmyy or putsmmyy, where mmyy are, respectively, the month and year of the option s expiry.","some new subpackages are created with public functionality that is not directly exposed in the top-level namespace: pandas.errors, pandas.plotting and pandas.testing . together with pandas.api.types and certain functions in the pandas.io and pandas.tseries submodules, these are now the public subpackages.",categoricalindex.append with an index that contains non-category values will now cast instead of raising typeerror ,bug in dataframegroupby.transform would raise when used with axis=1 and a transformation kernel ,base should be replaced by offset.,the rplot trellis plotting interface is deprecated and will be removed in a future version. we refer to external packages like seaborn for similar but more refined functionality . the documentation includes some examples how to convert your existing code from rplot to seaborn here.,series.sortlevel and dataframe.sortlevel have been deprecated in favor of series.sort_index and dataframe.sort_index ,support for negative integer for pd.options.display.max_colwidth is deprecated in favor of using none ,"this is a minor release from 0.7.2 and fixes many minor bugs and adds a number of nice new features. there are also a couple of api changes to note; these should not affect very many users, and we are inclined to call them bug fixes even though they do constitute a change in behavior. see the full release notes or issue tracker on github for a complete list.",dataframe.combineadd and dataframe.combinemult are deprecated. they can easily be replaced by using the add and mul methods: dataframe.add and dataframe.mul .,panel4d and panelnd constructors are deprecated and will be removed in a future version. the recommended way to represent these types of n-dimensional data are with the xarray package. pandas provides a to_xarray method to automate this conversion .,fixed regression in dataframe.replace and series.replace where compiled regular expressions would be ignored during replacement ,bug in dataframe and series bar and barh plot raises typeerror when bottom and left keyword is specified ,"this is a minor bug-fix release from 0.18.0 and includes a large number of bug fixes along with several new features, enhancements, and performance improvements. we recommend that all users upgrade to this version.",selection with all keys found is unchanged.,pandas has split off google bigquery support into a separate package pandas-gbq. you can conda install pandas-gbq -c conda-forge or pip install pandas-gbq to get it. the functionality of read_gbq and dataframe.to_gbq remain the same with the currently released version of pandas-gbq=0.1.4. documentation is now hosted here ,"performance improvement when checking if values in a categorical are equal, equal or larger or larger than a given scalar. the improvement is not present if checking if the categorical is less than or less than or equal than the scalar ",fixed bug in dataframe.convert_dtypes for series with mix of integers and strings ,bug in constructing a sparsearray: if data is a scalar and index is defined it will coerce to float64 regardless of scalar s dtype. ,the differences in reindexing df with mi_2 and using method='backfill' can be seen here:,"dataframes with nullable integer, the new string dtype and period data type can now be converted to pyarrow , which means that it is supported in writing to the parquet file format when using the pyarrow engine . full roundtrip to parquet / read_parquet) is supported starting with pyarrow >= 0.16 .","this restores the behavior of multiindex.get_indexer with method='backfill' or method='pad' to the behavior before pandas 0.23.0. in particular, multiindexes are treated as a list of tuples and padding or backfilling is done with respect to the ordering of these lists of tuples .",bug in to_datetime where an uninformative runtimeerror was raised when passing a naive timestamp with datetime strings with mixed utc offsets ,timestamp.to_datetime has been deprecated in favor of timestamp.to_pydatetime ,"transform now allows func to be pad, backfill and cumcount .","the default for pd.to_datetime error handling has changed to errors='raise'. in prior versions it was errors='ignore'. furthermore, the coerce argument has been deprecated in favor of errors='coerce'. this means that invalid parsing will raise rather that return the original input as in previous versions. ","series and dataframe can now be created with allows_duplicate_labels=false flag to control whether the index or columns can contain duplicate labels . this can be used to prevent accidental introduction of duplicate labels, which can affect downstream operations.",periodindex.to_datetime has been deprecated in favor of periodindex.to_timestamp ,bug in interval_range when start/periods or end/periods are specified with float start or end ,panel.shift now has a function signature that matches dataframe.shift. the old positional argument lags has been changed to a keyword argument periods with a default value of 1. a futurewarning is raised if the old argument lags is used by name. ,see dependencies and optional dependencies for more.,see dependencies and optional dependencies for more.,see dependencies and optional dependencies for more.,see dependencies and optional dependencies for more.,read_html now raises when no tables are found and beautifulsoup==4.2.0 is detected ,"for datetimeindex and timedeltaindex with freq=none, addition or subtraction of integer-dtyped array or index will raise nullfrequencyerror instead of typeerror ",bug in read_excel in which index_col=none was not being respected and parsing index columns anyway ,"dataframe.interpolate uses the correct axis convention now. previously interpolating along columns lead to interpolation along indices and vice versa. furthermore interpolating with methods pad, ffill, bfill and backfill are identical to using these methods with dataframe.fillna ",the default for display.show_dimensions will now be truncate. this is consistent with how series display length.,pandas.api.types.is_period is deprecated in favor of pandas.api.types.is_period_dtype ,read_excel has deprecated parse_cols in favor of usecols for consistency with read_csv ,"the result of concat with a mix of sparse and dense series is a series with sparse values, rather than a sparseseries.",bug in dataframe.plot draws points and errorbars with different colors when the color is specified by c keyword ,fixed regression in to_json failing to use compression with url-like paths that are internally opened in binary mode or with user-provided file objects that are opened in binary mode ,"to_csv supports file handles in binary mode with encoding and compression . if pandas does not automatically detect whether the file handle is opened in binary or text mode, it is necessary to provide mode=""wb"".","sparseseries, sparsedataframe and the dataframe.to_sparse method have been removed . we recommend using a series or dataframe with sparse values instead. see migrating for help with migrating existing code.",dataframe.consolidate and series.consolidate have been removed ,new datetimeindex class supports both fixed frequency and irregular time series. replaces now deprecated daterange class,the method and axis arguments of dataframe.replace are deprecated,"we have also deprecated and changed similar methods in two series-like classes, index and categorical.",the pd.read_json and dataframe.to_json has gained support for reading and writing json lines with lines option see line delimited json ,"some of the existing functions or function aliases have been deprecated and will be removed in future versions. this includes: tquery, uquery, read_frame, frame_query, write_frame.","dataframe.melt accepting a value_name that already exists is deprecated, and will be removed in a future version ","now, when apply is called on an empty dataframe: if the reduce argument is true a series will returned, if it is false a dataframe will be returned, and if it is none the function being applied will be called with an empty series to try and guess the return type.",bug in series constructor with categorical where a valueerror is not raised when an index of different length is given ,the pandas.rpy interface is deprecated and will be removed in a future version. similar functionality can be accessed through the rpy2 project ,the pandas.sandbox.qtpandas interface is deprecated and will be removed in a future version. we refer users to the external package pandas-qt. ,the default column names when header=none and no columns names passed to functions like read_csv has changed to be more pythonic and amenable to attribute access:,initialising an empty pandas.series without specifying a dtype will raise a deprecationwarning now . the default dtype will change from float64 to object in future releases so that it is consistent with the behaviour of dataframe and index.,raise importerror in the sql functions when sqlalchemy is not installed and a connection string is used .,"split tests into cases for cpython and pypy where needed, which highlights the fragility of index matching with float, np.nan and nat ","inspired by dplyr s mutate verb, dataframe has a new assign method. the function signature for assign is simply **kwargs. the keys are the column names for the new fields, and the values are either a value to be inserted , or a function of one argument to be called on the dataframe. the new values are inserted, and the entire dataframe is returned.","periodindex now has its own period dtype, and changed to be more consistent with other index classes. see here","pandas.api.types.categoricaldtype has been added to the public api and expanded to include the categories and ordered attributes. a categoricaldtype can be used to specify the set of categories and orderedness of an array, independent of the data. this can be useful for example, when converting string data to a categorical :","this is a minor release from 0.15.1 and includes a large number of bug fixes along with several new features, enhancements, and performance improvements. a small number of api changes were necessary to fix existing bugs. we recommend that all users upgrade to this version.","refactor rename methods to core/generic.py; fixes series.rename for , and adds rename with the same signature for panel",panel is deprecated and will be removed in a future version. the recommended way to represent 3-d data are with a multiindex on a dataframe via the to_frame or with the xarray package. pandas provides a to_xarray method to automate this conversion .,this change breaks rpy2<=2.3.8. an issue has been opened against rpy2 and a workaround is detailed in gh5698. thanks @janschulz.,"you will get a deprecation warning in the 0.10.x series, and the deprecated functionality will be removed in 0.11 or later.","we ve added a key argument to the dataframe and series sorting methods, including dataframe.sort_values, dataframe.sort_index, series.sort_values, and series.sort_index. the key can be any callable function which is applied column-by-column to each column used for sorting, before sorting is performed . see sort_values with keys and sort_index with keys for more information.",where clauses in pytables are only accepted as strings and expressions types and not other data-types ,pd.read_msgpack now supports serializing and de-serializing categoricals with msgpack ,"in order to promote more consistency among the pandas api, we have added additional top-level functions isna and notna that are aliases for isnull and notnull. the naming scheme is now more consistent with methods like .dropna and .fillna. furthermore in all cases where .isnull and .notnull methods are defined, these have additional methods named .isna and .notna, these are included for classes categorical, index, series, and dataframe. .","dataframe.to_sql has deprecated the flavor parameter, as it is superfluous when sqlalchemy is not installed ","default sorting algorithm for series.order is now quicksort, to conform with series.sort ","previously assignments, .where and .fillna with a bool assignment, would coerce to same the type , or raise for datetimelikes. these will now preserve the bools with object dtypes. .",series.copy no longer accepts the order parameter and is now consistent with ndframe copy,bug in to_datetime with utc=true and datetime strings that would apply previously parsed utc offsets to subsequent arguments ,"bug in using numpy ufunc with periodindex to add or subtract integer raise incompatiblefrequency. note that using standard operator like + or - is recommended, because standard operators use more efficient path ",option data frames are now saved on the instance as callsyymmdd or putsyymmdd. previously they were saved as callsmmyy and putsmmyy. the next expiry is saved as calls and puts.,"plotting with error bars is now supported in the .plot method of dataframe and series objects , see the docs.",transform and aggregate have gained engine and engine_kwargs arguments that support executing functions with numba ,multiindex.set_labels has been deprecated in favor of multiindex.set_codes.,"in earlier versions of pandas, if a bool was passed the header argument of read_csv, read_excel, or read_html it was implicitly converted to an integer, resulting in header=0 for false and header=1 for true ","constructing a multiindex with nan levels or codes value < -1 was allowed previously. now, construction with codes value < -1 is not allowed and nan levels corresponding codes would be reassigned as -1. ","categorical.is_dtype_equal and categoricalindex.is_dtype_equal are deprecated, will be removed in a future version ","sparsearray, the array backing sparseseries and the columns in a sparsedataframe, is now an extension array . to conform to this interface and for consistency with the rest of pandas, some api breaking changes were made:",option to .info and .memory_usage to provide for deep introspection of memory consumption. note that this can be expensive to compute and therefore is an optional parameter. ,paths beginning with ~ will now be expanded to begin with the user s home directory ,"multiindex.get_loc_level will now raise a keyerror, rather than returning an empty slice, if asked a label which is present in the levels but is unused ",bug where merge was unable to join on categorical and extension dtype columns ,bug in .groupby.rolling when on is specified and using a datetimeindex ,wrote fast time series merging / joining methods in cython. will be integrated later into dataframe.join and related functions,self and other are identical,bug in dataframe.rank and series.rank when method='dense' and pct=true in which percentile ranks were not being used with the number of distinct observations ,to replace all occurrences of the string '.' with zero or more instances of surrounding white space with nan.,bug in datetimeindex.__contains__ when index has duplicates and is not monotonic increasing ,the default column names for a file with no header have been changed to the integers 0 through n - 1. this is to create consistency with the dataframe constructor with no columns specified. the v0.9.0 behavior can be reproduced by specifying prefix='x':,bug in dataframe.combine_first when used with multiindex containing string and nan values raises typeerror ,pd.expanding_apply and pd.rolling_apply now take args and kwargs that are passed on to the func ,bug in read_excel when parse_cols is specified with an empty dataset ,"dataframe.style.bar now accepts two more options to further customize the bar chart. bar alignment is set with align='left'|'mid'|'zero', the default is left , which is backward compatible; you can now pass a list of color=. ",timestamp.day_name and datetimeindex.day_name are now available to return day names with a specified locale ,"bugs in pd.to_datetime when passing a unit with convertible entries and errors='coerce' or non-convertible with errors='ignore'. furthermore, an outofboundsdateime exception will be raised when an out-of-range value is encountered for that unit when errors='raise'. ",removed private_key and verbose from read_gbq as they are no longer supported in pandas-gbq ,"comparison with sql, which should be useful for those familiar with sql but still learning pandas.",bug in dataframe.join which does an outer instead of a left join when being called with multiple dataframes and some have non-unique indices ,dataframe.itertuples now works with frames with duplicate column names ,"fix dataframe.memory_usage to support pypy. objects on pypy do not have a fixed size, so an approximation is used instead ",the broadcast parameter of .apply is deprecated in favor of result_type='broadcast' ,bug in series.__setitem__ incorrectly assigning values with boolean indexer when the length of new data matches the number of true values and new data is not a series or an np.array ,bug in categorical and categoricalindex with interval values when using the in operator with objects that are not comparable to the values in the interval ,categorical.searchsorted and series.searchsorted have deprecated the v parameter in favor of value ,"pd.timedelta is now accepted and will return nat, mirroring pd.timestamp ",fixed an issue where periodindex joining with self was returning a new instance rather than the same instance ; also adds a test for this for the other index types,bug when grouping by a single column and aggregating with a class like list or tuple ,pandas.merge and dataframe.merge will show a specific error message when trying to merge with an object that is not of type dataframe or a subclass ,addition and subtraction of nan from a series with dtype='timedelta64' will raise a typeerror instead of treating the nan as nat ,"addition and subtraction of int or integer-arrays is no longer allowed in timestamp, datetimeindex, timedeltaindex, use obj + n * obj.freq instead of obj + n ","other indexers will coerce to a like integer for both getting and setting. the futurewarning has been dropped for .loc, .ix and .",bug in dataframe.apply with functions that used *args or **kwargs and returned an empty result ,"we introduce a categoricalindex, a new type of index object that is useful for supporting indexing with duplicates. this is a container around a categorical and allows efficient indexing and storage of an index with a large number of duplicated elements. prior to 0.16.1, setting the index of a dataframe/series with a category dtype would convert this to regular object-based index.","this is a minor release from 0.10.0 and includes new features, enhancements, and bug fixes. in particular, there is substantial new hdfstore functionality contributed by jeff reback.",bug in date_range where ambiguous or nonexistent start or end times were not handled by the ambiguous or nonexistent keywords respectively ,"removed the previously deprecated keywords how , fill_method , and limit from dataframe.resample ","period is now immutable, and will now raise an attributeerror when a user tries to assign a new value to the ordinal or freq attributes .","but for consistency with the all-nan case, this was changed to return nan as well:",fixed regression that prevented rgb and rgba tuples from being used as color arguments ,"please note that the string index is not supported with the round trip format, as it is used by default in write_json to indicate a missing index name.",default for display.max_seq_len is now 100 rather than none. this activates truncated display of long sequences in various places. ,bug fix in apply when using custom function and objects are not mutated ,duplicate indexes with and empty dataframe.from_records will return a correct frame ,"bug in datetimeindex, timedeltaindex and periodindex.equals may return true when input isn t index but contains the same values ",bug in datetimeindex and timedeltaindex where setting the freq attribute was not fully supported ,"this is unchanged from prior versions, but shown for illustration purposes:","read_csv was closing user-provided binary file handles when engine=""c"" and an encoding was requested ",bug in pd.series.rolling.skew and rolling.kurt with all equal values has floating issue ,bug in pandas.core.resample.resampler.size and pandas.core.resample.resampler.count returning wrong dtype when used with an empty series or dataframe ,read_excel now raises a valueerror when input is of type pandas.io.excel.excelfile and engine param is passed since pandas.io.excel.excelfile has an engine defined ,"the get_dummies method can now be used on dataframes. by default only categorical columns are encoded as 0 s and 1 s, while other columns are left untouched.","bug in fy5253quarter, lastweekofmonth where rollback and rollforward behavior was inconsistent with addition and subtraction behavior ",bug where some inplace operators were not being wrapped and produced a copy when invoked ,"the categorical.labels attribute was renamed to categorical.codes and is read only. if you want to manipulate codes, please use one of the api methods on categoricals.","will warn with a attributeconflictwarning if you are attempting to append an index with a different frequency than the existing, or attempting to append an index with a different name than the existing",dataframe.mean and dataframe.median with numeric_only=none will include datetime64 and datetime64tz columns in a future version ,fixes bug where indexing with np.inf caused an overflowerror to be raised ,the infer_types argument to read_html now has no effect and is deprecated .,cparsererror has been renamed to parsererror in pd.read_csv and will be removed in the future ,bug in pd.read_csv when an index was specified and no values were specified as null values ,removed the previously deprecated keyword encoding from read_stata and dataframe.to_stata ,bug in dataframe.max and dataframe.min with axis=1 where a series with nan would be returned when all columns contained the same timezone ,"apache parquet provides a cross-language, binary file format for reading and writing data frames efficiently. parquet is designed to faithfully serialize and de-serialize dataframe s, supporting all of the pandas dtypes, including extension dtypes such as datetime with timezones.",removed the previously deprecated dataframe.from.csv and series.from_csv ,self or other is empty,"pandas.core.index has been deprecated and will be removed in a future version, the public classes are available in the top-level namespace ","bug in to_datetime which would raise valueerror: tz-aware datetime.datetime cannot be converted to datetime64 unless utc=true when called with cache=true, with arg including datetime strings with different offset ",the options display.latex.escape and display.latex.longtable have also been added to the configuration and are used automatically by the to_latex method. see the available options docs for more info.,bug in dataframe when initiating a frame with lists and assign columns with nested list for multiindex ,additionally mean supports execution via numba with the engine and engine_kwargs arguments. numba must be installed as an optional dependency to use this feature.,"is_any_int_dtype, is_floating_dtype, and is_sequence are deprecated from pandas.api.types ",bug in series.plot and dataframe.plot was throwing a valueerror when the series or dataframe was indexed by a timedeltaindex with a fixed frequency and the x-axis lower limit was greater than the upper limit ,creating a tick object with normalize=true is no longer supported. this prevents unexpected behavior where addition could fail to be monotone or associative. ,"one of the potentially riskiest api changes in 0.7.0, but also one of the most important, was a complete review of how integer indexes are handled with regard to label-based indexing. here is an example:","added get_value and set_value methods to series, dataframe, and panel for very low-overhead access to scalar elements . set_value is capable of producing an enlarged object.","there was bug in read_excel and read_csv with the python engine, where missing values turned to 'nan' with dtype=str and na_filter=true. now, these missing values are converted to the string missing indicator, np.nan. ",intervalindex.from_intervals is deprecated in favor of the intervalindex constructor ,this is a major release from 0.9.1 and includes many new features and enhancements along with a large number of bug fixes. there are also a number of important api changes that long-time pandas users should pay close attention to.,dataframe.corr and series.corr now raise a valueerror along with a helpful error message instead of a keyerror when supplied with an invalid method ,"removal of support for positional indexing with floats, which was deprecated since 0.14.0. this will now raise a typeerror, see here.",performance improvements in multiindex.duplicated by working with labels instead of values ,the exception pandas.core.common.ambiguousindexerror is removed as it is not referenced ,the parallel_coordinates and andrews_curves functions now take positional argument frame instead of data. a futurewarning is raised if the old data argument is used by name. ,the parallel_coordinates and andrews_curves functions now take positional argument frame instead of data. a futurewarning is raised if the old data argument is used by name. ,"interval and period data may now be stored in a series or dataframe, in addition to an intervalindex and periodindex like previously .",bug in to_datetime where passing an out-of-bounds datetime with errors='coerce' and utc=true would raise outofboundsdatetime instead of parsing to nat ,this is a combined release for 0.20.0 and 0.20.1. version 0.20.1 contains one additional change for backwards-compatibility with downstream projects using pandas utils routines. ,"bug in dataframe.apply where, when supplied with a string argument and additional positional or keyword arguments ), a typeerror was wrongly raised ","sparsearray.dtype and sparseseries.dtype are now instances of sparsedtype, rather than np.dtype. access the underlying dtype with sparsedtype.subtype.","bug in categorical.__setitem__ not allowing setting with another categorical when both are unordered and have the same categories, but in a different order ",bug in datetimeindex addition and subtraction with some types of dateoffset objects incorrectly retaining an invalid freq attribute ,bug in week with weekday incorrectly raising attributeerror instead of typeerror when adding or subtracting an invalid type ,bug in astype where inf values were incorrectly converted to integers. now raises error now with astype for series and dataframes ,bug in pd.to_datetime raise attributeerror with nan and the other string is not valid when errors='ignore' ,dataframe.xs now raises a typeerror if a level keyword is supplied and the axis is not a multiindex. previously an attributeerror was raised ,custombusinessmonthbegin and custombusinessmonthend are now available ,fixed bug in unique handled signed zeros inconsistently: for some inputs 0.0 and -0.0 were treated as equal and for some inputs as different. now they are treated as equal for all inputs ,bug in datetimeindex and timedeltaindex addition and subtraction where name of the returned object was not always set consistently. ,"in version 0.18.0, a new inplace keyword was added to choose whether the assignment should be done inplace or return a copy.","warnings against the obsolete usage categorical, which were emitted for instance when the first two arguments to categorical had different dtypes, and recommended the use of categorical.from_codes, have now been removed ","pd.read_csv now supports opening files using xz compression, via extension inference or explicit compression='xz' is specified; xz compressions is also supported by dataframe.to_csv in the same way ","a valueerror is now raised instead of a generic exception in read_csv when true_values is specified, and the c engine encounters an element in a column containing unencodable bytes ",series.is_time_series is dropped in favor of series.index.is_all_dates ,bug in .to_json for the c engine where rollover was not correctly handled for case where frac is odd and diff is exactly 0.5 ,.isnull and .notnull have been added to index object to make them more consistent with the series api ,"bug in to_datetime which would raise invalidindexerror: reindexing only valid with uniquely valued index objects when called with cache=true, with arg including at least two different elements from the set {none, numpy.nan, pandas.nat} ","deprecated indexing dataframe rows with a single datetime-like string as df , use df.loc instead ","bug in dataframe.plot when x and y arguments given as positions caused incorrect referenced columns for line, bar and area plots ",indexing with __getitem__/.iloc/.loc/.ix works similarly to an index with duplicates. the indexers must be in the category or the operation will raise.,new and changed methods,pd.to_datetime and pd.to_timedelta have dropped the coerce parameter in favor of errors ,bug in series with dtype='timedelta64' where addition or subtraction of timedeltaindex could return a series with an incorrect name ,"bug in datetimearray, timedeltaarray, and periodarray where inplace addition and subtraction did not actually operate inplace ",infer and downcast dtype if downcast='infer' is passed to fillna/ffill/bfill ,"pandas.io.json.json_normalize has gained a sep option that accepts str to separate joined fields; the default is . , which is backward compatible. ",# and missing values will be treated as zeros.,bug in class:~pandas.io.stata.statareader not converting date/time columns with display formatting addressed . previously columns with display formatting were normally left as ordinal numbers and not converted to datetime objects.,"if you wish to do indexing with sequences and slicing on an integer index with label semantics, use ix.",periodindex now supports arithmetic with np.ndarray ,bug in sparsearray indexing with tuples are not handled properly ,"the pandas 1.0 release removed a lot of functionality that was deprecated in previous releases . it is recommended to first upgrade to pandas 0.25 and to ensure your code is working without warnings, before upgrading to pandas 1.0.","the following methods and options are added to index, to be more consistent with the series and dataframe api.","note that column 'c' was not converted - only scalar numeric types will be converted to a new type. other types of conversion should be accomplished using the to_numeric function , to_timedelta).","a new pd.na value is introduced to represent scalar missing values. up to now, pandas used several values to represent missing data: np.nan is used for this for float data, np.nan or none for object-dtype data and pd.nat for datetime-like data. the goal of pd.na is to provide a missing indicator that can be used consistently across data types. pd.na is currently used by the nullable integer and boolean data types and the new string data type .",rename factor to categorical and add a number of usability features,the series.select and dataframe.select methods are deprecated in favor of using df.loc ,the deprecated dataframe.iterkv has been removed in favor of dataframe.iteritems ,bug in series construction of mixed type with datelike and an integer ,minor change to select and remove: require a table only if where is also provided ,select now supports passing start and stop to provide selection space limiting in selection.,"bug in dataframe.xs when used with indexslice raises typeerror with message ""expected label or tuple of labels"" ",label-based slicing using ix now requires that the index be sorted unless both the start and endpoint are contained in the index:,"series.argmin and series.argmax will now raise a typeerror when used with object dtypes, instead of a valueerror ",bug in pandas.plotting.bootstrap_plot was causing cluttered axes and overlapping labels ,bug in panel when using major_xs and copy=false is passed .,"removed the previously deprecated keyword index from read_stata, statareader, and statareader.read, use index_col instead ","the delimited file parsing engine has been rewritten from the ground up and now uses a fraction the amount of memory while parsing, while being 40% or more faster in most use cases .","this release includes a few new features, performance enhancements, and over 30 bug fixes from 0.8.0. new features include notably na friendly string processing functionality and a series of new plot types and options.",dataframes with numerical or datetime indices are now sorted prior to plotting ,"the options html.border and mode.use_inf_as_null were deprecated in prior versions, these will now show futurewarning rather than a deprecationwarning ","arithmetic operations with only bool dtypes now give a warning indicating that they are evaluated in python space for +, -, and * operations and raise for all others ",removed the warn argument from open. instead a possibledatalosserror exception will be raised if you try to use mode='w' with an open file handle ,"fixed an issue with dataframe.sort_index where, when sorting by a single column and passing a list for ascending, the argument for ascending was being interpreted as true ","series accessors .dt, .cat and .str now raise attributeerror instead of typeerror if the series does not contain the appropriate type of data . this follows python s built-in exception hierarchy more closely and ensures that tests like hasattr are consistent on both python 2 and 3.",bug in transform causing length mismatch when null entries were present and a fast aggregator was being used ,fixed regression in read_csv with more than 1m rows and specifying a index_col argument ,"non-convertible dates in an excel date column will be returned without conversion and the column will be object dtype, rather than raising an exception .",added optional ddof argument to expanding_cov and rolling_cov. the default value of 1 is backwards-compatible. ,dataframe.items and series.items are now present in both python 2 and 3 and is lazy in all cases. ,"removed the previously deprecated keyword n from datetimeindex.shift, timedeltaindex.shift, periodindex.shift, use periods instead ",bug in series.nunique with dropna=true was returning incorrect results when both na and none missing values were present ,index with object dtype supports division and multiplication ,"improved performance of iso 8601 date parsing for dates without separators , leading zeros and with white space preceding the time zone ",bug in hiding ticklabels with subplots and shared axes when adding a new plot to an existing grid of axes ,"attempting to use the xlwt engine will raise a futurewarning unless the option io.excel.xls.writer is set to ""xlwt"". while this option is now deprecated and will also raise a futurewarning, it can be globally set and the warning suppressed. users are recommended to write .xlsx files using the openpyxl engine instead.",bug in index created with tz-aware timestamp and mismatched tz option incorrectly coerces timezone ,the deprecated longpanel class has been completely removed,compatibility with pypy in read_csv with usecols= and read_json ,bug in selection from a hdfstore with a fixed format and start and/or stop specified will now return the selected range ,"removed the previously deprecated keyword by from dataframe.sort_index, use dataframe.sort_values instead ","for datetimeindex and timedeltaindex with non-none freq attribute, addition or subtraction of integer-dtyped array or index will return an object of the same class ","indexing a multiindex or a floatindex with a list containing some missing keys will now show a futurewarning, which is consistent with other types of indexes .",bug in series.hasnans that could be incorrectly cached and return incorrect answers if null elements are introduced after an initial call ,"previously, the behaviour on resetting the time or not in offsets.apply, rollforward and rollback operations differed between offsets. with the support of the normalize keyword for all offsets with a default value of false , the behaviour changed for certain offsets :",series.argmin and series.argmax are now aliased to series.idxmin and series.idxmax. these return the index of the,fixed bug in series construction with ea dtype and index but no data or scalar data fails ,read_csv/read_table will now be noisier w.r.t invalid options rather than falling back to the pythonparser.,repr of categorical was not distinguishing between int and str ,bug in series.isin with perioddtype dtype and periodindex.isin failing to consider arguments with different perioddtype as always different ,# common elements are now guaranteed to be ordered by the left side,"nat and timedelta have expanded arithmetic operations, which are extended to series arithmetic where applicable. operations defined for datetime64 or timedelta64 are now also defined for nat .",bug in datetimeindex and timedeltaindex where adding or subtracting an array-like of dateoffset objects either raised or broadcast incorrectly ,"removed the previously deprecated keyword raise_conflict from dataframe.update, use errors instead ",dataframe.plot now recognizes xlabel and ylabel arguments for plots of type scatter and hexbin ,"bug in plotting if sharex was enabled and index was a timeseries, would show labels on multiple axes .",named aggregation is the recommended replacement for the deprecated dict-of-dicts approach to naming the output of column-specific aggregations with a dictionary when renaming).,"we haven t removed or deprecated series.values or dataframe.values, but we highly recommend and using .array or .to_numpy instead.","division operations on index and subclasses will now fill division of positive numbers by zero with np.inf, division of negative numbers by zero with -np.inf and 0 / 0 with np.nan. this matches existing series behavior. ",using a single function is equivalent to .apply.,"fixed bug in pandas.read_excel producing incorrect results when the engine openpyxl is used and the excel file is missing or has incorrect dimension information; the fix requires openpyxl >= 3.0.0, prior versions may still fail ",sparsedataframe.combine and dataframe.combine_first no longer supports combining a sparse column with a dense column while preserving the sparse subtype. the result will be an object-dtype sparsearray.,"the format keyword now replaces the table keyword; allowed values are fixed or table the same defaults as prior < 0.13.0 remain, e.g. put implies fixed format and append implies table format. this default format can be set as an option by setting io.hdf.default_format.",series.astype and index.astype with an incompatible dtype will now raise a typeerror rather than a valueerror ,"in previous versions, showing .memory_usage on a pandas structure that has an index, would only include actual index values and not include structures that facilitated fast indexing. this will generally be different for index and multiindex and less-so for other index types. ","starting in v0.17.0, comparing index objects of different lengths will raise a valueerror. this is to be consistent with the behavior of series.",the convert_datetime64 parameter in dataframe.to_records has been deprecated and will be removed in a future version. the numpy bug motivating this parameter has been resolved. the default value for this parameter has also changed from true to none .,"read_pickle, dataframe.to_pickle and series.to_pickle can now read from and write to compressed pickle files. compression methods can be an explicit parameter or be inferred from the file extension. see the docs here.",bug in pd.cut with negative values and a single bin ,tolerance is also exposed by the lower level index.get_indexer and index.get_loc methods.,"add a limit_direction keyword argument that works with limit to enable interpolate to fill nan values forward, backward, or both ",bug in dataframe.agg and series.agg with aggregating on non-callable attributes ,datetime.timezone objects are now supported as arguments to timezone methods and constructors ,pd.timegrouper is deprecated in favor of pandas.grouper ,raises a helpful exception when a non-numeric index is sent to interpolate with methods which require numeric index. ,fixed regression in dataframe.resample.apply raised attributeerror when input was a dataframe and only a series was evaluated ,"removed the previously deprecated keyword data from parallel_coordinates, use frame instead ","pickle compatibility is preserved for pickles created prior to 0.13. these must be unpickled with pd.read_pickle, see pickling.","a series of dtype=category constructed from an empty dict will now have categories of dtype=object rather than dtype=float64, consistently with the case in which an empty list is passed ",index.get_indexer_non_unique now returns a ndarray indexer rather than an index; this is consistent with index.get_indexer ,the out and mode parameters are now longer accepted .,"we are adding an implementation that natively supports datetime with timezones. a series or a dataframe column previously could be assigned a datetime with timezones, and would work as an object dtype. this had performance issues with a large number rows. see the docs for more details. .",bug in indexing with a scalar and a categoricalindex ,max_rows and max_cols parameters removed from htmlformatter since truncation is handled by dataframeformatter ,bug in index raises keyerror displaying incorrect column when column is not in the df and columns contains duplicate values ,"bug in where when dtype is datetime64/timedelta64, but dtype of other is not ","in a typical time-series example, we have trades and quotes and we want to asof-join them. this also illustrates using the by parameter to group data before merging.","series, dataframes, and panels now have a new method: sample. the method accepts a specific number of rows or columns to return, or a fraction of the total number or rows or columns. it also has options for sampling with or without replacement, for passing in a column for weights for non-uniform sampling, and for setting seed values to facilitate replication. ","dataframe.replace now supports the method parameter, which can be used to specify the replacement method when to_replace is a scalar, list or tuple and value is none ","indexing a dataframe or series with a datetimeindex with a date string with a utc offset would previously ignore the utc offset. now, the utc offset is respected in indexing. ",duplicate indexes with getitem will return items in the correct order and handle missing elements like unique indices ,"dataframe and series now properly handle numpy masked arrays with hardened masks. previously, constructing a dataframe or series from a masked array with a hard mask would create a pandas object containing the underlying value, rather than the expected nan. ",the sparseseries and sparsedataframe subclasses are deprecated. their functionality is better-provided by a series or dataframe with sparse values.,bug in pd.read_csv for the python engine in which an unhelpful error message was being raised when multi-char delimiters were not being respected with quotes ,series.droplevel and dataframe.droplevel are now implemented ,"created a new block type in internals, sparseblock, which can hold multi-dtypes and is non-consolidatable. sparseseries and sparsedataframe now inherit more methods from there hierarchy , and no longer inherit from sparsearray ","unique no longer mangles nan-floats and the nat-object for np.object-dtype, i.e. nat is no longer coerced to a nan-value and is treated as a different entity. ",series.set_axis and dataframe.set_axis now require labels as the first argument and axis as an optional named parameter ,bug in series.is_unique where extraneous output in stderr is shown if series contains objects with __ne__ defined ,"bug in dataframe.crosstab when margins set to true and normalize is not false, an error is raised. ",bug in nanops.var with ddof=1 and 1 elements would sometimes return inf rather than nan on some platforms ,"timestamp.offset property , has been deprecated in favor of freq ","categorical.unique now returns new categoricals with categories and codes that are unique, rather than returning np.array ",calling pandas.core.groupby.groupby.rank with empty groups and pct=true was raising a zerodivisionerror ,"in 0.15.0 index has internally been refactored to no longer sub-class ndarray but instead subclass pandasobject, similarly to the rest of the pandas objects. this change allows very easy sub-classing and creation of new index types. this should be a transparent change with only very limited api implications :","slicing is always on the values of the index, for ,ix,loc and always positional with iloc",pandas.tseries.frequencies.to_offset s freqstr keyword is deprecated in favor of freq ,bug in series.loc and dataframe.loc raises when the index was of object dtype and the given numeric label was in the index ,"the implementation of dataframegroupby.apply previously evaluated the supplied function consistently twice on the first group to infer if it is safe to use a fast code path. particularly for functions with side effects, this was an undesired behavior and may have led to surprises. ",grouping by a categorical and summing now returns 0 instead of nan for categories with no observations. the product now returns 1 instead of nan.,"this is a major release from 0.7.3 and includes extensive work on the time series handling and processing infrastructure as well as a great deal of new functionality throughout the library. it includes over 700 commits from more than 20 distinct authors. most pandas 0.7.3 and earlier users should not experience any issues upgrading, but due to the migration to the numpy datetime64 dtype, there may be a number of bugs and incompatibilities lurking. lingering incompatibilities will be fixed asap in a 0.8.1 release if necessary. see the full release notes or issue tracker on github for a complete list.",bug in to_datetime which would raise an valueerror when called with a date far into the future and the format argument specified instead of raising outofboundsdatetime ,add flexible replace method for efficiently substituting values,fixed regression in read_excel that incorrectly raised when the argument io was a non-path and non-buffer and the engine argument was specified ,"improved pandas.core.window.rolling, pandas.core.window.window and pandas.core.window.exponentialmovingwindow functions to exclude nuisance columns from results instead of raising errors and raise a dataerror only if all columns are nuisance ","consistency when introducing code samples, using either colon or period. rewrote some sentences for greater clarity, added more dynamic references to functions, methods and classes. ",improved performance of .clip with scalar arguments ,"pd.timeseries was deprecated officially in 0.17.0, though has already been an alias since 0.13.0. it has been dropped in favor of pd.series. .","numexpr is now a recommended dependencies, to accelerate certain types of numerical and boolean operations",# deprecated now,"improved performance of sparse arithmetic with blockindex when the number of blocks are large, though recommended to use intindex in such cases ",bug in dataframe.to_dict raises valueerror when used with orient='index' and a non-unique index instead of losing data ,and optional groups can also be used.,"pandas.util.compat and pandas.util.py3compat have been merged into pandas.compat. pandas.compat now includes many functions allowing 2/3 compatibility. it contains both list and iterator versions of range, filter, map and zip, plus other necessary elements for python 3 compatibility. lmap, lzip, lrange and lfilter all produce lists instead of iterators, for compatibility with numpy, subscripting and pandas constructors.","series & dataframe have been enhanced to support the aggregation api. this is a familiar api from groupby, window operations, and resampling. this allows aggregation operations in a concise way by using agg and transform. the full documentation is here .",pd.unique will now be consistent with extension types,pd.unique will now be consistent with extension types,"removed the previously deprecated keywords start , end , and periods from the datetimeindex, timedeltaindex, and periodindex constructors; use date_range, timedelta_range, and period_range instead ",bug in series with numeric dtype when adding or subtracting an array or series with timedelta64 dtype ,"as part of making pandas api more uniform and accessible in the future, we have created a standard sub-package of pandas, pandas.api to hold public api s. we are starting by exposing type introspection functions in pandas.api.types. more sub-packages and officially sanctioned api s will be published in future versions of pandas ",describe on a dataframe with a mix of timestamp and string like objects returns a different index . previously the index was unintentionally sorted.,"added sparseseries.to_coo and sparseseries.from_coo methods for converting to and from scipy.sparse.coo_matrix instances . for example, given a sparseseries with multiindex we can convert to a scipy.sparse.coo_matrix by specifying the row and column labels as index levels:","the default value for the return_type parameter for dataframe.plot.box and dataframe.boxplot changed from none to ""axes"". these methods will now return a matplotlib axes by default instead of a dictionary of artists. see here .",bug in datetimeindex and timedeltaindex where indexing with ellipsis would incorrectly lose the index s freq attribute ,improved error message when using frac > 1 and replace = false ,dataframe.rename_axis now supports index and columns arguments and series.rename_axis supports index argument .,"this is a major release from 0.19.2 and includes a number of api changes, deprecations, new features, enhancements, and performance improvements along with a large number of bug fixes. we recommend that all users upgrade to this version.","series and index now internally share more common operations, e.g. factorize,nunique,value_counts are now supported on index types as well. the series.weekday property from is removed from series for api consistency. using a datetimeindex/periodindex method on a series will now raise a typeerror. .","dataframe or series: draw matplotlib.table using the passed data. the data will be drawn as displayed in print method . also, helper function pandas.tools.plotting.table is added to create a table from dataframe and series, and add it to an matplotlib.axes.",the dataframe.interpolate keyword downcast default has been changed from infer to none. this is to preserve the original dtype unless explicitly requested otherwise .,stringdtype is currently considered experimental. the implementation and parts of the api may change without warning.,"time series data are now represented using numpy s datetime64 dtype; thus, pandas 0.8.0 now requires at least numpy 1.6. it has been tested and verified to work with the development version of numpy as well which includes some significant user-facing api changes. numpy 1.6 also has a number of bugs having to do with nanosecond resolution data, so i recommend that you steer clear of numpy 1.6 s datetime64 api functions and only interact with this data using the interface that pandas provides.",bug in dataframe.reset_index was incorrectly raising a valueerror for input with a multiindex with missing values in a level with categorical dtype ,datetimeindex.unique now returns a datetimeindex with the same name and,bug in index construction with nan elements and integer dtype specified ,bug in c csv parser causing spurious nans when data started with newline followed by white space. ,the support for the mysql flavor when using dbapi connection objects has been deprecated. mysql will be further supported with sqlalchemy engines .,the support for the mysql flavor when using dbapi connection objects has been deprecated. mysql will be further supported with sqlalchemy engines .,bug in series and dataframe with integer dtype failing to raise typeerror when adding or subtracting a np.datetime64 object ,"in version 0.16.2 a dataframe with multiindex columns could not be written to excel via to_excel. that functionality has been added , along with updating read_excel so that the data can be read back with, no loss of information, by specifying which columns/rows make up the multiindex in the header and index_col parameters ","added proper, tested weighted least squares to standard and panel ols ",the reduce parameter of .apply is deprecated in favor of result_type='reduce' ,clarified documentation on interpolate with method=akima. the der parameter must be scalar or none ,fixed regression in groupby.sem where the presence of non-numeric columns would cause an error instead of being dropped ,bug in rolling.median and rolling.quantile returned wrong values for baseindexer subclasses with non-monotonic starting or ending points for windows ,"removed the previously deprecated keyword colors from parallel_coordinates, use color instead ",fix a bug with ndframe.replace which made replacement appear as though it was using regular expressions .,"made both the c-based and python engines for read_csv and read_table ignore empty lines in input as well as white space-filled lines, as long as sep is not white space. this is an api change that can be controlled by the keyword parameter skip_blank_lines. see the docs ","note that missing values now propagate, rather than always comparing unequal like numpy.nan. see experimental na scalar to denote missing values for more.",series.interpolate and dataframe.interpolate now raise a valueerror if limit_direction is 'forward' or 'both' and method is 'backfill' or 'bfill' or limit_direction is 'backward' or 'both' and method is 'pad' or 'ffill' ,series.truncate and dataframe.truncate will raise a valueerror if the index is not sorted instead of an unhelpful keyerror ,"when read_csv is called with chunksize=n and without specifying an index, each chunk used to have an independently generated index from 0 to n-1. they are now given instead a progressive index, starting from 0 for the first chunk, from n for the second, and so on, so that, when concatenated, they are identical to the result of calling read_csv without the chunksize= argument .",bug in .loc result with duplicated key may have index with incorrect dtype ,the order of the arguments of dataframe.to_html and dataframe.to_string is rearranged to be consistent with each other. ,bug in dataframe.pivot modified index argument when columns was passed but values was not ,"in 0.15.0 index has internally been refactored to no longer sub-class ndarray but instead subclass pandasobject, similarly to the rest of the pandas objects. this change allows very easy sub-classing and creation of new index types. this should be a transparent change with only very limited api implications ","bug in series.replace and dataframe.replace when dict is used as the to_replace value and one key in the dict is another key s value, the results were inconsistent between using integer key and using string key ",improved performance of read_csv by faster parsing of n/a and boolean values ,merge errors will now be sub-classes of valueerror rather than raw exception ,"styler.apply is now more strict about the outputs your function must return. for axis=0 or axis=1, the output shape must be identical. for axis=none, the output must be a dataframe with identical columns and index labels .",fixed regression in dataframe.transform and series.transform giving incorrect column labels when passed a dictionary with a mix of list and non-list values ,fixed inconsistency in .ix between list and scalar keys when the index has integer dtype and does not include the desired keys ,"bug in datetimeindex.searchsorted, timedeltaindex.searchsorted, periodindex.searchsorted, and series.searchsorted with datetime64, timedelta64 or period dtype placement of nat values being inconsistent with numpy ",fixed regression in reindex and groupby with a multiindex or multiple keys that contains categorical datetime-like values .,the methods series.str.partition and series.str.rpartition have deprecated the pat keyword in favor of sep ,"the .dtype property of a categorical, categoricalindex or a series with categorical type will now return an instance of categoricaldtype. while the repr has changed, str) is still the string 'category'. we ll take this moment to remind users that the preferred way to detect categorical data is to use pandas.api.types.is_categorical_dtype, and not str == 'category'.",.to_json now supports ndframes that contain categorical and sparse data ,fix regression in groupby.first and groupby.last where none is not preserved in object dtype ,"the validate argument for merge now checks whether a merge is one-to-one, one-to-many, many-to-one, or many-to-many. if a merge is found to not be an example of specified merge type, an exception of type mergeerror will be raised. for more, see here ",categorical can now be included in series and dataframes and gained new methods to manipulate. thanks to jan schulz for much of this api/implementation. .,bug in pd.read_csv which caused errors to be raised when a dictionary containing scalars is passed in for na_values ,"added to_julian_date to timestamp and datetimeindex. the julian date is used primarily in astronomy and represents the number of days from noon, january 1, 4713 bc. because nanoseconds are used to define the time in pandas the actual range of dates that you can use is 1678 ad to 2262 ad. ",bug in fillna with limit and value specified,self or other contain values that can not be compared .,dataframe.to_stata is now faster when outputting data with any string or non-native endian columns ,"for compatibility with numpy arrays, pd.series implements argmax and argmin. since pandas 0.13.0, argmax has been an alias for pandas.series.idxmax, and argmin has been an alias for pandas.series.idxmin. they return the label of the maximum or minimum, rather than the position.","series.rename and ndframe.rename_axis can now take a scalar or list-like argument for altering the series or axis name, in addition to their old behaviors of altering labels. ",fixed bug in comparison of ordered categorical that contained missing values with a scalar which sometimes incorrectly resulted in true ,"fixed regression in read_csv and other read functions were the encoding error policy did not default to ""replace"" when no encoding was specified ",bug in dateoffset where keyword arguments week and milliseconds were accepted and ignored. passing these will now raise valueerror ,corrected business day subtraction logic when the offset is more than 5 bdays and the starting date is on a weekend ,indexers will warn futurewarning when used with a scalar indexer and a non-floating point index ,"added experimental compatibility with openpyxl for versions >= 2.0. the dataframe.to_excel method engine keyword now recognizes openpyxl1 and openpyxl2 which will explicitly require openpyxl v1 and v2 respectively, failing if the requested version is not available. the openpyxl engine is a now a meta-engine that automatically uses whichever version of openpyxl is installed. ",".groupby has been enhanced to provide convenient syntax when working with .rolling, .expanding and .resample per group, see here","bug in read_csv with float_precision=""high"" caused segfault or wrong parsing of long exponent strings. this resulted in a regression in some cases as the default for float_precision was changed in pandas 1.2.0 ","bug in dataframe.to_html with notebook=true where dataframes with named indices or non-multiindex indices had undesired horizontal or vertical alignment for column or row labels, respectively ","as of 10/10/13, there is a bug in google s api preventing result sets from being larger than 100,000 rows. a patch is scheduled for the week of 10/14/13.",remove deprecated factor ,"improved csv write performance with mixed dtypes, including datetimes by up to 5x ",bug with kde plot and nans ,"dataframegroupby.mean and seriesgroupby.mean , std and var) now raise a typeerror if a non-accepted keyword argument is passed into it. previously an unsupportedfunctioncall was raised ) ","round, ceil, and floor for datetimeindex and timestamp now support an ambiguous argument for handling datetimes that are rounded to ambiguous times and a nonexistent argument for handling datetimes that are rounded to nonexistent times. see nonexistent times when localizing ",bug in categorical.from_codes where an unhelpful error was raised when an invalid ordered parameter was passed in ,"fixed regression in dataframe.agg, dataframe.apply, series.agg, and series.apply where internal suffix is exposed to the users when no relabelling is applied ",multiple bugs in pandas.core.window.rolling.min with closed='left' and a datetime-like index leading to incorrect results and also segfault. ,add dataframe.to_panel with code adapted from longpanel.to_long,rename_categories now accepts a dict-like argument for new_categories. the previous categories are looked up in the dictionary s keys and replaced if found. the behavior of missing and extra keys is the same as in dataframe.rename.,"for the c parsing engine, the methods read_csv and read_table previously defaulted to a parser that could read floating point numbers slightly incorrectly with respect to the last bit in precision. the option floating_precision=""high"" has always been available to avoid this issue. beginning with this version, the default is now to use the more accurate parser by making floating_precision=none correspond to the high precision parser, and the new option floating_precision=""legacy"" to use the legacy parser. the change to using the higher precision parser by default should have no impact on performance. ",series.nsmallest and nlargest s take_last keyword was deprecated in favor of keep. ,"for optional libraries the general recommendation is to use the latest version. the following table lists the lowest version per library that is currently being tested throughout the development of pandas. optional libraries below the lowest tested version may still work, but are not considered supported.","for optional libraries the general recommendation is to use the latest version. the following table lists the lowest version per library that is currently being tested throughout the development of pandas. optional libraries below the lowest tested version may still work, but are not considered supported.","for optional libraries the general recommendation is to use the latest version. the following table lists the lowest version per library that is currently being tested throughout the development of pandas. optional libraries below the lowest tested version may still work, but are not considered supported.","for optional libraries the general recommendation is to use the latest version. the following table lists the lowest version per library that is currently being tested throughout the development of pandas. optional libraries below the lowest tested version may still work, but are not considered supported.","fix reindexing with multiple axes; if an axes match was not replacing the current axes, leading to a possible lazy frequency inference issue ",fixed regression in dataframe.apply with object dtype and non-reducing function ,"bug in numeric indexes resulted in it being possible to instantiate an int64index, uint64index, or float64index with an invalid dtype ","dataframe.to_stata will now check data for compatibility with stata data types and will upcast when needed. when it is not possible to losslessly upcast, a warning is issued ",the default setting of dropna argument is true which means na are not included in group keys.,"previously agg lost the result columns, when the as_index option was set to false and the result columns were relabeled. in this case the result values were replaced with the previous index .",allow index and rangeindex to be passed to numpy min and max functions ,"to_html now accepts an optional escape argument to control reserved html character escaping and escapes &, in addition to < and >. ",bug in categoricalindex and categorical incorrectly raising valueerror instead of typeerror when a list is passed using the in operator ,"tz_localize for tz-aware timestamp and datetimeindex now removes timezone holding local time, previously this resulted in exception or typeerror ","bug in dataframe.hist, xrot=0 does not work with by and subplots .","fixed regression where setting pd.options.display.max_colwidth was not accepting negative integer. in addition, this behavior has been deprecated in favor of using none ","dataframe.set_index now gives a better keyerror, raises a valueerror for incorrect types, and will not fail on duplicate column names with drop=true. ",factorize now supports na_sentinel=none to include nan in the uniques of the values and remove dropna keyword which was unintentionally exposed to public facing api in 1.1 version from factorize ,constructor for multiindex verifies that the given sortorder is compatible with the actual lexsort_depth if verify_integrity parameter is true ,bug in datetimeindex with nanosecond frequency does not include timestamp specified with end ,removed the previously deprecated pd.options.html.border ,a multiplied freq represents a span of corresponding length. the example below creates a period of 3 days. addition and subtraction will shift the period by its span.,"indexing an index object with a float key is deprecated, and will raise an indexerror in the future. you can manually convert to an integer key instead .","bug where setting a timedelta column by index causes it to be casted to double, and therefore lose precision ",period and periodindex can contain nat in its values ,series.repeat has deprecated the reps parameter in favor of repeats ,deprecated parameters levels and codes in multiindex.copy. use the set_levels and set_codes methods instead ,issue with groupby agg with a single function and a mixed-type frame ,bug in dataframe.replace and series.replace with numeric values and string to_replace ,"pandas.read_clipboard updated to use qtpy, falling back to pyqt5 and then pyqt4, adding compatibility with python3 and multiple python-qt bindings ",fixed regression in read_csv in which the encoding option was not recognized with certain file-like objects ,calling pandas.concat on a categorical of ints with na values now causes them to be processed as objects when concatenating with anything other than another categorical of ints ,indexing with date strings with utc offsets,pandas has gained the ability to hold integer dtypes with missing values. this long requested feature is enabled through the use of extension types.,.resample.interpolate is now supported ,bug in read_parquet with fixed offset time zones. string representation of time zones was not recognized ,a keyerror is now raised if .unstack is called on a series or dataframe with a flat index passing a name which is not the correct one ,bug when constructing a datetimeindex with timestamp constructed with the replace method across dst ,"we ve added experimental support for conditional html formatting: the visual styling of a dataframe based on the data. the styling is accomplished with html and css. accesses the styler class with the pandas.dataframe.style, attribute, an instance of styler with your data attached.",added extensiondtype._is_numeric for controlling whether an extension dtype is considered numeric .,bug in timestamp constructor where microsecond resolution was lost if hhmmss were not separated with : ,the behavior of sort=true can now be obtained with sort=none. this will sort the result only if the values in self and other are not identical.,concat will now concatenate mixed series and dataframes using the series name or numbering columns as needed . see the docs,bug in series.nlargest for signed and unsigned integer dtypes when the minimum value is present ,"this is a major release from 0.20.3 and includes a number of api changes, deprecations, new features, enhancements, and performance improvements along with a large number of bug fixes. we recommend that all users upgrade to this version.",iterator support via read_hdf that automatically opens and closes the store when iteration is finished. this is only for tables,a newly constructed empty dataframe with integer as the dtype will now only be cast to float64 if index is specified ,importing concat from pandas.tools.merge has been deprecated in favor of imports from the pandas namespace. this should only affect explicit imports ,"fixed regression in pandas.io.json.json_normalize when called with none values in nested levels in json, and to not drop keys with value as none .",deprecated parameter inplace in multiindex.set_codes and multiindex.set_levels ,fixed regression in .groupby.rolling where a segfault would occur with center=true and an odd number of values ,"construction of interval is restricted to numeric, timestamp and timedelta endpoints ","when applied to a dataframe, they key is applied per-column to all columns or a subset if by is specified, e.g.","the general semantics of anchored offsets for n=0 is to not move the date when it is an anchor point , and otherwise roll forward to the next anchor point.","futurewarning: using '+' to provide set union with indexes is deprecated, use '|' or .union",read_fwf was inferring compression with compression=none which was not consistent with the other read_* functions ,"a dataframe can now be written to and subsequently read back via json while preserving metadata through usage of the orient='table' argument . previously, none of the available orient values guaranteed the preservation of dtypes and index names, amongst other metadata.","timestamp.weekday_name, datetimeindex.weekday_name, and series.dt.weekday_name are deprecated in favor of timestamp.day_name, datetimeindex.day_name, and series.dt.day_name ",bug in dataframe.drop caused boolean labels false and true to be treated as labels 0 and 1 respectively when dropping indices from a numeric index. this will now raise a valueerror ,supplying codes/labels and levels to the categorical constructor is not supported anymore. supplying two arguments to the constructor is now interpreted as values and levels . please change your code to use the from_codes constructor.,using pd.na with series.str.repeat now correctly outputs a null value instead of raising error for vector inputs ,bug in dataframe.loc returning and assigning elements in wrong order when indexer is differently ordered than the multiindex to filter ,"boolean comparisons of a series vs none will now be equivalent to comparing with np.nan, rather than raise typeerror. .",trust me: don t panic. if you are using numpy 1.6 and restrict your interaction with datetime64 values to pandas s api you will be just fine. there is nothing wrong with the data-type ; all of the important data processing happens in pandas and is heavily tested. i strongly recommend that you do not work directly with datetime64 arrays in numpy 1.6 and only use the pandas api.,"bug in dataframe.to_json where using a tuple as a column or index value and using orient=""columns"" or orient=""index"" would produce invalid json ",added factorize functions to index and series to get indexer and unique values ,bug in using iloc/loc with a cross-sectional and duplicate indices ,series.str.split s return_type keyword was removed in favor of expand ,"regression fixed in , where groupby with a datetime-like converting to float with certain aggregators ",bug in concat where error was raised in concatenating series with numpy scalar and tuple names ,pd.read_msgpack and pd.to_msgpack are now a supported method of serialization of arbitrary pandas in a lightweight portable binary format. see the docs,the parallel_coordinates function now takes argument color instead of colors. a futurewarning is raised to alert that the old colors argument will not be supported in a future release. ,the parallel_coordinates function now takes argument color instead of colors. a futurewarning is raised to alert that the old colors argument will not be supported in a future release. ,bug when constructing dataframe where passing a dictionary with only scalar values and specifying columns did not raise an error ,this usage is now deprecated. instead add or subtract integer multiples of the object s freq attribute .,"dataframe.to_stata, read_stata, statareader and statawriter have deprecated the encoding argument. the encoding of a stata dta file is determined by the file type and cannot be changed ",added documentation to i/o regarding the perils of reading in columns with mixed dtypes and how to handle it ,fixed an issue where dataframe.sum was slower than dataframe.mean for integer valued frames ,bug in dataframe with datetime64 dtype addition and subtraction with timedelta-like objects ,bug in to_timedelta fails when arg is a series with int64 dtype containing null values ,"the default is set at origin='unix', which defaults to 1970-01-01 00:00:00, which is commonly called unix epoch or posix time. this was the previous default, so this is a backward compatible change.",bug in dataframe.groupby where spurious warning is raised when grouper object is used to override ambiguous column name ,"this is a major release from 0.22.0 and includes a number of api changes, deprecations, new features, enhancements, and performance improvements along with a large number of bug fixes. we recommend that all users upgrade to this version.",fixed regression in read_csv used in file like object rawiobase is not recognize encoding option ,pandas.tseries.frequencies.get_standard_freq has been removed in favor of pandas.tseries.frequencies.to_offset.rule_code ,"bug in groupby.agg, groupby.transform, and groupby.resample where subclasses are not preserved ",datetimeindex.strftime and periodindex.strftime now return an index instead of a numpy array to be consistent with similar accessors ,"grouping by a tuple of keys now emits a futurewarning and is deprecated. in the future, a tuple passed to 'by' will always refer to a single key that is the actual tuple, instead of treating the tuple as multiple keys. to retain the previous behavior, use a list instead of a tuple ","we introduce a new scalar type timedelta, which is a subclass of datetime.timedelta, and behaves in a similar manner, but allows compatibility with np.timedelta64 types as well as a host of custom representation, parsing, and attributes. this type is very similar to how timestamp works for datetimes. it is a nice-api box for the type. see the docs. ","to_stata supports compression using the compression keyword argument. compression can either be inferred or explicitly set using a string or a dictionary containing both the method and any additional arguments that are passed to the compression library. compression was also added to the low-level stata-file writers statawriter, statawriter117, and statawriterutf8 .",dataframe.from_dict now accepts a columns argument that can be used to specify the column names when orient='index' is used ,bug in read_msgpack where encoding is not respected ,fixed regression in replace raising an assertionerror when replacing values in an extension dtype with values of a different dtype ,bug in to_excel where a negative sign was being prepended to positive infinity and was absent for negative infinity ,"the behavior of sum and prod on all-nan series/dataframes no longer depends on whether bottleneck is installed, and return value of sum and prod on an empty series has changed .",typeerror exceptions raised by read_csv and read_table were showing as parser_f when an unexpected keyword argument was passed ,"add support for separating years and quarters using dashes, for example 2014-q1. ",and integer or boolean arrays are valid indices,"provide a useful exception for indexing with an invalid type for that index when using .loc. for example trying to use .loc on an index of type datetimeindex or periodindex or timedeltaindex, with an integer .","for series and indexes backed by normal numpy arrays, series.array will return a new arrays.pandasarray, which is a thin wrapper around a numpy.ndarray. pandasarray isn t especially useful on its own, but it does provide the same interface as any extension array defined in pandas or by a third-party library.",loffset should be replaced by directly adding an offset to the index dataframe after being resampled.,"bugs in concatenation with a coercible dtype was too aggressive, resulting in different dtypes in output formatting when an object was longer than display.max_rows ","period, periodindex and period_range can now accept multiplied freq. also, period.freq and periodindex.freq are now stored as a dateoffset instance like datetimeindex, and not as str ",fixed regression in series.align when other is a dataframe and method is not none ,"new unified concatenation function for concatenating series, dataframe or panel objects along an axis. can form union or intersection of the other axes. improves performance of series.append and dataframe.append ","this is a minor bug-fix release from 0.16.0 and includes a large number of bug fixes along several new features, enhancements, and performance improvements. we recommend that all users upgrade to this version.",bug in dataframe.__getitem__ and dataframe.loc.__getitem__ with intervalindex columns and a numeric indexer ,"historically, this would have been done with series.values, but with .values it was unclear whether the returned value would be the actual array, some transformation of it, or one of pandas custom arrays . for example, with periodindex, .values generates a new ndarray of period objects each time.","is_extension_type is deprecated, is_extension_array_dtype should be used instead ","align: specify the bar alignment. default is center . in previous versions, pandas passes align='edge' to matplotlib and adjust the location to center by itself, and it results align keyword is not applied as expected. ","dataframe.rename would previously accept positional arguments that would lead to ambiguous or undefined behavior. from pandas 1.0, only the very first argument, which maps labels to their new names along the default axis, is allowed to be passed by position .",these changes conform sparse handling to return the correct types and work to make a smoother experience with indexing.,"reduction methods like series.sum now accept the default value of keepdims=false when called from a numpy ufunc, rather than raising a typeerror. full support for keepdims has not been implemented .",bug in dataframe.to_string and more generally in the floating repr formatter. zeros were not trimmed if inf was present in a columns while it was the case with na values. zeros are now trimmed as in the presence of na .,"more flexible multiple function application in groupby, and can pass list tuples to get result in particular order with given names",deleting of consecutive rows is much faster than before,"removed the previously deprecated keyword data from andrews_curves, use frame instead ","fixed regression in series.sort_index and dataframe.sort_index, which exited with an ungraceful error when having kwarg ascending=none passed. passing ascending=none is still considered invalid, and the improved error message suggests a proper usage ","of course if you have missing values that are introduced, then the resulting dtype will be upcast, which is unchanged from previous.","bug in ols where running with cluster and nw_lags parameters did not work correctly, but also did not throw an error .",bar and horizontal bar plots no longer add a dashed line along the info axis. the prior style can be achieved with matplotlib s axhline or axvline methods .,the nrows and chunksize arguments in pd.read_csv are supported if both are passed ,bug in to_datetime and to_timedelta causing index name to be lost ,"a long-time requested feature has been added through the merge_asof function, to support asof style joining of time-series . full documentation is here.",bug in testing.assert_series_equal and testing.assert_frame_equal for series or dataframes with differing unicode data ,this method is also exposed by the lower level index.get_indexer and index.get_loc methods.,we are adding a standard public module for all pandas exceptions & warnings pandas.errors. . previously these exceptions & warnings could be imported from pandas.core.common or pandas.io.common. these exceptions and warnings will be removed from the *.common locations in a future release. ,eval/query expressions with strings containing the @ character will now work .,bug in to_datetime where utc=true was not respected when specifying a unit and errors='ignore' ,bug in pandas.core.window.rolling.max and pandas.core.window.rolling.min where incorrect results are returned with an empty variable window ,"this is a minor bug-fix release from 0.17.0 and includes a large number of bug fixes along several new features, enhancements, and performance improvements. we recommend that all users upgrade to this version.",dataframe.to_csv and series.to_csv now accept an errors argument ,"the convert parameter has been deprecated in the .take method, as it was not being respected ",bug in timedeltaindex addition with a datetime-like object where addition overflow was not being caught ,"# these are float64indexes, so integer or floating point is acceptable","in comparisons, na / nan will always come through as false except with != which is true. be very careful with boolean arithmetic, especially negation, in the presence of na data. you may wish to add an explicit na filter into boolean array operations if you are worried about this:",raising an invalid typeerror rather than valueerror when appending with a different block ordering ,non-unique indexing with a slice via loc and friends fixed ,"bug in unequal comparisons between categorical data and a scalar, which was not in the categories , ordered=true)) > ""d"". this returned false for all elements, but now raises a typeerror. equality comparisons also now return false for == and true for !=. ","bug in dataframe.crosstab was returning incorrect results on inputs with duplicate row names, duplicate column names or duplicate names between row and column labels ",bug in setting with ix/loc and a mixed int/string index ,"all-nan levels in a multiindex are now assigned float rather than object dtype, promoting consistency with index .",fixed regression in series.min and series.max where numeric_only=true was ignored when the series contained categorical data ,dataframe.replace now allows regular expressions on contained series with object dtype. see the examples section in the regular docs replacing via string expression,passing multiple axes to dataframe.dropna is no longer supported , but the operator was passed,add option to disable sparse display of hierarchical indexes ,nat division with datetime.timedelta will now return nan instead of raising ,bug in series and dataframe repr where np.datetime64 and np.timedelta64 with dtype=object would be represented as nan ,"display format with plain text can optionally align with unicode east asian width, see here",for series the following indexing functions are deprecated .,read_csv will now raise a valueerror if a column with missing values is declared as having dtype bool ,bug in datetimeindex and timedeltaindex addition and subtraction where operations with numpy arrays raised typeerror ,a simple version of panel.round is now implemented ,".groupby has been enhanced to provide convenient syntax when working with .rolling, .expanding and .resample per group, see .",bug in intervalindex.get_loc and intervalindex.get_indexer when used with an intervalindex containing a single interval ,bug in pd.read_csv with engine='c' in which null quotechar was not accepted even though quoting was specified as none ,"0.10 of hdfstore is backwards compatible for reading tables created in a prior version of pandas, however, query terms using the prior methodology are unsupported. you must read in the entire file and write it out using the new format to take advantage of the updates.",bug in pd.read_csv with engine='python' in which nan values weren t being detected after data was converted to numeric values ,fixed regression in dataframe.unstack with columns with integer dtype ,bug in datetimeindex where constructing with an integer and tz would not localize correctly ,"timestamp.tz_localize, datetimeindex.tz_localize, and series.tz_localize have deprecated the errors argument in favor of the nonexistent argument ","when .ix is asked for a missing integer label in a multiindex with a first level of integer type, it now raises a keyerror, consistently with the case of a flat int64index, rather than falling back to positional indexing ","pd.read_* functions can now also accept pathlib.path, or py._path.local.localpath objects for the filepath_or_buffer argument. - the dataframe and series functions .to_csv, .to_html and .to_latex can now handle paths beginning with tildes ",period conversions in the range of seconds and below were reworked and extended up to nanoseconds. periods in the nanosecond range are now available.,"timeseries deprecated in favor of series , ","we ve introduced a new method dataframe.pipe. as suggested by the name, pipe should be used to pipe data through a chain of function calls. the goal is to avoid confusing nested function calls like",fixed an issue with dataframe.plot.scatter that incorrectly raised a keyerror when categorical data is used for plotting ,bug in astype converting to object dtype when passed extension type classes rather than instances. now a typeerror is raised when a class is passed .,"indexing methods for intervalindex have been modified to require exact matches only for interval queries. intervalindex methods previously matched on any overlapping interval. behavior with scalar points, e.g. querying with an integer, is unchanged .",enabling this option will affect the performance for printing of dataframe and series . use only when it is actually required.,# the following is now equivalent,bug in pandas.core.groupby.groupby.ffill and pandas.core.groupby.groupby.bfill where the fill within a grouping would not always be applied as intended due to the implementations use of a non-stable sort ,fixed to_datetime for array with both tz-aware datetimes and nat s ,"however, .agg can also accept a dict that allows renaming of the result columns. this is a complicated and confusing syntax, as well as not consistent between series and dataframe. we are deprecating this renaming functionality.",pd.tseries.util.isleapyear has been deprecated and will be removed in a subsequent release. datetime-likes now have a .is_leap_year property ,the month and year parameters have been undeprecated and can be used to get all options data for a given month.,this release includes a few new features and addresses over a dozen bugs in 0.7.0.,bug in timedeltaindex addition with a datetime-like object where addition overflow in the negative direction was not being caught ,dataframe.merge and dataframe.join can now be used to join multi-indexed dataframe instances on the overlapping index levels ,"some numeric reduction operators would return valueerror, rather than typeerror on object types that includes strings and numbers ",bug in resampling with .nunique and a sparse index ,added sparse accessor for working with a dataframe whose values are sparse ,"dataframe is now a series with sparse values, rather than a sparseseries, when slicing a single column with sparse values .",improved performance of series constructor with no data and datetimeindex ,"experimental: the new floating data types are currently experimental, and their behavior or api may still change without warning. especially the behavior regarding nan is subject to change.","during division involving a series or dataframe, 0/0 and 0//0 now give np.nan instead of np.inf. ",bug in tz-aware datetimeindex where addition/subtraction with a timedeltaindex or array with dtype='timedelta64' was incorrect ,numexpr version is now required to be >= 2.4.6 and it will not be used at all if this requisite is not fulfilled .,"bug in dataframe.plot.bar and series.plot.bar where ticks positions were assigned by value order instead of using the actual value for numeric or a smart ordering for string . this fix has been reverted in pandas 1.2.1, see what s new in 1.2.1 ",deprecations will be introduced in minor releases ,"revamp of frequency aliases and support for frequency shortcuts like 15min , or 1h30min ",added support for specifying a schema to read from/write to with read_sql_table and to_sql . for example:,bug in series.rank and dataframe.rank when pct=true and more than 224 rows are present resulted in percentages greater than 1.0 ,"concat and append now preserve extension dtypes, for example combining a nullable integer column with a numpy integer column will no longer result in object dtype but preserve the integer dtype .",fixed printing of dataframes with hierarchical columns with long names , with 'object' dtype where each element is a 'pandas.timestamp' with the correct 'tz'.,bug in any and all incorrectly returning <na> for all false or all true values using the nulllable boolean dtype and with skipna=false ,bug in creating a series from an array that contains both tz-naive and tz-aware values will result in a series whose dtype is tz-aware instead of object ,bug in dataframegroupby.rank where ranks were incorrect when both infinity and nan were present ,bug in index and series may ignore np.datetime64 and np.timdelta64 to infer dtype ,"implemented & and | to intersect / union index objects, respectively ",bug in setitem with list-of-lists and single vs mixed types ,"lookups on a series with a single-item list containing a slice ]]) are deprecated and will raise in a future version. either convert the list to a tuple, or pass the slice directly instead ",fix regression where an ordered categorical containing only nan values would raise rather than returning nan when taking the minimum or maximum ,fixed regression in groupby.first and groupby.last where none was considered a non-na value ,"removed the previously deprecated keyword time_rule from offsets.generate_range, which has been moved to core.arrays._ranges.generate_range ",the file reader will now raise an exception when na values are found in an explicitly specified integer column instead of converting the column to float ,pandas.tseries.frequencies.get_freq_group and pandas.tseries.frequencies.days are removed from the public api ,read_html now accepts a displayed_only keyword argument to controls whether or not hidden elements are parsed ,bug in dataframe.drop behaviour is not consistent for unique and non-unique indexes ,"series.to_dict and dataframe.to_dict now support an into keyword which allows you to specify the collections.mapping subclass that you would like returned. the default is dict, which is backwards compatible. ",improved performance in pd.read_csv on some platforms with buffered reads ,bug in read_csv where a multiindex with duplicate columns was not being mangled appropriately ,fixed issue with drop and a non-unique index on series ,intervalindex constructor will raise if the closed parameter conflicts with how the input data is inferred to be closed ,"deprecated the string method match, whose role is now performed more idiomatically by extract. in a future release, the default behavior of match will change to become analogous to contains, which returns a boolean indexer. in this release, the deprecated behavior is the default, but the new behavior is available through the keyword argument as_indexer=true.",regression in series.quantile with nans and .describe ); furthermore now names the series with the quantile ,"recent changes in ipython cause warnings to be emitted when using previous versions of pandas in qtconsole, now fixed. if you re using an older version and need to suppress the warnings, see .",bug in index.astype with a categorical dtype where the resultant index is not converted to a categoricalindex for all types of index ,deprecated function,deprecated function,series backed by an extensionarray now work with util.hash_pandas_object ,bug in dataframegroupby.transform produces an incorrect result with transformation functions ,"deprecated the unique method, can be replicated by select_column.unique","we can also match rows only with prior data, and not an exact match.","the string representation of index and its sub-classes have now been unified. these will show a single-line display if there are few values; a wrapped multi-line display for a lot of values will show a truncated display . the formatting for multiindex is unchanged . the display width responds to the option display.max_seq_items, which is defaulted to 100. ","bug in groupby.apply raises valueerror when the by axis is not sorted, has duplicates, and the applied func does not mutate passed in objects ",fix selection with ix/loc and non_unique selectors ,bug in read_html where nan s were incorrectly being used to indicate missing values in text. should use the empty string for consistency with the rest of pandas .,enable serialization of lists and dicts to strings in excelwriter ,series.ptp will now ignore missing values by default ,bug in dataframe and series where timezone aware data with dtype='datetime64 was not cast to naive ,bug in series.reset_index where appropriate error was not raised with an invalid level name ,bug in series and index comparison may output incorrect result if it contains nat with object dtype ,"likewise, get_indexer and get_indexer_non_unique will also only return locations for exact matches to interval queries, with -1 denoting that an exact match was not found.",these are the changes in pandas 1.1.2. see release notes for a full changelog including other versions of pandas.,improved performance of series.searchsorted. the speedup is especially large when the dtype is int8/int16/int32 and the searched key is within the integer bounds for the dtype ,a series based on an extensionarray now supports arithmetic and comparison operators . there are two approaches for providing operator support for an extensionarray:,passing a non-existent column in .to_excel is deprecated and will raise a keyerror in the future ,groupby.count is now implemented in cython and is much faster for large numbers of groups .,parsing datetime strings with different utc offsets will now create an index of datetime.datetime objects with different utc offsets,pd.options.html.border has been deprecated in favor of pd.options.display.html.border .,bug in dataframe.join when doing left join on index and there are multiple matches ,bug in read_hdf where reading a table from an hdf5 file written directly with pytables fails with a valueerror when using a sub-selection via the start or stop arguments ,index.repeat and multiindex.repeat have renamed the n argument to repeats ,"integers in floatindex, e.g. 1., are now formatted with a decimal point and a 0 digit, e.g. 1.0 this change not only affects the display to the console, but also the output of io methods like .to_csv or .to_html.","calling series.dt.end_time will now result in a time of 23:59:59.999999999 as is the case with period.end_time, for example",bug in series.isin with datetime64 dtype and datetimeindex.isin failing to consider tz-aware and tz-naive datetimes as always different ,categorical.from_codes now can take a dtype parameter as an alternative to passing categories and ordered .,series.mode and dataframe.mode now support the dropna parameter which can be used to specify whether nan/nat values should be considered ,dataframe.plot now raises a valueerror when the x or y argument is improperly formed ,"currently the default is expand=none which gives a futurewarning and uses expand=false. to avoid this warning, please explicitly specify expand.",bug in to_json with certain orients and a categoricalindex would segfault ,dataframe.replace and series.replace will raise a typeerror if to_replace is not an expected type. previously the replace would fail silently ,datetimeindex can be instantiated using strings contains nat ,"quantile and quantile now accept the interpolation keyword, linear by default ","this is a minor bug-fix release from 0.15.0 and includes a small number of api changes, several new features, enhancements, and performance improvements along with a large number of bug fixes. we recommend that all users upgrade to this version.","when a dataframe s integer slice is partially updated with a new slice of floats that could potentially be down-casted to integer without losing precision, the dtype of the slice will be set to float instead of integer.",passing utc=true will mimic the previous behavior but will correctly indicate that the dates have been converted to utc,"index.set_value has been deprecated. for a given index idx, array arr, value in idx of idx_val and a new value of val, idx.set_value is equivalent to arr = val, which should be used instead .","comparisons between series and index would return a series with an incorrect name, ignoring the index s name attribute ","by default, extracting matching patterns from strings with str.extract used to return a series if a single group was being extracted . as of pandas 0.23.0 str.extract always returns a dataframe, unless expand is set to false. finally, none was an accepted value for the expand parameter , but now raises a valueerror. ",period and periodindex supports addition/subtraction with timedelta-likes ,"note that numeric index objects already performed element-wise operations. for example, the behavior of adding two integer indexes is unchanged. the base index is now made consistent with this behavior.",bug in series with dtype='timedelta64' where addition or subtraction of timedeltaindex had results cast to dtype='int64' ,"bug in dataframe.to_stata that lead to data loss in certain cases, and could be exported using the wrong data types and missing values ",to preserve output behavior with prior versions the default value of display.precision has been reduced to 6 from 7.,using pd.na with dataframe.to_json now correctly outputs a null value instead of an empty object ,"series.cat.categorical, series.cat.name and series.cat.index have been deprecated. use the attributes on series.cat or series directly. .","creating a timedeltaindex, datetimeindex, or periodindex by passing range arguments start, end, and periods is deprecated in favor of timedelta_range, date_range, or period_range ",fixed regression in dataframe.apply with raw=true and user-function returning string ,some new warnings are issued for operations that require or are likely to materialize a large dense array:,see experimental na scalar to denote missing values for more on the differences between pandas.na and numpy.nan.,"the merge_asof performs an asof merge, which is similar to a left-join except that we match on nearest key rather than equal keys.","a user-defined-function that is passed to series.rolling.aggregate, dataframe.rolling.aggregate, or its expanding cousins, will now always be passed a series, rather than a np.array; .apply only has the raw keyword, see here. this is consistent with the signatures of .aggregate across pandas ",removed the previously deprecated convert keyword argument in series.take and dataframe.take ,"this is a major release from 0.13.1 and includes a small number of api changes, several new features, enhancements, and performance improvements along with a large number of bug fixes. we recommend that all users upgrade to this version.",bug in .to_string when called with an integer line_width and index=false raises an unboundlocalerror exception because idx referenced before assignment.,"the verbose keyword in dataframe.info, which controls whether to shorten the info representation, is now none by default. this will follow the global setting in display.max_info_columns. the global setting can be overridden with verbose=true or verbose=false.","dataframe.__getitem__ now accepts dictionaries and dictionary keys as list-likes of labels, consistently with series.__getitem__ ",bug in dataframe.combine_first caused wrong alignment with dtype string and one level of multiindex containing only na ,following new methods are accessible via .str accessor to apply the function to each values. this is intended to make it more consistent with standard methods on strings. ,"in a future version of pandas pandas.concat will no longer sort the non-concatenation axis when it is not already aligned. the current behavior is the same as the previous , but now a warning is issued when sort is not specified and the non-concatenation axis is not aligned .",bug with sort=true in dataframe.join and pd.merge when joining on indexes ,"the same is true for multiindex, but the logic is applied separately on a level-by-level basis.",this is a minor bug-fix release in the 0.20.x series and includes some small regression fixes and bug fixes. we recommend that all users upgrade to this version.,"in order to improve tab-completion, pandas does not include most deprecated attributes when introspecting a pandas object using dir ). to see which attributes are excluded, see an object s _deprecations attribute, for example pd.dataframe._deprecations .","some east asian countries use unicode characters its width is corresponding to 2 alphabets. if a dataframe or series contains these characters, the default output cannot be aligned properly. the following options are added to enable precise handling for these characters.","this is a major release from 0.18.1 and includes number of api changes, several new features, enhancements, and performance improvements along with a large number of bug fixes. we recommend that all users upgrade to this version.","fix multiindex.sort_index ordering when ascending argument is a list, but not all levels are specified, or are in a different order .",bug in dataframe.plot and series.plot with datetimeindex where a figure generated by them is not pickleable in python 3 ,dataframe.to_parquet will now write non-default indexes when the underlying engine supports it. the indexes will be preserved when reading back in with read_parquet .,"strings passed to dataframe.merge as the on, left_on, and right_on parameters may now refer to either column names or index level names. this enables merging dataframe instances on a combination of index levels and columns without resetting indexes. see the merge on columns and levels documentation section. ","when calling apply on a grouped series, the return value will also be a series, to be more consistent with the groupby behavior with dataframe:","note that the default value for inplace in a query is false, which is consistent with prior versions.",removed the previously deprecated keyword join_axes from concat; use reindex_like on the result instead ,bug in creating a multiindex with tuples and not passing a list of names; this will now raise valueerror ,bug in timedeltaindex.sum and series.sum with timedelta64 dtype on an empty index or series returning nat instead of timedelta ,added experimental custombusinessday class to support dateoffsets with custom holiday calendars and custom weekmasks. ,improved performance of pairwise .rolling and .expanding with .cov and .corr operations ,bug in iloc allowing memory outside bounds of a series to be accessed with negative integers ,to_sql now infers data types of non-na values for columns that contain na values and have dtype object .,a list or tuple with length matching the number of columns in the dataframe will now operate row-by-row instead of raising valueerror .,"vbench refactored merging / joining code into a tidy class and disabled unnecessary computations in the float/object case, thus getting about 10% better performance ","this is a minor release from 0.13.0 and includes a small number of api changes, several new features, enhancements, and performance improvements along with a large number of bug fixes. we recommend that all users upgrade to this version.","bug in comparison of datetimeindex against none or datetime.date objects raising typeerror for == and != comparisons instead of all-false and all-true, respectively ",bug in to_datetime with infer_datetime_format=true where timezone names would not be parsed correctly ,dataframe.loc or series.loc with listlike indexers and missing labels will no longer reindex ,bug in series.str.startswith and series.str.endswith with category dtype not propagating na parameter ,bug in timestamp and to_datetime where a string representing a barely out-of-bounds timestamp would be incorrectly rounded down instead of raising outofboundsdatetime ,enhanced support for time zones. add tz_convert and tz_localize methods to timeseries and dataframe. all timestamps are stored as utc; timestamps from datetimeindex objects with time zone set will be localized to local time. time zone conversions are therefore essentially free. user needs to know very little about pytz library now; only time zone names as strings are required. time zone-aware timestamps are equal if and only if their utc timestamps match. operations between time zone-aware time series with different time zones will result in a utc-indexed time series.,the pandas.io.data package is deprecated and will be replaced by the pandas-datareader package. this will allow the data modules to be independently updated to your pandas installation. the api for pandas-datareader v0.1.1 is exactly the same as in pandas v0.17.0 .,"this is a major release from 0.17.1 and includes a small number of api changes, several new features, enhancements, and performance improvements along with a large number of bug fixes. we recommend that all users upgrade to this version.",bug in series.__getitem__ with an integer key and a multiindex with leading integer level failing to raise keyerror if the key is not present in the first level ,bug in indexing with boolean masks on datetime-like values sometimes returning a view instead of a copy ,bug in dataframe.to_parquet where an exception was raised if the write destination is s3 ,fixed bug where dataframe.plot raised an error when both color and style keywords were passed and there was no color symbol in the style strings ,fixed an issue with dataframe.style where generated element ids were not unique ,the following warning / exception will show if this is attempted.,"the default has changed from true to false, to restore the pandas 0.23.4 and earlier behavior of not sorting by default.","bug causing strings containing an exponent, but no decimal to be parsed as int instead of float in engine='python' for the read_csv parser ",bug in left join on multiindex with sort=true or null values .,bug in series.str.extractall with single group and quantifier ,bug in timestamp.replace where replacing at a dst boundary would retain an incorrect offset ,bug in timestamp.replace where replacing at a dst boundary would retain an incorrect offset ,"dataframe.to_csv now uses os.linesep rather than '\n' for the default line terminator . this change only affects when running on windows, where '\r\n' was used for line terminator even when '\n' was passed in line_terminator.",fixed a performance regression for groupby.nth and groupby.last with some object columns ,these are the changes in pandas 1.1.4. see release notes for a full changelog including other versions of pandas.,bug in version string gen. for dev versions with shallow clones / install from tarball ,"bug in styler.render html was generated incorrectly because of formatting error in rowspan attribute, it now matches with w3 syntax ",bug in series.at returning series with one element instead of scalar when index is a multiindex with one level ,integerarray is currently experimental. its api or implementation may change without warning.,starting from 0.14.1 all offsets preserve time by default. the old behaviour can be obtained with normalize=true,"this is a minor bug-fix release in the 0.21.x series and includes some small regression fixes, bug fixes and performance improvements. we recommend that all users upgrade to this version.","the option, tupleize_cols can now be specified in both to_csv and read_csv, to provide compatibility for the pre 0.12 behavior of writing and reading multindex columns via a list of tuples. the default in 0.12 is to write lists of tuples and not interpret list of tuples as a multiindex column.",fixed a bug with all the dtypes being converted to object when using the csv cparser with the usecols parameter ,bug in dataframe.apply where callback was called with series parameter even though raw=true requested. ,"the internal attributes _start, _stop and _step attributes of rangeindex have been deprecated. use the public attributes start, stop and step instead .","the freq and how arguments to the .rolling, .expanding, and .ewm functions are deprecated, and will be removed in a future version. you can simply resample the input prior to creating a window function. .","the major change that may affect you in pandas 0.8.0 is that time series indexes use numpy s datetime64 data type instead of dtype=object arrays of python s built-in datetime.datetime objects. daterange has been replaced by datetimeindex but otherwise behaved identically. but, if you have code that converts daterange or index objects that used to contain datetime.datetime values to plain numpy arrays, you may have bugs lurking with code using scalar values because you are handing control over to numpy:",the .str accessor is now available for both series and index.,timeseries is now an alias for series. the property is_time_series can be used to distinguish ,"this is a major release from 0.16.2 and includes a small number of api changes, several new features, enhancements, and performance improvements along with a large number of bug fixes. we recommend that all users upgrade to this version.",support constructing panel or panel4d with scalar data ,adding experimental support for panel4d and factory functions to create n-dimensional named panels. here is a taste of what to expect.,"this is a major release from 0.14.1 and includes a small number of api changes, several new features, enhancements, and performance improvements along with a large number of bug fixes. we recommend that all users upgrade to this version.",new cut and qcut functions for computing a categorical variable from a continuous variable by binning values either into value-based or quantile-based bins,"raise on iloc when boolean indexing with a label based indexer mask e.g. a boolean series, even with integer labels, will raise. since iloc is purely positional based, the labels on the series are not alignable ","fixed regression in dataframe.to_dict with records orient raising an attributeerror when the dataframe contained more than 255 columns, or wrongly converting column names that were not valid python identifiers .",improved inference of datetime/timedelta with mixed null objects. regression from 0.13.1 in interpretation of an object index with all null elements ,"deprecated index.asi8 for index subclasses other than datetimeindex, timedeltaindex, and periodindex ",fixed bug where sharex and sharey were not being passed to grouped_hist ,bug in fy5253 where datetime addition and subtraction incremented incorrectly for dates on the year-end but not normalized to midnight ,"categorical.fillna now validates its value and method keyword arguments. it now raises when both or none are specified, matching the behavior of series.fillna ",improved performance of pd.factorize by releasing the gil with object dtype when inferred as strings ,note that errors will now be raised when conflicting or potentially ambiguous arguments are provided.,bug in dataframe.astype where column metadata is lost when converting to categorical or a dictionary of dtypes ,bug in convert_objects where converted values might not be returned if all null and coerce ,dataframe.plot and series.plot keywords are now have consistent orders ,options.get_forward_data now has optional kwargs near and above_below. this allows the user to specify if they would like to only return forward looking data for options near the current stock price. this just obtains the data from options.get_near_stock_price instead of options.get_xxx_data .,"the default value of regex for series.str.replace will change from true to false in a future release. in addition, single character regular expressions will not be treated as literal strings when regex=true is set ",the outtype argument to pd.dataframe.to_dict has been deprecated in favor of orient. ,"bugs in to_msgpack and read_msgpack introduced in 0.17.0 and fixed in 0.18.0, caused files packed in python 2 unreadable by python 3 . the following table describes the backward and forward compat of msgpacks.","deprecated iterkv, which will be removed in a future release . ",bug in dataframe construction where sets would be duplicated rather than raising ,"previously this would have yielded a column of datetime64 dtype, but without timezone info.","if series.sort is called on a column of a dataframe, an exception will now be raised. before it was possible to accidentally mutate a dataframe s column by doing df.sort instead of the side-effect free method df.order ",added option to disable pandas-style tick locators and formatters using series.plot or pandas.plot_params = true ,"previously if .to_datetime encountered mixed integers/floats and strings, but no datetimes with errors='coerce' it would convert all to nat.","bug in pandas.core.groupby.groupby.cumsum, pandas.core.groupby.groupby.cumprod, pandas.core.groupby.groupby.cummin and pandas.core.groupby.groupby.cummax with categorical column having absent categories, would return incorrect result or segfault ",bug in offsets.generate_range where start and end have finer precision than offset ,"pandas has until now mostly defined string representations in a pandas objects __str__/__unicode__/__bytes__ methods, and called __str__ from the __repr__ method, if a specific __repr__ method is not found. this is not needed for python3. in pandas 0.25, the string representations of pandas objects are now generally defined in __repr__, and calls to __str__ in general now pass the call on to the __repr__, if a specific __str__ method doesn t exist, as is standard for python. this change is backward compatible for direct usage of pandas, but if you subclass pandas objects and give your subclasses specific __str__/__repr__ methods, you may have to adjust your __str__/__repr__ methods .",fixed bug where inplace setting of levels or labels on multiindex would not clear cached values property and therefore return wrong values. ,twinned axes were losing their tick labels which should only happen to all but the last row or column of externally shared axes ,bug in transform when groups are equal in number and dtype to the input index ,"bug in unique of series with category dtype, which returned all categories regardless whether they were used or not . previous behaviour was to return all categories:",frozenndarray.searchsorted has deprecated the v parameter in favor of value ,bug in dataframe.nsmallest and dataframe.nlargest where identical values resulted in duplicated rows ,bug in rangeindex can be created without no arguments rather than raises typeerror ,bug in categoricalindex reindexing in which specified indices containing duplicates were not being respected ,"dataframe.plot and series.plot now supports area plot with specifying kind='area' , see the docs",see the docs. joining multiindex dataframes on both the left and right is not yet supported atm.,pd.read_csv and pd.to_datetime learned a new infer_datetime_format keyword which greatly improves parsing perf in many cases. thanks to @lexual for suggesting and @danbirken for rapidly implementing. ,add encode and decode for unicode handling to vectorized string processing methods in series.str ,read_csv now treats 'null' and 'n/a' strings as missing values by default ,series.rank and dataframe.rank now accept method='dense' for ranks without gaps ,bug in groupby for integer and datetime64 columns when applying an aggregator that caused the value to be changed when the number was sufficiently large ,bug in dataframe.groupby where a valueerror would be raised when grouping by a categorical column with read-only categories and sort=false ,added ability to replace an existing table and schema when calling the pandas.io.gbq.to_gbq function via the if_exists argument. see the docs for more details .,bug when doing label based indexing with integers not found in the index for non-unique but monotonic indexes .,"ewmstd, ewmvol, ewmvar, ewmcov, and ewmcorr now have an optional adjust argument, just like ewma does, affecting how the weights are calculated. the default value of adjust is true, which is backwards-compatible. see exponentially weighted moment functions for details. ",bug in weekofmonth and week where addition and subtraction did not roll correctly ,periodindex.fillna with period has different freq now coerces to object dtype ,more helpful error message with an invalid .transform with user defined input ,bug in constructing index with an iterator or generator ,"the .groupby.agg, .rolling.agg, and .resample.agg syntax can accept a variable of inputs, including scalars, list, and a dict of column names to scalars or lists. this provides a useful syntax for constructing multiple aggregations.","in series.where with categorical data, providing an other that is not present in the categories is deprecated. convert the categorical to a different dtype or add the other to the categories first .","high performance and flexible resample method for converting from high-to-low and low-to-high frequency. supports interpolation, user-defined aggregation functions, and control over how the intervals and result labeling are defined. a suite of high performance cython/c-based resampling functions have also been implemented.",datetimeindex and series with datetime64 or datetime64tz dtypes now support std ,numexpr version 2.4.4 will now show a warning and not be used as a computation back-end for pandas because of some buggy behavior. this does not affect other versions . ,allow slicing with float-like values on an integer index for .ix. previously this was only enabled for .loc:,qualify memory usage in dataframe.info by adding + if it is a lower bound ,"0.13.1 fixes a bug that was caused by a combination of having numpy < 1.8, and doing chained assignment on a string-like array. please review the docs, chained indexing can have unexpected results and should generally be avoided.",dataframe.info now ends its output with a newline character ,"one place that deserves special mention is in read_csv. previously, with dtype={'col': 'category'}, the returned values and categories would always be strings.","the logic flows from inside out, and function names are separated from their keyword arguments. this can be rewritten as",fixed regression in to_clipboard that defaulted to copying dataframes with space delimited instead of tab delimited ,removed the previously deprecated raise_on_error keyword argument in dataframe.where and dataframe.mask ,"this is a minor bug-fix release in the 0.20.x series and includes some small regression fixes, bug fixes and performance improvements. we recommend that all users upgrade to this version.",this is especially useful after reading in data using readers such as read_csv and read_excel. see here for a description.,"bug in read_json for orient='table' and float index, as it infers index dtype by default, which is not applicable because index dtype is already defined in the json schema ",bug in take with duplicate columns that were not consolidated ,bug in pd.read_csv in which the nrows parameter was not being respected for large input when using the c engine for parsing ,bug in adding and subtracting periodindex with periodindex raise typeerror ,made sure different locales are tested on travis-ci . also adds a couple of utilities for getting locales and setting locales with a context manager.,"merge now directly allows merge between objects of type dataframe and named series, without the need to convert the series object into a dataframe beforehand ",dataframe.to_stata and statawriter will accept keyword arguments time_stamp and data_label which allow the time stamp and dataset label to be set when creating a file. ,"the default for to_datetime will now be to raise when presented with unparsable formats, previously this would return the original input. also, date parse functions now return consistent results. see here","pd.read_csv now supports opening zip files that contains a single csv, via extension inference or explicit compression='zip' ",date_range now accepts y in addition to a as an alias for end of year. ,note that plots created by dataframe.plot and series.plot do register the converters automatically. the only behavior change is when plotting a date-like object via matplotlib.pyplot.plot or matplotlib.axes.plot. see custom formatters for timeseries plots for more.,bug in series replace with timestamp dict ,"bug in series update where the parent frame is not updating its cache based on changes or types , fillna ",unclear error message in csv parsing when passing dtype and names and the parsed data is a different data type ,"0.18.0 is backward-compatible for reading files packed by older versions, except for files packed with 0.17 in python 2, in which case only they can only be unpacked in python 2.","when given a boolean mask key and a series of new values, series __setitem__ will now align the incoming values with the original series ","query method has been added that allows you to select elements of a dataframe using a natural query syntax nearly identical to python syntax. for example,",removed the previously deprecated keyword skip_footer from read_excel; use skipfooter instead ,will be removed in a future version,"remove offset and timerule keywords from series.tshift/shift, in favor of freq ","timestamp is now equivalent to timestamp.now in that it returns the local time rather than utc. also, timestamp is now equivalent to timestamp.today and both have tz as a possible argument. ",duplicate column names are now supported in read_csv whether they are in the file or passed in as the names parameter ,"bug in pd.read_csv, pd.read_table, pd.read_fwf, pd.read_stata and pd.read_sas where files were opened by parsers but not closed if both chunksize and iterator were none. ","removed the previously deprecated tupleize_cols keyword argument in read_html, read_csv, and dataframe.to_csv ","when passing in an ax to df.plot, the sharex kwarg will now default to false. the result is that the visibility of xlabels and xticklabels will not anymore be changed. you have to do that by yourself for the right axes in your figure or set sharex=true explicitly . if pandas creates the subplots itself , then the default is still sharex=true and the visibility changes are applied.","set_option now validates that the plot backend provided to 'plotting.backend' implements the backend when the option is set, rather than when a plot is created ",it is also possible to obtain an iterator and read an xport file incrementally.,the infer_dst argument in tz_localize will be deprecated in favor of ambiguous to allow for more flexibility in dealing with dst transitions. replace infer_dst=true with ambiguous='infer' for the same behavior . see the docs for more details.,bug in func crosstab when using multiple columns with margins=true and normalize=true ,"periodindex now emits a keyerror when a malformed string is looked up, which is consistent with the behavior of datetimeindex ","fixed issue where individual names, levels and labels could be set on multiindex without validation ","pd.read_html can now parse html strings, files or urls and return dataframes, courtesy of @cpcloud. . it works with a single parser backend: beautifulsoup4 + html5lib see the docs",series.from_array and sparseseries.from_array are deprecated. use the normal constructor series and sparseseries instead .,infinity and negative infinity are no longer treated as na by isnull and notnull. that they ever were was a relic of early pandas. this behavior can be re-enabled globally by the mode.use_inf_as_null option:,requesting all columns is possible with the shorthand all ,bug in date_range where using dates with millisecond resolution or higher could return incorrect values or the wrong number of values in the index ,significantly improve the performance of parsing iso8601-format date strings with datetimeindex or to_datetime ,indexing with integers with a multiindex that has an integer-dtype first level incorrectly failed to raise keyerror when one or more of those integer keys is not present in the first level of the index ,fixed regression in the repr of an object-dtype index with bools and missing values ,"this is a major release from 0.15.2 and includes a small number of api changes, several new features, enhancements, and performance improvements along with a large number of bug fixes. we recommend that all users upgrade to this version.",strings passed to dataframe.sort_values as the by parameter may now refer to either column names or index level names. this enables sorting dataframe instances by a combination of index levels and columns without resetting indexes. see the sorting by indexes and values documentation section. ,bug in read_csv in which unicode column names were not being properly recognized with python 2.x ,bug in groupby.transform when axis=1 is specified with a non-monotonic ordered index ,".iloc is strictly integer position based , will raise indexerror when the requested indices are out of bounds. allowed inputs are:",improved performance of dataframe.set_index with columns consisting of period objects ,the convert_dummies method has been deprecated in favor of get_dummies ,"applymap on a dataframe with a non-unique index now works , and fix ","dataframe.dot will not do data alignment, and also work with series ",improved performance of iloc indexing with a list or array .,bug in merge where merging with equivalent categorical dtypes was raising an error ,"as part of the new api for window functions and resampling, aggregation functions have been clarified, raising more informative error messages on invalid aggregations. . a full set of examples are presented in groupby.",bug in setitem with a duplicate index and an alignable rhs ,"bug in resampling when using a timedeltaindex and .asfreq, would previously not include the final fencepost ",empty dataframe columns are now created as object dtype. this will prevent a class of typeerrors that was occurring in code where the dtype of a column would depend on the presence of data or not ,add squeeze keyword to groupby to allow reduction from dataframe -> series if groups are unique. this is a regression from 0.10.1. we are reverting back to the prior behavior. this means groupby will return the same shaped objects whether the groups are unique or not. revert this issue with .,improved performance of membership checks in categorical and categoricalindex . categoricalindex.contains is likewise much faster ,fixed bug in pandas.read_excel sometimes producing a dataframe with trailing rows of np.nan when the engine openpyxl is used ,bug in pickles contains dateoffset may raise attributeerror when normalize attribute is referred internally ,"in 0.13.0 series has internally been refactored to no longer sub-class ndarray but instead subclass ndframe, similar to the rest of the pandas containers. this should be a transparent change with only very limited api implications. see internal refactoring",the string format is as the python standard library and details can be found here,using rolling.var instead of rolling.std avoids numerical issues for rolling.corr when rolling.var is still within floating point precision while rolling.std is not ,"because of the default align value changes, coordinates of bar plots are now located on integer values . this is intended to make bar plot be located on the same coordinates as line plot. however, bar plot may differs unexpectedly when you manually adjust the bar location or drawing area, such as using set_xlim, set_ylim, etc. in this cases, please modify your script to meet with new coordinates.",removed the previously deprecated behavior of arithmetic operations with datetime.date objects ,passing list-likes to .loc or with any missing label will raise,"if parse_dates is enabled and this flag is set, pandas will attempt to infer the format of the datetime strings in the columns, and if it can be inferred, switch to a faster method of parsing them. in some cases this can increase the parsing speed by ~5-10x.",pandas.tseries.holiday.holiday now supports a list of offsets in python3 ,bug in categorical.to_numpy and np.array with tz-aware datetime64 categories incorrectly dropping the time zone information instead of casting to object dtype ,bug in index.union and index.intersection where name of the index of the result was not computed correctly for certain cases ,"the existing capability to interface with s3 and gcs will be unaffected by this change, as fsspec will still bring in the same packages as before.","pandas has gained new frequency offsets, semimonthend and semimonthbegin . these provide date offsets anchored to the 15th and end of month, and 15th and 1st of month respectively. ",bug in read_csv in which a column specified with categoricaldtype of boolean categories was not being correctly coerced from string values to booleans ,changed the default inplace argument in dataframe.set_index and series.set_axis from none to false ,for dataframe the following indexing functions are deprecated .,bug in datetimeindex.get_slice_bound where datetime.date objects were not accepted or naive timestamp with a tz-aware datetimeindex ,allow conversion of values with dtype datetime64 or timedelta64 to strings using astype ,"all division with ndframe objects is now truedivision, regardless of the future import. this means that operating on pandas objects will by default use floating point division, and return a floating point dtype. you can use // and floordiv to do integer division.","bug in expanding_cov, expanding_corr, rolling_cov, rolling_cor, ewmcov, and ewmcorr returning results with columns sorted by name and producing an error for non-unique columns; now handles non-unique columns and returns columns in original order ",fixed bug preventing cut from working with np.inf levels without explicitly passing labels ,bug in dataframe.loc returned requested key plus missing values when loc was applied to single level from a multiindex ,added skip_footer and converters options to read_csv and read_table,cut and qcut now returns a datetimeindex or timedeltaindex bins when the input is datetime or timedelta dtype respectively and retbins=true ,"sparse data structures gained enhanced support of int and bool dtypes, see here","this is a minor bug-fix release from 0.19.0 and includes some small regression fixes, bug fixes and performance improvements. we recommend that all users upgrade to this version.",.to_latex and .to_html gain a decimal parameter like .to_csv; the default is '.' ,all the above applies to a datetimeindex with tz-aware values as well.,these are the changes in pandas 1.0.3. see release notes for a full changelog including other versions of pandas.,"some users may unknowingly have an incomplete python installation lacking the lzma module from the standard library. in this case, import pandas failed due to an importerror . pandas will now warn, rather than raising an importerror if the lzma module is not present. any subsequent attempt to use lzma methods will raise a runtimeerror. a possible fix for the lack of the lzma module is to ensure you have the necessary libraries and then re-install python. for example, on macos installing python with pyenv may lead to an incomplete python installation due to unmet system dependencies at compilation time . compilation will succeed, but python might fail at run time. the issue can be solved by installing the necessary dependencies and then re-installing python.",float64index is now backed by a float64 dtype ndarray instead of an object dtype array .,describe now includes a datetime_is_numeric keyword to control how datetime columns are summarized ,both will now raise a keyerror. the rule is that at least 1 indexer must be found when using a list-like and .loc ,"fixed pickling of pandas.na. previously a new object was returned, which broke computations relying on na being a singleton ",bug where nan was returned instead of 0 by series.pct_change and dataframe.pct_change when fill_method is not none ,bug in timestamp arithmetic when adding or subtracting an np.ndarray with timedelta64 dtype ,bug in series.str.cat with an index which was filtered as to not include the first item ,"a tuple passed to datafame.sort_index will be interpreted as the levels of the index, rather than requiring a list of tuple ",reindex called with no arguments will now return a copy of the input object,min and max reductions on datetime64 and timedelta64 dtyped series now result in nat and not nan .,read_csv has deprecated the tupleize_cols argument. column tuples will always be converted to a multiindex ,"furthermore, where now aligns the input boolean condition , such that partial selection with setting is possible. this is analogous to partial setting via .ix ",bug in read_csv in which unnecessary warnings were being raised when the dialect s values conflicted with the default arguments ,"all non-index ndframes , now support the entire set of arithmetic operators and arithmetic flex methods . sparsepanel does not support pow or mod with non-scalars. ","bug in read_csv in which incorrect error messages were being raised when skipfooter was passed in along with nrows, iterator, or chunksize ",these are the changes in pandas 1.2.1. see release notes for a full changelog including other versions of pandas.,"bug where labels did not appear properly in the legend of dataframe.plot, passing label= arguments works, and series indices are no longer mutated. ",a timeseries/index localized to utc when inserted into a series/dataframe will preserve the utc timezone and inserted as object dtype rather than being converted to a naive datetime64 .,dataframe.asof will return a null filled series instead the scalar nan if a match is not found ,"read_html copies cell data across colspan and rowspan, and it treats all-th table rows as headers if header kwarg is not given and there is no thead ","io.gbq.read_gbq and io.gbq.to_gbq were refactored to remove the dependency on the google bq.py command line client. this submodule now uses httplib2 and the google apiclient and oauth2client api client libraries which should be more stable and, therefore, reliable than bq.py. see the docs. .",bug in cartesian_product and multiindex.from_product which may raise with empty input arrays ,bug in dataframe.replace when passing a nested dict that contained keys not in the values to be replaced ,bug in dataframegroupby.resample using .agg with sum produced different result than just calling .sum ,"performance boost for to_datetime conversions with a passed format=, and the exact=false ",add log x and y scaling options to dataframe.plot and series.plot,bug in pd.read_csv in which missing data was being improperly handled with usecols ,dataframe.to_records now accepts index_dtypes and column_dtypes parameters to allow different data types in stored column and index records ,raise a helpful exception when an unsupported weighted window function is used as an argument of pandas.core.window.window.aggregate ,"note that the unintentional conversion of ordered discussed above did not arise in previous versions due to separate bugs that prevented astype from doing any type of category to category conversion . these bugs have been fixed in this release, and motivated changing the default value of ordered.",bug where valueerror is wrongly raised when calling count method of a seriesgroupby when the grouping variable only contains nans and numpy version < 1.13 .,appending on a store would fail if the table was not first created via put,improved the warnings for the deprecated methods series.real and series.imag ,usecols parameter in pd.read_csv is now respected even when the lines of a csv file are not even ,fixed regression where dataframe.agg would fail with typeerror when passed positional arguments to be passed on to the aggregation function .,inconsistency in series floor-division and divmod filling positive//zero with nan instead of inf ,"a function union_categorical has been added for combining categoricals, see here","this also provides compatibility with numpy 1.15, which now dispatches to dataframe.all. with numpy 1.15 and pandas 0.23.1 or earlier, numpy.all will no longer reduce over every axis:","dataframe.as_blocks is deprecated, as this is exposing the internal implementation ",to replace all occurrences of the string '.' with nan.,packed with,allow equality comparisons of series with a categorical dtype and object dtype; previously these would raise typeerror ,bug in merge_ordered returned wrong join result when length of left_by or right_by equals to the rows of left or right ,this is equivalent to,forward incompatible changes in msgpack writing format were made over 0.17.0 and 0.18.0; older versions of pandas cannot read files packed by newer versions ,"this is a minor release from 0.14.0 and includes a small number of api changes, several new features, enhancements, and performance improvements along with a large number of bug fixes. we recommend that all users upgrade to this version.","tz_localize now accepts the ambiguous keyword which allows for passing an array of bools indicating whether the date belongs in dst or not, nat for setting transition times to nat, infer for inferring dst/non-dst, and raise for an ambiguoustimeerror to be raised. see the docs for more details ",bug in read_csv that caused the c engine on python 3.6+ on windows to improperly read csv filenames with accented or special characters ,sparsearray with bool dtype now supports logical operators ,bug in .resample with a periodindex not retaining its type or name with an empty dataframe appropriately when empty ,bug in dataframe.query/eval where local string variables with the @ sign were being treated as temporaries attempting to be deleted .,"starting in 0.11.0, construction of dataframe/series will use default dtypes of int64 and float64, regardless of platform. this is not an apparent change from earlier versions of pandas. if you specify dtypes, they will be respected, however ",series.unique with datetime and timezone now returns return array of timestamp with timezone .,dataframe.nlargest and dataframe.nsmallest now returns the correct n values when keep != all also when tied on the first columns ,bug in the alignment of range objects and other list-likes with dataframe leading to operations being performed row-wise instead of column-wise ,bug in pivot_table performed with nameless index and columns raises keyerror ,bug in installation where html_encoding/*.html wasn t installed and therefore some tests were not running correctly .,the following error & warning messages are removed from pandas.core.common :,"methods with the inplace option now all return none instead of the calling object. e.g. code written like df = df.fillna may stop working. to fix, simply delete the unnecessary variable assignment.",bug in read_csv with float_precision='round_trip' did not handle decimal and thousands parameters ,bug in melt where supplying mixed strings and numeric values for id_vars or value_vars would incorrectly raise a valueerror ,the methods dataframe.update and panel.update have deprecated the raise_conflict=false|true keyword in favor of errors='ignore'|'raise' ,bug in both dataframe.first_valid_index and series.first_valid_index raised for a row index having duplicate values ,raise a typeerror on inplace-setting with a .where and a non np.nan value as this is inconsistent with a set-item expression like df = none ,"removed the previously deprecated keyword box from to_datetime and to_timedelta; in addition these now always returns datetimeindex, timedeltaindex, index, series, or dataframe ","improve performance of dataframe construction with certain offsets, by removing faulty caching , ","if a dataframe is sliced with a dataframe based boolean condition , then a dataframe the same size as the original is returned, with elements that do not meet the boolean condition as nan. this is accomplished via the new method dataframe.where. in addition, where takes an optional other argument for replacement.",bug in multiindex.drop dropped nan values when non existing key was given as input ,if needed you can adjust the bins with the argument offset that would be added to the default origin.,bug in c parser with delim_whitespace=true and \r-delimited lines,msgpack submodule has been updated to 0.4.6 with backward compatibility ,bug in seriesgroupby.agg where any column name was accepted in the named aggregation of seriesgroupby previously. the behaviour now allows only str and callables else would raise typeerror. ,notice that the series is now ordered by insertion order. this new behavior is used for all relevant pandas types .,"dataframe.boxplot has a new keyword argument, return_type. it accepts 'dict', 'axes', or 'both', in which case a namedtuple with the matplotlib axes and a dict of matplotlib lines is returned.",bug in .skew and .kurt due to roundoff error for highly similar values ,column names are now given precedence over locals,bug in dataframe with datetime64 dtype addition and subtraction with dateoffset objects returning an object dtype instead of datetime64 dtype ,"the time values in period and periodindex objects are now set to 23:59:59.999999999 when calling series.dt.end_time, period.end_time, periodindex.end_time, period.to_timestamp with how='end', or periodindex.to_timestamp with how='end' ","series.str.replace now takes an optional regex keyword which, when set to false, uses literal string replacement rather than regex replacement ",this is a minor bug-fix release in the 0.23.x series and includes some small regression fixes and bug fixes. we recommend that all users upgrade to this version.,this is a minor bug-fix release in the 0.23.x series and includes some small regression fixes and bug fixes. we recommend that all users upgrade to this version.,this is a minor bug-fix release in the 0.23.x series and includes some small regression fixes and bug fixes. we recommend that all users upgrade to this version.,dataframe.to_dict with orient='index' no longer casts int columns to float for a dataframe with only int and float columns ,"much work has been taking place on improving the docs, and a new contributing section has been added.",parse missing values using read_json with dtype=false to nan instead of none ,implement dataframe.join with vector on argument ,"if you want to perform calculations based on today s date, use timestamp.now and pandas.tseries.offsets.",sum/prod of all-nan or empty series/dataframes is now consistently nan,sum/prod of all-nan or empty series/dataframes is now consistently nan,"all offsets supports the normalize keyword to specify whether offsets.apply, rollforward and rollback resets the time or not :",bug in multiindex.sort_index which was not guaranteed to sort correctly with level=1; this was also causing data misalignment in particular dataframe.stack operations ,bug in series.at when used with a multiindex would raise an exception on valid inputs ,fillna is now supported for timedeltas,bug in series and dataframe indexing with a time key on a datetimeindex with nat entries ,bug where datareader s would fail if one of the symbols passed was invalid. now returns data for valid symbols and np.nan for invalid ,"added nrows, chunksize, and iterator arguments to read_csv and read_table. the last two return a new textparser class capable of lazily iterating through chunks of a flat file ","if an index_col is not specified , then any names on the columns index will be lost.","while propagating na in comparisons may seem like the right behavior to some users , the evaluation was made that propagating na everywhere, including in numerical arrays, would cause a large amount of problems for users. thus, a practicality beats purity approach was taken. this issue may be revisited at some point in the future.",these are the changes in pandas 0.25.0. see release notes for a full changelog including other versions of pandas.,dataframe.astype has deprecated the raise_on_error parameter in favor of errors ,"timedeltaindex.searchsorted, datetimeindex.searchsorted, and periodindex.searchsorted have deprecated the key parameter in favor of value ",if interpreting precision as significant figures this did work for scientific notation but that same interpretation did not work for values with standard formatting. it was also out of step with how numpy handles formatting.,valueerror: only one regex group is supported with index,bug in pd.read_csv with engine='python' in which trailing nan values were not being parsed ,"can call cummin and cummax on series and dataframe to get cumulative minimum and maximum, respectively ",axis parameter of dataframe.quantile now accepts also index and column. ,pandas.tseries.offsets larger than the day offset can now be used with a series for addition/subtraction . see the docs for more details.,"moving and expanding window functions are now methods on series and dataframe, similar to .groupby, see here.","added ability to export categorical data to/from hdf5 . queries work the same as if it was an object array. however, the category dtyped data is stored in a more efficient manner. see here for an example and caveats w.r.t. prior versions of pandas.","bug in the css classes assigned to dataframe.style for index names. previously they were assigned ""col_heading level<n> col<c>"" where n was the number of levels + 1. now they are assigned ""index_name level<n>"", where n is the correct level for that multiindex.",bug in dataframe.clip in which column types are not preserved and casted to float ,bug in dataframe.plot and series.plot was overwriting matplotlib s shared y axes behavior when no sharey parameter was passed ,"previously, series.str.cat did not in contrast to most of pandas align series on their index before concatenation . the method has now gained a keyword join to control the manner of alignment, see examples below and here.",a new public pandas.plotting module has been added that holds plotting functionality that was previously in either pandas.tools.plotting or in the top-level namespace. see the deprecations sections for more details.,"when plotting with a periodindex, the matplotlib internal axes will now be arrays of period rather than a periodindex ","for pandas 1.2.1, we restored the previous behaviour to avoid a breaking change, but the above example of np.add with non-aligned inputs will now to raise a warning, and a future pandas 2.0 release will start aligning the inputs first . calling a numpy ufunc on series objects ) already aligns and continues to do so.",dataframe describe on an empty categorical / object column will return top and freq,this is equivalent to the following,bug in pythonparser where str and bytes were being mixed when dealing with the decimal field ,"the methods ffill, bfill, pad and backfill of dataframegroupby previously included the group labels in the return value, which was inconsistent with other groupby transforms. now only the filled values are returned. ",bug in read_csv with buffer overflows with certain malformed input files ,"in previous versions, the default value for the ordered parameter was false. this could potentially lead to the ordered parameter unintentionally being changed from true to false when users attempt to update categories if ordered is not explicitly specified, as it would silently default to false. the new behavior for ordered=none is to retain the existing value of ordered.","dropping support for pytables less than version 3.0.0, and numexpr less than version 2.1 ",read_pickle and read_msgpack are only guaranteed backwards compatible back to pandas version 0.20.3 ,or by using series.to_numpy,improved performance of read_csv by faster concatenating date columns without extra conversion to string for integer/float zero and float nan; by faster checking the string for the possibility of being a date ,"in 0.23.x, pandas would raise a valueerror on a merge of a numeric column and an object dtyped column . we have re-enabled the ability to merge object and other dtypes; pandas will still raise on a merge between a numeric and an object dtyped column that is composed only of strings ",bug in dataframe.to_string and dataframe.to_latex that would lead to incorrect output when the header keyword is used ,dataframe has new where and mask methods to select values according to a given boolean mask ,the old behavior can be retained with by localizing directly to the final timezone:,"bug in dataframe.agg, dataframe.transform and dataframe.apply where, when supplied with a list of functions and axis=1 ), a typeerror was wrongly raised. for all three methods such calculation are now done correctly. .",bug in pandas.core.window.rolling.count and pandas.core.window.expanding.count was previously ignoring the axis keyword ,see parsing datetime strings with timezone offsets for more.,subtracting datetimeindex/periodindex from another datetimeindex/periodindex is being deprecated as a set-operation. this will be changed to an actual numeric subtraction yielding a timedeltaindex in a future version. .difference should be used for the differencing set operation. ,these are the changes in pandas 1.1.5. see release notes for a full changelog including other versions of pandas.,"numeric dtypes will propagate and can coexist in dataframes. if a dtype is passed (either directly via the dtype keyword, a passed ndarray, or a passed series, then it will be preserved in dataframe operations. furthermore, different numeric dtypes will not be combined. the following example will give you a taste.","the behavior of datetimeindex when passed integer data and a timezone is changing in a future version of pandas. previously, these were interpreted as wall times in the desired timezone. in the future, these will be interpreted as wall times in utc, which are then converted to the desired timezone .",bug in bingrouper.group_info where returned values are not compatible with base class ,pd.merge will now allow duplicate column names if they are not merged upon .,inconsistent behavior in .where with datetimelikes which would raise rather than coerce to object ,read_csv and read_table will throw unicodeerror and not coredump on badly encoded strings ,"an analogous change has been made to multiindex.from_product. as a consequence, groupby and set_index also preserve categorical dtypes in indexes",new api functions for working with pandas options :,fixed regression in dataframe.all and dataframe.any where bool_only=true was ignored ,fixed regression in setting with dataframe.loc raising valueerror when dataframe has unsorted multiindex columns and indexer is a scalar ,bug in the xlsxwriter and xlwtwriter implementations that resulted in datetime columns being formatted without the time were being passed to plotting method,bug in dataframe.plot with duplicated columns outputs incorrect result ,deprecate groupby.agg with a dictionary when renaming,deprecate groupby.agg with a dictionary when renaming,read_excel can now read milliseconds in excel dates and times with xlrd >= 0.9.3. ,.searchsorted for index and timedeltaindex now accept a sorter argument to maintain compatibility with numpy s searchsorted function ,.searchsorted for index and timedeltaindex now accept a sorter argument to maintain compatibility with numpy s searchsorted function ,bug in dataframe.to_csv in which float values were being quoted even though quotations were specified for non-numeric values only ,added test to assert roundtripping to parquet with dataframe.to_parquet or read_parquet will preserve categorical dtypes for string types ,these are the changes in pandas 1.1.0. see release notes for a full changelog including other versions of pandas.,improved performance of datetimeindex.tz_localize and various datetimeindex attributes with dateutil utc timezone ,the groupby methods transform and filter can be used on series and dataframes that have repeated indices. ,selecting from a series or dataframe using or loc now only returns exact matches for interval queries.,added new option plotting.backend to be able to select a plotting backend different than the existing matplotlib one. use pandas.set_option where <backend-module is a library implementing the pandas plotting api ,these are the changes in pandas 0.25.3. see release notes for a full changelog including other versions of pandas.,fixed regression in dataframe.shift with axis=1 and heterogeneous dtypes ,calling on an index with a regex with more than one capture group raises valueerror if expand=false.,bug in the display of .info where a qualifier would always be displayed with a multiindex that contains only non-strings ,you should initialize a multiindex instance using a parameter named codes rather than labels.,there are no announced changes in 0.13 or prior that are taking effect as of 0.13.1,the documentation has had references to versions < v0.17 removed and cleaned up ,rangeindex.union now supports the sort argument. if sort=false an unsorted int64index is always returned. sort=none is the default and returns a monotonically increasing rangeindex if possible or a sorted int64index if not ,fixed pandas.testing.assert_series_equal to correctly raise if the left argument is a different subclass with check_series_type=true .,json normalize with max_level param support,bug in interval where a timedelta could not be added or subtracted from a timestamp interval ,".values is changed to return an array of period objects, rather than an array of integers .","we have introduced a new method, dataframe.sort_values, which is the merger of dataframe.sort, series.sort, and series.order, to handle sorting of values.",bug in dataframegroupby.rolling returned wrong values with time aware window containing nan. raises valueerror because windows are not monotonic now ,change in default floating precision for read_csv and read_table,"bug in dataframe when creating a new column from an ndarray of timestamp objects with timezones creating an object-dtype column, rather than datetime with timezone ",an unsupportedfunctioncall error is now raised if numpy ufuncs like np.mean are called on groupby or resample objects .,"can pass a list of functions to aggregate with groupby on a dataframe, yielding an aggregated result with hierarchical columns ","the default behavior of binary operations between a dataframe and a series has always been to align on the dataframe s columns and broadcast down the rows, except in the special case that the dataframe contains time series. since there are now method for each binary operator enabling you to specify how you want to broadcast, we are phasing out this special case . here s what i m talking about:",inserting missing values into indexes will work for all types of indexes and automatically insert the correct type of missing value regardless of the type passed in ,bug in multiindex.set_labels which would cause casting of the new labels if the level argument is not 0 or a list like ,"notice in the example above that the converted categorical has retained ordered=true. had the default value for ordered remained as false, the converted categorical would have become unordered, despite ordered=false never being explicitly specified. to change the value of ordered, explicitly pass it to the new dtype, e.g. categoricaldtype, ordered=false).",the product of an empty or all-na series is now 1,"these changes allow pandas to handle sparse data with more dtypes, and for work to make a smoother experience with data handling.",bug in dataframe instantiating with a dict of iterators or generators )})) raised an error .,"bug in dataframe.resample which silently ignored unsupported options for label, closed and convention ",a cparsererror is now raised instead of a generic exception in read_csv when the c engine cannot parse a column ,improved exception message when calling .iloc or .loc with a boolean indexer with different length .,removed the previously deprecated cdate_range ,bug in seriesgroupby.aggregate was resulting in aggregations being overwritten when they shared the same name ,"previously, sparse data were float64 dtype by default, even if all inputs were of int or bool dtype. you had to specify dtype explicitly to create sparse data with int64 dtype. also, fill_value had to be specified explicitly because the default was np.nan which doesn t appear in int64 or bool data.",dataframe.interpolate has gained a limit_area parameter to allow further control of which nan s are replaced. use limit_area='inside' to fill only nans surrounded by valid values or use limit_area='outside' to fill only nan s outside the existing valid values while preserving those inside. see the full documentation here.,ensured that result group order is correct when grouping on an ordered categorical and specifying observed=true ,bug in scalar in index if scalar is a float while the index is of integer dtype ,series.clip and dataframe.clip now treat na values for upper and lower arguments as none instead of raising valueerror .,fix an issue with cacheableoffset not properly being used by many dateoffset; this prevented the dateoffset from being cached ,dataframe.resample and series.resample with a periodindex will now respect the base argument in the same fashion as with a datetimeindex. ,removed the previously deprecated parse_cols keyword in read_excel ,fixed regression in dataframe.loc and dataframe.iloc when selecting a row containing a single datetime64 or timedelta64 column ,adding datetimeindex/periodindex to another datetimeindex/periodindex is being deprecated as a set-operation. this will be changed to a typeerror in a future version. .union should be used for the union set operation. ,"nat s methods now either raise valueerror, or return np.nan or nat ",categorical.searchsorted and series.searchsorted have renamed the v argument to value ,passing an array with 2 or more dimensions to the series constructor now raises the more specific valueerror rather than a bare exception ,"bug in datetimeindex and periodindex.value_counts resets name from its result, but retains in result s index. ",dataframe.unstack will now default to filling with np.nan for object columns. ,bug in datetimeindex and period subtraction raises valueerror or attributeerror rather than typeerror ,pivot_table can now accept grouper by index and columns keywords ,using an unsupported version of beautiful soup 4 will now raise an importerror instead of a valueerror ,pd.read_csv now supports the error_bad_lines and warn_bad_lines arguments for the python parser ,"the result of sparseseries.unstack is now a dataframe with sparse values, rather than a sparsedataframe .",levels names of a multiindex are now required to be unique: trying to create a multiindex with repeated names will raise a valueerror ,bug in core.groupby.seriesgroupby.nunique where nat values were interfering with the count of unique values ,bug in dataframe.plot.scatter and dataframe.plot.hexbin caused x-axis label and ticklabels to disappear when colorbar was on in ipython inline backend ,bug in dataframe.loc and series.loc where keyerror was not raised for a multiindex when the key was less than or equal to the number of levels in the multiindex .,"some background: in pandas 0.21, we fixed a long-standing inconsistency in the return value of all-na series depending on whether or not bottleneck was installed. see sum/prod of all-nan or empty series/dataframes is now consistently nan. at the same time, we changed the sum and prod of an empty series to also be nan.","dataframe.convert_objects has been deprecated in favor of type-specific functions pd.to_datetime, pd.to_timestamp and pd.to_numeric .",bug in series.mask and dataframe.mask with list conditionals ,bug in pandas.core.groupby.groupby.first and pandas.core.groupby.groupby.last where timezone information would be dropped ,these are the changes in pandas 1.2.3. see release notes for a full changelog including other versions of pandas.,"pandas implements some matplotlib converters for nicely formatting the axis labels on plots with datetime or period values. prior to pandas 0.21.0, these were implicitly registered with matplotlib, as a side effect of import pandas.","upsampling operations take you from a lower frequency to a higher frequency. these are now performed with the resampler objects with backfill, ffill, fillna and asfreq methods.",bug on inplace operation of a series that was adding a column to the dataframe from where it was originally dropped from ,"slicing with .loc where the start and/or stop bound is not found in the index is now allowed; this previously would raise a keyerror. this makes the behavior the same as .ix in this case. this change is only for slicing, not when indexing with a single label.",dataframe.agg and series.agg now accept named aggregation for renaming the output columns/indexes. ,can store objects indexed by tuples and floats in hdfstore ,series.rename_axis and dataframe.rename_axis with inplace=true now return none while renaming the axis inplace. ,"a class of bugs were introduced in pandas 0.21 with categoricaldtype that affects the correctness of operations like merge, concat, and indexing when comparing multiple unordered categorical arrays that have the same categories, but in a different order. we highly recommend upgrading or manually aligning your categories before doing these operations.",bug in datetimeindex.take and timedeltaindex.take may not raise indexerror against invalid index ,fixed regression in df.groupby.rolling with the resulting multiindex when grouping by a label that is in the index ,"a similar approach is now available for series groupby objects as well. because there s no need for column selection, the values can just be the functions to apply","bug in indexing on a series or dataframe with a multiindex and a level named ""0"" ",nat defines more arithmetic operations with datetime64 and timedelta64.,bug in dataframe.to_string where values were truncated using display options instead of outputting the full content ,read_json and to_json now accept a compression argument which allows them to transparently handle compressed files. ,"read_html previously ignored colspan and rowspan attributes. now it understands them, treating them as sequences of cells with the same value. ","a errors.performancewarning is issued when using fillna with a method, as a dense array is constructed to create the filled array. filling with a value is the efficient way to fill a sparse array.","when created with duplicate labels, multiindex now raises a valueerror. ",subtraction of series with timezone-aware dtype='datetime64' with mismatched timezones will raise typeerror instead of valueerror ,removed the previously deprecated keyword dtype from block.make_block_same_class ,bug in dataframe.to_html where values were truncated using display options instead of outputting the full content ,".groupby.groups will now return a dictionary of index objects, rather than a dictionary of np.ndarray or lists ",groupby nth now reduces by default; filtering can be achieved by passing as_index=false. with an optional dropna argument to ignore nan. see the docs.,bug in .corr and .cov where the column and index were the same object ,"additionally, the endpoint parameter end was not included in the intervals produced by interval_range. however, all other range functions include end in their output. to promote consistency among the range functions, interval_range will now include end as the right endpoint of the final interval, except if freq is specified in a way which skips end.","sorting in descending order is now stable for series.sort_values and index.sort_values for datetime-like index subclasses. this will affect sort order when sorting a dataframe on multiple columns, sorting with a key function that produces duplicates, or requesting the sorting index when using index.sort_values. when using series.value_counts, the count of missing values is no longer necessarily last in the list of duplicate counts. instead, its position corresponds to the position in the original series. when using index.sort_values for datetime-like index subclasses, nats ignored the na_position argument and were sorted to the beginning. now they respect na_position, the default being last, same as other index subclasses ","this is a minor bug-fix release in the 0.19.x series and includes some small regression fixes, bug fixes and performance improvements. we recommend that all users upgrade to this version.",hdfstore.remove now handles start and stop ,bug in indexing on a series or dataframe with a categoricalindex using list-like indexer that contains elements that are in the index s categories but not in the index itself failing to raise keyerror ,improved performance of iterating over a series. using dataframe.itertuples now creates iterators without internally allocating lists of all elements ,these are the changes in pandas 1.2.2. see release notes for a full changelog including other versions of pandas.,for earlier versions this can be done using the following.,bug with reindexing on the index with a non-unique index will now raise valueerror ,construction is by default for floating type values.,the timestamp class has dropped the offset attribute in favor of freq ,one example where the behavior of np.nan and pd.na is different is comparison operations:,added support for writing datetime.date and datetime.time object columns with to_sql .,"index.get_indexer now supports method='pad' and method='backfill' even for any target array, not just monotonic targets. these methods also work for monotonic decreasing as well as monotonic increasing indexes .","the default behavior for hdfstore write functions with format='table' is now to keep rows that are all missing. previously, the behavior was to drop rows that were all missing save the index. the previous behavior can be replicated using the dropna=true option. ",fixed regression in .groupby.rolling where a custom baseindexer would be ignored ,"bug in groupby where callable objects without name attributes would take the wrong path, and produce a dataframe instead of a series ","calling numpy ufuncs on non-aligned dataframes changed behaviour in pandas 1.2.0 , but this change is reverted in pandas 1.2.1. the behaviour to not align is now deprecated instead, see the the 1.2.1 release notes for more details.","compatibility between pandas array-like methods and their numpy counterparts has been greatly increased by augmenting the signatures of the pandas methods so as to accept arguments that can be passed in from numpy, even if they are not necessarily used in the pandas implementation ",dataframe.to_csv and series.to_csv now support the compression keyword when a file handle is passed. ,bug in pd.read_html when using bs4 flavor and parsing table with a header and only one column ,fixed regression in dataframe.groupby which would not emit an error when called with a tuple key not in the index ,"for a concrete example on combining .groupby and .pipe , imagine having a dataframe with columns for stores, products, revenue and sold quantity. we d like to do a groupwise calculation of prices per store and per product. we could do this in a multi-step operation, but expressing it in terms of piping can make the code more readable.",fix bound checking for timestamp with datetime64 input ,fixed regression in certain offsets and below) no longer being hashable ,fixed regression in .groupby.rolling where column selection was ignored ,these are the changes in pandas 0.25.1. see release notes for a full changelog including other versions of pandas.,bug in holiday with no offset or observance ,bug in pd.read_csv with engine='c' in which fields were not properly cast to float when quoting was specified as non-numeric ,fixed regression where dataframe.apply would raise valueerror for elements with s dtype ,constructing a dataframe with an index argument that wasn t already an instance of index was broken .,constructing a categoricalindex with empty values and boolean categories was raising a valueerror after a change to dtype coercion .,new users are often puzzled by the relationship between column operations and attribute access on dataframe instances . one specific instance of this confusion is attempting to create a new column by setting an attribute on the dataframe:,"furthermore, previously if you rank inf or -inf values together with nan values, the calculation won t distinguish nan from infinity when using top or bottom argument.",the minimum supported python version will be bumped to 3.6 in a future release.,bug in dataframe.loc with dictionary of values changes columns with dtype of int to float ,fix multiindex.get_level_values with missing values ,bug in series.where and dataframe.where where array-like conditionals were being rejected ,"we ve added an engine keyword to apply and apply that allows the user to execute the routine using numba instead of cython. using the numba engine can yield significant performance gains if the apply function can operate on numpy arrays and the data set is larger . for more details, see rolling apply documentation ",bug in float64index where iat and at were not testing and were failing .,bug in to_timedelta that accepted invalid units and misinterpreted m/h ,bug in datetimeindex.equals and timedeltaindex.equals incorrectly considering int64 indexes as equal ,"internal type checking is now done via a suite of generated classes, allowing isinstance without having to directly import the klass, courtesy of @jtratner",performance improvements when creating dataframe or series with dtype str or stringdtype from array with many string elements ,bug in cut and qcut where timezone information was dropped ,"in v.0.23 join will default to none , but this default will change to 'left' in a future version of pandas.","additionally, dataframes with datetime columns that were parsed by read_sql_table and read_sql_query will also be localized to utc only if the original sql columns were timezone aware datetime columns.",bug when adding or subtracting a businesshour to a timestamp with the resulting time landing in a following or prior day respectively ,bug in pd.read_csv in which a file containing a row with many columns followed by rows with fewer columns would cause a crash ,bug in dataframe.merge and pandas.merge returning inconsistent ordering in result for how=right and how=left ,pd.read_csv is now able to infer compression type for files read from aws s3 storage .,added rolling.sem and expanding.sem to compute the standard error of the mean ,fixed regression in dataframe setting values with a slice indexing by label instead of position ,the labels attribute of the categorical class has been removed in favor of categorical.codes ,added vbench benchmarks for alternative excelwriter engines and reading excel files ,bug in timedelta.__floordiv__ and timedelta.__rfloordiv__ dividing by many incompatible numpy objects was incorrectly allowed ,bug in seriesgroupby.transform with datetime values and missing groups ,"a verbose argument has been augmented in io.read_excel, defaults to false. set to true to print sheet names as they are parsed. ","sparsearray.to_dense has deprecated the fill parameter, as that parameter was not being respected ","we ve added a min_count parameter to .sum and .prod controlling the minimum number of valid values for the result to be valid. if fewer than min_count non-na values are present, the result is na. the default is 0. to return nan, the 0.21 behavior, use min_count=1.",new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,"bug in filter and transform when grouping on multiple keys, one of which is datetime-like ",bug in series.rank and dataframe.rank when ascending='false' failed to return correct ranks for infinity if nan were present ,"the dataframe.infer_objects and series.infer_objects methods have been added to perform dtype inference on object columns, replacing some of the functionality of the deprecated convert_objects method. see the documentation here for more details. ",bug in series.resample using a frequency of nano when the index is a datetimeindex and contains non-zero nanosecond parts ,"rolling and expanding already have a min_periods keyword that behaves similar to min_count. the only case that changes is when doing a rolling or expanding sum with min_periods=0. previously this returned nan, when fewer than min_periods non-na values were in the window. now it returns 0.",bug in pd.read_csv in which invalid values for nrows and chunksize were allowed ,dataframe.pivot_table now accepts an observed parameter which is passed to underlying calls to dataframe.groupby to speed up grouping categorical data. ,the default sum for empty or all-na series is now 0.,enable pd.read_hdf to be used without specifying a key when the hdf file contains a single dataset ,performance improvement in dataframe.select_dtypes by using vectorization instead of iterating over a loop ,to_csv and read_csv did not honor compression and encoding for path-like objects that are internally converted to file-like objects ,"when aggregating using concat or the dataframe constructor, pandas will now attempt to preserve index and column names whenever possible . in the case where all inputs share a common name, this name will be assigned to the result. when the input names do not all agree, the result will be unnamed. here is an example where the index name is preserved:",diff will raise a typeerror rather than implicitly losing the dtype of extension types in the future. convert to the correct dtype before calling diff instead ,index.intersection and inner join now preserve the order of the left index,index.intersection and inner join now preserve the order of the left index,bug in area plot draws legend incorrectly if subplot is enabled or legend is moved after plot ,bug in holiday.dates where observance rules could not be applied to holiday and doc enhancement ,the idiomatic way to achieve selecting potentially not-found elements is via .reindex,"fixes dtype of result with integer dtype input, from pivot_table when called with margins=true ",fixed metadata propagation in series.abs and ufuncs called on series and dataframes ,bug that returns none and does not raise notimplementederror when operator functions of panel are not implemented ,"series.all and series.any now support the level and skipna parameters. series.all, series.any, index.all, and index.any no longer support the out and keepdims parameters, which existed for compatibility with ndarray. various index types no longer support the all and any aggregation functions and will now raise typeerror. .",but this is not:,bug in dataframe indexing returning an incorrect series in some cases when the series has been altered and a cache not invalidated ,bug in pandas.testing.assert_series_equal and pandas.testing.assert_frame_equal where extension dtypes were not ignored when check_dtypes was set to false ,added support for 3-character iso and non-standard country codes in io.wb.download ,bug in dataframe.plot when kind='box' and data contains datetime or timedelta data. these types are now automatically dropped ,the top-level pandas.eval function does not allow you use the '@' prefix and provides you with an error message telling you so.,series.where with categorical dtype with categorical column) no longer allows setting new categories ,datetimeindex.to_series now accepts index and name kwargs ,bug in dataframe.interpolate when called on a dataframe with column names of string type was throwing a valueerror. the method is now independent of the type of the column names ,regression in pivot_table where an ordered categorical with missing values for the pivot s index would give a mis-aligned result ,require at least 0.23 version of cython to avoid problems with character encodings ,dataframe now properly supports simultaneous copy and dtype arguments in constructor ,bug in adding a index with object dtype to a series with timedelta64 dtype incorrectly raising ,bug in radviz and andrews_curves where multiple values of color were being passed to plotting method ,fixed a bug with setting invalid or out-of-range values in indexing enlargement scenarios ,"when passed dataframes whose values are sparse, concat will now return a series or dataframe with sparse values, rather than a sparsedataframe .",bug in dataframe.reset_index and series.reset_index would not preserve data types on an empty dataframe or series with a multiindex ,"bug in dataframe constructor when columns parameter is set, and data is an empty list ",bug in merging with categorical dtypes with datetimelikes incorrectly raised a typeerror ,interpolate and fillna will raise a valueerror if the limit keyword argument is not greater than 0. ,describe now accepts an array of percentiles to include in the summary statistics ,"bug in index.to_series where the index was not copied , ",bug in dataframe.to_stata and statawriter which produces incorrectly formatted files to be produced for some locales ,"note that integer- and floating-dtype indexes are considered compatible . the integer values are coerced to floating point, which may result in loss of precision. see set operations on index objects for more.",bug in dataframe.sort_index where an error is thrown when a multi-indexed dataframe is sorted on all levels with the initial level sorted last ,bug in dataframe.to_latex where pairs of braces meant to serve as invisible placeholders were escaped ,excelfile.parse has deprecated sheetname in favor of sheet_name for consistency with read_excel .,bug in .str accessor methods may raise valueerror if input has name and the result is dataframe or multiindex ,added top-level function read_sql that is equivalent to the following,these are the changes in pandas 1.0.4. see release notes for a full changelog including other versions of pandas.,"slicing with negative start, stop & step values handles corner cases better :",bug in unstack with timedeltaindex or datetimeindex and nulls .,"bug in series flex arithmetic methods where the result when operating with a list, tuple or np.ndarray would have an incorrect name ","calling a binary-input numpy ufunc on multiple dataframe objects now aligns, matching the behavior of binary operations and ufuncs on series . this change has been reverted in pandas 1.2.1, and the behaviour to not align dataframes is deprecated instead, see the the 1.2.1 release notes.",improved performance in dataframe.asof when where is a scalar ,suppressed error in the construction of a dataframe from a dict containing scalar values when the corresponding keys are not included in the passed index ,"removed neg - boolean operations on numpy arrays in favor of inv ~, as this is going to be deprecated in numpy 1.9 ",period objects no longer raise a typeerror when compared using == with another object that isn t a period. instead when comparing a period with another object using == if the other object isn t a period false is returned. ,bug in rolling_std and rolling_var for a single value producing 0 rather than nan ,"in order to standardize the read_csv api for both the c and python engines, both will now raise an emptydataerror, a subclass of valueerror, in response to empty columns or header ",bug causing groupby.sum and similar to not preserve metadata ,bug in which dataframe.append produced an erroneous warning indicating that a keyerror will be thrown in the future when the data to be appended contains new columns .,a list or tuple with length matching the number of rows in the dataframe will now raise valueerror instead of operating column-by-column (gh22880.,eval and dataframe.eval have changed the default of inplace from none to false ,"in previous versions, a dataframe was truncated once the dimension constraints were reached and an ellipse signaled that part of the data was cut off.","to_datetime has gained a new parameter, origin, to define a reference date from where to compute the resulting timestamps when parsing numerical values with a specific unit specified. ",bug in execute was raising a programmingerror for some db-api drivers when the sql statement contained the % character and no parameters were present ,bug in to_excel could not handle the column name render and was raising an keyerror ,"passing na into a format string using format specs will now work. for example ""{:.1f}"".format would previously raise a valueerror, but will now return the string ""<na>"" ","the configuration option pd.options.mode.use_inf_as_null is deprecated, and pd.options.mode.use_inf_as_na is added as a replacement.",series.is_time_series deprecated in favor of series.index.is_all_dates ,deprecations will be enforced in major releases ,bug in timestamp comparisons with == and int64 dtype ,this can also be seen in multi-axis indexing with a panel.,fixed bug with reading compressed files with read_fwf in python 3. ,fixed json bug where locales with decimal separators other than . threw exceptions when encoding / decoding certain values. ,see more at advanced indexing and advanced hierarchical.,"pandas.hdfstore s string representation is now faster and less detailed. for the previous behavior, use pandas.hdfstore.info. .","printing of multiindex instances now shows tuples of each row and ensures that the tuple items are vertically aligned, so it s now easier to understand the structure of the multiindex. :","bug in indexing with a periodindex incorrectly accepting integers representing years, use e.g. ser.loc instead of ser.loc ",compat issue is dataframe.dtypes when options.mode.use_inf_as_null is true ,"show a futurewarning rather than a deprecationwarning on using long-time deprecated syntax in hdfstore.select, where the where clause is not a string-like ",bug in multiindex.get_level_values which would return an invalid index on level of ints with missing values ,"removed the previously deprecated keyword fill_value from categorical.fillna, use value instead ","passing an integer to series.fillna and dataframe.fillna with timedelta64 dtypes is deprecated, will raise typeerror in a future version. use obj.fillna) instead ","this new api for resample includes some internal changes for the prior-to-0.18.0 api, to work with a deprecation warning in most cases, as the resample operation returns a deferred object. we can intercept operations and just do what the api did . here is a typical use case:",bug in dataframe.groupby did not respect the observed argument when selecting a column and instead always used observed=false ,"excel files saved in version 0.16.2 or prior that had index names will still able to be read in, but the has_index_names argument must specified to true.","in prior versions, using series.unique and pandas.unique on categorical and tz-aware data-types would yield different return types. these are now made consistent. ","here is a typical useful syntax for computing different aggregations for different columns. this is a natural, and useful syntax. we aggregate from the dict-to-list by taking the specified columns and applying the list of functions. this returns a multiindex for the columns .",bug in dataframe.to_hdf was not dropping missing rows with dropna=true ,bug in businessday when adding n days to a date not on offset when n>5 and n%5==0 ,bug in pandas.wide_to_long when a string is passed to the stubnames argument and a column name is a substring of that stubname ,"finally, you can use a callable in indexing of series, dataframe and panel. the callable must return a valid input for indexing depending on its class and index type.",the numpy argument of pandas.read_json is deprecated .,"added support for utcfromtimestamp, fromtimestamp, and combine on timestamp class .",improved performance of rangeindex.min and rangeindex.max by using rangeindex properties to perform the computations ,bug in the html display with a multiindex and truncation ,"timezone converting a tz-aware datetime.datetime or timestamp with timestamp and the tz argument is now deprecated. instead, use timestamp.tz_convert ",improve the performance of groupby on single-key aggregations and use with categorical types,"pd.read_hdf will now raise a valueerror instead of keyerror, if a mode other than r, r+ and a is supplied. ",bug in periodindex where adding or subtracting a timedelta or tick object produced incorrect results ,multiplication and division of numeric-dtyped index objects with timedelta-like scalars returns timedeltaindex instead of raising typeerror ,"passing a dtype without a precision like np.dtype or timedelta64 to index, datetimeindex and timedeltaindex is now deprecated. use the nanosecond-precision dtype instead .","series.argmin, series.argmax, and their counterparts on dataframe and groupby objects work correctly with floating point data that contains infinite values .",bug in categorical not created properly with series.to_frame ,calling np.array and np.asarray on tz-aware series and datetimeindex will now return an object array of tz-aware timestamp ,bug in intervaltree where data containing nan triggered a warning and resulted in incorrect indexing queries with intervalindex ,with tab-completion of available methods and properties.,significantly improved performance of indexing multiindex with slicers ,datetimeindex now supports conversion to strings with astype ,the longpanel and widepanel classes have been removed ,improved performance of to_datetime when specified format string is iso8601 ,"fixed operator.xor with a boolean-dtype sparsearray. now returns a sparse result, rather than object dtype ","added new writer for exporting stata dta files in versions 118 and 119, statawriterutf8. these files formats support exporting strings containing unicode characters. format 119 supports data sets with more than 32,767 variables ",improve scatter_matrix plotting function and add histogram or kernel density estimates to diagonal,"for stringmethods.extract, when no match is found, the result - only containing nan values - now also has dtype=object instead of float ",this uses the numpy.busdaycalendar api introduced in numpy 1.7 and therefore requires numpy 1.7.0 or newer.,"dataframe.to_parquet now accepts index as an argument, allowing the user to override the engine s default behavior to include or omit the dataframe s indexes from the resulting parquet file. ",bug in nat comparison if a mixed datetime/np.datetime64 with nat were passed ,"read_stata and statareader can import missing data information into a dataframe by setting the argument convert_missing to true. when using this options, missing values are returned as statamissingvalue objects and columns containing missing values have object data type. ",pretty printing sets now uses set literal syntax instead of legacy python syntax ) ,"previously, outputting a multiindex printed all the levels and codes of the multiindex, which was visually unappealing and made the output more difficult to navigate. for example :",the .to_latex method will now accept multicolumn and multirow arguments to use the accompanying latex enhancements,these are the changes in pandas 0.24.2. see release notes for a full changelog including other versions of pandas.,this will now convert integers/floats with the default unit of ns.,selecting via a scalar value that is contained in the intervals.,"bug in passing input with tzinfo to some offsets apply, rollforward or rollback resets tzinfo or raises valueerror ",bug in .clip with axis=1 and a list-like for threshold is passed; previously this raised valueerror ,periodindex can now accept list and array which contains pd.nat ,".loc has compat with .ix for accepting iterators, and namedtuples ",bug in weekofmonth and lastweekofmonth where default keyword arguments for constructor raised valueerror ,unordered category: values and categories are sorted by appearance order.,"for larger series of dataframe with a length above max_rows, only min_rows number of rows is shown .",bug in pd.concat and .append with the same timezone get reset to utc ,astype fails if data contains values which cannot be converted to specified dtype. note that the limitation is applied to fill_value which default is np.nan.,the index in .groupby.nth output is now more consistent when the as_index argument is passed :,changes to excel with multiindex,changes to excel with multiindex," will be interpreted differently in a future version of pandas. previously,",bug in index with numeric dtype when multiplying or dividing an array with dtype timedelta64 ,"this will now be the default constructed index for ndframe objects, rather than previous an int64index. ","a new, friendlier valueerror is added to protect against the mistake of supplying the sep as an arg, rather than as a kwarg. .","bug csv: fix problem with trailing white space in skipped rows, , , ","until python 3.6, dicts in python had no formally defined ordering. for python version 3.6 and later, dicts are ordered by insertion order, see pep 468. pandas will use the dict s insertion order, when creating a series or dataframe from a dict and you re using python version 3.6 or higher. ",bug in dataframe and series constructors where range objects are converted to int32 dtype on windows instead of int64 ,these are the changes in pandas 0.24.0. see release notes for a full changelog including other versions of pandas.,fixed regression in rollinggroupby causing a segmentation fault with index of dtype object ,bug in sparseseries and sparsedataframe creation with object dtype may raise typeerror ,"previously, pandas would register converters with matplotlib as a side effect of importing pandas . this changed the output of plots made via matplotlib plots after pandas was imported, even if you were using matplotlib directly rather than plot.",categorical.name was deprecated to make categorical more numpy.ndarray like. use series instead .,bug in rename where an index of same-length tuples was converted to a multiindex ,series.combine with scalar argument now works for any function type ,fixed memoryerror caused by performing counting sort on sorting multiindex levels with a very large number of combinatorial values ,"pandas now is python 2/3 compatible without the need for 2to3 thanks to @jtratner. as a result, pandas now uses iterators more extensively. this also led to the introduction of substantive parts of the benjamin peterson s six library into compat. ",dataframe.rank now supports additional argument values for the na_option parameter so missing values can be assigned either the largest or the smallest rank ,"elements that do not match return a row of nan. thus, a series of messy strings can be converted into a like-indexed series or dataframe of cleaned-up or more useful strings, without necessitating get to access tuples or re.match objects.","each method signature only includes relevant arguments. currently, these are limited to required arguments, but in the future these will include optional arguments, as well. for an overview, see the new plotting api documentation.",bug in datetimeindex and date_range where mismatching tz-aware start and end timezones would not raise an err if end.tzinfo is none ,bug in intervalindex constructor when a list of intervals is passed with non-default closed ,regression from 0.13 with fillna and a series on datetime-like ,remove deprecated _verbose_info ,"dataframe.set_index now works for instances of abc.iterator, provided their output is of the same length as the calling frame ","multi-table creation via append_to_multiple and selection via select_as_multiple can create/select from multiple tables and return a combined result, by using where on a selector table.",these indexing behaviors of the intervalindex are provisional and may change in a future version of pandas. feedback on usage is welcome.,"in 0.23.0, we unified operations between datetimeindex and series, and in the process changed comparisons between a series of datetimes and datetime.date without warning.",bug in timestamp.replace with compat for passing long integers ,bug in dataframe.to_stata and pandas.io.stata.statawriter117 that produced invalid files when using strls with non-ascii characters ,improved performance of series.sort_index with a monotonic index ,"removal of the legacy time rules , deprecated since 0.17.0 . now legacy time rules raises valueerror. for the list of currently supported offsets, see here.","methods such as index.get_indexer that return an indexer array, coerce that array to a platform int , so that it can be directly used in 3rd party library operations like numpy.take. previously, a platform int was defined as np.int_ which corresponds to a c integer, but the correct type, and what is being used now, is np.intp, which corresponds to the c integer size that can hold a pointer .","prior to 0.13, it was impossible to use a label indexer to set a value that was not contained in the index of a particular axis. . see the docs","timestamp.month_name, datetimeindex.month_name, and series.dt.month_name are now available ",sparse data structures now gained enhanced support of int64 and bool dtype .,the bins of the grouping are adjusted based on the beginning of the day of the time series starting point. this works well with frequencies that are multiples of a day or that divides a day . but it can create inconsistencies with some frequencies that do not meet this criteria. to change this behavior you can now specify a fixed timestamp with the argument origin.,fixed bug in to_datetime raising when cache=true and out-of-bound values are present ,"df.info now honors the option max_info_rows, to disable null counts for large frames ",bug in index construction with a mixed list of tuples ,"series.apply will now operate on a returned value from the applied function, that is itself a series, and possibly upcast the result to a dataframe",passing period with multiple frequencies to normal index now returns index with object dtype ,bug in dataframe.to_sql when reading dataframes with -np.inf entries with mysql now has a more explicit valueerror ,"consistent with the python api, pd.read_csv will now interpret +inf as positive infinity ",bug in date_range with unnecessary overflowerror being raised for very large or very small dates ,"index methods &, |, and ^ behaving as the set operations index.intersection, index.union, and index.symmetric_difference, respectively, are deprecated and in the future will behave as pointwise boolean operations matching series behavior. use the named set methods instead ",fixed regression in groupby.nunique which was modifying the original values if nan values were present ,reverted some changes to how na values are handled in non-numeric series:,"dataframe.apply was inconsistent when applying an arbitrary user-defined-function that returned a list-like with axis=1. several bugs and inconsistencies are resolved. if the applied function returns a series, then pandas will return a dataframe; otherwise a series will be returned, this includes the case where a list-like .",series.to_csv has dropped the nanrep parameter in favor of na_rep ,indexing with a list of strings representing datetimes failed on datetimeindex or periodindex ,hdfstore is now iterable: for k in store is equivalent to for k in store.keys .,fixed regression in dataframe.apply with axis=1 using str accessor in apply function ,these are the changes in pandas 1.2.0. see release notes for a full changelog including other versions of pandas.,added reference to backwards incompatible check_freq arg of testing.assert_frame_equal and testing.assert_series_equal in pandas 1.1.0 whats new ,dataframe.all and dataframe.any now accept axis=none to reduce over all axes to a scalar ,bug in transform and filter when grouping on a categorical variable ,bug in reading a json with orient='table' generated by dataframe.to_json with index=false ,bug in dataframe.unstack which casts int to float if columns is a multiindex with unused levels ,bug in periodindex with attribute freq.n greater than 1 where adding a dateoffset object would return incorrect results ,the method name categorical.sort is deprecated in favor of categorical.sort_values ,passing an invalid engine to read_csv now raises an informative valueerror rather than unboundlocalerror. ,"pd.read_csv, pd.read_table, and pd.read_hdf raise the builtin filenotfounderror exception for python 3.x when called on a nonexistent file; this is back-ported as ioerror in python 2.x ",index.to_series now accepts index and name kwargs ,bug in datetimeindex.strftime and series.dt.strftime where nat was converted to the string 'nat' instead of np.nan ,"pandas.parser, pandas.lib, and pandas.tslib have been removed ","passing a dtype alias to datetimetzdtype is no longer allowed, use datetimetzdtype.construct_from_string instead ",bug in series.reindex when specifying a method with some nan values was inconsistent ,bug in groupby.quantile causes the quantiles to be shifted when the by axis contains nan ,bug in series.rename when using a custom type indexer. now any value that isn t callable or dict-like is treated as a scalar. ,when constructing dataframe with an array of complex64 dtype previously meant the corresponding column was automatically promoted to the complex128 dtype. pandas will now preserve the itemsize of the input for complex data ,replace pandas.compat.scipy.scoreatpercentile with numpy.percentile ,a scalar index that is not found will raise keyerror,the minimum supported dta version has increased to 105 in read_stata and statareader .,bug in timestamp where constructing a timestamp from ambiguous epoch time and calling constructor again changed the timestamp.value property ,these are the changes in pandas 1.0.2. see release notes for a full changelog including other versions of pandas.,bug in pd.read_csv for the c engine where usecols were being indexed incorrectly with parse_dates ,"read_sas has gained the ability to read sas7bdat files, including compressed files. the files can be read in entirety, or incrementally. for full details see here. ","previously, when using certain iteration methods for a series with dtype int or float, you would receive a numpy scalar, e.g. a np.int64, rather than a python int. issue corrected this for series.tolist and list. this change makes all iteration methods consistent, in particular, for __iter__ and .map; note that this only affects int/float dtypes. .",bug in series.values_counts with excluding nan for categorical type series with dropna=true ,"pd.to_timedelta accepts nan and nat, returning nat instead of raising ",raise valueerror when engine='c' specified with unsupported options in read_csv/read_table ,bug in read_csv where missing values were not being handled properly when keep_default_na=false with dictionary na_values ,"bug in ewmstd, ewmvol, ewmvar, and ewmcov calculation of de-biasing factors when bias=false . previously an incorrect constant factor was used, based on adjust=true, ignore_na=true, and an infinite number of observations. now a different factor is used for each entry, based on the actual weights factor). in particular, for a single point a value of nan is returned when bias=false, whereas previously a value of 0 was returned.","previously, parsing datetime strings with utc offsets with to_datetime or datetimeindex would automatically convert the datetime to utc without timezone localization. this is inconsistent from parsing the same datetime string with timestamp which would preserve the utc offset in the tz attribute. now, to_datetime preserves the utc offset in the tz attribute when all the datetime strings have the same utc offset ",implement value_vars in melt to limit values to certain columns and add melt to pandas namespace ,bug in .groupby.resample when the same object is called multiple times ,eval s upcasting rules for float32 types have been updated to be more consistent with numpy s rules. new behavior will not upcast to float64 if you multiply a pandas float32 object by a scalar float64 .,"bottleneck is now a recommended dependencies, to accelerate certain types of nan operations","using dataframe.groupby with as_index=true and the aggregation nunique would include the grouping column in the columns of the result. now the grouping column only appear in the index, consistent with other reductions. ","similarly, dataframe.at and series.at will raise a typeerror instead of a valueerror if an incompatible key is passed, and keyerror if a missing key is passed, matching the behavior of .loc ",bug in concat and dataframe constructor where input index names are not preserved in some cases ,bug where c variables were declared with external linkage causing import errors if certain other c libraries were imported before pandas. ,"the overridden timedelta properties of days, seconds and microseconds have been removed, leveraging their built-in python versions instead ","when converting a dataframe to html it used to return empty dataframe. this special case has been removed, instead a header with the column names is returned .",removed support of gtk package for clipboards ,bug in dataframe.replace where nested dicts were erroneously depending on the order of dictionary keys and values .,split indexing documentation into indexing and selecting data and multiindex / advanced indexing,bug in read_csv where automatic delimiter detection caused a typeerror to be thrown when a bad line was encountered rather than the correct error message ,"time series string indexing conveniences / shortcuts: slice years, year and month, and index values with strings",by default categorical.min now returns the minimum instead of np.nan,and setting,"removed index.dtype_str, use str instead ","support for a new index type float64index, and other indexing enhancements",bug in series.replace with datetime64 data when replacing nat ,rolling.var and rolling.std use kahan summation and welford s method to avoid numerical issues ,"this fixes an inconsistency between resample and groupby. this also fixes a potential bug, where the values of the result might change depending on how the results are cast back to the original dtype.",bug in comparison operations for multiindex where error was raised on equality / inequality comparison involving a multiindex with nlevels == 1 ,bug in intervalindex where some indexing operations were not supported for overlapping or non-monotonic uint64 data ,bug in dataframe.loc when used with a multiindex. the returned values were not in the same order as the given inputs ,improved performance of read_csv by much faster parsing of mm/yyyy and dd/mm/yyyy datetime formats ,timedelta now supports arithmetic with numpy.ndarray objects of the appropriate dtype .,bug in timestamp with string offset and tz results incorrect ,"# use the traditional nan, which is mapped to nat internally",bug in bar plot with log=true raises typeerror if all values are less than 1 ,groupby with as_index=false will not add erroneous extra columns to result :,fixed regression in dataframe.reindex and series.reindex when reindexing with index and method=nearest ,bug in pd.read_csv with the c engine when specifying skiprows with newlines in quoted items ,"for multiindex, values are dropped if any level is missing by default. specifying how='all' only drops values where all levels are missing.",bug in dataframe.where with a symmetric shaped frame and a passed other of a dataframe ,"bug in core.groupby.dataframegroupby.transform when func='nunique' and columns are of type datetime64, the result would also be of type datetime64 instead of int64 ",not showing a deprecationwarning on combining list-likes with an index ,"raise a valueerror in df.to_hdf with fixed format, if df has non-unique columns as the resulting file will be broken ",fixes issue with index_col=false when usecols is also specified in read_csv. ,removed the previously deprecated keyword order from factorize ,fixed bug in excel writers where frames with duplicate column names weren t written correctly. ,fixed regression in dataframe.replace where regex=true was only replacing patterns matching the start of the string ,removed the previously deprecated keyword verify_integrity from the datetimeindex and timedeltaindex constructors ,timestamps can be modified in the nanosecond range,"bug in intervalindex, intervalarray, and series with interval data where equality comparisons were incorrect ",repeat has been added ,the sum and product of all-na bins has changed from nan to 0 for sum and 1 for product.,these are the changes in pandas 1.2.4. see release notes for a full changelog including other versions of pandas.,compatibility with matplotlib 2.0. older versions of pandas should also work with matplotlib 2.0 ,added dataframe.align method with standard join options,improved performance of datetimeindex and series arithmetic operations with business-month and business-quarter frequencies ,add level option to the reindex and align methods on series and dataframe for broadcasting values across a level ,"timedeltaindex and datetimeindex no longer accept non-nanosecond dtype strings like timedelta64 or datetime64 , use timedelta64 and datetime64 instead ",fixed regression in dataframe.replace inconsistent replace when using a float in the replace method ,bug in fill_value is ignored if the argument to a binary operator is a constant ,bug in dataframe.aggregate and series.aggregate was causing a recursive loop in some cases ,these are the changes in pandas 0.25.2. see release notes for a full changelog including other versions of pandas.,"dataframe.to_sql now performs a multi-value insert if the underlying connection supports itk rather than inserting row by row. sqlalchemy dialects supporting multi-value inserts include: mysql, postgresql, sqlite and any dialect with supports_multivalues_insert. ","the pd.read_csv with engine='python' has gained support for the decimal , na_filter and the memory_map option .",these are the changes in pandas 1.0.5. see release notes for a full changelog including other versions of pandas.,bug in series.astype and categorical.astype where an existing categorical data does not get updated ,bug in dataframe.at when either columns or index is non-unique ,userwarning: evaluating in python space because the '+' operator is not,the panel4d and panelnd classes have been removed ,"previously, calling dataframe.apply an empty dataframe would return either a dataframe if there were no columns, or the function being applied would be called with an empty series to guess whether a series or dataframe should be returned:","bug in dataframe.to_dict where columns of datetime that are tz-aware were not converted to required arrays when used with orient='records', raising typeerror ",but in a future version of pandas this will be changed to expand=true ,bug with comparisons between timedelta and nat raising typeerror ,bug in to_csv where date_format is ignored if the datetime is fractional ,"period and periodindex can handle multiplied freq like 3d, which corresponding to 3 days span. see here","added log10, floor and ceil to the list of supported functions in dataframe.eval ",added option to df.info to override the default display options and force showing of the null-counts ,the freqstr keyword has been removed from pandas.tseries.frequencies.to_offset in favor of freq ,added support for a chunksize parameter to to_sql function. this allows dataframe to be written in chunks and avoid packet-size overflow errors .,dataframe.to_excel and series.to_excel with non-existent columns will no longer reindex ,"when performing a reduction such as a sum with skipna=false, the result will now be pd.na instead of np.nan in presence of missing values .",bug in assignment against datetime-like data with int may incorrectly convert to datetime-like ,"removal of na_last parameters from series.order and series.sort, in favor of na_position. ",bug in .value_counts when normalize=true and dropna=true where nulls still contributed to the normalized count ,fixed regression in subtraction between series objects with datetime64 dtype incorrectly raising overflowerror when the series on the right contains null values ,read_excel has deprecated sheetname in favor of sheet_name for consistency with .to_excel .,"bug in constructing a series or dataframe from a numpy datetime64 array with a non-ns unit and out-of-bound timestamps generating rubbish data, which will now correctly raise an outofboundsdatetime error .",altered binary operations on differently-indexed sparseseries objects to use the integer-based alignment logic which is faster with a larger number of blocks ,"datetimeindex.searchsorted, timedeltaindex.searchsorted, periodindex.searchsorted, and series.searchsorted with datetime-like dtypes will now try to cast string arguments to the matching datetime-like type ",bug when writing to a hdfstore in table format with a min_itemsize value for the index and without asking to append ,we highly encourage using named arguments to avoid confusion when using either style.,"the good news is the return dimensions will differ between the new api and the old api, so this should loudly raise an exception.",bug in series.divmod and series.rdivmod which would raise an valueerror rather than return a pair of series objects as result ,"the pandas.tools.rplot, pandas.sandbox.qtpandas and pandas.rpy modules are deprecated. we refer users to external packages like seaborn, pandas-qt and rpy2 for similar or equivalent functionality, see here","as part of a larger refactor to multiindex the level names are now stored separately from the levels . we recommend using multiindex.names to access the names, and index.set_names to update the names.",improved performance in construction of categoricals with series of datetimes containing nat ,indexing of dataframe and series now accepts zerodim np.ndarray ,"indexing in multiindex beyond lex-sort depth is now supported, though a lexically sorted index will have a better performance. ",concat to produce a non-unique columns when duplicates are across dtypes is fixed ,"starting with the 0.25.x series of releases, pandas only supports python 3.5.3 and higher. see dropping python 2.7 for more details.",the function get_offset_name has been dropped in favor of the .freqstr attribute for an offset ,allows operating of timestamps to return a datetime if the result is out-of-bounds related ,"there is a situation where the new api can not perform all the operations when using original code. this code is intending to resample every 2s, take the mean and then take the min of those results.","for a full example, see: use origin or offset to adjust the start of the bins.",bug in csv parser causing lines with initial white space plus one non-space character to be skipped. ,keyword argument deep has been removed from extensionarray.copy ,above was an example of inserting a precomputed value. we can also pass in a function to be evaluated.,fixed a bug where low memory c parser could create different types in different chunks of the same file. now coerces to numerical type or raises warning. ,improved performance of series.dt.time and datetimeindex.time ,removed compatibility for multiindex pickles prior to version 0.8.0; compatibility with multiindex pickles from version 0.13 forward is maintained ,fixed file reader bug that misaligned columns with data in the presence of an implicit column and a specified usecols value,removed the previously deprecated convert_objects ,these are the changes in pandas 1.0.1. see release notes for a full changelog including other versions of pandas.,bug in datetimeindex.insert and timedeltaindex.insert causing index freq to be lost when setting an element into an empty series ,bug in dataframe.unstack which raises an error if index is a multiindex with unused labels on the unstacked level ,bug in to_datetime where box and utc arguments were ignored when passing a dataframe or dict of unit mappings ,bug in divmod with a series object containing zeros incorrectly raising attributeerror ,bug in concatenation with duplicate columns across dtypes not merging with axis=0 ,date_range now accepts ys in addition to as as an alias for start of year. ,bug in dataframe arithmetic where missing values in results were incorrectly masked with nan instead of inf ,"dataframe.reindex with a categoricalindex would fail when the targets contained duplicates, and wouldn t fail if the source contained duplicates ",bug in dataframe.append with a series with a dateutil timezone would raise a typeerror ,bug in index multiplication and division methods where operating with a series would return an index object instead of a series object ,bug in index.min and max doesn t handle nan and nat properly ,bug in index.get_indexer and index.get_indexer_non_unique where int64 arrays are returned instead of intp ,setting sparsearray.fill_value to a fill value with a different dtype is now allowed.,"add the keyword allow_duplicates to dataframe.insert to allow a duplicate column to be inserted if true, default is false ",dataframe.to_latex now accepts caption and label arguments ,"indexing on other index types are preserved , with the exception, that floating point slicing on indexes on non float64index will now raise a typeerror.","as as notational convenience, you can pass a sequence of labels or a label slice to a series when getting and setting values via . the behavior will be the same as passing similar input to ix except in the case of integer indexing:",dataframe.add_prefix and dataframe.add_suffix now accept strings containing the % character. ,"previously, declaring or converting to stringdtype was in general only possible if the data was already only str or nan-like . stringdtype now works in all situations where astype or dtype=str work:",indexing bugs with reordered indexes ,bug in read_csv with engine='python' truncating data if multiple items present in first row and first element started with bom ,"bug in using grouper functions that need passed through arguments , when using wrapped function , ","added a new index type, float64index. this will be automatically created when passing floating values in index creation. this enables a pure label-based slicing paradigm that makes ,ix,loc for scalar indexing and slicing work exactly the same. see the docs, ",pd.read_csv no longer allows a combination of strings and integers for the usecols parameter ,nearest is added to support nearest-neighbor upsampling .,dataframe.to_stata and statawriter check string length for compatibility with limitations imposed in dta files where fixed-width strings must contain 244 or fewer characters. attempting to write stata dta files with strings longer than 244 characters raises a valueerror. ,bug in dataframe.replace and series.replace incorrectly raising an assertionerror instead of a valueerror when invalid parameter combinations are passed ,bug in pd.read_csv with engine='python' in which infinities of mixed-case forms were not being interpreted properly ,added series.align method for aligning two series with choice of join method ,regression in dataframe.replace where a typeerror would be raised when attempting to replace elements of type interval ,bug in resample that causes a valueerror when resampling across multiple days and the last offset is not calculated from the start of the range ,"currently, the default display options of pandas ensure that when a series or dataframe has more than 60 rows, its repr gets truncated to this maximum of 60 rows . however, this still gives a repr that takes up a large part of the vertical screen estate. therefore, a new option display.min_rows is introduced with a default of 10 which determines the number of rows showed in the truncated repr:",the previous default behavior of negative indices in categorical.take is deprecated. in a future version it will change from meaning missing values to meaning positional indices from the right. the future behavior is consistent with series.take .,bug in dataframe.plot.scatter was adding a colorbar to the plot even if the argument c was assigned to a column containing color names ,pd.melt now accepts the optional parameters var_name and value_name to specify custom column names of the returned dataframe.,improved performance of set_categories by not materializing the values ,deprecated the nthreads keyword of pandas.read_feather in favor of use_threads to reflect the changes in pyarrow>=0.11.0. ,fix assignment with iloc/loc involving a dtype change in an existing column have internal setitem_with_indexer in core/indexing to use block.setitem,"the timeseries and sparsetimeseries classes, aliases of series and sparseseries, are removed .",series.isin now treats all nan-floats as equal also for np.object-dtype. this behavior is consistent with the behavior for float64 ,"we ve reverted a 0.23.0 change to comparing a series holding datetimes and a datetime.date object . in pandas 0.22 and earlier, comparing a series holding datetimes and datetime.date objects would coerce the datetime.date to a datetime before comparing. this was inconsistent with python, numpy, and datetimeindex, which never consider a datetime and datetime.date equal.",set operations on intervalindex with incompatible index types will now raise a typeerror rather than a valueerror ,dataframe.sample will now also allow array-like and bitgenerator objects to be passed to random_state as seeds ,bug in dataframe.loc did not raise keyerror when missing combination was given with slice for remaining levels ,"similarly, a keyerror will be raised for non-exact matches instead of returning overlapping matches.","dataframe.to_csv has dropped the engine parameter, as was deprecated in 0.17.1 ",bug where indexing with a numpy array containing negative values would mutate the indexer ,"bug in read_json for orient='table' and string of float column names, as it makes a column name type conversion to timestamp, which is not applicable because column names are already defined in the json schema ",pandas 0.22.0 changes the handling of empty and all-na sums and products. the summary is that,"previously, it was necessary to specify the has_index_names argument in read_excel, if the serialized data had index names. for version 0.17.0 the output format of to_excel has been changed to make this keyword unnecessary - the change is shown below.",periodindex.tz_convert and periodindex.tz_localize have been removed ,bug in core.groupby.generic.seriesgroupby.apply raising valueerror when a column in the original dataframe is a datetime and the column labels are not standard integers ,bug in dataframe.to_json with unsupported dtype not passed to default handler .,bug in iat where using it to assign an incompatible value would create a new column ,"the first get_dummies returns a dataframe because the column a is not dummy encoded. when just are passed to get_dummies, then all the columns are dummy-encoded, and a sparsedataframe was returned.","bug in pivot_table where columns with nan values are dropped even if dropna argument is false, when the aggfunc argument contains a list ",bug in timedeltaindex addition where overflow was being allowed without error ,"options added to allow one to turn on/off using bottleneck and numexpr, see here ","made consistent a timezone mismatch exception , will now return typeerror rather than valueerror , ",bug in categorical.searchsorted where alphabetical instead of the provided categorical order was used ,fixed a bug where read_html wasn t correctly inferring values of tables with commas ,creating a long form dataframe is now straightforward using chained operations,"bug in dataframe.count with level=""foo"" and index level ""foo"" containing nans causes segmentation fault ",these are the changes in pandas 1.1.1. see release notes for a full changelog including other versions of pandas.,bug in dataframe.sort_values when sorting by multiple columns where one column is of type int64 and contains nat ,a valueerror will now be thrown by dataframe.fillna when limit is not a positive integer ,bug in setting by indexer to a scalar value with a mixed-dtype panel4d was failing ,error message for missing required imports now includes the original import error s text ,fixed bug where dataframe column set to scalar extension type via a dict instantiation was considered an object type rather than the extension type ,series.array and index.array have been added for extracting the array backing a series or index. ,addition or subtraction of nat from timedeltaindex will return timedeltaindex instead of datetimeindex ,bug in dataframe.append when appending a series containing a scalar tz-aware timestamp to an empty dataframe resulted in an object column instead of datetime64 dtype ,"to_timedelta, timedelta, and timedeltaindex no longer allow m , y , or y for the unit argument ",fixed regression in dataframe.loc and series.loc for __setitem__ when one-dimensional tuple was given to select from multiindex ,"series has gained an accessor to succinctly return datetime like properties for the values of the series, if its a datetime/period like series. this will return a series, indexed like the existing series. see the docs",we can construct a series with the specified dtype. the dtype string int64 is a pandas extensiondtype. specifying a list or array using the traditional missing value marker of np.nan will infer to integer dtype. the display of the series will also use the nan to indicate missing values in string outputs. ,pandas.errors.optionerror is now exposed in pandas.errors ,"calling sum or prod on an empty or all-nan series, or columns of a dataframe, will result in nan. see the docs.",qcut and cut now handle boolean input ,bug in pd.concat in which concatenating with an empty dataframe with join='inner' was being improperly handled ,improved performance of nanops for dtypes that cannot store nans. speedup is particularly prominent for series.all and series.any ,"fixed regression in dataframe.__setitem__ raising valueerror when expanding dataframe and new column is from type ""0 - name"" ","removed the previously deprecated keyword labels from the multiindex constructor, use codes instead ",passing scalar values to datetimeindex or timedeltaindex will now raise typeerror instead of valueerror ,bug in date_range/datetimeindex when the timezone was inferred from input dates yet incorrect times were returned when crossing dst boundaries .,eval has also been updated to allow multi-line expressions for multiple assignments. these expressions will be evaluated one at a time in order. only assignments are valid for multi-line expressions.,os.linesep is used for line_terminator of dataframe.to_csv,"in hdfstore, select_as_multiple will always raise a keyerror, when a key or the selector is not found ",bug in read_msgpack with a non existent file is passed in python 2 ,"bug in dataframe.to_stata, pandas.io.stata.statawriter and pandas.io.stata.statawriter117 where a exception would leave a partially written and invalid dta file ",bug in indexing with a periodindex on an object with a periodindex ,read_excel now supports the true_values and false_values keyword arguments ,"the rules for the result dtype in dataframe.resample aggregations have changed for extension types . previously, pandas would attempt to convert the result back to the original dtype, falling back to the usual inference rules if that was not possible. now, pandas will only return a result of the original dtype if the scalar values in the result are instances of the extension dtype s scalar type.","strings passed to dataframe.groupby as the by parameter may now reference either column names or index level names. previously, only column names could be referenced. this allows to easily group by a column and index level at the same time. ",new apis for accessing the array backing a series or index,"this is all exactly identical to the behavior before. however, if you ask for a key not contained in the series, in versions 0.6.1 and prior, series would fall back on a location-based lookup. this now raises a keyerror:",fixed regression in dataframe.loc and series.loc throwing an error when a datetime64 value is provided ,the pandas.io.data and pandas.io.wb modules are removed in favor of the pandas-datareader package .,bug in format in which floating point complex numbers were not being formatted to proper display precision and trimming ,you can have an expression like df.query with no complaints from pandas about ambiguity of the name a.,"the compression code was refactored . as a result, reading dataframes from urls in read_csv or read_table now supports additional compression methods: xz, bz2, and zip . previously, only gzip compression was supported. by default, compression of urls and paths are now inferred using their file extensions. additionally, support for bz2 compression in the python 2 c-engine improved .",incorrect dtyped series was returned by comparison methods against a constant for an empty dataframe ,bug in series.transform would give incorrect results or raise when the argument func was a dictionary ,fixed regression in series.rename_axis and dataframe.rename_axis where passing none failed to remove the axis name ,clipboard functionality now works with pyside ,more helpful error message when constructing a dataframe with empty data but with indices ,bug in dataframe.equals and series.equals in allowing subclasses to be equal .,these are the changes in pandas 1.0.0. see release notes for a full changelog including other versions of pandas.,"new periodindex and period classes for representing time spans and performing calendar logic, including the 12 fiscal quarterly frequencies <timeseries.quarterly>. this is a partial port of, and a substantial enhancement to, elements of the scikits.timeseries code base. support for conversion between periodindex and datetimeindex",subtracting nat from a series with dtype='datetime64' returns a series with dtype='timedelta64' instead of dtype='datetime64' ,".get_value and .set_value on series, dataframe, panel, sparseseries, and sparsedataframe are deprecated in favor of using .iat or .at accessors ","due to dropping support for python 2.7, a number of optional dependencies have updated minimum versions . independently, some minimum supported versions of dependencies were updated . if installed, we now require:",rearranged the order of keyword arguments in read_excel to align with read_csv ,rearranged the order of keyword arguments in read_excel to align with read_csv ,deprecated index.is_all_dates ,fixed an issue where cumsum and cumprod didn t work with bool dtypes ,the display.show_dimensions option can now also be used to specify whether the length of a series should be shown in its repr .,bug in to_latex where repeated multiindex values were not printed even though a higher level index differed from the previous row ,possible incompatibility for hdf5 formats created with pandas < 0.13.0,possible incompatibility for hdf5 formats created with pandas < 0.13.0,"index.astype now accepts an optional boolean argument copy, which allows optional copying if the requirements on dtype are satisfied ",as opposed to,bug in c parser with leading white space ,"using dataframe.replace with overlapping keys in a nested dictionary will no longer raise, now matching the behavior of a flat dictionary ",bug in ujson.encode was raising an overflowerror with numbers larger than sys.maxsize ,sparse suite now supports integration with non-sparse data. non-float sparse data is supportable ,"constructing a datetimeindex from data with timedelta64-dtyped data is deprecated, will raise typeerror in a future version ",bug in setting a new label on a dataframe or series with a categoricalindex incorrectly raising typeerror when the new label is not among the index s categories ,"series.update now accepts objects that can be coerced to a series, such as dict and list, mirroring the behavior of dataframe.update ",bug in sparse indexing using sparsearray with bool dtype may return incorrect result ,notice how we now instead output np.nan itself instead of a stringified form of it.,"intervalindex.to_tuples has gained the na_tuple parameter to control whether na is returned as a tuple of na, or na itself ",bug in str.extractall when there were no matches empty index was returned instead of appropriate multiindex ,fixed bug in pandas.testing.assert_series_equal where dtypes were checked for interval and extensionarray operands when check_dtype was false ,"calls such as dataframe.round with a non-unique categoricalindex now return expected data. previously, data would be improperly duplicated .",bug in series.loc and dataframe.loc when indexing with an integer key on a object-dtype index that is not all-integers ,improved performance series creation with a datetime index and dictionary data ,rolling_window now normalizes the weights properly in rolling mean mode so that the calculated weighted means are distributed about the same means as those calculated without weighting . see the note on normalization for further details. ,"accept textfilereader in concat, which was affecting a common user idiom , this was a regression from 0.13.1",the conversion from a series or index with timezone-aware datetime data will change to preserve timezones by default .,bug in merge where how='left' and sort=false would not preserve left frame order ,bug in .quantile with empty series may return scalar rather than empty series ,specify string columns to parse as datetimes with the parse_dates keyword in read_sql_query and read_sql_table.,"bug in outputting a multiindex with to_html,index=false which would add an extra column ","creating a series from another series, passing an index, will cause reindexing to happen inside rather than treating the series like an ndarray. technically improper usages like series that worked before by accident will lead to all na series in some cases. to be perfectly clear:","the categorical constructor with two arguments changed from codes/labels and levels to values and levels . this can lead to subtle bugs. if you use categorical directly, please audit your code by changing it to use the from_codes constructor.",add logy option to series.plot for log-scaling on the y axis,"deprecate the engine keyword in .to_csv, which will be removed in a future version ","timestamp.tz_localize, datetimeindex.tz_localize, and series.tz_localize have gained the nonexistent argument for alternative handling of nonexistent times. see nonexistent times when localizing ",and preserves the categoricalindex,experimental features,experimental features,fixed division by zero error for series.kurt when all values are equal ,"bug in series.item with datetime64 or timedelta64 dtype, datetimeindex.item, and timedeltaindex.item returning an integer instead of a timestamp or timedelta ","the read_excel function s sheetname argument now accepts a list and none, to get multiple or all sheets respectively. if more than one sheet is specified, a dictionary is returned. ",pd.stats.moments.rolling_var now uses welford s method for increased numerical stability ,"timestamp and datetimeindex comparisons between tz-aware and tz-naive objects now follow the standard library datetime behavior, returning true/false for !=/== and raising for inequality comparisons ",bug in unary inversion operator on a sparseseries with boolean values. the performance of this has also been improved ,"this is a major release from 0.21.1 and includes a single, api-breaking change. we recommend that all users upgrade to this version after carefully reading the release note .",bug in datetimeindex.get_indexer where incorrect output would be returned for mixed datetime-like targets ,# use pandas to process and reshape the dataset,"bug in pd.read_csv when specifying names, usecols, and parse_dates simultaneously with the c engine ","the read_csv function now supports parsing a categorical column when specified as a dtype . depending on the structure of the data, this can result in a faster parse time and lower memory usage compared to converting to categorical after parsing. see the io docs here.",bug in categorical may not representing properly when category contains tz or period ,"previously, the default value for the maximum number of columns was pd.options.display.max_columns=20. this meant that relatively wide data frames would not fit within the terminal width, and pandas would introduce line breaks to display these 20 columns. this resulted in an output that was relatively difficult to read:","the default time series resample binning behavior of daily d and higher frequencies has been changed to closed='left', label='left'. lower nfrequencies are unaffected. the prior defaults were causing a great deal of confusion for users, especially resampling data to daily frequency .","however, this input does not make much sense because the output is not being assigned to the target. now, a valueerror will be raised when such an input is passed in:",fixed the return type of intervalindex.is_non_overlapping_monotonic to be a python bool for consistency with similar attributes/methods. previously returned a numpy.bool_. ,bug in date_range with custom business hours as freq and given number of periods ,calling fillna on series or dataframe with no arguments is no longer valid code. you must either specify a fill value or an interpolation method:,"bug in index prevents copying name of passed index, when a new name is not provided ",bug in to_csv causes encoding error when compression and encoding are specified ,updated bigquery connector to no longer use deprecated oauth2client.tools.run ,dataframe.pivot can now take lists for index and columns arguments ,bug in groupby when grouping on categorical causes valueerror and incorrect grouping if observed=true and nan is present in categorical column .,bug in datetimeindex and periodindex in-place addition and subtraction cause different result from normal one ,previously an enlargement with a mixed-dtype frame would act unlike .append which will preserve dtypes :,bug in concat where the resulting freq of two datetimeindex with the same freq would be dropped .,fixed bug with duplicate columns and type conversion in read_json when orient='split' ,bug in plotting regular and irregular timeseries using shared axes ) .,operations between a series with dtype dtype='datetime64' and a periodindex will correctly raises typeerror ,"after upgrading pandas, you may see new runtimewarnings being issued from your code. these are likely legitimate, and the underlying cause likely existed in the code when using previous versions of pandas that simply silenced the warning. use numpy.errstate around the source of the runtimewarning to control how these conditions are handled.",fixed a py3 compat issue where bytes were being repr d as tuples ,hdfstore.select_as_coordinates and select_column works with a where clause that results in filters ,miscellaneous renames and deprecations which will raise futurewarning,"highlights include a consistent i/o api naming scheme, routines to read html, write multiindexes to csv files, read & write stata data files, read & write json format files, python 3 support for hdfstore, filtering of groupby expressions via filter, and a revamped replace routine that accepts regular expressions.",added example for dataframe import to r using hdf5 file and rhdf5 library. see the documentation for more .,"the new implementation allows for having a single-timezone across all rows, with operations in a performant manner.",hdfstore has a new string based syntax for query specification,bug in groupby.transform was returning the wrong result when grouping by multiple keys of which some were categorical and others not ,bug in dataframe.to_dict produces a np.datetime64 object instead of timestamp when only datetime is present in data ,bug in categorical.apply where nan values could be handled unpredictably. they now remain unchanged ,"the file parsers read_csv and read_table now ignore line comments provided by the parameter comment, which accepts only a single character for the c reader. in particular, they allow for comments before file data begins ",bug in read_excel with multiindex containing integers ,"bug in ndframe: conflicting attribute/column names now behave consistently between getting and setting. previously, when both a column and attribute named y existed, data.y would return the attribute, while data.y = z would update the column ",bug in to_datetime which raises typeerror for format='%y%m%d' when called for invalid integer dates with length >= 6 digits with errors='ignore',"the default value of the ordered parameter for categoricaldtype has changed from false to none to allow updating of categories without impacting ordered. behavior should remain consistent for downstream objects, such as categorical ",fixed bug where stringarray.memory_usage was not implemented ,the dataframe.assign now accepts dependent keyword arguments for python version later than 3.6 . later keyword arguments may now refer to earlier ones if the argument is a callable. see the documentation here ,"bug in dataframe.to_csv when supplied a series with a dtype=""string"" and a na_rep, the na_rep was being truncated to 2 characters. ",bug in dataframe.astype when passing a dict of columns and types the errors parameter was ignored. ,this now matches the existing behavior of concat on series with sparse values. concat will continue to return a sparsedataframe when all the values are instances of sparsedataframe.,bug in series 0-division with a float and integer operand dtypes ,# will not show dimensions since it is not truncated,becomes,bug in indexing on a series or dataframe with a categoricalindex using a list-like indexer containing na values ,timestamp will no longer silently ignore unused or invalid tz or tzinfo keyword arguments ,timestamp.replace now supports the fold argument to disambiguate dst transition times ,"cdate_range has been deprecated in favor of bdate_range, which has gained weekmask and holidays parameters for building custom frequency date ranges. see the documentation for more details ",read_csv will now raise a valueerror when the arguments header and prefix both are not none. ,"fixed failing tests in test_yahoo, test_google where symbols were not retrieved but were being accessed ","previously, concat of multiple objects with different float dtypes would automatically upcast results to a dtype of float64. now the smallest acceptable dtype will be used ",bug in resample with non evenly divisible offsets ,"until 0.18.1, comparing series with the same length, would succeed even if the .index are different . as of 0.19.0, this will raises valueerror to be more strict. this section also describes how to keep previous behavior or align different indexes, using the flexible comparison methods like .eq.","fixed regression in dataframe.replace where large strings of numbers would be coerced into int64, causing an overflowerror ","the public functions in pandas.tools.hashing deprecated from that locations, but are now importable from pandas.util ",bug in dataframe and series addition and subtraction between object-dtype objects and datetime64 dtype objects ,bug in read_msgpack where input type is not always checked ,fixed bug in dataframe.set_values which was causing name attributes to be lost when expanding the index. ,"as usual, both sides of the slicers are included as this is label indexing.",fixed performance regression when indexing a dataframe or series with a multiindex for the index using a list of labels ,the only positional indexing is via iloc,"this may cause hdf5 files that were created in prior versions to become unreadable if pd.timeseries was used. this is most likely to be for pandas < 0.13.0. if you find yourself in this situation. you can use a recent prior version of pandas to read in your hdf5 files, then write them out again after applying the procedure below.",unary + now permitted for series and dataframe as numeric operator ,"bug in setting with loc/ix a single indexer with a multiindex axis and a numpy array, related to ","when called on an unsorted multiindex, the loc indexer now will raise unsortedindexerror only if proper slicing is used on non-sorted levels .",use an operator implementation from pandas that depends on operators that are already defined on the underlying elements of the extensionarray.,"using dataframe.groupby with as_index=false and the function idxmax, idxmin, mad, nunique, sem, skew, or std would modify the grouping column. now the grouping column remains unchanged, consistent with other reductions. ",bug in index constructor with dtype='uint64' where int-like floats were not coerced to uint64index ,"dataframe and series now have _constructor_expanddim property as overridable constructor for one higher dimensionality data. this should be used only when it is really needed, see here",vbench special cython matrix iterator for applying arbitrary reduction operations with 3-5x better performance than np.apply_along_axis ,"fixed regression in repr of floats in an object column not respecting float_format when printed in the console or outputted through dataframe.to_string, dataframe.to_html, and dataframe.to_latex ",improved performance in certain types of loc indexing with a multiindex .,"bug in dataframe.apply with result_type=""reduce"" returning with incorrect index ","set_names, set_labels, and set_levels methods now take an optional level keyword argument to all modification of specific level of a multiindex. additionally set_names now accepts a scalar string value when operating on an index or on a specific level of a multiindex ","intervaldtype now returns true when compared against 'interval' regardless of subtype, and intervaldtype.name now returns 'interval' regardless of subtype ","when plotting a datetimeindex directly with matplotlib s plot function, the axis labels will no longer be formatted as dates but as integers . update this is fixed in 0.15.1, see here.",.rolling objects are now time-series aware and can accept a time-series offset for the window argument . see the full documentation here.,fixed regression in dataframe.__setitem__ raising an attributeerror with a multiindex and a non-monotonic indexer ,dataframe.tz_localize and dataframe.tz_convert now accepts an optional level argument for localizing a specific level of a multiindex ,"implement dataframe.lookup, fancy-indexing analogue for retrieving values given a sequence of row and column labels ","bug in series constructor with an int or float list where specifying dtype=str, dtype='str' or dtype='u' failed to convert the data elements to strings ",optionally disallow duplicate labels,bug in loc setting with multiple indexers and a rhs of a series that needs broadcasting ,"in previous versions, .groupby would fail with a valueerror when grouping on a categorical series with some categories not appearing in the data. ","due to a bug fix, looking up a partial string label with datetimeindex.asof now includes values that match the string, even if they are after the start of the partial string label .",fixed regression in inplace operations on series with extensiondtype with numpy dtyped operand ,removed api.types.is_period and api.types.is_datetimetz ,fixed regression in integerarray unary plus and minus operations raising a typeerror ,the series constructor and .astype method will now raise a valueerror if timestamp dtypes are passed in without a unit for the dtype parameter ,bug in dataframe assignment with an object-dtyped index where the resultant column is mutable to the original object. ,bug when iterating over datetimeindex that was localized with fixed timezone offset that rounded nanosecond precision to microseconds ,dataframe.to_csv and series.to_csv now support dicts as compression argument with key 'method' being the compression method and others as additional compression options when the compression method is 'zip'. ,dataframe.to_hdf and series.to_hdf will now raise a notimplementederror when saving a multiindex with extension data types for a fixed format. ,"you can provide any of the selectors as if you are indexing by label, see selection by label, including slices, lists of labels, labels, and boolean indexers.","passing categories or ordered kwargs to series.astype is deprecated, in favor of passing a categoricaldtype ",fixed regression in joining on datetimeindex or timedeltaindex to preserve freq in simple cases ,incorrectly distributed .c file in the build on pypi when reading a csv of floats and passing na_values=<a scalar> would show an exception ,a valueerror is now raised instead of a generic exception in read_csv when the c engine encounters a nan value in an integer column ,"in 0.13.0 there is a major refactor primarily to subclass series from ndframe, which is the base class currently for dataframe and panel, to unify methods and behaviors. series formerly subclassed directly from ndarray. ","the default behavior of min_periods=none, implying that min_periods equals the window size, is unchanged.",# to be more consistent with datetime.timedelta conventions,bug in multiindex where __contains__ returns wrong result if index is not lexically sorted or unique ,read_excel can now use openpyxl to read excel files via the engine='openpyxl' argument. this will become the default in a future release ,indexing with dtype conversions fixed ,reindex_axis has been deprecated in favor of reindex. see here for more .,bug in series creation with np.datetime64 which has other unit than ns as object dtype results in incorrect values ,dataframe.join now suppresses the futurewarning when the sort parameter is specified ,"if python runs in a terminal, the maximum number of columns is now determined automatically so that the printed data frame fits within the current terminal width . if python runs as a jupyter kernel , this value cannot be inferred automatically and is thus set to 20 as in previous versions. in a terminal, this results in a much nicer output:",bug in dataframe.apply in which reduction was not being prevented for cases in which dtype was not a numpy dtype ,method .groupby syntax with window and resample operations,method .groupby syntax with window and resample operations,bug in categorical operations with series.cat not preserving the original series name ,bug in timestamp.tz_localize where localizing a timestamp near the minimum or maximum valid values could overflow and return a timestamp with an incorrect nanosecond value ,experimental support has been added to export dataframe.style formats to excel using the openpyxl engine. ,"previously, selecting with a list of labels, where one or more labels were missing would always succeed, returning nan for missing labels. this will now show a futurewarning. in the future this will raise a keyerror . this warning will trigger on a dataframe or a series for using .loc or ] when passing a list-of-labels with at least 1 missing label. see the deprecation docs.","note that entry 0 is approximately 0, and the debiasing factors are a constant 1.25. by comparison, the following 0.15.0 results have a nan for entry 0, and the debiasing factors are decreasing :",bug in pd.read_csv when specifying delim_whitespace=true and lineterminator simultaneously with the c engine ,this is like an append operation.,"the power of assign comes when used in chains of operations. for example, we can limit the dataframe to just those with a sepal length greater than 5, calculate the ratio, and plot","panel was deprecated in the 0.20.x release, showing as a deprecationwarning. using panel will now show a futurewarning. the recommended way to represent 3-d data are with a multiindex on a dataframe via the to_frame or with the xarray package. pandas provides a to_xarray method to automate this conversion .",allow an excelfile object to be passed into read_excel ,period and periodindex now raises incompatiblefrequency error which inherits valueerror rather than raw valueerror ,more informative exceptions are passed through the csv parser. the exception type would now be the original exception type instead of cparsererror .,bug with datetimeindex.asof incorrectly matching partial strings and returning the wrong date .,bug in pd.read_csv for the python engine in which an unhelpful error message was being raised when skipfooter was not being respected by python s csv library ,fixed issue where taking min or max of a stringarray or series with stringdtype type would raise. ,"new behavior. if the input dtypes are integral, the output dtype is also integral and the output values are the result of the bitwise operation.",pd.read_csv will now issue a parserwarning whenever there are conflicting values provided by the dialect parameter and the user ,bug in arithmetic operations between dataframe objects with non-overlapping columns with duplicate labels causing an infinite loop ,"rangeindex now performs standard lookup without instantiating an actual hashtable, hence saving memory ",bug in series constructor when both copy=true and dtype arguments are provided ,this type of aggregation is the recommended alternative to the deprecated behavior when passing a dict to a series groupby aggregation with a dictionary when renaming).,bug in pd.read_csv with parse_dates when multi-line headers are specified ,"changed the default configuration value for options.matplotlib.register_converters from true to ""auto"" . now, pandas custom formatters will only be applied to plots created by pandas, through plot. previously, pandas formatters would be applied to all plots created after a plot. see units registration for more.",the inplace keyword parameter was also added the query method.,"previously, these would be cast to a numpy array with object dtype. in general, this should result in better performance when storing an array of intervals or periods in a series or column of a dataframe.","if you would like to update both the index and column labels, be sure to use the respective keywords.",the fastpath keyword of the different index constructors is deprecated .,bug in intervalarray incorrectly allowing the underlying data to be changed when setting values ,"dataframe.any and dataframe.all with bool_only=true now determines whether to exclude object-dtype columns on a column-by-column basis, instead of checking if all object-dtype columns can be considered boolean.","support for s3 handling now uses s3fs, see here",bug in read_fwf with skip_blank_lines=true was not skipping blank lines ,fixed regression in setitem with dataframe.iloc which raised error when trying to set a value while filtering with a boolean list ,added support for writing nan values with to_sql .,bug in datetimeindex.intersection and timedeltaindex.intersection with results not having the correct name attribute ,reading from a store with duplicate columns across dtypes would raise ,removed series.get_dtype_counts and dataframe.get_dtype_counts ,bug in series that allows it to be indexed by a dataframe which has unexpected results. such indexing is no longer permitted ,bug in to_datetime with a format and coerce=true not raising ,for to_datetime changed default value of cache parameter to true ,"bug in is_string_dtype, is_timedelta64_ns_dtype, and is_string_like_dtype in which an error was raised when none was passed in ","in pandas 1.2.0, we refactored how numpy ufuncs are called on dataframes, and this started to align the inputs first , as happens in other pandas operations and as it happens for ufuncs called on series objects.",changes to to_datetime and to_timedelta,changes to to_datetime and to_timedelta,new unsortedindexerror raised when indexing/slicing into an unsorted multiindex . this allows differentiation between errors due to lack of sorting or an incorrect key. see here,"this change only affects 64 bit python running on windows, and only affects relatively advanced indexing operations","if an expiry date that is not valid is given, data for the next expiry after the given date is returned.",bug in series.where and dataframe.where with datetime64 dtype ,series and multiindex .drop with multiindex raise exception if labels not in given in level ,nat will now returns nat for tz_localize and tz_convert methods ,pd.merge_asof can take multiple columns in by parameter and has specialized dtypes for better performance ,bug in pandas.to_datetime when called with none raising typeerror instead of returning nat ,"series now supports bitwise operation for integral types . previously even if the input dtypes were integral, the output dtype was coerced to bool.","fixes regression from 0.20, series.aggregate and dataframe.aggregate allow dictionaries as return values again ",bug in dataframegroupby.transform when transforming with a passed non-sorted key ,the traceback from a keyerror when asking .loc for a single missing label is now shorter and more clear ,bug in cut raised an error when the argument labels contains duplicates ,bug in dataframe.idxmax and dataframe.idxmin with mixed dtypes incorrectly raising typeerror ,accessing series.str methods on with non-string values now raises typeerror instead of producing incorrect results ,bug in core.groupby.dataframegroupby.agg not able to use lambda function with named aggregation ,improved the col_space parameter in dataframe.to_html to accept a string so css length values can be set correctly ,rolling now supports the closed argument for fixed windows ,bug in pd.to_numeric in which float and unsigned integer elements were being improperly casted ,improved the explanation for the failure when value labels are repeated in stata dta files and suggested work-arounds ,the new functionality works well in method chains. previously these methods only accepted functions or dicts mapping a label to a new label. this continues to work as before for function or dict-like values.,datetimeindex will now raise an attributeerror when the tz attribute is set after instantiation ,bug in read_stata where value labels could not be read when using an iterator ,bug in series constructor where integer overflow would occur for sufficiently large scalar inputs when an index was provided ,hdfstore.keys has now an optional include parameter that allows the retrieval of all native hdf5 table names ,these are the changes in pandas 1.1.3. see release notes for a full changelog including other versions of pandas.,"added ftypes method to series/dataframe, similar to dtypes, but indicates if the underlying is sparse/dense ",bug in dataframe allowing arithmetic operations with list of array-likes with undefined results. behavior changed to raising valueerror ,dtypes are now preserved when transposing a dataframe where each column is the same extension dtype ,bug in setitem with empty indexer and unwanted coercion of dtypes ,"series.rolling.apply, dataframe.rolling.apply, series.expanding.apply, and dataframe.expanding.apply have gained a raw=none parameter. this is similar to datafame.apply. this parameter, if true allows one to send a np.ndarray to the applied function. if false a series will be passed. the default is none, which preserves backward compatibility, so this will default to true, sending an np.ndarray. in a future version the default will be changed to false, sending a series. ",removed sparseseries and sparsedataframe,bug in .to_clipboard and excel compat ,bug in assigning to chained series with a series via ix ,bug while selecting from hdfstore with where='' specified .,bug in assignment against datetime with timezone may not work if it contains datetime near dst boundary ,compat with scipy > 0.17 for deprecated piecewise_polynomial interpolation method; support for the replacement from_derivatives method ,"removal of the automatic timeseries broadcasting, deprecated since 0.8.0, see here",series.first and dataframe.first will now raise a typeerror rather than notimplementederror when index is not a datetimeindex .,"pandas now also registers the datetime64 dtype in matplotlib s units registry to plot such values as datetimes. this is activated once pandas is imported. in previous versions, plotting an array of datetime64 values will have resulted in plotted integer values. to keep the previous behaviour, you can do del matplotlib.units.registry .",support for writing the index. this can be controlled with the index keyword .,bug preventing access to the first index when using iloc with a list containing the appropriate negative integer ,bug in get where an indexerror would not cause the default value to be returned ,fixed an issue where hist subplots were being overwritten when they were called using the top level matplotlib api ,dataframe.apply will use the reduce argument to determine whether a series or a dataframe should be returned when the dataframe is empty .,"when .resample was changed from an eager to a lazy operation, like .groupby in v0.18.0, we put in place compatibility , so operations would continue to work. this is now fully removed, so a resampler will no longer forward compat operations ",it was possible to use series/dataframe.sort_index to sort by values by passing the by keyword.,"using date accessors on a categorical dtyped series of datetimes was not returning an object of the same type as if one used the str. / dt. on a series of that type. e.g. when accessing series.dt.tz_localize on a categorical with duplicate entries, the accessor was skipping duplicates ","calling fillna on an empty series now correctly returns a shallow copied object. the behaviour is now consistent with index, dataframe and a non-empty series .",bug in datetimeindex.tz_localize and timestamp.tz_localize with dateutil.tz.tzlocal near a dst transition that would return an incorrectly localized datetime ,the levels and labels attributes of a multiindex can no longer be set directly .,index now supports .dropna to exclude missing values ,regression in datetimelike slice indexing with a duplicated index and non-exact end-points ,dataframe.at_time and series.at_time now support datetime.time objects with timezones ,bug in intervalindex where empty and purely na data was constructed inconsistently depending on the construction method ,fixed a bug where a typeerror was wrongly raised if a membership check was made on an extensionarray containing nan-like values ,the last element yielded by the iterator will be a series containing the last element of the longest string in the series with all other elements being nan. here since 'slow' is the longest string and there are no other strings with the same length 'w' is the only non-null string in the yielded series.,bug in dataframe.resample and series.resample when resampling by a weekly offset across a dst transition ,dataframe.to_latex now supports non-ascii encodings in python 2 with the parameter encoding ,bug in fillna with series and a passed series/dict ,nat is now used similarly for datetime containers.,pd.ordered_merge has been removed . use pd.merge_ordered instead ,bug in read_csv was raising typeerror when sep=none was used in combination with comment keyword ,bug in dataframe.sparse returning a series when there was a column named sparse rather than the accessor ,fixed bug with reading compressed files in as bytes rather than str in python 3. simplifies bytes-producing file-handling in python 3 .,check the api changes and deprecations before updating,"allow clip, clip_lower, and clip_upper to accept array-like arguments as thresholds . these methods now have an axis parameter which determines how the series or dataframe will be aligned with the threshold. ",attempting to reindex a series with a categoricalindex with an invalid fill_value now raises a typeerror instead of a valueerror ,"this case is rarely used, and there are plenty of alternatives. this preserves the iloc api to be purely positional based.",bug in dataframe.groupby where tuples were interpreted as lists of keys rather than as keys ,bug in to_msgpack and read_msgpack which would raise a valueerror rather than a filenotfounderror for an invalid path ,you can now select timestamps from an unordered timeseries similarly to an ordered timeseries ,improved performance of groupby.cummin and groupby.cummax ,"integration with apache parquet, including a new top-level read_parquet and dataframe.to_parquet method, see here .",bug in .plot.bar alignment when width is specified with int ,the modules pandas.tools.hashing and pandas.util.hashing have been removed ,avoids indexerror when passing an index or series to .iloc with older numpy ,"previously, to_datetime did not localize datetime series data when utc=true was passed. now, to_datetime will correctly localize series with a datetime64 dtype to be consistent with how list-like and index data are handled. .",arrays of strings can be wrapped to a specified width ,two arguments are now deprecated ):,bug in grouping with multiple pd.grouper where one is non-time based ,bug in pivot_table with margins=true when indexes are of categorical dtype ,support for short caption and table position in to_latex,a tuple passed to dataframe.groupby is now exclusively treated as a single key ,a errors.performancewarning is now issued when concatenating sparse series with differing fill values. the fill value from the first sparse array continues to be used.,removed the previously deprecated keyword convert_datetime64 from dataframe.to_records ,bug in series.dt.round inconsistent behaviour on nat s with different arguments ,"removed the previously deprecated keyword nthreads from read_feather, use use_threads instead ","read_csv will now by default ignore blank lines when parsing, see here",pd.read_csv will now raise a valueerror for the c engine if the quote character is larger than one byte ,improved performance of series.at and index.get_value for extension arrays values ,bug in index.delete does not preserve name and freq attributes ,clarify sorting of sym_diff on index objects with nan values ,"note that for floats that are not coercible to ints, the label based bounds will be excluded",the series constructor and .astype method have deprecated accepting timestamp dtypes without a frequency for the dtype parameter ,bug in table.select_column where name is not preserved ,to_datetime now raises a valueerror when format includes %w or %u without also including day of the week and calendar year ,"an asof merge joins on the on, typically a datetimelike field, which is ordered, and in this case we are using a grouper in the by field. this is like a left-outer join, except that forward filling happens automatically taking the most recent non-nan value.","the freq and how parameters have been removed from the rolling/expanding/ewm methods of dataframe and series . instead, resample before calling the methods. ",operating against a 2-dimensional np.ndarray with either 1 row or 1 column will now broadcast the same way a np.ndarray would .,timestamp objects can now appear in the left hand side of a comparison operation with a series or dataframe object .,"scalar selection for ,.ix,.loc will always be label based. an integer will match an equal float index ",removed the previously deprecated keyword fastpath from the index constructor ,"when reading buffer object in read_sas method without specified format, filepath string is inferred rather than buffer object. ","pass the desired columns names as the **kwargs to .agg. the values of **kwargs should be tuples where the first element is the column selection, and the second element is the aggregation function to apply. pandas provides the pandas.namedagg namedtuple to make it clearer what the arguments to the function are, but plain tuples are accepted as well.","the deprecated internal attributes _start, _stop and _step of rangeindex now raise a futurewarning instead of a deprecationwarning ",fixed regression in logical operators raising valueerror when columns of dataframe are a categoricalindex with unused categories ,experimental na scalar to denote missing values,"we ve added a new option to control the converters: pd.options.plotting.matplotlib.register_converters. by default, they are registered. toggling this to false removes pandas formatters and restore any converters we overwrote when registering them .",passing duplicated percentiles will now raise a valueerror.,improved performance of slicing and other selected operation on a rangeindex ,here is a summary of the api prior to 0.17.0:,"bug in read_json for orient='table' when it tries to infer dtypes by default, which is not applicable as dtypes are already defined in the json schema ",fixed regression in groupby.rolling.apply where the raw parameter was ignored ,interpolate now also accepts a limit keyword argument. this works similar to fillna s limit:,bug where calling categorical.min or categorical.max on an empty categorical would raise a numpy exception ,pandas.tseries.holiday has added support for additional holidays and ways to observe holidays ,bug in dataframe.groupby where aggregation by first/last/min/max was causing timestamps to lose precision ,regression in the display of a multiindexed series with display.max_rows is less than the length of the series ,"categorical.astype now accepts an optional boolean argument copy, effective when dtype is categorical ",the output formatting of groupby.describe now labels the describe metrics in the columns instead of the index. this format is consistent with groupby.agg when applying multiple functions at once. ,"integration with apache parquet, including a new top-level read_parquet function and dataframe.to_parquet method, see here.",bug in .to_csv when a mix of integer and string column names are passed as the columns parameter ,bug in series.quantile with empty list results has index with object dtype ,bug in rank where comparing floats with tolerance will cause inconsistent behaviour .,"remove force_unicode keyword from dataframe.to_string, dataframe.to_latex, and dataframe.to_html; these function encode in unicode by default ",pandas.tseries.plotting.tsplot is deprecated. use series.plot instead ,merging on a combination of columns and index levels,merging on a combination of columns and index levels,background_gradient now also supports tablewise application with axis=none ,bug in nat subtraction from timestamp or datetimeindex with timezones ,categorical has dropped the .order and .sort methods in favor of .sort_values ,bug in datetimetzdtype dtype with dateutil.tz.tzlocal cannot be regarded as valid dtype ,reindex now has a tolerance argument that allows for finer control of limits on filling while reindexing :,enhanced read_csv/read_table for reading time series data and converting multiple columns to dates,fixed regression in pandas.testing.assert_frame_equal raising typeerror with check_like=true when index or columns have mixed dtype ,bug in read_excel that was raising a typeerror when header=none and index_col is given as a list ,"continuing from v0.16.0, the following enhancements make string operations easier and more consistent with standard python string operations.",fixed regression in dataframe and series comparisons between numeric arrays and strings ,bug in read_json where date strings with z were not converted to a utc timezone ,"one of the inconsistent behaviors occurred when the start, end and period parameters were all specified, potentially leading to ambiguous ranges. when all three parameters were passed, interval_range ignored the period parameter, period_range ignored the end parameter, and the other range functions raised. to promote consistency among the range functions, and avoid potentially ambiguous ranges, interval_range and period_range will now raise when all three parameters are passed.",sparsearray.cumsum and sparseseries.cumsum will now always return sparsearray and sparseseries respectively ,here is the correct method of assignment.,"integration with the feather-format, including a new top-level pd.read_feather and dataframe.to_feather method, see here.","integration with the feather-format, including a new top-level pd.read_feather and dataframe.to_feather method, see here.","notice that by default, if no dtype is specified, the dtype of the returned array is inferred from the data. in particular, note that the first example of would have returned a floating-point array, since nan is a float.",raise valueerror when fallback to python parser causes options to be ignored ,bug in to_datetime where passing arrays of malformed str with errors= coerce could incorrectly lead to raising valueerror ,it is possible to perform quite complicated selections using this method on multiple axes at the same time.,"inplace arguments now require a boolean value, else a valueerror is thrown ",bug in the date and time converters pandas registers with matplotlib not handling multiple dimensions ,fix regression in error message with np.min or np.max on unordered categorical ,fixes regression when sorting by multiple columns on a datetime64 dtype series with nat values ,c and python parser can now handle the more common multiindex column format which doesn t have a row for index names ,added parse_dates option to read_csv and read_table methods to optionally try to parse dates in the index columns,the default value ordered=none in categoricaldtype has been deprecated in favor of ordered=false. when converting between categorical types ordered=true must be explicitly passed in order to be preserved. ,bug preventing pandas from being importable with -oo optimization ,improved wording of valueerror raised in to_datetime when unit= is passed with a non-convertible value ,we ve deprecated the current behavior of series.argmax and series.argmin. using either of these will emit a futurewarning. use series.idxmax if you want the label of the maximum. use series.values.argmax if you want the position of the maximum. likewise for the minimum. in a future release series.argmax and series.argmin will return the position of the maximum or minimum.,fixed panel slicing issued in xs that was returning an incorrect dimmed object ,"bug in dataframegroupby.head, dataframegroupby.tail, seriesgroupby.head, and seriesgroupby.tail would raise when used with axis=1 ",bug in pd.merge results in empty int64index rather than index when the merge result is empty ,pd.categorical has dropped the levels attribute in favor of categories ,"in the past, users could in some cases add or subtract integers or integer-dtype arrays from timestamp, datetimeindex and timedeltaindex.",the new functions read_sql_query and read_sql_table are introduced. the function read_sql is kept as a convenience wrapper around the other two and will delegate to specific function depending on the provided input .,bug in pandas.core.groupby.groupby.first and pandas.core.groupby.groupby.last with as_index=false leading to the loss of timezone information ,series.interpolate now supports timedelta as an index type with method='time' ,"excelwriter now accepts mode as a keyword argument, enabling append to existing workbooks when using the openpyxl engine ",the i/o api is now much more consistent with a set of top level reader functions accessed like pd.read_csv that generally return a pandas object.,"in pandas 0.17.0, the sub-package pandas.io.data will be removed in favor of a separately installable package .","read_csv now supports parsing categorical data, see here",sorting by a combination of columns and index levels,sorting by a combination of columns and index levels,"the refactoring in categorical changed the two argument constructor from codes/labels and levels to values and levels . this can lead to subtle bugs. if you use categorical directly, please audit your code before updating to this pandas version and change it to use the from_codes constructor. see more on categorical here",bug in index power operations with reversed operands ,the expiry parameter can now be a single date or a list-like object containing dates.,"releasing of the gil could benefit an application that uses threads for user interactions , or performing multi-threaded computations. a nice example of a library that can handle these types of computation-in-parallel is the dask library.",improved implementation of rolling min and max ,improved performance of the categoricalindex for data that is already categorical dtype ,read_csv has dropped the compact_ints and use_unsigned parameters ,"dataframe.to_excel, series.to_excel, dataframe.to_markdown, and series.to_markdown now support writing to fsspec urls such as s3 and google cloud storage ",bug in float_format option with option not being validated as a callable. ,"note that the notebook has a toggle output scrolling feature to limit the display of very large frames . you can also configure the way dataframes are displayed using the pandas options, see here here.",bug in grouped hist and scatter plots use old figsize default ,experimental new features,experimental new features,removal of the previously deprecated as_indexer keyword completely from str.match ,# the result of division by zero should not depend on,pd.to_numeric is a new function to coerce strings to numbers ,categorical has dropped support for nan categories ,bug in .set_index raises ambiguoustimeerror if new index contains dst boundary and multi levels ,"items in categorical.unique if s is of dtype category) now appear in the order in which they are originally found, not in sorted order . this is now consistent with the behavior for other dtypes in pandas.","starting in 0.11.0, object selection has had a number of user-requested additions in order to support more explicit location based indexing. pandas now supports three types of multi-axis indexing.",bug in pd.wide_to_long where no error was raised when i was not a unique identifier ,"series.describe for categorical data will now give counts and frequencies of 0, not nan, for unused categories ","with groupby , we ve added a dropna keyword to dataframe.groupby and series.groupby in order to allow na values in group keys. users can define dropna to false if they want to include na values in groupby keys. the default is set to true for dropna to keep backwards compatibility ","series.sort, dataframe.sort, and dataframe.sort_index can now be specified in a per-column manner to support multiple sort orders ",bug in date_range with frequency of day or higher where dates sufficiently far in the future could wrap around to the past instead of raising outofboundsdatetime ,now the final /2 entries of the result are calculated as if the input arg were followed by /2 nan values ). ,"bug in datetimeindex, timedeltaindex where indexing with ellipsis would lose their freq attribute ","for backwards compatibility, series.values continues to return a numpy array of objects for interval and period data. we recommend using series.array when you need the array of data stored in the series, and series.to_numpy when you know you need a numpy array.","revised merge, join, and concatenate documentation, including graphical examples to make it easier to understand each operations, see here",cut has gained the duplicates='raise'|'drop' option to control whether to raise on duplicated edges ,"series.slice_shift and dataframe.slice_shift are deprecated, use series.shift or dataframe.shift instead ",the arg argument in pandas.core.window._window.aggregate has been renamed to func ,drop unused order argument from series.sort; args now are in the same order as series.order; add na_position arg to conform to series.order ,bug in .rolling where pd.timedelta or datetime.timedelta was not accepted as a window argument ,index has dropped the .sym_diff method in favor of .symmetric_difference ,implement method cross for dataframe.merge and dataframe.join ,"however, when wrapped in a series whose dtype is datetime64 or timedelta64, the dtype information is respected.",provide a proper __name__ and __qualname__ attributes for generic functions ,"note: this is no longer true starting from v0.16.0, where full compatibility with datetime.timedelta is introduced. see the 0.16.0 whatsnew entry",bug in pd.read_csv for python 2.x in which unicode quote characters were no longer being respected ,fix install error with pypy on macos ,bug in pd.eval and hdfstore query truncating long float literals with python 2 ,fixed regression in rolling.skew and rolling.kurt modifying the object inplace ,"support for non-unique indexes: in the latter case, you may have code inside a try:... catch: block that failed due to the index not being unique. in many cases it will no longer fail . however, all is not lost: you can inspect index.is_unique and raise an exception explicitly if it is false or go to a different code branch.",bug in dataframe.corr raises exception when computes kendall correlation for dataframes with boolean and not boolean columns ,an example of this signature augmentation is illustrated below:,fix regression in dataframe.loc and series.loc throwing an error when a datetime64 value is provided ,bug in series.replace which replaced a numeric by string ,"read_excel now can read binary excel files by passing engine='pyxlsb'. for more details and example usage, see the binary excel files documentation. closes gh8540.",removal of cols keyword in favor of subset in dataframe.duplicated and dataframe.drop_duplicates ,improved exception message when calling dataframe.iloc with a list of non-numeric objects .,bug in pd.concat and .append may coerces datetime64 and timedelta to object dtype containing python built-in datetime or timedelta rather than timestamp or timedelta ,"for more details, see examples and documentation in dataframe.sort_values, series.sort_values, and sort_index.",# and is based on noaa gsod data.,pandas.merge no longer sorts the group keys by default. this was done for performance reasons: the group-key sorting is often one of the more expensive parts of the computation and is often unnecessary.,bug in sparseseries comparison with dense returns normal series rather than sparseseries ,"bug in to_datetime when format='%y%m%d' and coerce=true are specified, where previously an object array was returned , ",produce parserwarning on fallback to python parser when no options are ignored ,timestamp constructor now accepts a nanosecond keyword or positional argument ,fixed bug where two dateoffset objects with different normalize attributes could evaluate as equal ,# non-floating point indexes can only be indexed by integers / labels,bug in .to_json causing single byte ascii characters to be expanded to four byte unicode ,fixed issue using read_csv on s3 with python 3 ,crosstab has gained a margins_name parameter to define the name of the row / column that will contain the totals when margins=true. ,memory usage for index is more accurate,memory usage for index is more accurate,bug with stacked barplots and nans .,fixed regression in dataframe.groupby whereby taking the minimum or maximum of a column with period dtype would raise a typeerror. ,this is now the correct behavior,"dataframe.corr and series.corr now accept a callable for generic calculation methods of correlation, e.g. histogram intersection ",pd.read_csv in the c engine will now issue a parserwarning or raise a valueerror when sep encoded is more than one character long ,"we re working with the matplotlib developers to make this easier. we re trying to balance user convenience with import performance and best practices . in the future we hope to have most of the datetime formatting functionality in matplotlib, with just the pandas-specific converters in pandas. we ll then gracefully deprecate the automatic registration of converters in favor of users explicitly registering them when they want them.",note the series above is ordered alphabetically by the index values.,error message in pd.merge_asof for key datatype mismatch now includes datatype of left and right key ,bug in rolling.sum returned wrong values when dtypes where mixed between float and integer and axis=1 ,"added the na_value argument to series.to_numpy, index.to_numpy and dataframe.to_numpy to control the value used for missing data ","these can accept a callable, and a tuple of callable as a slicer. the callable can return a valid boolean indexer or anything which is valid for these indexer s input.",bug in read_csv when called with low_memory=false in which a csv with at least one column > 2gb in size would incorrectly raise a memoryerror .,bug in error messages in dataframe.corr and series.corr. added the possibility of using a callable. ,"bug in dataframe.to_json where timedelta objects would not be serialized correctly with date_format=""iso"" ",you can now use .rolling and .expanding as methods on groupbys. these return another deferred object and .expanding do on ungrouped pandas objects). you can then operate on these rollinggroupby objects in a similar manner.,bug in getitem with a duplicate index when using where ,categorical.from_codes has deprecated providing float values for the codes argument. ,or by specifying a sql query:,the pandas.datetime class is now deprecated. import from datetime instead ,"bug in dataframe.to_sql where a naive datetimeindex would be written as timestamp with timezone type in supported databases, e.g. postgresql ","the modules pandas.types, pandas.computation, and pandas.util.decorators have been removed ",timestamp: now supports the keyword-only fold argument according to pep 495 similar to parent datetime.datetime class. it supports both accepting fold as an initialization argument and inferring fold from other constructor arguments . support is limited to dateutil timezones as pytz doesn t support fold.,"sparsearray.take now returns a scalar for scalar input, sparsearray for others. furthermore, it handles a negative indexer with the same rule as index ","moreover, dataframe reductions with numeric_only=none will now be consistent with their series counterparts. in particular, for reductions where the series method raises typeerror, the dataframe reduction will now consider that column non-numeric instead of casting to a numpy array which may have different semantics .",changed caching in abstractholidaycalendar to be at the instance level rather than at the class level as the latter can result in unexpected behaviour. ,these were announced changes in 0.12 or prior that are taking effect as of 0.13.0,the keep_tz=false option of the keep_tz keyword of datetimeindex.to_series is deprecated .,bug when setting a new value with dataframe.loc with a datetimeindex with a dst transition ,bug in series indexing with tuple-valued data and a numeric index ,"a new top-level method array has been added for creating 1-dimensional arrays . this can be used to create any extension array, including extension arrays registered by 3rd party libraries. see the dtypes docs for more on extension arrays.","supplying the string 'category' performs column-wise conversion, with only labels appearing in a given column set as categories:",bug in hdfstore was dropping time zone information when exporting a series with datetime64 dtypes with a fixed hdf5 store ,bug in tz-conversions with an ambiguous time and .dt accessors ,bug in sql writing with mixed dtypes possibly leading to data loss ,bug in iloc indexing when positional indexer matched int64index of the corresponding axis and no reordering happened ,future versions of pandas will preserve the timezone information by returning an object-dtype numpy array where each value is a timestamp with the correct timezone attached,passing an invalid value to intervalindex.insert or categoricalindex.insert now raises a typeerror instead of a valueerror ,removed the previously deprecated true option for the dropna keyword argument in seriesgroupby.nth ,"we ve added booleandtype / booleanarray, an extension type dedicated to boolean data that can hold missing values. the default bool data type based on a bool-dtype numpy array, the column can only hold true or false, and not missing values. this new booleanarray can store missing values as well by keeping track of this in a separate mask. ",index.map can now accept series and dictionary input objects .,dataframe.to_json and series.to_json now accept an index argument which allows the user to exclude the index from the json output ,bug in series.where with an empty series and empty cond having non-bool dtype ,"label lookups series, series.loc and frame.loc used to raise either keyerror or typeerror depending on the type of key and type of index. these now consistently raise keyerror ","pandas has significantly improved support for operations involving unsigned, or purely non-negative, integers. previously, handling these integers would result in improper rounding or data-type casting, leading to incorrect results. notably, a new numerical index, uint64index, has been created ","updated the .type attribute for perioddtype, datetimetzdtype, and intervaldtype to be instances of the dtype ",bug in eval where the inplace parameter was being incorrectly handled ,bug in timestamp when passing different string date formats with a timezone offset would produce different timezone offsets ,floor division between an integer ndarray and a timedelta is deprecated. divide by timedelta.value instead ,fixed regression when indexing a series or dataframe indexed by datetimeindex with a slice containing a datetime.date ,"json nat handling fixed, nats are now serialized to null ","constructing a timedeltaindex from data with datetime64-dtyped data is deprecated, will raise typeerror in a future version ","there is a slightly different string repr for the underlying datetimeindex as a result of the dtype changes, but functionally these are the same.",bug in printing data which contains period with different freq raises valueerror ,removed the previously deprecated keyword fastpath from pandas.core.internals.blocks.make_block ,"pandas.api.types.is_list_like has gained a keyword allow_sets which is true by default; if false, all instances of set will not be considered list-like anymore ",bug in index.union behaving differently depending on whether operand is an index or other list-like ,"furthermore, previously if you had an index that was non-numeric , then a boolean index would raise a keyerror. this will now be treated as a boolean indexer.",a series will now correctly promote its dtype for assignment with incompat values to the current dtype ,improved performance of variable .rolling on .min and .max ,fixed a bug in series.hist where two figures were being created when the by argument was passed .,"bug in groupby.shift, which could cause a segfault or corruption in rare circumstances when grouping by columns with missing values ","datetimeindex partial string indexing now works as an exact match, provided that string resolution coincides with index resolution, including a case when both are seconds . see slice vs. exact match for details.","interval, intervalindex, and intervalarray have gained an is_empty attribute denoting if the given interval are empty ",added pandas.api.types.register_extension_dtype to register an extension type with pandas ,new functions or methods,"datetime64 columns in a dataframe allow the use of np.nan to indicate a nan value, in addition to the traditional nat, or not-a-time. this allows convenient nan setting in a generic way. furthermore datetime64 columns are created by default, when passed datetimelike objects ",improved performance of rangeindex.is_monotonic_increasing and is_monotonic_decreasing ,raise errors in certain aggregation cases where an argument such as numeric_only is not handled .,"categorical.fillna will always return a copy, validate a passed fill value regardless of whether there are any nas to fill, and disallow an nat as a fill value for numeric categories ",nat will now correctly return np.nan for timedelta and period accessors such as days and quarter ,bug in dataframe.astype where converting to an extension dtype when duplicate column names are present causes a recursionerror ,"in the new repr, all values will be shown, if the number of rows is smaller than options.display.max_seq_items . horizontally, the output will truncate, if it s wider than options.display.width .",bug in series.__getitem__ when using an unsigned integer array as an indexer giving incorrect results or segfaulting instead of raising keyerror ,added support for google analytics v3 api segment ids that also supports v2 ids. ,"dataframe.unstack and series.unstack now take fill_value keyword to allow direct replacement of missing values when an unstack results in missing values in the resulting dataframe. as an added benefit, specifying fill_value will preserve the data type of the original stacked data. ","thus, it is strongly encouraged to install openpyxl to read excel 2007+ files. please do not report issues when using ``xlrd`` to read ``.xlsx`` files. this is no longer supported, switch to using openpyxl instead.","we typically want to match exactly when possible, and use the most recent value otherwise.","the following methods / indexers now accept a callable. it is intended to make these more useful in method chains, see the documentation. ",fixed pip installing from source into an environment without numpy ,"read_html now defaults to none when reading, and falls back on bs4 + html5lib when lxml fails to parse. a list of parsers to try until success is also valid","the check_freq argument was added to testing.assert_frame_equal and testing.assert_series_equal in pandas 1.1.0 and defaults to true. testing.assert_frame_equal and testing.assert_series_equal now raise assertionerror if the indexes do not have the same frequency. before pandas 1.1.0, the index frequency was not checked.",bug in dataframe.as_matrix with mixed datetime64 and timedelta64 dtypes ,bug in categorical.from_codes where nan values in codes were silently converted to 0 . in the future this will raise a valueerror. also changes the behavior of .from_codes.,bug in dataframe.insert where multiple calls with duplicate columns can fail ,improved performance of datetimeindex.normalize and timestamp.normalize for timezone naive or utc datetimes ,bug in plotting subplots with dataframe.boxplot with by kw raises valueerror if the number of subplots exceeds 1 .,"improved huge datetimeindex, periodindex and timedeltaindex s ops performance including nat ",file parsing new features,file parsing new features,bug in cut with bins as an overlapping intervalindex where multiple bins were returned per item instead of raising a valueerror ,the skipna parameter of infer_dtype will switch to true by default in a future version of pandas ,".as_blocks will now take a copy optional argument to return a copy of the data, default is to copy , ",categoricalindex.reindex now raises a valueerror if the target index is non-unique and not equal to the current index. it previously only raised if the target index was not of a categorical dtype .,fixed regression in multiindex.intersection returning duplicates when at least one of the indexes had duplicates ,the metadata properties of subclasses of pandas objects will now be serialized .,the overlaps method can be used to create a boolean indexer that replicates the previous behavior of returning overlapping matches.,bug in pd.read_csv in which the dtype parameter was not being respected for empty data ,bug in dataframe with datetime64 dtype comparing against nat incorrectly ,astype now attempts to convert to datetime64 directly from object with inferred time zone from string ,"bug in json_normalize for errors='ignore' where missing values in the input data, were filled in resulting dataframe with the string ""nan"" instead of numpy.nan ",bug in dataframegroupby.cumsum and dataframegroupby.cumprod when skipna was passed ,bug in series.pct_change and dataframe.pct_change when there are duplicated indices ,"pd.get_store, replaced by a direct call to pd.hdfstore","pandas.io.gbq provides a simple way to extract from, and load data into, google s bigquery data sets by way of pandas dataframes. bigquery is a high performance sql-like database service, useful for performing ad-hoc queries against extremely large datasets. see the docs",bug in series.__setitem__ with an intervalindex and a list-like key of integers ,reduce memory usage when skiprows is an integer in read_csv ,"this release targets bugs in 0.7.1, and adds a few minor features.","deprecated the units=m and units=y parameters for units of pandas.to_timedelta, pandas.timedelta and pandas.timedeltaindex ",calling on an index with a regex with exactly one capture group returns an index if expand=false.,percentile identifiers in the index of a .describe output will now be rounded to the least precision that keeps them distinct ,"bug in dataframe.boxplot and dataframe.plot.boxplot lost color attributes of medianprops, whiskerprops, capprops and boxprops ","a rangeindex has been added to the int64index sub-classes to support a memory saving alternative for common use cases. this has a similar implementation to the python range object , in that it only stores the start, stop, and step values for the index. it will transparently interact with the user api, converting to int64index if needed.",timestamp can now accept positional and keyword parameters similar to datetime.datetime ,bug in is_superperiod and is_subperiod cannot handle higher frequencies than s ,bug in sparseseries and sparsedataframe of bool or int64 dtype may display its values like float64 dtype ,# operate with other dtypes,bug in intervalindex.is_non_overlapping_monotonic when intervals are closed on both sides and overlap at a point ,bug where dataframe arithmetic operators such as dataframe.mul with a series with axis=1 would raise an attributeerror on dataframe larger than the minimum threshold to invoke numexpr ,dataframe.sortlevel and series.sortlevel have been removed ,file parsers no longer coerce to float or bool for columns that have custom converters specified ,there s no difference in memory usage between a sparsedataframe and a dataframe with sparse values. the memory usage will be the same as in the previous version of pandas.,"dataframe.to_csv, dataframe.to_pickle, and dataframe.to_json now support passing a dict of compression arguments when using the gzip and bz2 protocols. this can be used to set a custom compression level, e.g., df.to_csv",fixed bug in setting values using a slice indexer with string dtype ,the return type of series.unique for datetime with timezone values has changed from an numpy.ndarray of timestamp objects to a arrays.datetimearray .,add spearman and kendall rank correlation options to series.corr and dataframe.corr ,bug in read_csv in which memory management was prematurely optimized for the c engine when the data was being read in chunks ,fixed a bug where groupby.plot and friends were duplicating figures multiple times .,seriesgroupby.nth has deprecated true in favor of 'all' for its kwarg dropna .,bug in date anchoring for dateframe.resample with offset day when n > 1 ,bug in read_pickle when unpickling objects with timedeltaindex or float64index created with pandas prior to version 0.20 ,bug in pd.merge_asof where left_index or right_index caused a failure when multiple by was specified ,"series.str.cat has deprecated using arbitrary list-likes within list-likes. a list-like container may still contain many series, index or 1-dimensional np.ndarray, or alternatively, only scalar values. ","grouping by a categorical includes the unobserved categories in the output. when grouping by multiple categorical columns, this means you get the cartesian product of all the categories, including combinations where there are no observations, which can result in a large number of groups. we have added a keyword observed to control this behavior, it defaults to observed=false for backward-compatibility. ",bug in dataframe.boxplot where fontsize was not applied to the tick labels on both axes ,bug in timedelta and to_timedelta have inconsistencies in supported unit string ,improve error reporting for dataframe.merge when invalid merge column definitions were given ,fixed panel assignment with a transposed frame ,bug in construction of a dataframe with mixed dtypes including an all-nat column. ,move to klib-based hash tables for indexing; better performance and less memory usage than python s dict,you can select with partial string selections,fixed regression where dataframe.to_numpy would raise a runtimeerror for mixed dtypes when converting to str ,"slicing a single row of a dataframe with multiple extensionarrays of the same type now preserves the dtype, rather than coercing to object ","slicing a single row of a dataframe with multiple extensionarrays of the same type now preserves the dtype, rather than coercing to object ",an extensionarray with a boolean dtype now works correctly as a boolean indexer. pandas.api.types.is_bool_dtype now properly considers them boolean ,"passing int64 values to datetimeindex and a timezone now interprets the values as nanosecond timestamps in utc, not wall times in the given timezone ","this is an experimental feature. currently, many methods fail to propagate the allows_duplicate_labels value. in future versions it is expected that every method taking or returning one or more dataframe or series objects will propagate allows_duplicate_labels.",bug in multiindex.drop does not raise if labels are partially found ,"when reading code, the contents of an object dtype array is less clear than string.","series.to_pickle and dataframe.to_pickle have gained a protocol parameter . by default, this parameter is set to highest_protocol",bug in dataframe.update with overwrite=false and nan values ,pandas no longer tests for compatibility with hdf5-files created with pandas < 0.11 .,"by default, read_csv and read_table will now try to infer the compression type based on the file extension. set compression=none to restore the previous behavior . ",bug in intervalindex.symmetric_difference where the symmetric difference with a non-intervalindex did not raise ,"represent multiindex labels with a dtype that utilizes memory based on the level size. in prior versions, the memory usage was a constant 8 bytes per element in each level. in addition, in prior versions, the reported memory usage was incorrect as it didn t show the usage for the memory occupied by the underling data array. ",passing an integer dtype other than int64 to np.array will now raise typeerror instead of incorrectly using int64 ,added cov instance methods to series and dataframe ,bug in index may ignore specified datetime64 or timedelta64 passed as dtype ,bug in dataframe.groupby raising an attributeerror when selecting a column and aggregating with as_index=false .,bug in series.groupby where using groupby with a multiindex series with a list of labels equal to the length of the series caused incorrect grouping ,fix regression where series.isna and dataframe.isna would raise for categorical dtype when pandas.options.mode.use_inf_as_na was set to true ,"pandas now requires that extension dtypes be hashable . the base class implements a default __eq__ and __hash__. if you have a parametrized dtype, you should update the extensiondtype._metadata tuple to match the signature of your __init__ method. see pandas.api.extensions.extensiondtype for more .",new methods select_dtypes to select columns based on the dtype and sem to calculate the standard error of the mean.,bug where index name was still used when plotting a series with use_index=false .,dataframe.to_html and dataframe.to_latex have dropped the colspace parameter in favor of col_space ,pivot_table now has a margins_name argument so you can use something other than the default of all ,bug in read_csv when using skiprows on a file with cr line endings with the c engine. ,"iloc will now accept out-of-bounds indexers for slices, e.g. a value that exceeds the length of the object being indexed. these will be excluded. this will make pandas conform more with python/numpy indexing of out-of-bounds values. a single indexer that is out-of-bounds and drops the dimensions of the object will still raise indexerror . this could result in an empty axis ",bug in sparseseries and sparsearray may have different dtype from its dense values ,a default repr for pandas.api.extensions.extensionarray is now provided .,dataframe.to_json now accepts an indent integer argument to enable pretty printing of json output ,bug when joining two multiindex without specifying level with different columns. return-indexers parameter was ignored. ,"you may have to install an older version of beautifulsoup4, see the installation docs","date_range, timedelta_range, and interval_range now return a linearly spaced index if start, stop, and periods are specified, but freq is not. ",# show dimensions since this is truncated,"positional setting with .ix and a float indexer will add this value to the index, rather than previously setting the value by position.",bug in invalid timedelta arithmetic and comparison may raise valueerror rather than typeerror ,drop function can now accept errors keyword to suppress valueerror raised when any of label does not exist in the target data. ,"bug in get_dummies, and select_dtypes, where duplicate column names caused incorrect behavior ","for full docs, see the categorical introduction and the api documentation.",removed the previously deprecated assert_raises_regex function in pandas._testing ,add dayfirst option to parser functions for parsing international dd/mm/yyyy dates,the arrayformatter for datetime and timedelta64 now intelligently limit precision based on the values in the array ,suppressed deprecationwarning associated with internal calls issued by repr ,dataframe.to_html now raises typeerror when using an invalid type for the classes parameter instead of assertionerror ,improved performance of to_numeric if input is numeric dtype ,testing.assert_index_equal now has a check_order parameter that allows indexes to be checked in an order-insensitive manner ,get_option / set_option - get/set the value of an option. partial names are accepted. - reset_option - reset one or more options to their default value. partial names are accepted. - describe_option - print a description of one or more options. when called with no arguments. print all registered options.,"addition of an intervalindex and interval scalar type, see here","add nsmallest and series.nlargest methods to series, see the docs ",bug in dataframe.at and series.at that would raise exception if the index was a categoricalindex ,merging / sorting on a combination of columns and index levels.,bug in series.min which would return nan instead of nat when called on a series of nat ,"when a dataframe s slice is updated with a new slice of the same dtype, the dtype of the dataframe will now remain the same. ",searchsorted has been added ,"add the keyword dropna=true to append to change whether all nan rows are not written to the store , also settable via the option io.hdf.dropna_table ",read_excel now accepts usecols as a list of column names or callable ,bug in categorical that would ignore or crash when calling series.replace with a list-like to_replace ,map on a series with datetime64 values may return int64 dtypes rather than int32,"tz-aware are rounded, floored and ceiled in local times",bug in float64index.astype where np.inf was not handled properly when casting to an integer dtype ,bug in pandas.concat when joining only series the names argument of concat is no longer ignored ,"this is a very long way of saying numpy arrays don t support string-item indexing. with this change, the error message is now this:","bug in setting using fancy indexing a single element with a non-scalar , ","io.data.options has been fixed for a change in the format of the yahoo options page , ",bug in to_datetime when passed a np.nan or integer datelike and a format string ,fixed metadata propagation when selecting columns with dataframe.__getitem__ ,api-breaking changes will be made only in major releases ,"added cache_dates=true parameter to read_csv, which allows to cache unique dates when they are parsed ",bug in to_excel with openpyxl 2.2+ and merging ,changes to how index and multiindex handle metadata :,bug in resample with timedelta data where data was casted to float .,the sum of an empty or all-na series is now 0,bug in dataframe.eq comparison against nat incorrectly returning true or nan ,"the source and binary distributions no longer include test data files, resulting in smaller download sizes. tests relying on these data files will be skipped when using pandas.test. ","bug when resampling dataframe.resample and aggregating on categorical data, the categorical dtype was getting lost. ",bug in pd.read_hdf returns incorrect result when a dataframe with a categorical column and a query which doesn t match any values ,"we are releasing the global-interpreter-lock on some cython operations. this will allow other threads to run simultaneously during computation, potentially allowing performance improvements from multi-threading. notably groupby, nsmallest, value_counts and some indexing operations benefit from this. ",improved error reporting for subsetting columns of a dataframegroupby with axis=1 ,fixed regression in comparisons between nat and datetime.date objects incorrectly returning true ,"dataframe.to_gbq and read_gbq signature and documentation updated to reflect changes from the pandas-gbq library version 0.8.0. adds a credentials argument, which enables the use of any kind of google-auth credentials. ",bug in merge_asof where confusing error message raised when attempting to merge with missing values ,improved performance of index and series .duplicated ,bug in dataframegroupby.quantile and resampler.quantile raised typeerror when values were of type timedelta ,improved the performance of pandas.get_dummies with sparse=true ,will have to adapted to the following to keep the same behaviour:,resample with the default behavior 'start_day' :,method .rolling is now time-series aware,method .rolling is now time-series aware,removed series.compound and dataframe.compound ,"previously data was coerced to a common dtype before serialisation, which for example resulted in integers being serialised to floats:",bug in pd.to_timedelta in which the errors parameter was not being respected ,to_datetime now supports the %z and %z directive when passed into format ,this engine can then be used to write or read data to/from this database:,"fixed regression in modulo of index, series and dataframe using numexpr using c not python semantics ","bug in certain operations with dateutil timezones, manifesting with dateutil 2.3 ",assign now inserts new columns in alphabetical order. previously the order was arbitrary. ,bug in sparsedataframe construction with lists not coercing to dtype ,the pandas.io.ga module with a google-analytics interface is removed . similar functionality can be found in the google2pandas package.,"the internal index method _shallow_copy now makes the new index and original index share cached attributes, avoiding creating these again, if created on either. this can speed up operations that depend on creating copies of existing indexes ",bug in formatting tick labels with datetime.time and fractional seconds .,futurewarning: scalar indexers for index type index should be integers and not floating point,dataframe.swaplevels now raises a typeerror if the axis is not a multiindex. previously an attributeerror was raised ,bug in string indexing against data with object index may raise attributeerror ,swapaxes on a panel with the same axes specified now return a copy,bug in datetimeindex.round and timestamp.round floating point accuracy when rounding by milliseconds or less ,"bug in indexing with iterator containing only missing keys, which raised no error ",series / panel now allow attribute access to its elements ,pandas.read_excel has deprecated accepting usecols as an integer. please pass in a list of ints from 0 to usecols inclusive instead ,bug in invalid datetime parsing in to_datetime and datetimeindex may raise typeerror rather than valueerror ,bug with insert of strings into datetimeindex ,remove deprecated set_printoptions/reset_printoptions ,dtypes and ftypes now return a series with dtype=object on empty containers ,"businesshour offset is now supported, which represents business hours starting from 09:00 - 17:00 on businessday by default. see here for details. ","dataframe.astype can now perform column-wise conversion to categorical by supplying the string 'category' or a categoricaldtype. previously, attempting this would raise a notimplementederror. see the object creation section of the documentation for more details and examples. ",date_format and datetime_format keywords can now be specified when writing to excel files , 218 and na_value is libmissing.na,method read_csv has improved support for duplicate column names,method read_csv has improved support for duplicate column names,pandas.tseries.holiday.holiday now supports a days_of_week parameter ,"pandas has gained an intervalindex with its own dtype, interval as well as the interval scalar type. these allow first-class support for interval notation, specifically as a return type for the categories in cut and qcut. the intervalindex allows some unique indexing, see the docs. ",bug in dataframe with datetime64 dtype subtracting np.datetime64 object with non-nanosecond unit failing to convert to nanoseconds ,stopped tests from failing if options data isn t able to be downloaded from yahoo ,series.to_timestamp now raises a typeerror if the axis is not a periodindex. previously an attributeerror was raised ,"the arguments to pd.to_timedelta are now , previously were as these are more logical.","when performing index.union operations between objects of incompatible dtypes, the result will be a base index of dtype object. this behavior holds true for unions between index objects that previously would have been prohibited. the dtype of empty index objects will now be evaluated before performing union operations rather than simply returning the other index object. index.union can now be considered commutative, such that a.union == b.union .",bug in pd.read_csv where the index columns were being incorrectly parsed when parsed as dates with a thousands parameter ,and multiple aggregations,extending pandas with custom types ,extending pandas with custom types ,these indexing changes extend to querying a series or dataframe with an intervalindex index.,read_stata and statareader raise with a more explicit error message when reading stata files with repeated value labels when convert_categoricals=true ,bug in dataframe.replace where changing a dtype through replacement would only replace the first occurrence of a value ,"the resulting categories will always be parsed as strings . if the categories are numeric they can be converted using the to_numeric function, or as appropriate, another converter such as to_datetime.",bug in index creation from timestamp with mixed tz coerces to utc ,bug in pd.eval when parsing strings with possible tokens like '&' ,bug in to_datetime with an index argument that would drop the name from the result ,"for small series or dataframes, up to max_rows number of rows is shown .",other new features,other new features,"using .iloc. here we will get the location of the a column, then use positional indexing to select things.","datetime accessor now supports series.dt.strftime to generate formatted strings for datetime-likes, and series.dt.total_seconds to generate each duration of the timedelta in seconds. see here","pd.read_csv can now read bz2-compressed files incrementally, and the c parser can read bz2-compressed files from aws s3 .",bug in slicing a multiindex with an empty list and at least one boolean indexer ,"deprecated slice-indexing on tz-aware datetimeindex with naive datetime objects, to match scalar indexing behavior ",fixed issue in dataframe construction with passing a mixed list of mixed types could segfault. ,"in prior versions, categoricals that had an unspecified ordering were defaulted as ordered categoricals. going forward, the ordered keyword in the categorical constructor will default to false. ordering must now be explicit.","bug in setitem with a single value, multiindex and integer indices ",series.iteritems is now lazy . this was the documented behavior prior to 0.14. ,the corresponding writer functions are object methods that are accessed like df.to_csv,bug in localizing an ambiguous timezone when a boolean is passed ,"all sparse formats are supported, but matrices that are not in coordinate format will be converted, copying data as needed.",bug in dataframe.to_latex where the combination of an index name and the index_names=false option would result in incorrect output ,fixed segfault in pandas.core.groupby.dataframegroupby.quantile when an invalid quantile was passed ,rolling.mean and rolling.sum use kahan summation to calculate the mean to avoid numerical problems ,bug in timestamp.replace when replacing tzinfo around dst changes ,you can still change the axis along which the first positional argument is applied by supplying the axis keyword argument.,new keywords to turn on/off sharing of x/y-axis by subplots generated with pandas.dataframe.groupby.boxplot ,dataframe.to_csv has deprecated the tupleize_cols argument. multiindex columns will be always written as rows in the csv file ,the default is to infer the compression type from the extension :,bug in .median where non-float null values are not handled correctly ,fixed bug that causes plotting to fail when the index is a datetimeindex with a fixed-offset timezone ,fixed copy to shallow copy axes/indices as well and thereby keep separate metadata. ,significant performance improvement when creating a dataframe with sparse values from scipy.sparse matrices using the dataframe.sparse.from_spmatrix constructor .,bug in output formatting when using an index of ambiguous times ,fixed regression in to_csv opening codecs.streamwriter in binary mode instead of in text mode and ignoring user-provided mode ,allow option 'truncate' for display.show_dimensions to only show the dimensions if the frame is truncated .,"dataframe.to_sql now supports writing timestamp with time zone types for supported databases. for databases that don t support timezones, datetime data will be stored as timezone unaware local timestamps. see the datetime data types for implications .",the following new methods are accessible via .str accessor to apply the function to each values. ,added a pandas.api.indexers.variableoffsetwindowindexer class to support rolling operations with non-fixed offsets ,zerodivisionerror: integer division or modulo by zero,"bug in pd.scatter_matrix could accept either color or c, but not both ",accessing a non-existent attribute on a closed hdfstore will now raise an attributeerror rather than a closedfileerror ,drop added as an optional parameter to dataframe.reset_index ,pandas.api.types.infer_dtype will now return integer-na for integer and np.nan mix ,bug in to_numeric in which invalid values for errors were being allowed ,removal of deprecated float indexers,removal of deprecated float indexers,bug in dataframe.to_csv with multiindex columns in which a stray empty line was added ,"remove use of some deprecated numpy comparison operations, mainly in tests. ",# note that this is deprecated as of 0.14.0,bug in dataframe.to_hdf where table format would raise a seemingly unrelated error for invalid column names. this is now explicitly forbidden. ,bug preventing pandas being used on windows without c++ redistributable installed ,bug in pd.read_csv for the c engine in which quotation marks were improperly parsed in skipped rows ,"added new writer for exporting stata dta files in version 117, statawriter117. this format supports exporting strings with lengths up to 2,000,000 characters ",fixed a bug where dataframe.replace with a compiled regular expression in the to_replace argument wasn t working ,performance improvement in pd.isin for inputs with more than 1e6 elements ,series now has unary negation and inversion operators ,"there are bugs in the user-facing api with the nanosecond datetime64 unit in numpy 1.6. in particular, the string version of the array shows garbage values, and conversion to dtype=object is similarly broken.",series.str.split will now propagate nan values across all expanded columns instead of none ,grouper and dataframe.resample now supports the arguments origin and offset. it let the user control the timestamp on which to adjust the grouping. ,"series.apply for category dtype now applies the passed function to each of the .categories , and returns a category dtype if possible ",bug in usfederalholidaycalendar where usmemorialday and usmartinlutherkingjr were incorrect ,valueerror: cannot mask with array containing na / nan values,read_json now avoids reading entire file into memory when chunksize is specified ,bug in dataframegroupby.apply dropped values on nan group when returning the same axes with the original frame ,added <na> to the list of default na values for read_csv ,bug in dataframe flex arithmetic ) with a fill_value other than none failed to raise notimplementederror in corner cases where either the frame or other has length zero ,positional slicing on a intervalindex now supports slices with step > 1 ,index + / - no longer used for set operations,index + / - no longer used for set operations,"the series, categorical, and index classes have dropped the reshape method ",bug in resample with extra bins when using an evenly divisible frequency ,bug in constructing a series or index from a read-only numpy array with non-ns resolution which converted to object dtype instead of coercing to datetime64 dtype when within the timestamp bounds .,panel now supports the all and any aggregation functions. :,fixed regression in statareader which required chunksize to be manually set when using an iterator to read a dataset ,fixed string methods for frozenndarray and frozenlist ,"you should specify all axes in the .loc specifier, meaning the indexer for the index and for the columns. their are some ambiguous cases where the passed indexer could be mis-interpreted as indexing both axes, rather than into say the muliindex for the rows.",bug in to_parquet was not raising permissionerror when writing to a private s3 bucket with invalid creds. ,the drop method has gained index/columns keywords as an alternative to specifying the axis. this is similar to the behavior of reindex .,bug in io.common.get_filepath_or_buffer which caused reading of valid s3 files to fail if the bucket also contained keys for which the user does not have read permission ,"removed pandas.plotting._matplotlib.tsplot, use series.plot instead ",bug in groupby.count with float32 data type were nan values were not excluded .,pd.index has dropped the diff method in favor of difference ,bug in getitem with a multiindex and iloc ,removed the previously deprecated sheetname keyword in read_excel ,bug in dataframe.replace where truthy values were being replaced .,"series.to_json, dataframe.to_json, and read_json now implement time zone parsing when orient structure is table ",series.last and dataframe.last will now raise a typeerror rather than notimplementederror when index is not a datetimeindex .,"furthermore, this allows one to bin other data with these same bins, with nan representing a missing value similar to other dtypes.",bug in passing a datetimeindex with a timezone that was not being retained in dataframe construction from a dict ,bug in printing pd.dataframe where unusual elements with the object dtype were causing segfaults ,bug in to_datetime with invalid datetime format doesn t coerce input to nat even if errors='coerce' ,"bug in pandas.core.groupby.groupby.shift, pandas.core.groupby.groupby.bfill and pandas.core.groupby.groupby.ffill where timezone information would be dropped ",bug in dataframe.lookup incorrectly raising an attributeerror when frame.index or frame.columns is not unique; this will now raise a valueerror with a helpful error message ,improved error message for dataframe.merge when there is no common merge key ,"new datetime64 representation speeds up join operations and data alignment, reduces memory usage, and improve serialization / deserialization performance significantly over datetime.datetime",dataframe.mask and series.mask now support same keywords as where ,bug in dataframe.to_csv where values were truncated when the length of na_rep was shorter than the text input data. ,"expanded the tutorials section with a feature on modern pandas, courtesy of @tomaugsburger. .",removal of the previously deprecated module pandas.json ,"for backwards compatibility, inplace defaults to true if not specified. this will change in a future version of pandas. if your code depends on an inplace assignment you should update to explicitly set inplace=true",bug in series.resample.apply where an empty series modified the source index and did not return the name of a series ,bug in read_html in which the error message was not displaying the valid flavors when an invalid one was provided ,bug in index.difference when taking difference of an index with itself ,support for nanosecond times as an offset,the as_indexer keyword of series.str.match has been deprecated .,bug in parallel_coordinates and radviz where reordering of class column caused possible color/class mismatch ,dataframe.to_markdown and series.to_markdown now accept index argument as an alias for tabulate s showindex ,bug in read_csv not raising an exception with nonexistent columns in usecols when it had the correct length ,"bug in index raises outofboundsdatetime if datetime exceeds datetime64 bounds, rather than coercing to object dtype ",better error message when attempting to plot but matplotlib is not installed .,fixed bug in dataframe.to_excel where custom objects inside merged cells were not being converted into types safe for the excel writer ,performance improvement in dataframe.replace when provided a list of values to replace ,fixed bug where passing a series with datetime64 values into to_datetime results in bogus output values ,the arg argument in pandas.core.groupby.dataframegroupby.agg has been renamed to func ,the changes described here have been partially reverted. see the v0.22.0 whatsnew for more.,"bug in putting a periodindex into a series would convert to int64 dtype, rather than object of periods ","previously, when sparse=true was passed to get_dummies, the return value could be either a dataframe or a sparsedataframe, depending on whether all or a just a subset of the columns were dummy-encoded. now, a dataframe is always returned .",these are the changes in pandas 0.24.1. see release notes for a full changelog including other versions of pandas. see what s new in 0.24.0 for the 0.24.0 changelog.,bug in float64index causing an empty array instead of none to be returned from .get on a series whose index did not contain any nan s ,fixed performance regression in series.asof when where is a scalar ,multiindex constructed from levels and codes,"line and kde plot with subplots=true now uses default colors, not all black. specify color='k' to draw all lines in black ",bug in .rolling.quantile which incorrectly used different defaults than series.quantile and dataframe.quantile ,"for iloc, getting & setting via a float scalar will always raise.",these can accept a callable for the condition and other arguments.,pandas >= 0.18.0 no longer supports compatibility with python version 2.6 and 3.3 ,"series, index, and dataframe have dropped the sort and order methods ",bug in dataframe.groupby when applying a function that has mixed data types and the user supplied function can fail on the grouping column ,"note that this change also applies to dataframe.append, which has also received a sort keyword for controlling this behavior.",added a more informative error message when plot arguments contain overlapping color and style arguments ,improvements in dataframe.transform with ufuncs and built-in grouper functions for significant performance gains ,improved the speed of nunique by calling unique instead of value_counts ,"categorical.argsort now places missing values at the end of the array, making it consistent with numpy and the rest of pandas .",bug in pd.read_stata which would use the wrong data types and missing values ,arrays.integerarray now uses pandas.na rather than numpy.nan as its missing value marker .,"supported by numexpr for the bool dtype, use '|' instead",bug in vectorized dateoffset when n parameter is 0 ,bug in timedelta incorrectly truncating to sub-second portion of a string input when it has precision higher than nanoseconds ,in : # when passing file object with newline option to,bug in which creating a sparsedataframe from a dense series or an unsupported type raised an uncontrolled exception ,parsing datetime strings with timezone offsets,see the full release notes or issue tracker on github for a complete list.,see the full release notes or issue tracker on github for a complete list.,see the full release notes or issue tracker on github for a complete list.,see the full release notes or issue tracker on github for a complete list.,see the full release notes or issue tracker on github for a complete list.,see the full release notes or issue tracker on github for a complete list.,dataframe.plot now supports multiple columns to the y argument ,note that the inconsistency in the return value for all-na series is still there for pandas 0.20.3 and earlier. avoiding pandas 0.21 will only help with the empty case.,# now it is not counted at all,"the custombusinesshour is a mixture of businesshour and custombusinessday which allows you to specify arbitrary holidays. for details, see custom business hour ","removed index.contains, use key in index instead ",in 0.14.0 all ndframe based containers have undergone significant internal refactoring. before that each block of homogeneous data had its own labels and extra care was necessary to keep those in sync with the parent container s labels. this should not have any visible user/api behavior changes ,bug in dataframe.to_records with converting a datetimeindex with a timezone ,bug in dataframe.to_records which failed with unicode characters in column names ,str.split has dropped the return_type parameter in favor of expand ,the behaviour of assigning a column to an existing dataframe as df = i remains unchanged .,bug in read_csv where line comments were not handled correctly given a custom line terminator or delim_whitespace=true .,fixed regression in excelfile where the stream passed into the function was closed by the destructor. ,bug in pct_change using periods and freq returned different length outputs ,bug in pd.read_csv in the c engine where the null character was not being parsed as null ,bug in series.loc and series.iloc setting all the values of an object series with those of a list-like extensionarray instead of inserting it ,slicing and advanced/boolean indexing operations on index classes as well as index.delete and index.drop methods will no longer change the type of the resulting index ,series and dataframe now have a mode method to calculate the statistical mode by axis/series. ,bug in series.is_unique where single occurrences of nan were not considered unique ,"bug in pd.to_numeric with index returns np.ndarray, rather than index ",bug in core.groupby.dataframegroupby.quantile raised typeerror for non-numeric types rather than dropping the columns ,ensure only named functions can be used in eval ,fixed a bug where plotting a column y and specifying a label would mutate the index name of the original dataframe ,bug where dataframe column set to scalar extension type was considered an object type rather than the extension type ,"the string parsing of to_datetime, timestamp and datetimeindex has been made consistent. ",bug in abcpanel in which panel4d was not being considered as a valid instance of this generic type ,improved pandas.read_stata and pandas.io.stata.statareader to read incorrectly formatted 118 format files saved by stata ,futurewarning: scalar indexers for index type int64index should be integers and not floating point,futurewarning: scalar indexers for index type int64index should be integers and not floating point,futurewarning: scalar indexers for index type int64index should be integers and not floating point,"when converting to a numpy array missing values will be pd.na, which cannot be converted to a float. so calling np.asarray will now raise.",time series changes and improvements,time series changes and improvements,to_hdf was raising when passing both arguments append and table ,regression in series with a multiindex via ix ,"bug in broadcasting with .div, integer dtypes and divide-by-zero ",partially sort by only the specified levels of a multiindex with the sort_remaining boolean kwarg. ,"assignment to multiple columns of a dataframe when some of the columns do not exist would previously assign the values to the last column. now, new columns will be constructed with the right values. ","bug in series.rename when called with a callable, incorrectly alters the name of the series, rather than the name of the index. ","not coerce, and the values not compare equal to the 'datetime.date'.",bug in periodindex where comparisons against an array-like object with length 1 failed to raise valueerror ,fixed various setitem with 1d ndarray that does not have a matching length to the indexer ,fixed a performance regression for .loc indexing with an array or list-like .,this prevents pathological behavior where applying the reduction on a subset of columns could result in a larger series result. see .,fixed bug where filtering a grouped dataframe or series did not maintain the original ordering .,"the raise_on_error argument to plotting functions is removed. instead, plotting functions raise a typeerror when the dtype of the object is object to remind you to avoid object arrays whenever possible and thus you should cast to an appropriate numeric dtype if you need to plot something.",bug in statawriter where encoding was ignored ,added pandas.core.groupby.seriesgroupby.is_monotonic_increasing and pandas.core.groupby.seriesgroupby.is_monotonic_decreasing ,bug in dataframe.dropna with duplicate indices ,bug in series.cummin and series.cummax with timezone-aware dtype incorrectly dropping its timezone ,bug where dataframe.itertuples would incorrectly determine whether or not namedtuples could be used for dataframes of 255 columns ,pd.qcut has gained the duplicates='raise'|'drop' option to control whether to raise on duplicated edges ,nameresolutionerror was removed because it isn t necessary anymore.,bug in recognizing out-of-bounds positional list indexers with iloc and a multi-axis tuple indexer ,bug where merge was unable to join on non-unique categorical indices ,hdfstore.select_as_multiple handles start and stop the same way as select ,"while the default float data type already supports missing values using np.nan, these new data types use pd.na as the missing value indicator, in line with the already existing nullable integer and boolean data types.",add level option to binary arithmetic functions on dataframe and series,bug in invalid attribute access on a timedeltaindex incorrectly raised valueerror instead of attributeerror ,bug in .mode where mode was not returned if was only a single value ,bug in to_datetime where utc=true was not respected when passing a timestamp ,improved performance of read_csv by faster tokenizing and faster parsing of small float numbers ,improved performance of pandas.core.groupby.groupby.rank when dealing with tied rankings ,bug in dataframe.agg where applying multiple aggregation functions to a dataframe with duplicated column names would cause a stack overflow ,"there were too many simultaneous contributions to include a release note for each improvement, but this github search should give you an idea of how many docstrings were improved.",bug in timedeltaindex subtraction could incorrectly overflow when nat is present ,bug in validating color parameter caused extra color to be appended to the given color array. this happened to multiple plotting functions using matplotlib. ,bug in adding a businessday with nonzero offset to a non-scalar other ,bug in dataframe.groupby with multiple groups where an indexerror would be raised if any group contained all na values ,improved csv write performance generally by 2x ,fixed segfault in c parser caused by passing more names than columns in the file. ,bug in dataframegroupby.quantile couldn t handle with arraylike q when grouping by columns ,"indexing with a null key will raise a typeerror, instead of a valueerror ",optimize scalar value lookups in the general case by 25% or more in series and dataframe,bug in groupby where apply returns different result depending on whether first result is none or not ,add -nan and -nan to the default set of na values . see na values.,"we are deprecating passing a dict to a grouped/rolled/resampled series. this allowed one to rename the resulting aggregation, but this had a completely different meaning than passing a dictionary to a grouped dataframe, which accepts column-to-aggregations.","added name attribute to series, now prints as part of series.__repr__",operations with the existing integer or boolean nullable data types that give float results will now also use the nullable floating data types .,to_msgpack and read_msgpack encoding now defaults to 'utf-8'. ,bug in dataframe prevented list subclasses to be used to construction ,development installed versions of pandas will now have pep440 compliant version strings ,dataframe.explode and series.explode now support exploding of sets ,bug in not treating nat as a missing value in datetimelikes when factorizing & with categoricals ,"the shift method now accepts fill_value as an argument, allowing the user to specify a value which will be used instead of na/nat in the empty periods. ",bug in pd.core.util.hashing.hash_pandas_object where arrays containing tuples were incorrectly treated as non-hashable ,bug in where causing incorrect results when upcasting was required ,read_parquet now allows to specify the columns to read from a parquet file ,bug in pandas.core.groupby.groupby.rank with method='dense' and pct=true when a group has only one member would raise a zerodivisionerror .,fixed regression in .groupby aggregations with categorical dtype using cythonized reduction functions ,bug in to_datetime with unit='ns' would drop timezone information from the parsed argument ,column order is preserved when passing a list of dicts to dataframe,bug in pandas.core.groupby.groupby.nth where column order was not always preserved ,pandas.tseries.frequencies.get_standard_freq is deprecated. use pandas.tseries.frequencies.to_offset.rule_code instead ,add support for aws_s3_host env variable when reading from s3 ,bug in .iloc and .loc with a boolean indexer not raising an indexerror when too few items are passed .,compat with python 3.6 for some indexing exception types ,"bug in datetimeindex.format and periodindex.format with name=true setting the first item to ""none"" where it should be """" ",bug in the dataframe constructor in which data containing very large positive or very large negative numbers was causing overflowerror ,should be changed to:,"in addition to these api breaking changes, many performance improvements and bug fixes have been made.",improved support for complex numbers in series and dataframe,bug in datetimeindex.tz_localize incorrectly retaining freq in some cases where the original freq is no longer valid ,"# f, g, and h are functions that take and return dataframes",dateoffset attribute _cacheable and method _should_cache have been removed ,now each column is serialised using its correct dtype:,"improved performance of shift, cumprod, and cumsum with groupby ","fixed bug in dataframe.convert_dtypes for columns that were already using the ""string"" dtype .",bug in intervalindex.take with negative indices and fill_value=none ,and reindex:,"add support for min_count keyword for dataframe.groupby and dataframe.resample for functions min, max, first and last ", pandas/core/index.py:527: futurewarning: slice indexers when using iloc should be integers and not floating point,bug in dataframe.resample and series.resample where an ambiguoustimeerror or nonexistenttimeerror would raise if a timezone aware timeseries ended on a dst transition ,bug in index where a numpy object array with a timezone aware timestamp and np.nan would not return a datetimeindex ,"index.intersection now preserves the order of the calling index instead of the other index . this affects inner joins, dataframe.join and merge, and the .align method.",added a test for read_clipboard and to_clipboard ,individual columns can be parsed as a categorical using a dict specification,"pandas.concat has deprecated the join_axes-keyword. instead, use dataframe.reindex or dataframe.reindex_like on the result or on the inputs ",bug in dataframe.interpolate where specifying axis by name references variable before it is assigned ,"so in v0.16.0, we are restoring the api to match that of datetime.timedelta. further, the component values are still available through the .components accessor. this affects the .seconds and .microseconds accessors, and removes the .hours, .minutes, .milliseconds accessors. these changes affect timedeltaindex and the series .dt accessor as well. ","holiday calendars are now supported in custombusinessday, see here",bug in dataframe.loc and dataframe.iloc on a dataframe with a single timezone-aware datetime64 column incorrectly returning a scalar instead of a series ,bug in dataframe.drop and series.drop when specifying a tz-aware timestamp key to drop from a datetimeindex with a dst transition ,bug in pd.concat with dataframes heterogeneous in length and tuple keys ,added support for new python version,bug in dataframe.stack where timezone aware values were converted to timezone naive values ,bug when indexing with a boolean-valued categorical. now a boolean-valued categorical is treated as a boolean mask ,bug in index constructor where passing mixed closed interval objects would result in a valueerror instead of an object dtype index ,added option display.max_info_rows to prevent verbose_info from being calculated for frames above 1m rows . ,bug in cut raising a valueerror when passed a series of labels with ordered=false ,bug in downcasting inference with empty arrays ,removed the previously deprecated timegrouper ,bug in period and series or index comparison raises typeerror ,"bug in pandas.merge adds a string of none, if none is assigned in suffixes instead of remain the column name as-is .",datetimeindex and timedeltaindex now have a mean method ,concat and append now can concat category dtypes with different categories as object dtype ,compat with python 3.6 for pickling of some offsets ,"series.map now respects default values of dictionary subclasses with a __missing__ method, such as collections.counter ","pandas now uses s3fs for handling s3 connections. this shouldn t break any code. however, since s3fs is not a required dependency, you will need to install it separately, like boto in prior versions of pandas. .",__setitem__ will no longer apply a callable rhs as a function instead of storing it. call where directly to get the previous behavior .,bug in uint64index precision loss while constructing from a list with values in the np.uint64 range ,fixed regression in dataframe.any and dataframe.all not returning a result for tz-aware datetime64 columns ,bug in concat and groupby for hierarchical frames with rangeindex levels .,multiindex.get_loc can t find missing values when input includes missing values ,bug in period and periodindex creating wrong dates when frequency has combined offset aliases ,bug in indexing where nested indexers having only numpy arrays are handled incorrectly ,"is_sequence, is_any_int_dtype, and is_floating_dtype have been removed from pandas.api.types ",bug in using a pd.grouper with no level/axis or level only ,calling series.str.isalnum on an empty series would return an object dtype instead of bool ,"in the new api, you can either downsample or upsample. the prior implementation would allow you to pass an aggregator function even though you were upsampling, providing a bit of confusion.",bug in numpy.modf on a sparsearray. now a tuple of sparsearray is returned .,passing an integer to series.fillna or dataframe.fillna with timedelta64 dtype now raises typeerror ,fixed regression in perioddtype comparing both equal and unequal to its string representation ,"furthermore, we now allow an optional on parameter to specify a column in a dataframe.",bug in setitem where type promotion is applied to the entire block ,fixed bug where the constructor of dataframe with dtype='string' would fail ,fixed a bug in the html repr of a truncated series or dataframe not showing the class name with the large_repr set to info ,we are now supporting a series.dt.strftime method for datetime-likes to generate a formatted string . examples:,bug in pandas.api.types.union_categoricals returning the wrong result when for unordered categoricals with the categories in a different order. this affected pandas.concat with categorical data .,performance improvement of up to 20x in dataframe.count when using a multiindex and the level keyword argument ,bug where a multiindex with more than a million records was not raising attributeerror when trying to access a missing attribute ,bug in alignment with timeops and non-unique indexes ,pd.read_msgpack now always gives writeable ndarrays even when compression is used .,timedelta now understands s as an identifier for microsecond ,fix .iat indexing with a periodindex ,bug in sparseseries.iloc with scalar input may raise indexerror ,bug in multiindex.intersection was not guaranteed to preserve order when sort=false. ,bug in dataframe.to_latex where a multiindex with an empty string as its name would result in incorrect output ,bug in dataframegroupby.rank with datetime64tz or period dtype incorrectly casting results to those dtypes instead of returning float64 dtype ,"index.unique now returns unique values as an index of the appropriate dtype. . previously, most index classes returned np.ndarray, and datetimeindex, timedeltaindex and periodindex returned index to keep metadata like timezone.","robust frequency inference function infer_freq and inferred_freq property of datetimeindex, with option to infer frequency on construction of datetimeindex",bug in categorical constructor when passed a categorical containing datetimes with timezones ,consistency when indexing with .loc and a list-like indexer when no values are found.,fix arithmetic with series/datetimeindex and np.timedelta64 not working the same and buggy timedelta in numpy 1.6 ,improved performance of dataframe.to_sql when checking case sensitivity for tables. now only checks if table has been created correctly when table name is not lower case. ,# this is what you should use,"fixed dtype of dataframe initialized with axes, no data, and dtype=int ","quotechar, doublequote, and escapechar can now be specified when using dataframe.to_csv ",bug in series.fillna where it raises if a numerically convertible string is given ,# this is equivalent to g.last,fixed running of tox under python3 where the pickle import was getting rewritten in an incompatible way ,fix plotting issues when having plain axes instances instead of subplotaxes .,added series.__array_ufunc__ to better handle numpy ufuncs applied to series backed by extension arrays .,"pd.read_clipboard will, if the keyword sep is unspecified, try to detect data copied from a spreadsheet and parse accordingly. ","this may subtly change the behavior of your code when you re using .assign to update an existing column. previously, callables referring to other variables being updated would get the old values",added an experimental attrs for storing global metadata about a dataset ,"the get_loc method now only returns locations for exact matches to interval queries, as opposed to the previous behavior of returning locations for overlapping matches. a keyerror will be raised if an exact match is not found.",to_hdf and read_hdf now accept an errors keyword argument to control encoding error handling ,an old function call like :,bug in pd.pivot_table where no error was raised when values argument was not in the columns ,"fix to preserve the ability to index with the nearest method with xarray s cftimeindex, an index subclass .",bug in adding dateoffset with dataframe or periodindex incorrectly raising typeerror ,bug in dataframe.join where joining a timezone aware index with a timezone aware column would result in a column of nan ,the behavior of a small sub-set of edge cases for using .loc have changed . furthermore we have improved the content of the error messages that are raised:,bug in to_datetime that did not consistently return an index when box=true was specified ,"with this release, legacy scikits.timeseries users should be able to port their code to use pandas.",raise on set indexing with a panel and a panel as a value which needs alignment ,series.str.pad and series.str.center now accept fillchar option to specify filling character ,default name assignment when calling reset_index on dataframe with a regular index ,fixed regression in series.groupby.rolling number of levels of multiindex in input was compressed to one ,"series.str now supports iteration . you can iterate over the individual elements of each string in the series. each iteration yields a series with either a single character at each index of the original series or nan. for example,","updating a boolean, datetime, or timedelta column to be sparse now works ",fixed regression in to_pickle failing to create bz2/xz compressed pickle files with protocol=5 ,"performance bug in repr of categorical categories, which was rendering the strings before chopping them for display ","changed the default value for the raw argument in series.rolling.apply, dataframe.rolling.apply, series.expanding.apply, and dataframe.expanding.apply from none to false ",fixed regression in groupby with categorical grouping column not showing unused categories for grouped.indices ,"bug in sparsedataframe when adding a column in which the length of values does not match length of index, assertionerror is raised instead of raising valueerror ",indexing a series with a multi-dimensional indexer like to return an ndarray now raises a futurewarning. convert to a numpy array before indexing instead ,add option to disable adjustment in ewma ,the filter method for group objects returns a subset of the original object. suppose we want to take only elements that belong to groups with a group sum greater than 2.,bug in index.intersection with non-matching numeric dtypes casting to object dtype instead of minimal common dtype ,all objects can now work with non-unique indexes. data alignment / join operations work according to sql join semantics ,"shift will now always return a copy, instead of the previous behaviour of returning self when shifting by 0 ",panel.shift has dropped the lags parameter in favor of periods ,added passing list of tuples or list of lists to dataframe.from_records ,the values have been correctly interpreted as integers.,invalid construction of intervaldtype will now always raise a typeerror rather than a valueerror if the subdtype is invalid ,fix appending when dtypes are not the same ,bug in int64index and float64index preventing the use of the modulo operator ,bug in series.fillna returns frame when inplace=true and value is dict ,bug in timedeltaindex incorrectly allowing indexing with timestamp object ,"read_html no longer ignores all-whitespace <tr> within <thead> when considering the skiprows and header arguments. previously, users had to decrease their header and skiprows values on such tables to work around the issue. ","changes to the default for ordering in the categorical constructor, see here",# this is the default ,bug in pd.to_csv in which there was numeric overflow when a timestamp index was being written ,both construction and renaming of index/multiindex with non-hashable name/names will now raise typeerror ,fix regression in rangeindex.get_indexer for decreasing rangeindex where target values may be improperly identified as missing/present ,bug in quantile with datetime values ,"previous behavior: if the returned shape happened to match the length of original columns, this would return a dataframe. if the return shape did not match, a series with lists was returned.","to_html now has a border argument to control the value in the opening <table> tag. the default is the value of the html.border option, which defaults to 1. this also affects the notebook html repr, but since jupyter s css includes a border-width attribute, the visual effect is the same. .",dataframe.shift with axis=1 was raising ,bug in series.truncate which raises typeerror with a monotonic periodindex ,bug in repeated indexing of object with resultant non-unique index ,"this does not raise any obvious exceptions, but also does not create a new column:",bug in dataframe.groupby where index and column keys were not recognized correctly when the number of keys equaled the number of elements on the groupby axis ,bug in to_datetime where passing a timezone-naive datetimearray or datetimeindex and utc=true would incorrectly return a timezone-naive result ,bug in dataframe.mean with numeric_only=false and either datetime64 dtype or perioddtype column incorrectly raising typeerror ,"io.data.options now raises remotedataerror when no expiry dates are available from yahoo and when it receives no data from yahoo , .","io.data.options now raises remotedataerror when no expiry dates are available from yahoo and when it receives no data from yahoo , .",fixed bug where pandas.core.groupby.groupby.first and pandas.core.groupby.groupby.last would raise a typeerror when groups contained pd.na in a column of object dtype ,"eval will now raise a valueerror when item assignment malfunctions, or inplace operations are specified, but there is no item assignment in the expression ",pd.categorical has dropped setting of the ordered attribute directly in favor of the set_ordered method ,implement export of datetime64 dtypes with a fixed hdf5 store ,"fix some inconsistencies with index.rename and multiindex.rename, etc. ",fixes dataframe.loc for setting with alignment and tz-aware datetimeindex ,bug in dataframe.iloc.__setitem__ on a dataframe with duplicate columns incorrectly setting values for all matching columns ,"performance improvement in dataframe.groupby for float dtype , changes of the underlying hash-function can lead to changes in float based indexes sort ordering for ties )",bug in pd.read_csv with float_precision='round_trip' which caused a segfault when a text entry is parsed ,multiindex.remove_unused_levels has been added to facilitate removing unused levels. ,bug in dataframegroupby.sum and seriesgroupby.sum where a large negative number would be returned when the number of non-null values was below min_count for nullable integer dtypes ,bug in .eval which caused multi-line evals to fail with local variables not on the first line ,bug in index.intersection with non-index failing to set the correct name on the returned index ,"as the warning message explains, opt in to the future behavior by specifying that the integer values are utc, and then converting to the final timezone:","bug in statareader, statawriter, xportreader and sas7bdatreader where a file was not properly closed when an error was raised. ",bug in interpolate with inplace=true ,bug where dataframe constructor raised valueerror with list-like data and dtype specified ,"window functions have been refactored to be methods on series/dataframe objects, rather than top-level functions, which are now deprecated. this allows these window-type functions, to have a similar api to that of .groupby. see the full documentation here ",bug in panel indexing with an object-like ,"the dataframe constructor no longer accepts a list of dataframe objects. because of changes to numpy, dataframe objects are now consistently treated as 2d objects, so a list of dataframe objects is considered 3d, and no longer acceptable for the dataframe constructor .","backwards incompatible change to timedelta to conform the .seconds attribute with datetime.timedelta, see here",trying to reindex a dataframe with a non unique multiindex now raises a valueerror instead of an exception ,bug with using quote_none with to_csv causing exception. ,series arithmetic operators can now handle constant and ndarray input ,increased minimum versions for dependencies,increased minimum versions for dependencies,increased minimum versions for dependencies,increased minimum versions for dependencies,increased minimum versions for dependencies,you can use the multiplied freq in periodindex and period_range.,"the default for dropna in hdfstore has changed to false, to store by default all rows even if they are all nan, see here","fixed a keyerror when indexing a multiindex` level with a list containing exactly one label, which is missing ","the default index printing has changed to a more uniform format, see here","bug in dataframe.to_json where a datetime column label would not be written out in iso format with orient=""table"" ","timestamp.tz_localize and timestamp.tz_convert now raise typeerror in error cases, rather than exception ",the default value of allow_fill has changed from false to true.,"index.difference, index.intersection, index.union, and index.symmetric_difference now have an optional sort parameter to control whether the results should be sorted if possible ",bug where loffset argument was not applied when calling resample.count on a timeseries ,fixed regression in the datetimeindex.date and datetimeindex.time attributes in case of timezone-aware data: datetimeindex.time returned a tz-aware time instead of tz-naive and datetimeindex.date returned incorrect date when the input date has a non-utc timezone .,# reorder the categories and simultaneously add the missing categories,bug in series.interpolate where kwarg limit_area and limit_direction had no effect when using methods pad and backfill ,"bug in datetimeindex.astype when converting between timezone aware dtypes, and converting from timezone aware to naive ",bug in statareader which did not read variable labels in 117 files due to difference between stata documentation and implementation ,"bug in dataframe.set_index, reindex and pivot don t preserve datetimeindex and periodindex attributes ",series.get with negative indexers now returns the same as ,# whether the zero is int or float,bug in series.isin with datetime64 dtype and datetimeindex.isin incorrectly casting integers to datetimes ,the pandas.tools.rplot module has been removed in favor of the seaborn package ,substantially improved performance of generic index.intersection and index.union,method convert_dtypes to ease use of supported extension dtypes,pd.tseries.util.pivot_annual has been removed . use pivot_table instead ,bug in timedeltaindex comparison operations where comparing against non-timedelta-like objects would raise typeerror instead of returning all-false for __eq__ and all-true for __ne__ ,using a dict provides the ability to apply specific aggregations per column. you will get a matrix-like output of all of the aggregators. the output has one column per unique function. those functions applied to a particular column will be nan:,support for openpyxl >= 2.2. the api for style support is now stable ,the 0.24.x series of releases will be the last to support python 2. future feature releases will support python 3 only. see dropping python 2.7 for more.,the 0.24.x series of releases will be the last to support python 2. future feature releases will support python 3 only. see dropping python 2.7 for more.,"bug in index.sort_values where, when empty values were passed, the method would break by trying to compare missing values instead of pushing them to the end of the sort order ","previously when passing a boolean index to .loc, if the index of the series/dataframe had boolean labels, you would get a label based selection, potentially duplicating result labels, rather than a boolean indexing selection , this was inconsistent how a boolean numpy array indexed. the new behavior is to act like a boolean numpy array indexer. ","the same change applies to index.difference and index.symmetric_difference, which would not sort the result when the values could not be compared.","index no longer mangles none, nan and nat, i.e. they are treated as three different keys. however, for numeric index all three are still coerced to a nan ",bug in multiplying a series with numeric dtype against a timedelta object ,bug in read_excel in which usecols was not being validated for proper column names when passed in as a string ,tslib.get_period_field and tslib.get_period_field_arr now raise if code argument out of range ,bug in pd.concat with axis=0 when column is of dtype category ,fixed a bug in query where the index of a single-element series was being thrown away .,bug in equals causing false negatives when block order differed ,bug in dataframe.plot raises valueerror when color name is specified by multiple characters ,bug in dataframe.plot raises valueerror when color name is specified by multiple characters ,"improved performance of series.shift for non-na fill_value, as values are no longer converted to a dense array.","fix modulo and integer division on series,dataframes to act similarly to float dtypes to return np.nan or np.inf as appropriate . this correct a numpy bug that treats integer and float dtypes differently.",bug in index.union returns an incorrect result with a named empty index ,bug in .groupby.rolling where passing closed with column selection would raise a valueerror ,fixed regression in series.loc on a series with a multiindex containing timestamp raising invalidindexerror ,optimize series.asof for looking up as of values for arrays of timestamps,"dataframe.to_html now accepts render_links as an argument, allowing the user to generate html with links to any urls that appear in the dataframe. see the section on writing html in the io docs for example usage. ",bug in partial-string indexing returning a numpy array rather than a series when indexing with a scalar like .loc ,seriesgroupby.agg will ensure that the name attribute of the original series is propagated to the result .,"new unified merge function for efficiently performing full gamut of database / relational-algebra operations. refactored existing join methods to use the new infrastructure, resulting in substantial performance gains ",bug in multiindex.get_loc which would fail to automatically cast values between float and int ,fixed issue with missing attributes after loading a pickled dataframe ,"the default way of printing large dataframes has changed. dataframes exceeding max_rows and/or max_columns are now displayed in a centrally truncated view, consistent with the printing of a pandas.series .",removed the previously deprecated behavior of series treated as list-like in rename_categories ,bug in pandas.core.groupby.groupby.nth where observed=false was being ignored for categorical groupers ,fixed bug where network testing was throwing nameerror because a local variable was undefined ,bug in create_table now raises an error when column argument was not specified in data_columns on input ,bug in assignment with duplicate columns in a frame where the locations are a slice ,series.quantile and dataframe.quantile now accept an array of quantiles.,the result of resample is now iterable similar to groupby .,"futurewarning: using '-' to provide set differences with datetimelike indexes is deprecated, use .difference","the pipe method is inspired by unix pipes, which stream text through processes. more recently dplyr and magrittr have introduced the popular pipe operator for r.",fixed a bug where default options were being overwritten in the option parser cleaning .,"pandas has changed the internal structure and layout of the code base. this can affect imports that are not from the top-level pandas.* namespace, please see the changes here.",boolean data type with missing values support,"significant performance improvement of io.formats.style.styler.render with styles added with various ways such as io.formats.style.styler.apply, io.formats.style.styler.applymap or io.formats.style.styler.bar ",read_parquet now allows to specify kwargs which are passed to the respective engine ,"the read_sas function has been enhanced to read sas7bdat files, see here.","dataframe.from_items is deprecated. use dataframe.from_dict instead, or dataframe.from_dict) if you wish to preserve the key order ","bug in .sample where weights passed as series were not aligned along axis before being treated positionally, potentially causing problems if weight indices were not aligned with sampled object. ",added instance methods isnull and notnull to series ,"to achieve the same result as previous versions , you can use reindex_like:",bug in .quantile with interpolation may coerce to float unexpectedly ,"the .ix indexer is deprecated, in favor of the more strict .iloc and .loc indexers. .ix offers a lot of magic on the inference of what the user wants to do. to wit, .ix can decide to index positionally or via labels, depending on the data type of the index. this has caused quite a bit of user confusion over the years. the full indexing documentation is here. ",existing timeseries methods at_time and between_time were added to dataframe ,see duplicate labels for more.,"the new eval function implements expression evaluation using numexpr behind the scenes. this results in large speedups for complicated expressions involving large dataframes/series. for example,","to alleviate this issue, we have added a new, optional plotting interface, which exposes each kind of plot as a method of the .plot attribute. instead of writing series.plot, you can now also use series.plot.<kind>:",dividing or multiplying a timedelta64 series by an integer or integer series,io.sql.get_schema now supports a schema keyword argument that will add a schema into the create table statement ,the following testing functions are now part of this api:,series.repeat has renamed the reps argument to repeats ,bug in df.groupby causing an attributeerror when grouping a single index frame by a column and the index level ,vbench + document add raw option to dataframe.apply for getting better performance when,bug in pandas.merge returning the wrong result when joining on an unordered categorical that had the same categories but in a different order ,rolling.count with min_periods=none will default to the size of the window in a future version ,fixed regression in dataframe.to_excel when the columns keyword argument is passed ,dataframe.align can accept series arguments and an axis option ,bug in dataframe.combine_first that would convert datetime-like column on other dataframe to integer when the column is not present in original dataframe ,bug in read_json where default encoding was not set to utf-8 ,bug with secondary_y axis not being considered for timeseries xlim ,we now have two distinct and non-overlapping methods of sorting. a * marks items that will show a futurewarning.,series.all and series.any now support the level and skipna parameters :,support for new methods of interpolation,fixed regression in categorical.astype casting to incorrect dtype when np.int32 is passed to dtype argument ,"using certain numpy functions would previously return a series if passed a series as an argument. this seems only to affect np.ones_like, np.empty_like, np.diff and np.where. these now return ndarrays.","bug in to_numeric in which numbers were being coerced to float, even though errors was not coerce ",bug in dataframe.to_stata which incorrectly handles nan values and ignores with_index keyword argument ,fixed bug in adding a dataframe with all-timedelta64 dtypes to a dataframe with all-integer dtypes returning incorrect results instead of raising typeerror ,"using a non-regular, but still monotonic index, rolling with an integer window does not impart any special calculation.","in previous versions, the behavior of the quarterbegin offset was inconsistent depending on the date when the n parameter was 0. ",allow stata files to be read incrementally with an iterator; support for long strings in stata files. see the docs here .,"bug in dataframe.drop, panel.drop, series.drop, index.drop where no keyerror is raised when dropping a non-existent element from an axis that contains duplicates ",removed series.asobject ,bug in dataframe.corr and dataframe.cov raising when handling nullable integer columns with pandas.na ,improved performance in pandas.read_stata and pandas.io.stata.statareader when converting columns that have missing values ,bug in series.shift with interval dtype raising a typeerror when shifting an interval array of integers or datetimes ,this change allows a dictionary to be passed so that some of the names of a multiindex can be changed.,fix a bug when indexing with np.nan via iloc/loc ,"it also used to be possible to evaluate expressions inplace, even if there was no item assignment:",fix bugs in indexing in a series with a duplicate index ,"augmented the list of named colors available for styling excel exports, enabling all of css4 colors ",deprecated in 0.13.0,bug in binary operations with a rhs of a series not aligning ,bug in categorical.fillna incorrectly raising a typeerror when value the individual categories are iterable and value is an iterable ,bug in period_range ignoring the frequency of start and end when those are provided as period objects .,an intervalindex can also be used in series and dataframe as the index.,"bug in read_csv in which files weren t opened as binary files by the c engine on windows, causing eof characters mid-field, which would fail ",typeerror: rename takes from 1 to 2 positional arguments but 3 were given,"prevent adding new attributes to the accessors .str, .dt and .cat. retrieving such a value was not possible, so error out on setting it. ","a close of a hdfstore now will close that instance of the hdfstore but will only close the actual file if the ref count w.r.t. all of the open handles are 0. essentially you have a local instance of hdfstore referenced by a variable. once you close it, it will report closed. other references will continue to operate until they themselves are closed. performing an action on a closed file will raise closedfileerror",bug in pd.read_fwf where the skiprows parameter was not being respected during column width inference ,add select_dtypes method to allow selection of columns based on dtype . see the docs.,pandas.read_excel error message when a specified sheetname does not exist is now uniform across engines ,bug in pandas.core.groupby.groupby.transform which caused missing values when the input function can accept a dataframe but renames it .,bug in dataframe.pivot_table with aggfunc='count' or aggfunc='sum' returning nan for missing categories when pivoted on a categorical. now returning 0 ,use series.array to extract the underlying array of intervals or periods from the series:,improved series.resample performance with dtype=datetime64 ,bug in fillna with method='bfill/ffill' and datetime64 dtype ,the file parsers will not recognize non-string values arising from a converter function as na if passed in the na_values argument. it s better to do post-processing using the replace function instead.,"a function union_categoricals has been added for combining categoricals, see unioning categoricals ",bug where ndframe.replace didn t correctly replace objects with period values .,add update methods to series/dataframe for updating values in place,timezone instead of an array ,bug in assignment against int64 data with np.ndarray with float64 dtype may keep int64 dtype ,bug in assignment against int64 data with np.ndarray with float64 dtype may keep int64 dtype ,bug in dataframe.plot and series.plot may ignore rot and fontsize keywords ,"additionally, support has been dropped for python 3.4 .",bug in selecting from a categorical with .iloc ,dataframe.corr and dataframe.cov use welford s method to avoid numerical issues ,bug in comparing a timedelta object against an np.ndarray with timedelta64 dtype incorrectly viewing all entries as unequal ,categorical.ravel will return a categorical instead of a np.ndarray ,bug in groupby with mixed str/int under python3 fixed; argsort was failing ,"removed the previously deprecated keyword labels from multiindex.set_codes, multiindex.copy, multiindex.drop, use codes instead ",bug in index constructor where an unhelpful error message was raised for numpy scalars ,"fixed regression in read_excel with engine=""odf"" caused unboundlocalerror in some cases where cells had nested child nodes ","the datetime-related attributes of datetimeindex, periodindex and timedeltaindex previously returned numpy arrays. they will now return a new index object, except in the case of a boolean field, where the result will still be a boolean ndarray. ",removed the previously deprecated frozenndarray class in pandas.core.indexes.frozen ,bug in dataframe.hist where the order of column argument was ignored ,bug in intervalindex constructors where creating an intervalindex from categorical data was not fully supported ,bug in qcut where datetime and timedelta data with nat present raised a valueerror ,fix return value/type signature of initobjtojson to be compatible with numpy s import_array ,"using the anchoring suffix, you can also specify the day of month to use instead of the 15th.",fixed bug where thousands operator was not handled correctly for floating point numbers in csv_import ,"fix boolean indexing on an empty series loses index names , infer_dtype works with empty arrays.",passing a scalar for indices is no longer allowed.,fixed bug where stringarray.isna would return false for na values when pandas.options.mode.use_inf_as_na was set to true ,merge_asof now gives a more clear error message when merge keys are categoricals that are not equal ,bug in using pathlib.path or py.path.local objects with io functions ,bug in groupby.transform where int groups with a transform that didn t preserve the index were incorrectly truncated .,retrieving unique values in an indexable or data column.,bug in dataframe.where and series.where coerce numerics to string incorrectly ,"bug in dataframe.to_latex where bold_rows was wrongly specified to be true by default, whereas in reality row labels remained non-bold whatever parameter provided. ",dataframe.to_dict has dropped the outtype parameter in favor of orient ,bug in pd.read_csv in which the nrows argument was not properly validated for both engines ,"for pivoting operations, this behavior is already controlled by the dropna keyword:",# dtypes are now preserved,fixed regression in pd.dataframe where constructor fails when given dict with none value ,bug where nullable integers could not be compared to strings ,parallel_coordinates has gained a sort_labels keyword argument that sorts class labels and the colors assigned to them ,"release the gil on most datetime field operations , normalization, and conversion to and from period, datetimeindex.to_period and periodindex.to_timestamp ","ewma, ewmstd, ewmvol, ewmvar, ewmcov, and ewmcorr now interpret min_periods in the same manner that the rolling_* and expanding_* functions do: a given result entry will be nan if the window does not contain at least min_periods values. the previous behavior was to set to nan the min_periods entries starting with the first non- nan value. ","removed index.get_duplicates, use idx.unique instead ",bug in intervalindex.copy when copying and intervalindex with non-default closed ,bug in period.end_time when a multiple of time period is requested ,read_fwf now infers the column specifications from the first 100 rows of the file if the data has correctly separated and properly aligned columns using the delimiter provided to the function .,"bug in crosstab when inputs are two series and have tuple names, the output will keep a dummy multiindex as columns. ","pandas now supports storing array-like objects that aren t necessarily 1-d numpy arrays as columns in a dataframe or values in a series. this allows third-party libraries to implement extensions to numpy s types, similar to how pandas implemented categoricals, datetimes with timezones, periods, and intervals.",bug in infer_freq causing indices with 2-day gaps during the working week to be wrongly inferred as business daily ,assigning values to none now considers the dtype when choosing an empty value .,timedelta will now accept nanoseconds keyword in constructor ,bug in dataframe.nlargest and dataframe.nsmallest when the index had duplicate values ,added inner join option to dataframe.join when joining on key ,bug in dataframe.any with axis=1 and bool_only=true ignoring the bool_only keyword ,fixed regression in to_csv where specifying an na_rep might truncate the values written ,can index time series with datetime.time objects to select all data at particular time of day or between two times ,series.rank and dataframe.rank now have the same signature ,"bug in .interpolate, where limit_direction was not respected when limit=none was passed ",improved performance of series.dt.date and datetimeindex.date ,"s.dt.hour and other .dt accessors will now return np.nan for missing values , ",bug in dataframe.append when appending a row with different columns ,dataframe.to_json now returns accurate type serialisation for each column for frames of mixed dtype ,bug in dataframe.loc and dataframe.__getitem__ raising keyerror when columns were multiindex with only one level ,"passing floating dtype codes to categorical.from_codes is no longer supported, pass codes.astype instead ",fix to ensure that tab-completion in an ipython console does not raise warnings for deprecated attributes .,bug in timedelta.round with negative values ,bug in dataframe.groupby where grouper does not recognize level when frequency is specified ,"the html and plain text representations of dataframe now show a truncated view of the table once it exceeds a certain size, rather than switching to the short info view . this makes the representation more consistent as small dataframes get larger.",pandas.io.formats.style.styler now has method hide_columns to determine whether columns will be hidden in output ,calling the .value_counts method on a series with a categorical dtype now returns a series with a categoricalindex ,usually you simply want to know which values are null.,the pandas.io.wb and pandas.io.data stub modules have been removed ,types int64 and bool support enhancements,types int64 and bool support enhancements,"added module for reading and writing json format files: pandas.io.json accessible via read_json top-level function for reading, and to_json dataframe method for writing, see the docs various issues ","bug in dataframe.clip when order of columns of dataframes doesn t match, result observed is wrong in numeric values ",ensured that ordering of outputs in groupby aggregation functions is consistent across all versions of python ,the documentation for pivot_table states that a dataframe is always returned. here a bug is fixed that allowed this to return a series under certain circumstance. ,bug in dataframegroupby.ffill and dataframegroupby.bfill where a nan group would return filled values instead of nan when dropna=true ,"many read/write functions have acquired the storage_options optional argument, to pass a dictionary of parameters to the storage backend. this allows, for example, for passing credentials to s3 and gcs storage. the details of what parameters can be passed to which backends can be found in the documentation of the individual storage backends . see section reading/writing remote files.",removed value_range in favor of describe ,fix running of stata io tests. now uses temporary files to write ,interpolate now supports method='akima' .,"operations on sparse structures within dataframes should preserve sparseness, merging type operations will convert to dense , so might be somewhat inefficient",bug in intervalindex where performing a scalar lookup fails for included right endpoints of non-overlapping monotonic decreasing indexes ,support passing encoding with xlwt ,df.to_csv will now return a string of the csv data if neither a target path nor a buffer is provided ,upsampling data with a periodindex will result in a higher frequency timeseries that spans the original time window,added support for different delimiters in dataframe.to_csv ,bug in pd.read_csv with engine='python' which raised errors when a numpy array was passed in for usecols ,bug in groupby.pct_change and core.groupby.seriesgroupby.pct_change causes typeerror when fill_method is none ,bug in the html repr of a truncated series or dataframe not showing the class name with the large_repr set to info ,bug in read_csv with a date_parser that returned a datetime64 array of other time resolution than ,bug in dataframe.to_html with index=false when both columns and row index are multiindex ,interval and intervalindex have gained a length attribute ,fixed regression in intervaldtype construction where passing an incorrect string with interval as a prefix could result in a recursionerror. ,"implement fast data ranking for series and dataframe, fast versions of scipy.stats.rankdata ",sparsearray.get_values and sparsearray.to_dense have dropped the fill parameter ,"bug in datetimeindex, timedeltaindex addition and subtraction of zero-dimensional integer arrays gave incorrect results ",bug in timestamp.floor datetimeindex.floor where time stamps far in the future and past were not rounded correctly ,a slice object with ints 1:7,fixed regression in equality comparison of pd.nat with a non-datetimelike numpy array returning a scalar instead of an array ,"inconsistency in datetimearray, timedeltaarray, and periodarray method __setitem__ casting arrays of strings to datetime-like scalars but not scalar strings ",bug in pd.set_eng_float_format that would prevent nan and inf from formatting ,bug in subtracting timedeltaindex from period incorrectly raising typeerror in some cases where it should succeed and incompatiblefrequency in some cases where it should raise typeerror ,cacheableoffset and weekday are no longer available in the pandas.tseries.offsets module ,"expand=true: it always returns a dataframe, which is more consistent and less confusing from the perspective of a user.","support for a datetime64 with timezones as a first-class dtype, see here",method drop now also accepts index/columns keywords,method drop now also accepts index/columns keywords,removal of the previously deprecated module pandas.core.datetools ,rolling and expanding,"plotting functions now raise a typeerror before trying to plot anything if the associated objects have a dtype of object , but they will try to convert object arrays to numeric arrays if possible so that you can still plot, for example, an object array with floats. this happens before any drawing takes place which eliminates any spurious plots from showing up.",these indexing function have been deprecated in the documentation since 0.11.0.,read_html now sports an encoding argument that is passed to the underlying parser library. you can use this to read non-ascii encoded web pages .,bug in dataframe.to_string that broke column alignment when index=false and width of first column s values is greater than the width of first column s header ,bug in concat when concatenating a list of series with all-sparse values changing the fill_value and converting to a dense series ,fixed bug in dataframe.replace where a nested dict wasn t being iterated over when regex=false ,fixed regression in dataframegroupby.diff raising for int8 and int16 columns ,# the levels are automatically included as data columns,"improved performance of intervalindex.is_monotonic, intervalindex.is_monotonic_increasing and intervalindex.is_monotonic_decreasing by removing conversion to multiindex ",bug in dataframe.loc returning empty result when indexer is a slice with negative step size ,there are several libraries that are now recommended dependencies,"in prior versions this would drop the timezone, now it retains the timezone, but gives a column of object dtype:",bug in dataframe.drop with an empty-list with non-unique indices ,bug in groupby.quantile with multiple list-like q value and integer column names ,bug in cache coherence with chained indexing and slicing; add _is_view property to ndframe to correctly predict views; mark is_copy on xs only if its an actual copy ,bug in getting timezone data with dateutil on various platforms ,"fixed regression in categorical, where constructing it from a categorical series and an explicit categories= that differed from that in the series created an invalid object which could trigger segfaults. ",fixed bug in concat when concatenating dataframe objects with non-overlapping columns resulting in object-dtype columns rather than preserving the extension dtype ,"bug in comparing dateoffset objects with non-dateoffset objects, particularly strings, raising valueerror instead of returning false for equality checks and true for not-equal checks ","bug in datetimearray.__setitem__, timedeltaarray.__setitem__, periodarray.__setitem__ incorrectly allowing values with int64 dtype to be silently cast ",added option to hide index in series.to_string ,"bug in dataframe.to_html, dataframe.to_string, and dataframe.to_latex ignoring the na_rep argument when float_format was also specified ",bug in series.isin when called with a categorical ,".swaplevel for series, dataframe, panel, and multiindex now features defaults for its first two parameters i and j that swap the two innermost levels of the index. ",dataframe.plot now prints a title above each subplot if suplots=true and title is a list of strings ,pd.api.types.union_categoricals gained the ignore_ordered argument to allow ignoring the ordered attribute of unioned categoricals . see the categorical union docs for more information.,fixed regression in groupby.apply if called with a function which returned a non-pandas non-scalar object ,python csv parser now supports usecols ,series.to_list and index.to_list are now aliases of series.tolist respectively index.tolist ,"to_csv, to_csv, to_json, and to_json now support compression='infer' to infer compression based on filename extension . the default compression for to_csv, to_json, and to_pickle methods has been updated to 'infer' .",clarified error message produced when passing an incorrect freq argument to datetimeindex with nat as the first entry in the passed data ,improved error message and docstring in cut and qcut when labels=true ,bug in easter returns incorrect date when offset is negative ,series.str.contains now has a regex=false keyword which can be faster for plain string patterns. ,bug in categorical.astype where nan values were handled incorrectly when casting to int ,add kurt methods to series and dataframe for computing kurtosis,removed series.ix and dataframe.ix ,"enable reading gzip compressed files via url, either by explicitly setting the compression parameter or by inferring from the presence of the http content-encoding header in the response ",categorical.from_array has been removed ,bug in to_sql using unicode column names giving unicodeencodeerror with .,using .ix will now show a deprecationwarning with a link to some examples of how to convert code here.,"pandas has added a pyproject.toml file and will no longer include cythonized files in the source distribution uploaded to pypi . if you re installing a built distribution or via conda, this shouldn t have any effect on you. if you re building pandas from source, you should no longer need to install cython into your build environment before calling pip install pandas.",bug in dateoffset where attributes reconstructed from pickle files differ from original objects when input values exceed normal ranges ,dataframe.astype and series.astype have renamed the raise_on_error argument to errors ,fixed in pivot_table. margins did not compute if values is the index.,bug in dataframe.diff with axis=1 returning incorrect results with mixed dtypes ,bug in dataframe.replace and series.replace where interval dtypes would be converted to object dtypes ,fixed regression where custom hashable types could not be used as column keys in dataframe.set_index ,pd.read_sql and to_sql can accept database uri as con parameter ,the read_gbq method has gained the dialect argument to allow users to specify whether to use bigquery s legacy sql or bigquery s standard sql. see the docs for more details .,implemented pandas.core.window.window.var and pandas.core.window.window.std functions ,"bug in pd.read_hdf where attempting to load an hdf file with a single dataset, that had one or more categorical columns, failed unless the key argument was set to the name of the dataset. ",fixed regression in dataframe.astype and series.astype not casting to bytes dtype ,fixed regression in pands.core.groupby.dataframegroupby.quantile raising when multiple quantiles are given ,bug in .to_json where lines=true and contents contain escaped characters ,bug in extension dtype creation where the created types were not is/identical ,the sparsearray.values attribute is deprecated. you can use np.asarray or the sparsearray.to_dense method instead .,bug in pd.pivot_table where margins_name is ignored when aggfunc is a list ,dataframe.plot will scatter plot x versus y by passing kind='scatter' ,indexing with a boolean index,indexing with a boolean index,pandas.io.formats.style.styler now has method hide_index to determine whether the index will be rendered in output ,bug in dataframe.duplicated with a large number of columns causing a maximum recursion depth exceeded .,fixed regression in dataframe.sum when min_count greater than the dataframe shape was passed resulted in a valueerror ,bug in timedelta and pandas.to_timedelta that ignored the unit argument for string input ,bug in interactions with qt when a qtapplication already exists ,bug in indexing with partial string indexing with a len-1 dataframe ,passing multiple levels to stack will now work when multiple level numbers are passed . see reshaping by stacking and unstacking.,value_range added as utility function to get min and max of a dataframe ,"keyerror now raises instead of valueerror in drop, drop, drop, drop when dropping a non-existent element in an axis with duplicates ",timedeltaindex.astype and datetimeindex.astype will now return int64index instead of np.array ,bug in datetimearray.date where a valueerror would be raised with a read-only backing array ,"starting with pandas 1.0.0, pandas will adopt a variant of semver to version releases. briefly,","lag parameter was added to the autocorrelation method of series, defaults to lag-1 autocorrelation ","the previous or future behavior can be obtained, without any warnings, by specifying the dtype",bug in read_sas in which an incorrect error was raised on an invalid file format. ,bug in series.rpow with object dtype nan for 1 ** na instead of 1 .,"bug in compat with np.compress, surfaced in ","added the ndframe.equals method to compare if two ndframes are equal have equal axes, dtypes, and values. added the array_equivalent function to compare if two ndarrays are equal. nans in identical locations are treated as equal. see also the docs for a motivating example.","added support for maskedarray data in dataframe, masked values converted to nan ",index now supports the .where function for same shape indexing ,add level keyword to drop for dropping values from a level ,"in previous versions most types could be compared to string column in a hdfstore usually resulting in an invalid comparison, returning an empty result frame. these comparisons will now raise a typeerror ","improved performance of period constructor, additionally benefitting periodarray and periodindex creation ",bug where calling series.replace on categorical data could return a series with incorrect dimensions ,fixed regression where slicing datetimeindex raised assertionerror on irregular time series with pd.nat or on unsorted indices ,will thompson +,read_excel will correctly show the deprecation warning for previously deprecated sheetname ,bug in dataframe.merge in which merging using index objects as vectors raised an exception ,"bug in series.interpolate when using method=`index` with an unsorted index, would previously return incorrect results. ","dataframe.hist and series.hist no longer allows figsize=""default"", specify figure size by passinig a tuple instead ",the leading white spaces have been removed from the output of .to_string method ,the following are now part of this api:,the following are now part of this api:,indexing with object dtypes ,bug in groupby.nunique with a datetimelike-grouper where bins counts were incorrect ,bug in describe dropping column names for hierarchical indexes ,bug in timestamp returning utc based time/date attributes when a timezone was provided ,testing statements updated to use specialized asserts ,"bug in unstack if called with a list of column as an argument, regardless of the dtypes of all columns, they get coerced to object ",added support for writing datetime64 columns with to_sql for all database flavors .,bug in categoricalindex.get_indexer returning the wrong result when target was an unordered categorical that had the same categories as self but in a different order ,bug in masking datetime-like arrays with a boolean mask of an incorrect length not raising an indexerror ,add notimplementederror for simultaneous use of chunksize and nrows for read_csv .,allow dataframe.merge to handle combinatorial sizes too large for 64-bit integer ,storing interval and period data in series and dataframe,"some minimum supported versions of dependencies were updated . if installed, we now require:","some minimum supported versions of dependencies were updated . if installed, we now require:","some minimum supported versions of dependencies were updated . if installed, we now require:","in read_excel, the comment argument is now exposed as a named parameter ","allow to pass multiple axes to dataframe.plot, hist and boxplot ",bug in index.copy where name parameter was ignored ,"pie plots from series.plot and dataframe.plot with kind='pie' , see the docs.",datetimeindex.offset is deprecated. use datetimeindex.freq instead ,deprecation of panel4d and panelnd. we recommend to represent these types of n-dimensional data with the xarray package.,bug in index with datetime64 dtype that did not localize integer data correctly ,bug in merge when merging by index name would sometimes result in an incorrectly numbered index ,fixed regression in setitem with a series getting aligned before setting the values ,strings passed into dataframe.groupby that refer to both column and index levels will raise a valueerror ,bug in read_csv that caused it to raise overflowerror when trying to use inf as na_value with integer index column ,fixed a bug in dataframe/panel cache insertion and subsequent indexing ,"the outer method on numpy ufuncs, e.g. np.subtract.outer has been deprecated on series objects. convert the input to an array with series.array first ",deprecated parameter dtype of method copy for all index subclasses. use the astype method instead for changing dtype ,bug in series.str.contains for series containing only nan values of object dtype ,bug in periodindex and period subtraction raises attributeerror ,"bug in expanding_cov, expanding_corr, rolling_cov, and rolling_corr for two arguments with mismatched index ",fixed bug where get_data_famafrench wasn t using the correct file edges ,fixed bug with pd.concat losing dtype information if all inputs are empty ,improved the import time of pandas by about 2.25x. ,bug preventing hash table creation with very large number of rows ,"prior to v0.17.0, timestamp and to_datetime may parse year-only datetime-string incorrectly using today s date, otherwise datetimeindex uses the beginning of the year. timestamp and to_datetime may raise valueerror in some types of datetime-string which datetimeindex can parse, such as a quarterly string.",joining with two multi-indexes,these are api changes which make panel more consistent with dataframe,bug in dataframe.groupby dropped nan groups from result with dropna=false when grouping over a single column ,"disabled construction of a series where len > len = 1, which previously would broadcast the data item, and now raises a valueerror ","as of v0.19.0, sparse data keeps the input dtype, and uses more appropriate fill_value defaults .",pandas.io.json.json_normalize gained the option errors='ignore'|'raise'; the default is errors='raise' which is backward compatible. ,"bug in dataframe.to_csv when the table had multiindex columns, and a list of strings was passed in for header ",parsing datetime strings with the same utc offset will preserve the utc offset in the tz,"bug in series.take with categorical data interpreting -1 in indices as missing value markers, rather than the last element of the series ","note: set_printoptions/ reset_printoptions are now deprecated , the print options now live under display.xyz . for example:",>>> x + y # warning generated: should do x | y instead,# note that pandas.rpy was deprecated in v0.16.0,"added axvlines boolean option to parallel_coordinates plot function, determines whether vertical lines will be printed, default is true",bug when indexing with .loc where the index was a categoricalindex with non-string categories didn t work ,the dataframe constructor will now respect key ordering if a list of ordereddict objects are passed in ,"the sorting api has been revamped to remove some long-time inconsistencies, see here",bug in selection with missing values via .ix from a duplicate indexed dataframe failing ,improved performance of series.map for dictionary mappers on categorical series by mapping the categories instead of mapping all values ,bug in pandas.core.groupby.groupby.idxmax and pandas.core.groupby.groupby.idxmin with datetime column would return incorrect dtype ,pandas.core.groupby.groupby.rank now raises a valueerror when an invalid value is passed for argument na_option ,fixed an issue related to ticklocs/ticklabels with log scale bar plots across different versions of matplotlib ,the display.precision option has been clarified to refer to decimal places .,# rows are now ordered as the requested keys,fixed regression in dataframe.apply where functions that altered the input in-place only operated on a single row ,"the internal index method _shallow_copy now copies cached attributes over to the new index, avoiding creating these again on the new index. this can speed up many operations that depend on creating copies of existing indexes ","dataframe.values will now return float64 with a dataframe of mixed int64 and uint64 dtypes, conforming to np.find_common_type ",bug in read_csv was causing a segfault when there were blank lines between the header and data rows ,"when used on a datetimeindex, timedeltaindex or periodindex, tolerance will coerced into a timedelta if possible. this allows you to specify tolerance with a string:","accept textfilereader in concat, which was affecting a common user idiom ",fixed bug where dataframe.describe and series.describe on tz-aware datetimes did not show first and last result ,fix construction of a dataframe with a duplicate index,"ordered category: values are sorted by appearance order, categories keep existing order.","add tshift method for leading/lagging using the frequency of the index, as opposed to a naive lead/lag using shift","bug in categorical.equals returning the wrong result when comparing two unordered categorical arrays with the same categories, but in a different order ",frozenlist has gained the .union and .difference methods. this functionality greatly simplifies groupby s that rely on explicitly excluding certain columns. see splitting an object into groups for more information .,fixed panel attribute naming conflict if item is named a ,we are adding a standard module that exposes the public testing functions in pandas.testing . those functions can be used when writing tests for functionality using pandas objects.,dataframe.to_pickle and read_pickle now accept url ,"nat may represent either a datetime64 null or a timedelta64 null. given the ambiguity, it is treated as a timedelta64, which allows more operations to succeed.",small performance decrease to rolling.min and rolling.max for fixed windows ,fixed regression in dataframegroupby.agg where a valueerror: buffer source array is read-only would be raised when the underlying array is read-only ,dataframe.between_time and dataframe.at_time have gained the axis parameter ,removed support for legacy hdf5 formats ,"dataframe.to_string now accepts decimal as an argument, allowing the user to specify which decimal separator should be used in the output. ",bug in transform where applying a function to a timezone aware column would return a timezone naive result ,bug in read_hdf in which reading a series saved to an hdf file in fixed format fails when an explicit mode='r' argument is supplied ,bug in series.to_sparse with series already holding sparse data not constructing properly ,bug in to_numeric raising a typeerror when attempting to convert a string dtype series containing only numeric strings and na ,bug in index.drop when passing a list of both tuples and non-tuples ,bug in crosstab where arguments with non-overlapping indexes would return a keyerror ,"starting in version 0.11.0, these methods may be deprecated in future versions.",bug in merge_asof where a typeerror was raised when by_col were timezone aware values ,"some formerly public python/c/c++/cython extension modules have been moved and/or renamed. these are all removed from the public api. furthermore, the pandas.core, pandas.compat, and pandas.util top-level modules are now considered to be private. if indicated, a deprecation warning will be issued if you reference these modules. ",bug in indexing with a mixed-integer index causing an importerror ,fixed regression in read_excel that caused it to raise attributeerror when checking version of older xlrd versions ,bug in pd.read_json for python 2 where lines=true and contents contain non-ascii unicode characters ,bug where adding timestamp to a np.timedelta64 object would raise instead of returning a timestamp ,df = value and df.loc = value are now completely equivalent; previously the .loc would not necessarily coerce the dtype of the resultant series ,rather than this:,bug in pd.concat where the names of multiindex of resulting dataframe are not handled correctly when none is presented in the names of multiindex of input dataframe ,"bug in series.astype and dataframe.astype not respecting the errors argument when set to ""ignore"" for extension dtypes ",bug in interpolation methods with the limit keyword when no values needed interpolating .,bug in interpolation methods with the limit keyword when no values needed interpolating .,fixed regression in groupby or resample when aggregating an all-nan or numeric object dtype column ,bug where categorical comparison operator __ne__ would incorrectly evaluate to false when either element was missing ,"as a result of a change in yahoo s option page layout, when an expiry date is given, options methods now return data for a single expiry date. previously, methods returned all data for the selected month.","plotting methods are now available as attributes of the .plot accessor, see here",bug in pandas.dataframe.rolling and pandas.series.rolling which incorrectly accepted a 0 window size rather than raising ,read_excel now supports s3 urls of the format s3://bucketname/filename ,series and dataframe now support iterable objects in the constructor ,performance regression with periodindex ,bug in adding np.timedelta64 to datetimeindex with timezone outputs incorrect results ,fixed regression in index constructor raising a attributeerror when passed a sparsearray with datetime64 values ,"reindexing operations, will return a resulting index based on the type of the passed indexer, meaning that passing a list will return a plain-old-index; indexing with a categorical will return a categoricalindex, indexed according to the categories of the passed categorical dtype. this allows one to arbitrarily index these even with values not in the categories, similarly to how you can reindex any pandas index.","this returns a merged dataframe with the entries in the same order as the original left passed dataframe , with the fields of the quotes merged.",dateoffset objects are now immutable. attempting to alter one of these will now raise attributeerror ,"# specifying int64 dtype, but all values are stored in sp_values because",sparsepanels implementation is unchanged ,"reverted enhancement added in pandas-1.1.0 where timedelta_range infers a frequency when passed start, stop, and periods ","the function union_categoricals is now importable from pandas.api.types, formerly from pandas.types.concat ",fixed regression in series.__getitem__ incorrectly raising when the input was a tuple ,html table output skips colspan or rowspan attribute if equal to 1. ,a total of 337 people contributed patches to this release. people with a + by their names contributed a patch for the first time.,bug in .resample with a periodindex not changing its freq appropriately when empty ,performance regression in indexing with getitem ,bug in merge when merging an empty dataframe with an int64 column or a non-empty dataframe with an int64 column that is all nan ,previously with bottleneck:,improved performance of factorize of datetime with timezone ,bug in isnull where numpy.datetime64 in a numpy.array was not determined to be null,fixed pow operations for integerarray when the other value is 0 or 1 ,bug in .str.replace does not raise typeerror for invalid replacement ,bug in pandas.io.stata.statareader.value_labels raising an attributeerror when called on very old files. now returns an empty dict ,groupby head and tail now act more like filter rather than an aggregation:,"these types are the same on many platform, but for 64 bit python on windows, np.int_ is 32 bits, and np.intp is 64 bits. changing this behavior improves performance for many operations on that platform.",bug in timedelta.__mul__ where multiplying by nat returned nat instead of raising a typeerror ,"using .loc. here we will select the appropriate indexes from the index, then use label indexing.","the default sort value for index.union has changed from true to none . the default behavior, however, remains the same: the result is sorted, unless","bug in pandas.core.window.rolling.min and pandas.core.window.rolling.max with closed='left', a datetime-like index and only one entry in the series leading to segfault ",integration with apache parquet file format,integration with apache parquet file format,fixed issue in the xlsxwriter engine where it added a default general format to cells if no other format was applied. this prevented other row or column formatting being applied. ,add sort option to groupby to allow disabling sorting of the group keys for potential speedups ,bug in rolling.apply where center=true was ignored when engine='numba' was specified ,"read_excel no longer allows an integer value for the parameter usecols, instead pass a list of integers from 0 to usecols inclusive ",bug in to_numeric where it does not raise if input is more than one dimension ,dataframe.to_html and dataframe.to_string s col_space parameter now accepts a list or dict to change only some specific columns width .,"bug in timedeltaindex, series, and dataframe floor-division with timedelta64 dtypes and nat in the denominator ",the default return type of boxplot will change from a dict to a matplotlib axes in a future release. you can use the future behavior now by passing return_type='axes' to boxplot.,specifying an offset allows a more intuitive specification of the rolling frequency.,earlier versions of pandas would format floating point numbers to have one less decimal place than the value in display.precision.,bug in dataframe.last_valid_index and dataframe.first_valid_index on empty frames ,bug in timestamp where comparison with an array of timestamp objects would result in a recursionerror ,"the signature of series.to_csv has been uniformed to that of dataframe.to_csv: the name of the first argument is now path_or_buf, the order of subsequent arguments has changed, the header argument now defaults to true. ","fixed misleading exception message in series.interpolate if argument order is required, but omitted .",read_sas will correctly parse sas7bdat files with many columns ,"using these methods / indexers, you can chain data selection operations without using temporary variable.",fixed string-representation of nat to be nat ,bug in dataframe.where with an empty dataframe and empty cond having non-bool dtype ,"additionally, the repr for dataframe and series can now publish this json table schema representation of the series or dataframe if you are using ipython . this gives frontends like the jupyter notebook and nteract more flexibility in how they display pandas objects, since they have more information about the data. you must enable this by setting the display.html.table_schema option to true.","added a keyword argument, cache, to to_datetime that improved the performance of converting duplicate datetime arguments ",added option to series.str.split to return a dataframe rather than a series ,series construction will reduce the number of copies made of the input data in certain cases ,bug in dataframe.diff with datetime64 dtypes including nat values failing to fill nat results correctly ,now using lxml to scrape html instead of beautifulsoup .,fixed regression in categorical construction with numpy.str_ categories ,dataframe.cov and series.cov now support a new parameter ddof to support delta degrees of freedom as in the corresponding numpy methods .,"if the function provided to groupby.apply returns a named series, the name of the series will be kept as the name of the column index of the dataframe returned by groupby.apply . this facilitates dataframe.stack operations where the name of the column index is used as the name of the inserted column containing the pivoted data.","the styler class has gained a pipe method. this provides a convenient way to apply users predefined styling functions, and can help reduce boilerplate when using dataframe styling functionality repeatedly within a notebook. ",bug on inserting a boolean label into a dataframe with a numeric index columns incorrectly casting to integer ,"bug in to_numeric with downcast=""unsigned"" fails for empty data ",read_csv now accepts binary mode file buffers when using the python csv engine ,bug in the conversion of a sliced pyarrow.table with missing values to a dataframe ,string accessor methods returning integers will return a value with int64dtype,the internal hdf5 data arrangement for dataframes has been transposed. legacy files will still be readable by hdfstore ,>>> s1 and s2,plot will now reverse the order of legend labels for most plot kinds. ,"bug in pd.to_datetime when passing integers or floats, and no unit and errors='coerce' .",bug in sparse array indexing in which indices were not being validated ,bug in series.plot.bar or dataframe.plot.bar with y not respecting user-passed color ,fsspec now used for filesystem handling,allow keyword arguments for callable local reference used in the dataframe.query string ,bug in rolling.quantile function that caused a segmentation fault when called with a quantile value outside of the range ,"the class frozenndarray has been deprecated. when unpickling, frozenndarray will be unpickled to np.ndarray once this class is removed ",bug in timestamp constructor where passing an invalid timezone offset designator would not raise a valueerror ,bug in timestamp constructor where passing an invalid timezone offset designator would not raise a valueerror ,# and all methods take an inplace kwarg - but return none,"bug in the return type of pd.unique on a categorical, which was returning an ndarray and not a categorical ", standard errors assume that the covariance matrix of the errors is correctly specified.,bug in pd.concat when empty and non-empty dataframes or series are concatenated ,added support for a chunksize parameter to read_sql function. specifying this argument will return an iterator through chunks of the query result .,"the method size would previously ignore as_index=false. now the grouping columns are returned as columns, making the result a dataframe instead of a series. ",bug in datetimeindex.to_frame where timezone aware data would be converted to timezone naive data ,the by argument now works correctly with the layout argument in *.hist plotting methods,"to assist with upgrading pandas, rename_categories treats series as list-like. typically, series are considered to be dict-like . in a future version of pandas rename_categories will change to treat them as dict-like. follow the warning message s recommendations for writing future-proof code.",bug in to_msgpack and read_msgpack zlib and blosc compression support ,fixed bug in pattern in hdfstore expressions when pattern is not a valid regex ,to conform with other ndframe objects. see internal refactoring for more information.,"since this is an experimental library, the storage format may not be stable until a future release.",fixed regression in dataframe.reset_index would raise a valueerror on empty dataframe with a multiindex with a datetime64 dtype level ,datetimeindex.union does not infer freq if self and the input have none as freq ,local variables must be referred to explicitly. this means that even if you have a local variable that is not a column you must still refer to it with the '@' prefix.,bug in dataframe.transform where particular aggregation functions were being incorrectly cast to match the dtype of the grouped data ,bug in datetimeindex and timedeltaindex names are lost after timedelta arithmetic ,"with a categoricaldtype of all numerics, datetimes, or timedeltas, we can automatically convert to the correct type",added nunique and value_counts functions to index for counting unique elements. ,add panel item access via attributes and ipython completion ,performance improvement in series.astype and dataframe.astype for categorical ,bug in get_dummies with unicode attributes in python 2 ,bug in reductions for series with sparse dtypes ,regression in merging categorical and object dtypes ,providing suffixes as a set in pandas.merge is deprecated. provide a tuple instead .,period and periodindex addition/subtraction with np.timedelta64 results in incorrect internal representations ,other dataframe reductions with numeric_only=none will also avoid this pathological behavior :,dataframe.sort_values and series.sort_values have gained ignore_index keyword to be able to reset index after sorting ,bug in comparing dataframe with tz-aware datetimeindex columns with a dst transition that raised a keyerror ,bug in pandas.core.resample.resampler.agg with a timezone aware index where overflowerror would raise when passing a list of functions ,added split as an option to the orient argument in pd.dataframe.to_dict. ,fixed regression in repr of float-like strings of an object dtype having trailing 0 s truncated after the decimal ,bug in multi-axis indexing with > 2 ndim and a multiindex ,"when called with a null slice , the .iloc and .loc indexers return a shallow copy of the original object. previously they returned the original object. .",bug in .read_csv with dtype specified on empty data producing an error , pandas/core/index.py:469: futurewarning: scalar indexers for index type int64index should be integers and not floating point, pandas/core/index.py:469: futurewarning: scalar indexers for index type int64index should be integers and not floating point,pd.read_excel now accepts column names associated with keyword argument names ,"we have reverted a commit that resulted in several plotting related regressions in pandas 1.2.0 . as a result, bugs reported as fixed in pandas 1.2.0 related to inconsistent tick labeling in bar plots are again present ",check the api changes and deprecations before updating.,check the api changes and deprecations before updating.,check the api changes and deprecations before updating.,check the api changes and deprecations before updating.,check the api changes and deprecations before updating.,check the api changes and deprecations before updating.,check the api changes and deprecations before updating.,the dataframe.rename and dataframe.reindex methods have gained the axis keyword to specify the axis to target with the operation .,index.to_frame now supports overriding column name .,"this change also affects routines using concat internally, like get_dummies, which now returns a dataframe in all cases .",bug in rolling.count and expanding.count argument where min_periods was ignored ,added normalize option for timestamp to normalized to midnight ,"bug in series constructor with a dtype=str, previously raised in some cases ","periodindex now has its own period dtype. the period dtype is a pandas extension dtype like category or the timezone aware dtype . as a consequence of this change, periodindex no longer has an integer dtype:",bug in vectorised setting of timestamp columns with python datetime.date and numpy datetime64 ,bug in .resample with a periodindex when resampling to an existing frequency ,"for ease of creation of series of categorical data, we have added the ability to pass keywords when calling .astype. these are passed directly to the constructor.","pd.tseries.util.pivot_annual is deprecated. use pivot_table as alternative, an example is here ",bug in sparseseries with multiindex indexing result may have normal index ,regex argument to dataframe.filter now handles numeric column names instead of raising valueerror .,bug in datetimeindex.to_period where a timezone aware index was converted to utc first before creating periodindex ,"pd.groupby, replaced by using the .groupby method directly on a series/dataframe",ability to specify strings to be recognized as true/false,"improved performance of datetimeindex and periodindex slicing given non-unique, monotonic data .",a total of 18 people contributed patches to this release. people with a + by their names contributed a patch for the first time.,a total of 18 people contributed patches to this release. people with a + by their names contributed a patch for the first time.,a total of 18 people contributed patches to this release. people with a + by their names contributed a patch for the first time.,"the percentile_width keyword argument in describe has been deprecated. use the percentiles keyword instead, which takes a list of percentiles to display. the default output is unchanged.","allow timedelta string conversion when leading zero is missing from time definition, ie 0:00:00 vs 00:00:00. ",a total of 328 people contributed patches to this release. people with a + by their names contributed a patch for the first time.,"bug in merge, did not append suffixes correctly with multiindex ",.merge and .join on category dtype columns will now preserve the category dtype when possible ,bug when indexing datetimeindex with nanosecond resolution dates and timezones ,"you can pass columns keyword to select to filter a list of the return columns, this is equivalent to passing a term",the out parameter has been removed from the series.round method. ,the module pandas.tools has been removed ,outofboundsdatetime issues an improved error message when timestamp is out of implementation bounds. ,to_parquet now supports writing a dataframe as a directory of parquet files partitioned by a subset of the columns when engine = 'pyarrow' ,"pandas >= 0.15.0 will no longer support compatibility with numpy versions < 1.7.0. if you want to use the latest versions of pandas, please upgrade to numpy >= 1.7.0 ",performing indexing operations on integer type data can easily upcast the data. the dtype of the input data will be preserved in cases where nans are not introduced.,fix a bug where reshaping a series to its own shape raised typeerror and other reshaping issues.,bug in dataframe.fillna where the argument downcast was ignored when fillna value was of type dict ,"a binary window operation, like .corr or .cov, when operating on a .rolling, .expanding, or .ewm object, will now return a 2-level multiindexed dataframe rather than a panel, as panel is now deprecated, see here. these are equivalent in function, but a multiindexed dataframe enjoys more support in pandas. see the section on windowed binary operations for more information. ","bug in rolling.count returned np.nan with fixedforwardwindowindexer as window, min_periods=0 and only missing values in the window ","bug in pickle deserialization that failed for pre-0.14.1 containers with dup items trying to avoid ambiguity when matching block and manager items, when there s only one block there s no ambiguity ",'datetime.date' is coerced to a datetime. in the future pandas will,fixed regression in read_sql when passing certain queries with mysql/pymysql .,"bug in .plot which did not drop missing values to generate the kde plot, instead generating an empty plot. ",bug in series construction from a tuple of integers on windows not returning default dtype ,nanosecond support for offsets,"the series and dataframe .plot method allows for customizing plot types by supplying the kind keyword arguments. unfortunately, many of these kinds of plots use different required and optional keyword arguments, which makes it difficult to discover what any given plot kind uses out of the dozens of possible arguments.",bug in pandas.tools.utils.cartesian_product with large input can cause overflow on windows ,series.plot.kde has exposed the args ind and bw_method in the docstring . the argument ind may now also be an integer .,fixed regression in read_excel with non-rawbyte file handles ,the memory usage of the two approaches is identical. see migrating for more .,"as can be seen, the dtype is object; each value in the column is a string. to convert the strings to an array of datetimes, the date_parser argument","the behavior of datetime64 dtypes has changed with respect to certain so-called reduction operations . the following operations now raise a typeerror when performed on a series and return an empty series when performed on a dataframe similar to performing these operations on, for example, a dataframe of slice objects:",bug in dataframe.to_latex formatting when columns or index is a multiindex .,bug in to_datetime where arrays of datetime objects containing both timezone-aware and timezone-naive datetimes would fail to raise valueerror ,"bug in dataframe.reset_index with nat values in index raises valueerror with message ""cannot convert float nan to integer"" ",bug in timestamp where constructing timestamp with dateutil timezone less than 128 nanoseconds before daylight saving time switch from winter to summer would result in nonexistent time ,introduce a better error message in series.sparse.from_coo so it returns a typeerror for inputs that are not coo matrices ,fixed valueerror raised by cummin/cummax when datetime64 series contains nat. ,"world bank data requests now will warn/raise based on an errors argument, as well as a list of hard-coded country codes and the world bank s json response. in prior versions, the error messages didn t look at the world bank s json response. problem-inducing input were simply dropped prior to the request. the issue was that many good countries were cropped in the hard-coded approach. all countries will work now, but some bad countries will raise exceptions because some edge cases break the entire response. ",there are prior version deprecations that are taking effect as of 0.14.0.,fixed regression in rolling.corr when using a time offset ,remove deprecated read_clipboard/to_clipboard/excelfile/excelwriter from pandas.io.parsers these are available as functions in the main pandas namespace ,improved performance of sparse arithmetic with intindex ,improved error message for invalid construction of list when creating a new index ,"remove table keyword in hdfstore.put/append, in favor of using format= ","all offset operations now return timestamp types , business/week frequencies were incorrect ",better support for compressed urls in read_csv,better support for compressed urls in read_csv,"bug in index where calling np.array on a timezone-naive datetimeindex would return an array of datetime objects instead of timestamp objects, potentially losing nanosecond portions of the timestamps ",by default the ewm* functions weights calculation in the presence of missing values is different than in pre-0.15.0 versions. to reproduce the pre-0.15.0 calculation of weights in the presence of missing values one must specify explicitly ignore_na=true.,>>> x / y # this raises because it doesn't make sense,bug with series indexing not raising an error when the right-hand-side has an incorrect length ,dependencies have increased minimum versions,dependencies have increased minimum versions,dependencies have increased minimum versions,dependencies have increased minimum versions,"avoid index dict creation in some cases , regression from prior versions",bug in convert_objects where copy keyword was not respected ,bug in series.isin with a list of tuples ,then this is ok:,"bug in dataframe.count that raised an valueerror, if dataframe.dropna was called for a single column with timezone-aware values. ",bug in timestamp.ceil and timestamp.floor when timestamp is a multiple of the rounding frequency ,"dataframe currently supports slicing via a boolean vector the same length as the dataframe . the returned dataframe has the same number of columns as the original, but is sliced on its index.",adding a period object to a datetime or timestamp object will now correctly raise a typeerror ,.names attribute of multiindexes passed to set_index are now preserved .,"the default for .query/.eval is now engine=none, which will use numexpr if it s installed; otherwise it will fallback to the python engine. this mimics the pre-0.18.1 behavior if numexpr is installed /.eval would raise). ","improved performance of isnull and notnull, a regression from v0.3.0 ",drew fustin +,bug in .pivot_table when margins=true and dropna=true where nulls still contributed to margin count ,moved panel.shift to ndframe.slice_shift and fixed to respect multiple dtypes. ,bug in read_csv in which multiindex index names were being improperly handled in the cases when they were not provided ,bug in read_csv in which encoding handling was limited to just the string utf-16 for the c engine ,performance and memory usage improvements in merge when key space exceeds int64 bounds ,series.hist will now take the figure from the current environment if one is not passed,bug in pd.read_csv in which the dialect parameter was not being verified before processing ,the sparselist class has been removed ,to_datetime gains an exact keyword to allow for a format to not require an exact match for a provided format string . exact defaults to true ,bug in dataframe.to_sql where an attributeerror was raised when saving an out of bounds date ,"segfault in to_json when attempting to serialise a dataframe or series with non-ndarray values; now supports serialization of category, sparse, and datetime64 dtypes .","on windows, the value of os.linesep is '\r\n', so if line_terminator is not set, '\r\n' is used for line terminator.",bug in dataframe.loc with indexing a multiindex with a series indexer ,bug in series comparison against datetime-like scalars and arrays ,groupby will now accept a scalar and a single-element list for specifying level on a non-multiindex grouper. ,"added layout keyword to dataframe.plot. you can pass a tuple of , one of which can be -1 to automatically infer .",fixed regression where user-provided file handles were closed in read_csv .,"source installs from pypi will now again work without cython installed, as in previous versions ","experimental support for exporting styled dataframes to excel, see here",multiindex constructor with a single level,multiindex constructor with a single level,resolved inconsistencies in specifying custom na values in text parser. na_values of type dict no longer override default nas unless keep_default_na is set to false explicitly ,bug in the google bigquery reader where the jobcomplete key may be present but false in the query results ,bug in .at that would accept integer indexers on a non-integer index and do fallback ,bug in timedelta construction and arithmetic that would not propagate the overflow exception ,bug in read_excel in which column names were not being properly converted to string sometimes in python 2.x ,the tquery and uquery functions in the pandas.io.sql module are removed .,bug in rolling.var where calculation is inaccurate with a zero-valued array ,remove name keyword from get_data_yahoo and get_data_google ,"bug in pandas.core.groupby.seriesgroupby.mean when values were integral but could not fit inside of int64, overflowing instead. ",specifying an apply that operates on a series ,a list or array of integers ,read_sas will correctly parse sas7bdat files with data page types having also bit 7 set ,bug in datetimeindex.to_period not inferring the frequency when called with no arguments ,"usage of the keyword caption has been extended. besides taking a single string as an argument, one can optionally provide a tuple to add a short caption macro.",fixed bug in initializing datetimeindex with an array of strings in a certain time zone ,"this has the advantage that specific index methods are still available on the result. on the other hand, this might have backward incompatibilities: e.g. compared to numpy arrays, index objects are not mutable. to get the original ndarray, you can always convert explicitly using np.asarray.","one special case for the .str accessor on index is that if a string method returns bool, the .str accessor will return a np.array instead of a boolean index . this enables the following expression to work naturally:",merging will now preserve the dtype of the join keys ,"starting with python 3.7 the key-order of dict is guaranteed. in practice, this has been true since python 3.6. the dataframe constructor now treats a list of dicts in the same way as it does a list of ordereddict, i.e. preserving the order of the dicts. this change applies only when pandas is running on python>=3.6 .",bug in pandas.to_datetime when called with series storing integerarray raising typeerror instead of returning series ,fix to ensure all int dtypes can be used in merge_asof when using a tolerance value. previously every non-int64 type would raise an erroneous mergeerror .,fixed an inconsistency in periodarray s __init__ signature to those of datetimearray and timedeltaarray ,bug in rolling.__iter__ where a valueerror was not raised when min_periods was larger than window ,define and document the order of column vs index names in query/eval ,fixed incorrect error message in dataframe.pivot when columns is set to none. ,improved performance of intervalindex.is_unique by removing conversion to multiindex ,bug in pd.read_csv in which unsigned 64-bit integer elements were being improperly converted to the wrong data types ,fixed integerarray returning inf rather than nan for operations dividing by 0 ,add copy=true argument to pd.concat to enable pass through of complete blocks ,bug in pd.read_csv in which aliasing was being done for na_values when passed in as a dictionary ,the functionality of providing dbapi connection objects will only be supported for sqlite3 in the future. the 'mysql' flavor is deprecated.,"when passing multiple levels to stack, it will now raise a valueerror when the levels aren t all level names or all level numbers . see reshaping by stacking and unstacking.",added back pandas.core.common.array_equivalent with a deprecation warning .,"for more on working with fold, see fold subsection in the user guide.",fixed regression in timedeltaindex where np.sum incorrectly returned a zero-dimensional object instead of a scalar ,bug where dataframe.boxplot would not accept a color parameter like dataframe.plot.box ,bug periodindex string slicing with out of bounds values ,"dataframe now uses the fields of a namedtuple as columns, if columns are not supplied ",here is a sample,series.str.cat will now raise if others is a set ,"the 'python' engine for read_csv, as well as the read_fwf function for parsing fixed-width text files and read_excel for parsing excel files, now accept the dtype keyword argument for specifying the types of specific columns . see the io docs for more information.",api changes related to the introduction of the timedelta scalar :,fixed regression in to_timedelta with box=false incorrectly returning a datetime64 object instead of a timedelta64 object ,bugs in to_excel with duplicate columns ,bug in subplot with layout kw may show unnecessary warning ,"dataframe.to_json, dataframe.to_csv, dataframe.to_pickle, and other export methods now support tilde in path argument. ",fixed bug with reading csv files from amazon s3 on python 3 raising a typeerror ,"added methods integerarray.prod, integerarray.min, and integerarray.max ",bug in series.get for series using extensionarray and integer index ,bug in dataframe.replace with a datetime64 and a non-compat to_replace ,bug in dataframe.groupby.describe when grouping on index containing tuples ,fix regression in assigning values to a single column of a dataframe with a multiindex columns .,bug in merge_asof when specifying multiple by columns where one is datetime64 dtype ,bug causing elements with a null group to spill into the final group when grouping by a categorical ,the pd.options.display.line_width configuration has been dropped ,bug when initializing categorical series with a scalar value. ,"new dataframe default display for df.info to include memory usage, see memory usage","removed the hard-coded size limits on the dataframe html representation in the ipython notebook, and leave this to ipython itself . this eliminates the duplicate scroll bars that appeared in the notebook with large frames .",fixed an issue where duplicate indexes were raising when plotting ,break reference cycle involving index and other index classes to allow garbage collection of index objects without running the gc. ,"the in operator now only returns true for exact matches to intervals in the intervalindex, whereas this would previously return true for any interval overlapping an interval in the intervalindex.","converting a series of timedelta objects to days, seconds, etc sped up through vectorization of underlying methods ","bug in series.isin and dataframe.isin when using nan and a row length above 1,000,000 ","read_hdf now raises ioerror when a file that doesn t exist is passed in. previously, a new, empty file was created, and a keyerror raised .",pandas.core.groupby.rollinggroupby.agg and pandas.core.groupby.expandinggroupby.agg now support multiple aggregation functions as parameters ,bug in dataframe.unstack where a valueerror was raised when unstacking timezone aware values ,applying a binary ufunc like numpy.power now aligns the inputs when both are series .,we recommend explicitly using the string data type when working with strings. see text data types for more.,"bug in dataframe.groupby where any, all, nunique and transform functions would incorrectly handle duplicate column labels ","expand=false: it returns a series, index, or dataframe, depending on the subject and regular expression pattern .",bug in merge_ordered didn t raise when elements in left_by or right_by not exist in left columns or right columns ,dataframe.to_html and dataframe.to_latex now accept a path for their first argument ,bug in .read_csv where strings like '2e' are treated as valid floats ,index.contains is deprecated. use key in index instead .,bug in series.replace and dataframe.replace when replacing timezone-aware timestamps using a dict-like replacer ,fixed regression in series.fillna that raised recursionerror with datetime64 dtype ,bug in arrays.sparsearray was returning the incorrect type when indexing a sparse dataframe with an iterable ,fixed issue with sorting a duplicate multiindex that has multiple dtypes ,replacement,replacement,replacement,replacement,replacement,"in summary, extract always returns a dataframe with a row for every subject string, and a column for every capture group.",bug in timegrouper/resample when presented with a non-monotonic datetimeindex that would return invalid results. ,accessing the values in a series or index,fixed bug in the parsing of microseconds when using the format argument in to_datetime ,"bug in series.str.get with a dictionary in the values and the index not in the keys, raising keyerror ",fix regression in groupby.rolling.apply ignores args and kwargs parameters ,dataframe.quantile and series.quantile now accept interpolation keyword .,"in addition, .round, .floor and .ceil will be available through the .dt accessor of series.","bug in partial string indexing with a monotonic, but not strictly-monotonic, index incorrectly reversing the slice bounds ",true: draw a table using the dataframe or series called plot method. data will be transposed to meet matplotlib s default layout.,series.fillna now accepts a series or a dict as a value for a categorical dtype ,# set to not display the null counts,bug in pd.read_msgpack which did not allow loading of a dataframe with an index of type categoricalindex ,sql code now safely escapes table and column names ,the sparsepanel class has been removed ,added justify argument to dataframe.to_string to allow different alignment of column headers,bug in series.__setitem__ incorrectly casting np.timedelta64 to np.datetime64 when inserting into a series with datetime64 dtype ,passing a string alias like 'datetime64' as the unit parameter to datetimetzdtype is deprecated. use datetimetzdtype.construct_from_string instead .,bug in dataframe.plot with a single column and a list-like color ,"bug in series.astype, index.astype, and dataframe.astype failing to handle nat when casting to an integer dtype ",specify the column label to use when writing the index with index_label.,improved performance of groupby.groups ,vbench vastly improved performance of groupby on axes with a multiindex ,"bug in .rolling that allowed a negative integer window in construction of the rolling object, but would later fail on aggregation ",# selecting via a query,"here s an example of the first deprecation, passing a dict to a grouped series. this is a combination aggregation & renaming:",fixed regression where pandas.testing.assert_series_equal would raise an error when non-numeric dtypes were passed with check_exact=true ,"previous versions of pandas would permanently silence numpy s ufunc error handling when pandas was imported. pandas did this in order to silence the warnings that would arise from using numpy ufuncs on missing data, which are usually represented as nan s. unfortunately, this silenced legitimate warnings arising in non-pandas code in the application. starting with 0.19.0, pandas will use the numpy.errstate context manager to silence these warnings in a more fine-grained manner, only around where these operations are actually used in the pandas code base. ",tests for basic reading of public s3 buckets now exist .,the keyword position has been added to set the position.,changes to the .loc slicing api to conform with the behavior of .ix see here
fire Â· PyPI,"developed and maintained by the python community, for the python community.",python fire is a library for automatically generating command line interfaces with a single line of code.,terms of use,"view statistics for this project via libraries.io, or by using our public dataset on google bigquery",bugs and feedback,object storage and download analytics,osi approved :: apache software license,contribute on github,posix,installing packages,pip install fire==0.4.0,unix,facebook / instagram is a sustainability sponsor of the python software foundation.,a library for automatically generating command line interfaces.,using pypi,software development :: libraries :: python modules,latest version,meta,os independent,about pypi,microsoft,translate pypi
ccxt Â· PyPI,"developed and maintained by the python community, for the python community.",terms of use,"view statistics for this project via libraries.io, or by using our public dataset on google bigquery",a javascript / python / php cryptocurrency trading library with support for 130+ exchanges,bugs and feedback,osi approved :: mit license,object storage and download analytics,contribute on github,pip install ccxt==1.42.61,newer version available ,installing packages,1.34.81,1.32.29,1.31.56,facebook / instagram is a sustainability sponsor of the python software foundation.,using pypi,software development :: build tools,1.29.3,php,release notifications | rss feed,meta,1.47.68,1.41.36,1.33.25,1.11.53,os independent,about pypi,microsoft,1.38.31,1.28.26,translate pypi,1.32.61,1.32.47,1.19.23,1.18.45,1.7.29,1.36.55,1.7.61,financial and insurance industry,1.32.75,1.18.65,1.46.65,1.44.22,1.30.50,1.30.1,1.29.29,1.21.43,1.18.846,1.8.4,contributing to pypi,1.0.30,1.0.11,copy pip instructions,tags,1.48.13,google,1.46.2,1.31.47,1.47.4,1.40.36,1.23.41,1.20.47,1.9.59,developers,this version,intended audience,1.14.85,1.15.35,1.41.4,1.33.78,1.30.8,1.28.32,1.40.1,1.18.25,about 10 hours ago,1.28.12,1.27.88,1.18.896,1.15.25,1.14.82,1.6.11,office/business :: financial :: investment,1.13.47,1.35.19,1.12.18,user guide,aws,1.50.4,1.43.18,1.42.78,1.32.63,project links,1.31.38,1.18.16,"apr 29, 2021","apr 29, 2021","apr 29, 2021","apr 29, 2021","apr 29, 2021","apr 29, 2021","apr 29, 2021","apr 29, 2021","mar 29, 2021","mar 29, 2021","mar 29, 2021","mar 29, 2021","mar 29, 2021","mar 29, 2021","mar 29, 2021","mar 29, 2021","mar 29, 2021","mar 29, 2021","mar 29, 2021","mar 29, 2021","mar 29, 2021","mar 29, 2021","mar 29, 2021","mar 29, 2021","mar 29, 2021","mar 29, 2021","mar 29, 2021","mar 29, 2021","mar 29, 2021","mar 29, 2021","mar 29, 2021","mar 29, 2021","mar 29, 2021","mar 29, 2021","mar 29, 2021","mar 29, 2021","mar 29, 2021","mar 29, 2021","mar 29, 2021","mar 29, 2021","mar 29, 2021","mar 29, 2021","mar 29, 2021","mar 29, 2021",faqs,1.25.57,1.25.47,1.12.12,1.9.40,1.0.75,1.8.2,1.44.88,1.40.68,1.22.31,1.9.61,development credits,1.23.24,1.47.33,1.20.100,1.12.28
Changelog â€” beets 1.4.9 documentation,mpd protocol commands consume and single are now supported along with updated semantics for repeat and previous and new fields for status. the bpd server now understands and ignores some additional commands. #3200 #800,"fuzzy search plugin: the fuzzy command was removed and replaced with a new query type. to perform fuzzy searches, use the ~ prefix with list or other commands. thanks to philippe mongeau.","when autotagging, and is considered equal to & .","the lyrics plugin, originally by peter brunner, is revamped and included with beets, making it easy to fetch song lyrics.","fixed some bugs with encoding paths on windows. also, : is now replaced with - in path names for readability.","the import logger has been improved for always-on use. first, it is now possible to specify a log file in .beetsconfig. also, logs are now appended rather than overwritten and contain timestamps.","the release label for albums and tracks is now fetched from !musicbrainz, written to files, and stored in the database.","the modify command is now better at parsing and formatting fields. you can assign to boolean fields like comp, for example, using either the words true or false or the numerals 1 and 0. any boolean-esque value is normalized to a real boolean. the update and write commands also got smarter at formatting and colorizing changes.",prefer releases that are closest to the tagged year. tolerate files tagged with release or original year.,album art in files with vorbis comments is now marked with the front cover type. thanks to jason lefley.,and there are smaller new features too:,fix a crash when an autotagging with an artist or album containing and or or .,you can now customize the character substituted for path separators in filenames via path_sep_replace. the default is an underscore. use this setting with caution.,alac files are now marked as alac instead of being conflated with aac audio. thanks to simon luijk.,"on python 3, the terminal_encoding setting is respected again for output and printing will no longer crash on systems configured with a limited encoding.","beets now communicates with musicbrainz via the new next generation schema service via python-musicbrainzngs. the bindings are included with this version of beets, but a future version will make them an external dependency.",bpd plugin: random and repeat modes are now supported .,"plugin architecture. add-on modules can now add new commands to the beets command-line interface. the bpd and dadd commands were removed from the beets core and turned into plugins; bpd is loaded by default. to load the non-default plugins, use the config options plugins and pluginpath . plugins are just python modules under the beetsplug namespace package containing subclasses of beets.plugins.beetsplugin. see the beetsplug directory for examples or plugins for instructions.","this version adds a healthy helping of new features and fixes a critical mpeg-4 related bug. there are more lyrics sources, there new plugins for managing permissions and integrating with plex, and the importer has a new --pretend flag that shows which music would be imported.",your library now keeps track of when music was added to it. the new added field is a timestamp reflecting when each item and album was imported and the new %time{} template function lets you format this timestamp for humans. thanks to lucas duailibe.,duplicates plugin: spurious reports are now avoided for tracks with missing values . thanks to pedro silva.,resizing image files with imagemagick now avoids problems on systems where there is a convert command that is not imagemagick s by using the magick executable when it is available. thanks to ababyduck. #2093 #3236,the default replace sanitation options now remove leading whitespace by default. thanks to brilnius.,also fix using id3v23 in conjunction with the scrub and embedart plugins. thanks to chris cogburn.,this release features two major additions to the autotagger s functionality: album art fetching and musicbrainz id tags. it also contains some important under-the-hood improvements: a new plugin architecture is introduced and the database schema is extended with explicit support for albums.,"while this feature is nifty when used directly with the usual command-line suspects, it s especially useful for plugin authors and for future beets features. stay tuned for great things built on this flexible attribute infrastructure.",bucket plugin: you can now customize the definition of alphanumeric ranges using regular expressions. and the heuristic for detecting years has been improved. thanks to sotho.,interactive prompts are sent to stdout instead of stderr.,"beets 1.0b13 consists of a plethora of small but important fixes and refinements. a lyrics plugin is now included with beets; new audio properties are catalogged; the list command has been made more powerful; the autotagger is more tolerant of different tagging styles; and importing with original file deletion now cleans up after itself more thoroughly. many, many bugs including several crashers were fixed. this release lays the foundation for more features to come in the next couple of releases.","the id3 apic tag now uses the latin-1 encoding when possible instead of a unicode encoding. this should increase compatibility with other software, especially with itunes and when using id3v2.3. thanks to lazka. #899 #2264 #2270","the directory hierarchy can now be customized based on release type. in particular, the path_format setting in .beetsconfig has been replaced with a new section, which allows you to specify different path formats for normal and compilation releases as well as for each album type . the default path formats have been changed to use $albumartist instead of $artist.","the importer now detects multi-disc albums and tags them together. using a heuristic based on the names of directories, certain structures are classified as multi-disc albums: for example, if a directory contains subdirectories labeled disc 1 and disc 2 , these subdirectories will be coalesced into a single album for tagging.","the importer can now move files. previously, beets could only copy files and delete the originals, which is inefficient if the source and destination are on the same filesystem. use the import_move configuration option and see configuration for more details. thanks to domen ko ar.",renamed plugins: the rdm plugin has been renamed to random and fuzzy_search has been renamed to fuzzy.,local album art is now automatically discovered and copied from the imported directories when available.,"the new chromaprint/acoustid plugin uses the acoustid open-source acoustic fingerprinting service. this replaces the old lastid plugin, which used last.fm fingerprinting and is now deprecated. fingerprinting with this library should be faster and more reliable.",web plugin: item and album counts are now exposed through the api for use with the tomahawk resolver. thanks to uwe l. korn.,fix a crash when numeric metadata fields contain just a minus or plus sign with no following numbers. thanks to eigengrau. #2741,bad files plugin: added a --verbose or -v option. results are now displayed only for corrupted files by default and for all the files when the verbose option is set. #1654 #2434,reorganized import config options: the various import_* options are now organized under an import: heading and their prefixes have been removed.,filenames are normalized with unicode normal form d on mac os x and nfc on all other platforms.,"this release adds two new standard plugins to beets: one for synchronizing last.fm listening data and one for integrating with linux desktops. and at long last, imports can now create symbolic links to music files instead of copying or moving them. we also gained the ability to search for album art on the itunes store and a new way to compute replaygain levels.","this is a short-term release that adds some great new stuff to beets. there s support for tracking and calculating musical keys, the replaygain plugin was expanded to work with more music formats via gstreamer, we can now import directly from compressed archives, and the lyrics plugin is more robust.","as part of the above, plugins can now extend the query syntax and new kinds of matching capabilities to beets. see extend the query syntax. thanks again to philippe mongeau.",the deprecated list_format_album and list_format_item configuration options have been removed .,sort missing and unmatched tracks by index and title and group them together for better readability.,the modify command can now accept query arguments that contain = signs. an argument is considered a query part when a : appears before any =s. thanks to mook.,"echonest_tempo: if the echo nest api limit is exceeded or a communication error occurs, the plugin now waits and tries again instead of crashing. thanks to zach denton.","pathlib is now an optional test dependency on python 3.4+, removing the need for a debian patch. #3275",beets should now be better at guessing the appropriate output encoding on windows. a bug was also fixed where beets would ignore the locale settings and use utf-8 by default. #1419,"with this release candidate, beets 1.0 is feature-complete. we ll be fixing bugs on the road to 1.0 but no new features will be added. concurrently, work begins today on features for version 1.1.","when importing with the delete option and importing files that are already at their destination, files could be deleted . this is fixed.",a new from_scratch configuration option makes the importer remove old metadata before applying new metadata. this new feature complements the zero and scrub plugins but is slightly different: beets clears out all the old tags it knows about and only keeps the new data it gets from the remote metadata source. thanks to tummychow. #934 #2755,fix a crash when importing with both of the group_albums and incremental options enabled. thanks to geigerzaehler.,"resuming is automatically disabled when the importer is in quiet mode. progress is still saved, however, and the -p flag can be used to force resuming.","the replaygain plugin, written by peter brunner, has been merged into the core beets distribution. use it to analyze audio and adjust playback levels in replaygain-aware music players.",languages controls the preferred languages when selecting an alias from musicbrainz. this feature requires python-musicbrainzngs 0.3 or later. thanks to sam doshi.,avoid some error cases in the update command and the embedart and mbsync plugins. invalid or missing files now cause error logs instead of crashing beets. thanks to lucas duailibe.,"artist sort names are now fetched from musicbrainz. there are two new data fields, artist_sort and albumartist_sort, that contain sortable artist names like beatles, the . these fields are also used to sort albums and items when using the list command. thanks to paul provost.","a new import_resume configuration option can be used to disable the importer s resuming feature or force it to resume without asking. this option may be either yes, no, or ask, with the obvious meanings. the -p and -p command-line flags override this setting and correspond to the yes and no settings.",possibly allow flexible attributes to be used with the %aunique template function. #1775,fix several uses of deprecated standard-library features on python 3.7. thanks to arcresu. #3197,"lyrics plugin: the genius backend is now more robust to communication errors. the backend has also been disabled by default, since the api it depends on is currently down. #1770","the default filename character substitutions were changed to be more conservative. the windows reserved characters are substituted by default even on unix platforms . to customize your character substitutions, see the replace config option.","when previewing changes during import, differences in track duration are now shown as 2:50 vs. 3:10 rather than separated with -> like track numbers. this should clarify that beets isn t doing anything to modify lengths.",the modify command now skips confirmation and prints a message if no changes are necessary. thanks to brilnius.,duplicates plugin: the move and copy destination arguments are now treated as directories. thanks to pedro silva.,"the top 3 distance penalties are now displayed on the release listing, and all album and track penalties are now displayed on the track changes list. this should make it clear exactly which metadata is contributing to a low similarity score.","play plugin: when relative_to is set, the plugin correctly emits relative paths even when querying for albums rather than tracks. thanks to j000. #2702","the centerpiece of this beets release is the graceful handling of similarly-named albums. it s now possible to import two albums with the same artist and title and to keep them from conflicting in the filesystem. many other awesome new features were contributed by the beets community, including regular expression queries, artist sort names, moving files on import. there are three new plugins: random song/album selection; musicbrainz collection integration; and a plugin for interoperability with other music library systems.","fix errors on windows for certain unicode characters that can t be represented in the mbcs encoding. this required a change to the way that paths are represented in the database on windows; if you find that beets paths are out of sync with your filesystem with this release, delete and recreate your database with beet import -awc /path/to/music.",the importer now ignores certain clutter files like .appledouble directories and ._* files. the list of ignored patterns is configurable via the ignore setting; see configuration.,new plugin: convert plugin transcodes music and embeds album art while copying to a separate directory. thanks to jakob schnitzer and andrew g. dunn.,"when a match isn t great but is either better than all the others or the only match, it is given a low recommendation.","accents and other unicode decorators on characters are now treated more fairly by the autotagger. for example, if you re missing the acute accent on the e in caf , that change won t be penalized. this introduces a new dependency on the unidecode python module.",fix a crash when unicode queries were used with import -l re-imports.,"this is mainly a bugfix release, but we also have a nifty new plugin for ipfs and a bunch of new configuration options.",there is no prompt default when matches are bad: low or none recommendations or when choosing a candidate other than the first.,use a nicer error message when input is requested but stdin is closed.,this version of beets focuses on increasing the accuracy of the autotagger. the main addition is an included plugin that uses acoustic fingerprinting to match based on the audio content . additional heuristics were also added to the metadata-based tagger as well that should make it more reliable. this release also greatly expands the capabilities of beets plugin api. a host of other little features and fixes are also rolled into this release.,"this release boasts a host of new little features, many of them contributed by beets amazing and prolific community. it adds support for opus files, transcoding to any format, and two new plugins: one that guesses metadata for blank files based on their filenames and one that moves featured artists into the title field.","a new field, composer_sort, is now supported and fetched from musicbrainz. thanks to dosoe. #2519 #2529","the new echonest plugin plugin can fetch a wide range of acoustic attributes from the echo nest, including the speechiness and liveness of each track. the new plugin supersedes an older version that only fetched the bpm field. thanks to pedro silva and peter schnebel.",the default output format for the beet list command is now configurable via the format_item and format_album config options. thanks to fabrice laporte.,"albums are now tagged with their original release date rather than the date of any reissue, remaster, special edition , or the like.","as a consequence of adding album art, the database was significantly refactored to keep track of some information at an album granularity. databases created with earlier versions of beets should work fine, but they won t have any albums in them they ll just be a bag of items. this means that commands like beet ls -a and beet rm -a won t match anything. to upgrade your database, you can use the included albumify plugin. running beets albumify with the plugin activated will group all your items into albums, making beets behave more or less as it did before.",filename substitutions are now configurable via the replace config value. you can choose which characters you think should be allowed in your directory and music file names. see configuration.,smart playlist plugin: playlists can now be generated from multiple queries . album-level queries are also now possible and automatic playlist regeneration can now be disabled. thanks to brilnius.,"the output of the update, remove, and modify commands now respects the format_album and format_item config options. thanks to mike kazantsev.",the new lastgenre plugin automatically assigns genres to imported albums and items based on last.fm tags and an internal whitelist. ,"in the replace configuration option, we now replace a leading hyphen with an underscore. #549 #2509","the preferred collection of settings specifies a sorted list of preferred countries and media types, or prioritizes releases closest to the original year for an album.","there are now multiple levels of output verbosity. on the command line, you can make beets somewhat verbose with -v or very verbose with -vv. for the importer especially, this makes the first verbose mode much more manageable, while still preserving an option for overwhelmingly verbose debug output. #1244","discogs plugin: subtracks are now detected and combined into a single track, two-sided mediums are treated as single discs, and tracks have media, medium_total and medium set correctly. #2222 #2228.","embedart plugin: in auto mode , the plugin now respects the write config option under import. if this is disabled, album art is no longer embedded on import in order to leave files untouched in effect, auto is implicitly disabled. #1427",importing without autotagging is now faster and doesn t print out a bunch of whitespace. it also lets you specify single files on the command line .,"after fifteen betas and two release candidates, beets has finally hit one-point-oh. congratulations to everybody involved. this version of beets will remain stable and receive only bug fixes from here on out. new development is ongoing in the betas of version 1.1.",date tags that use slashes instead of dashes as separators are now interpreted correctly. and wma files now map the comments field to the description tag . thanks to matthias kiefer. #1043,"when there s a parse error in a query , beets now stops with an error instead of silently ignoring the query component.","when an exception is raised while reading a file, the path of the file in question is now logged .","this release has one major backwards-incompatibility. because of the new way beets handles albums in the library, databases created with an old version of beets might have trouble with operations that deal with albums . to upgrade an old database, you can use the included albumify plugin .","smart playlist plugin: queries are now split using shell-like syntax instead of just whitespace, so you can now construct terms that contain spaces.",values for the replace option can now be empty .,album-level flexible attributes and plugin-provided attributes can now be used in path formats .,track titles in the importer ui s difference display are now either aligned vertically or broken across two lines for readability. thanks to tai lee.,"the modify command now allows removing flexible attributes. for example, beet modify artist:beatles oldies! deletes the oldies attribute from matching items. thanks to brilnius.","queries can now use or logic: if you use a comma to separate parts of a query, items and albums will match either side of the comma. for example, beet ls foo , bar will get all the items matching foo or matching bar. see combining keywords. #1423","detail enables a mode where all tracks are listed in the importer ui, as opposed to only changed tracks.","in addition to prefix-based field queries, plugins can now define named queries that are not associated with any specific field. for example, the new playlist plugin supports queries like playlist:name although there is no field named playlist. see extend the query syntax for details.",this release focuses on high-priority fixes and conspicuously missing features. highlights include support for two new audio formats and an option to log untaggable albums during import.,"this thrilling new release of beets focuses on making the tagger more usable in a variety of ways. first and foremost, it should now be much faster: the tagger now uses a multithreaded algorithm by default . second, the tagger output now uses a little bit of ansi terminal coloring to make changes stand out. this way, it should be faster to decide what to do with a proposed match: the more red you see, the worse the match is. finally, the tagger can be safely interrupted and restarted later at the same point. just enter b for abort at any prompt to stop the tagging process and save its progress. ","the config file and library databases are now given better names and locations on windows. namely, both files now reside in %appdata%; the config file is named beetsconfig.ini and the database is called beetslibrary.blb . for backwards compatibility, beets will check the old locations first.","when the importer finds duplicate albums, you can now merge all the tracks old and new together and try importing them as a single, combined album. thanks to udiboy1209. #112 #2725","lyrics plugin: lyrics should now be found for more songs. searching is now sensitive to featured artists and parenthesized title suffixes. when a song has multiple titles, lyrics from all the named songs are now concatenated. thanks to fabrice laporte and paul phillips.","fixed a crash when imported album art was also marked as clutter where the art would be deleted before it could be moved into place. this led to a image.jpg not found during copy error. now clutter is removed much later in the process, after the import_task_files hook.","this release is far too long in coming, but it s a good one. there is the usual torrent of new features and a ridiculously long line of fixes, but there are also some crucial maintenance changes. we officially support python 3.7 and 3.8, and some performance optimizations can make listing your library more than three times faster than in the previous version.","this release entirely revamps beets configuration system. the configuration file is now a yaml document and is located, along with other support files, in a common directory .","fetchart plugin: when loading art from the filesystem, we now prioritize covers with more keywords in them. this means that cover-front.jpg will now be taken before cover-back.jpg because it contains two keywords rather than one. thanks to fabrice laporte.","restore itunes store album art source, and remove the dependency on python-itunes, which had gone unmaintained and was not python-3-compatible. thanks to ocelma for creating python-itunes in the first place. thanks to nathdwek. #2371 #2551 #2718","this third beta of beets 1.1 brings a hodgepodge of little new features . there are new options for getting metadata in a particular language and seeing more detail during the import process. there s also a new plugin for synchronizing your metadata with musicbrainz. under the hood, plugins can now extend the query syntax.",added a --move or -m option to the importer so that the files can be moved to the library instead of being copied or added in place. #2252 #2429,"this release of beets fixes all the bugs, and you can be confident that you will never again find any bugs in beets, ever. it also adds support for plain old aiff files and adds three more plugins, including a nifty one that lets you measure a song s tempo by tapping out the beat on your keyboard. the importer deals more elegantly with duplicates and you can broaden your cover art search to the entire web with google image search.","the %asciify{} path formatting function and the asciify_paths setting properly substitute path separators generated by converting some unicode characters, such as and , into ascii.",and then query your music based on that field:,"the distance number, which quantifies how different an album s current and proposed metadata are, is now displayed as similarity instead. this should be less noisy and confusing; you ll now see 99.5% instead of 0.00489323.","a new plugin event, item_moved, is sent when files are moved on disk. thanks to dsedivec.",list_format_album and list_format_album have respectively been renamed format_album and format_item. the old names still work but each triggers a warning message. #1271,play plugin: fix $args getting passed verbatim to the play command if it was set in the configuration but -a or --args was omitted.,"fix a race in the importer that could cause files to be deleted before they were imported. this happened when importing one album, importing a duplicate album, and then asking for the first album to be replaced with the second. the situation could only arise when importing music from the library directory and when the two albums are imported close in time.","beta 7 s focus is on better support for various artists releases. these albums can be treated differently via the new config section and the autotagger is better at handling them. it also includes a number of oft-requested improvements to the beet command-line tool, including several new configuration options and the ability to clean up empty directory subtrees.",the importer can also now tag incomplete albums when you re missing a few tracks from a given release. two other new plugins are also included with this release: one for assigning genres and another for replaygain analysis.,fix an assertion failure while importing with moving enabled when the file was already at its destination.,"version 1.4 has alpha-level python 3 support. thanks to the heroic efforts of jrobeson, beets should run both under python 2.7, as before, and now under python 3.4 and above. the support is still new: it undoubtedly contains bugs, so it may replace all your music with limp bizkit but if you re brave and you have backups, please try installing on python 3. let us know how it goes.", fixed fields in album and item objects are now more strict about translating missing values into type-specific null-like values. this should help in cases where a string field is unexpectedly none sometimes instead of just showing up as an empty string. #2605,"parallel tagger. the autotagger has been reimplemented to use multiple threads. this means that it can concurrently read files from disk, talk to the user, communicate with musicbrainz, and write data back to disk. not only does this make the tagger much faster because independent work may be performed in parallel, but it makes the tagging process much more pleasant for large imports. the user can let albums queue up in the background while making a decision rather than waiting for beets between each question it asks. the parallel tagger is on by default but a sequential version is still available by setting the threaded config value to no .","importfeeds plugin: an option was added to use absolute, rather than relative, paths. thanks to lucas duailibe.",the importer now supports matching of pregap or htoa tracks when they are listed in musicbrainz. thanks to ruippeixotog. #1104 #1493,prompts in the importer interface are now colorized for easy reading. the default option is always highlighted.,fetchart plugin: complain when the enforce_ratio or min_width options are enabled but no local imaging backend is available to carry them out. #1460,filename extensions are now always lower-cased when copying and moving files.,"null values in the database can now be matched with the empty-string regular expression, ^$.","when writing id3 tags for replaygain normalization, tags are written with both upper-case and lower-case txxx frame descriptions. previous versions of beets used only the upper-case style, which seems to be more standard, but some players seem to only use lower-case names.","support for musicbrainz id tags. the autotagger now keeps track of the musicbrainz track, album, and artist ids it matched for each file. it also looks for album ids in new files it s importing and uses those to look up data in musicbrainz. furthermore, track ids are used as a component of the tagger s distance metric now. tangentially, this change required the database code to support a lightweight form of migrations so that new columns could be added to old databases this is a delicate feature, so it would be very wise to make a backup of your database before upgrading to this version.",a new import_task_created event lets you manipulate import tasks immediately after they are initialized. it s also possible to replace the originally created tasks by returning new ones using this event.,"replaygain tags on mpeg-4/aac files are now supported. and, even more astonishingly, replaygain values in mp3 and aac files are now compatible with itunes sound check. thanks to dave hayes.",album art fetching and plugin events are each now run in separate pipeline stages during imports. this should bring additional performance when using album art plugins like embedart or beets-lyrics.,"when choosing the as-is import album , every album either has an album artist set or is marked as a compilation . the choice is made based on the homogeneity of the tracks artists. this prevents compilations that are imported as-is from being scattered across many directories after they are imported.",importing with import_delete enabled now cleans up empty directories that contained deleting imported music files.,track changes are highlighted in yellow when they indicate a change in format to or from the style of per_disc_numbering. ,"duplicates plugin: duplicate resolution now uses an ordering to prioritize duplicates. by default, it prefers music with more complete metadata, but you can configure it to use any list of attributes.",resuming imports and beginning incremental imports should now be much faster when there is a lot of previously-imported music to skip.,"this release of beets brings two significant new features. first, beets now has first-class support for singleton tracks. previously, it was only really meant to manage whole albums, but many of us have lots of non-album tracks to keep track of alongside our collections of albums. so now beets makes it easy to tag, catalog, and manipulate your individual tracks. second, beets can now embed album art directly into file metadata rather than only storing it in a file on the side. check out the embedart plugin for that functionality.","missing plugin: missing is now treated as an integer, allowing the use of ranges in queries.","this update brings new plugins for fetching acoustic metrics and listening statistics, many more options for the duplicate detection plugin, and flexible options for fetching multiple genres.",the new bucket plugin provides a %bucket{} function for path formatting to generate folder names representing ranges of years or initial letter. thanks to fabrice laporte.,the default ignore settings now ignore all files beginning with a dot.,"this version of beets focuses on making it easier to manage your metadata after you ve imported it. a bumper crop of new commands has been added: a manual tag editor , a tool to pick up out-of-band deletions and modifications , and functionality for moving and copying files around . furthermore, the concept of re-importing is new: you can choose to re-run beets advanced autotagger on any files you already have in your library if you change your mind after you finish the initial import.","the importer has a new interactive option , command-line flag , and config option that lets you split apart albums that are mixed together in a single directory. thanks to geigerzaehler.",renamed config options: many plugins have a flag dictating whether their action runs at import time. this option had many names but is now consistently called auto.,"play plugin: a new raw configuration option lets the command work with players that expect music filenames as arguments, rather than in a playlist. thanks to nathdwek. #1578",you can now use checksumming to find duplicates instead of metadata via the checksum option.,"mpd protocol command idle is now supported, allowing the mpd version to be bumped to 0.14. #3205 #800","date fields are now written in the correct order , which eliminates an intermittent bug where the latter two fields would not get written to files. thanks to jdetrey. #1303 #1589","the duplicates plugin got a number of new features, thanks to pedro silva:","one note for upgraders and packagers: this version of beets has a new dependency in enum34, which is a backport of the new enum standard library module.",bad files plugin: the command no longer bails out if the validator command is not found or exits with an error. #2430 #2433,support for ogg vorbis and monkey s audio files and their tags. ,"a new beet update command updates the database to reflect changes in the on-disk metadata. you can now use an external program to edit tags on files, remove files and directories, etc., and then run beet update to make sure your beets library is in sync. this will also rename files to reflect their new metadata.",lyrics plugin: add musixmatch source and introduce a new sources config option that lets you choose exactly where to look for lyrics and in which order.,"the second beta of beets 1.1 uses the fancy new configuration infrastructure to add many, many new config options. the import process is more flexible; filenames can be customized in more detail; and more. this release also supports windows media files and itunes sound check volume normalization.","fix a terrible and long-standing bug where track orderings were never applied. this manifested when the tagger appeared to be applying a reasonable ordering to the tracks but, later, the database reflects a completely wrong association of track names to files. the order applied was always just alphabetical by filename, which is frequently but not always what you want.","when the importer ui shows a difference in track numbers or durations, they are now colorized based on the suffixes that differ. for example, when showing the difference between 2:01 and 2:09, only the last digit will be highlighted.","better support for singleton tracks. whereas beets previously only really supported full albums, now it can also keep track of individual, off-album songs. the singleton path format can be used to customize where these tracks are stored. to import singleton tracks, provide the -s switch to the import command or, while doing a normal full-album import, choose the as tracks option to add singletons to your library. to list only singleton or only album tracks, use the new singleton: query term: the query singleton:true matches only singleton tracks; singleton:false matches only album tracks. the lastid plugin has been extended to support matching individual items as well.","web plugin: a proper 404 error, instead of an internal exception, is returned when missing album art is requested. thanks to sumpfralle. #2011","the logging system in beets has been overhauled. plugins now each have their own logger, which helps by automatically adjusting the verbosity level in import mode and by prefixing the plugin s name. logging levels are dynamically set when a plugin is called, depending on how it is called . finally, logging calls can use modern {}-style string formatting lazily. see logging in the plugin api docs.","web plugin: the /item/ and /album/ api endpoints now produce full details about albums and items, not just lists of ids. thanks to geigerzaehler.",there are many fixes related to compatibility with our dependencies including addressing changes interfaces:,"fixed an issue where images would be resized according to their longest edge, instead of their width, when using the maxwidth config option in the fetchart plugin and embedart plugin. thanks to sekjun9878. #2729",the importer s heuristic for coalescing the directories in a multi-disc album has been improved. it can now detect when two directories alongside each other share a similar prefix but a different number even when they are not alone in a common parent directory. thanks once again to tai lee.,fix a crash when a file s metadata included a very large number . these huge numbers are now replaced with zeroes in the database.,fixed a problem where duplicate albums or items imported at the same time would fail to be detected.,the importer now supports audio files contained in data tracks when they are listed in musicbrainz: the corresponding audio tracks are now merged into the main track list. thanks to jdetrey. #1638,list command: templates given with -f can now show items and albums paths .,"string comparisons in the autotagger have been augmented to act more intuitively. previously, if your album had the title something and it was officially called something , then beets would think this was a fairly significant change. it now checks for and appropriately reweights certain parts of each string. as another example, the title the great album is considered equal to great album, the .",this is primarily a bug fix release: it cleans up a couple of regressions that appeared in the last version. but it also features the triumphant return of the beatport plugin and a modernized bpd plugin.,web plugin: files now download with a reasonable filename rather than just being called file .,a new import_quiet_fallback config option specifies what should happen in quiet mode when there is no strong recommendation. the options are skip and asis .,"added a new plugin event, album_imported, which is called every time an album is added to the library. ","this little update makes queries more powerful, sorts music more intelligently, and removes a performance bottleneck. there s an experimental new plugin for synchronizing metadata with music players.","when displaying differences, the colorization has been made more consistent and helpful: red for an actual difference, yellow to indicate that a distance penalty is being applied, and light gray for no penalty or disambiguation data.","fetchart plugin: two new configuration options were added: cover_names, the list of keywords used to identify preferred images, and cautious, which lets you avoid falling back to images that don t contain those keywords. thanks to fabrice laporte.","please note that this release contains one backwards-incompatible change: album art fetching, which was previously baked into the import workflow, is now encapsulated in a plugin . if you want to continue fetching cover art for your music, enable this plugin after upgrading to beets 1.0b15.",the %aunique template function for album disambiguation now takes a third argument that specifies which brackets to use around the disambiguator value. the argument can be any two characters that represent the left and right brackets. it defaults to and can also be blank to turn off bracketing. #2397 #2399,web plugin: the underlying api was expanded slightly to support tomahawk collections. and file transfers now have a content-length header. thanks to uwe l. korn.,echonest_tempo: api errors now issue a warning instead of exiting with an exception. we also avoid an error when track metadata contains newlines.,new metadata fields for artist credits: artist_credit and albumartist_credit can now contain release- and recording-specific variations of the artist s name. see available values.,fix an error when using the modify command to remove a flexible attribute. thanks to pierre rust.,the echonest plugin has been removed in this version because the api it used is shutting down. you might want to try the acousticbrainz plugin instead.,the summary shown to compare duplicate albums during import now displays the old and new filesizes. #1291,"there s a lot of new stuff in this release: new data sources for the autotagger, new plugins to look for problems in your library, tracking the date that you acquired new music, an awesome new syntax for doing queries over numeric fields, support for alac files, and major enhancements to the importer s ui and distance calculations. a special thanks goes out to all the contributors who helped make this release awesome.",an option to the beet import command for logging albums that are untaggable . use beet import -l logfile paths. the log format is very simple: it s just a status followed by the path to the album in question. the idea is that you can tag a large collection and automatically keep track of the albums that weren t found in musicbrainz so you can come back and look at them later.,"remove the beatport plugin. beatport has shut off public access to their api and denied our request for an account. we have not heard from the company since 2013, so we are assuming access will not be restored.","play plugin: fixed a typo in a configuration option. the option is now warning_threshold instead of warning_treshold, but we kept the old name around for compatibility. thanks to jesseweinstein. #1802 #1803","added support for dsf files, once a future version of mutagen is released that supports them. thanks to docbobo. #459 #2379",play plugin: playing albums now generates filenames by default for better compatibility. the use_folders option restores the old behavior. thanks to lucas duailibe.,fix an issue where modifying an album s field without actually changing it would not update the corresponding tracks to bring differing tracks back in line with the album. #856,fix an error when trying to write tags for items with flexible fields called date and original_date . #1404,"in the config command, the output is now redacted by default. sensitive information like passwords and api keys is not included. the new --clear option disables redaction. #1376",duplicates plugin: use the default tiebreak for items or albums when the configuration only specifies a tiebreak for the other kind of entity. thanks to cgevans. #2758,a new required configuration option for the importer skips matches that are missing certain data. thanks to oprietop.,ftintitle plugin and lyrics plugin: featuring artists can now be detected when they use the spanish word con. #1060 #1143,fixed a spurious crash when lang or a related environment variable is set to an invalid value .,"this is primarily a bugfix release, but it also brings two new plugins: one for playing music in desktop players and another for organizing your directories into buckets. it also brings huge performance optimizations to queries your beet ls commands will now go much faster.",and the multitude of little improvements and fixes:,we added some plugins and overhauled some existing ones:,release year and label are now shown in the candidate selection list to help disambiguate different releases of the same album.,new smart playlist plugin: generate and maintain m3u playlist files based on beets queries. thanks to dang mai hai.,two new plugin events were added: database_change and cli_exit. thanks again to dang mai hai.,inline plugin: inline definitions can now contain statements or blocks in addition to just expressions. thanks to florent thoumie.,fix a potential crash when using image resizing with the fetchart plugin or embedart plugin without imagemagick installed.,"colorized tagger output. the autotagger interface now makes it a little easier to see what s going on at a glance by highlighting changes with terminal colors. this feature is on by default, but you can turn it off by setting color to no in your .beetsconfig .",duplicates plugin: fix checksumming command execution for files with quotation marks in their names. thanks again to pedro silva.,"the importer now records its progress when skipping albums. this means that incremental imports will no longer try to import albums again after you ve chosen to skip them, and erroneous invitations to resume interrupted imports should be reduced. thanks to jcassette.",play plugin: the command shows the output of the underlying player command and lets you interact with it. #1321,max_rec lets you define a maximum recommendation for albums with missing/extra tracks or differing track lengths/numbers. thanks again to tai lee.,"in particular, a full complement of features for supporting musical keys are new in this release:","the import log file is now flushed and closed properly so that it can be used to monitor import progress, even when the import crashes.",and there are even more new features:,scrub plugin: the image type values on scrubbed files are preserved instead of being reset to other. #2339,fix a crash when a query contains a + or - alone in a component. #1605,files are no longer silently overwritten when moving and copying files.,fix an edge case when producing sanitized filenames where the maximum path length conflicted with the replace rules. thanks to ben ockmore. #496 #1361,this release introduces a major internal change in the way that similarity scores are handled. it means that the importer interface can now show you exactly why a match is assigned its score and that the autotagger gained a few new options that let you customize how matches are prioritized and recommended.,queries are now detected as paths when they contain backslashes . this only applies on windows.,fix a crash when input is read from a pipe without a specified encoding.,"acousticbrainz plugin: the plugin now declares types for all its fields, which enables easier querying and avoids a problem where very small numbers would be stored as strings. thanks to rain0r. #2790 #3238",the remove command now shows the paths of files that will be deleted. thanks again to brunal.,"this release focuses on making beets path formatting vastly more powerful. it adds a function syntax for transforming text. via a new plugin, arbitrary python code can also be used to define new path format fields. each path format template can now be activated conditionally based on a query. character set substitutions are also now configurable.","there are also two new plugins: one for filtering the files you import and an evolved plugin for using album art as directory thumbnails in file managers. there s a new source for album art, and the importer now records the source of match data. this is a particularly huge release there s lots more below.",the tagger s output now always shows the album directory that is currently being tagged. this should help in situations where files current tags are missing or useless.,new plugin: fuzzy search plugin lets you find albums and tracks using fuzzy string matching so you don t have to type their exact names. thanks to philippe mongeau.,"there are new plugins for transcoding music, fuzzy searches, tempo collection, and fiddling with metadata. the replaygain plugin has been rebuilt from scratch. album art images can now be resized automatically. many other smaller refinements make things just work as smoothly as possible.","the autotagger now tolerates tracks on multi-disc albums that are numbered per-disc. for example, if track 24 on a release is the first track on the second disc, then it is not penalized for having its track number set to 1 instead of 24.","when using queries to match on quantitative fields, you can now use numeric ranges. for example, you can get a list of albums from the 90s by typing beet ls year:1990..1999 or find high-bitrate music with bitrate:128000... see numeric range queries. thanks to michael schuerig.",a nicer error message is now given when the configuration file contains tabs. ,the pluginpath config option can now point to the directory containing plugin code. this change should also work around a long-standing issue when using pluginpath when beets is installed using pip. many thanks to geigerzaehler.,chromaprint/acoustid plugin: fix matching with ambiguous acoustids. some acoustids are identified with multiple recordings; beets now considers any associated recording a valid match. this should reduce some cases of errant track reordering when using chroma.,"bpd now uses a persistent virtual filesystem in order to fake a directory structure. this means that your path format settings are respected in bpd s browsing hierarchy. this may come at a performance cost, however. the virtual filesystem used by bpd is available for reuse by plugins .",artist sort names are now populated correctly for multi-artist tracks and releases. ,support for album art embedded in files. a new embedart plugin implements this functionality. enable the plugin to automatically embed downloaded album art into your music files metadata. the plugin also provides the embedart and extractart commands for moving image files in and out of metadata. see the wiki for more details. ,"beets can now avoid storing identically-named albums in the same directory. the new %aunique{} template function, which is included in the default path formats, ensures that crystal castles albums will be placed into different directories. see album disambiguation for details.","play plugin: the plugin can now emit a utf-8 bom, fixing some issues with foobar2000 and winamp. thanks to mz2212. #2944",changed plugin loading so that modules can be imported without unintentionally loading the plugins they contain.,the config command can now be used to edit the configuration even when it has syntax errors. #1123 #1128,"the highlight of this release is album merging, an oft-requested option in the importer to add new tracks to an existing album you already have in your library. this way, you no longer need to resort to removing the partial album from your library, combining the files manually, and importing again.",the max_rec settings can now be used for any distance penalty component. the recommendation will be downgraded if a non-zero penalty is being applied to the specified field.,the import command now has a --noincremental or -i flag to disable incremental imports .,library_opened is called when beets starts up and opens the library database.,fix unicode errors when a directory or file doesn t exist when invoking the import command. thanks to lucas duailibe.,"this release brings a hodgepodge of medium-sized conveniences to beets. a new config command manages your configuration, we now have bash completion, and the modify command can delete attributes. there are also some significant performance optimizations to the autotagger s matching logic.",fix an incompatibility with os x 10.11 .,import_task_files is called after a task s file manipulation has finished .,fixed a regression that made it impossible to use the modify command to add new flexible fields. thanks to brilnius.,a new mbsync plugin provides a command that looks up each item and track in musicbrainz and updates your library to reflect it. this can help you easily correct errors that have been fixed in the mb database. thanks to jakob schnitzer.,beets now ensures that files have unique filenames by appending a number to any filename that would otherwise conflict with an existing file.,convert plugin: the --keep-new flag now works correctly and the library includes the converted item.,fix for changing date fields with the modify command.,the % and _ characters in path queries do not invoke their special sql meaning anymore. #1146,a new --force option for the remove command allows removal of items without prompting beforehand. #2042,fix unicode values in the replace config option .,fetchart plugin and embedart plugin: both plugins can now resize album art to avoid excessively large images. use the maxwidth config option with either plugin. thanks to fabrice laporte.,import_task_choice is called after an import task has an action assigned.,"similarly, filesystem manipulation errors now print helpful error messages instead of a messy traceback. they still interrupt beets, but they should now be easier for users to understand. tracebacks are still available in verbose mode.","fixed a bug where plugins wouldn t be notified of the deletion of an item s art, for example with the clearart command from the embedart plugin. thanks to nathdwek. #1565","the fifteenth beta of beets is compendium of small fixes and features, most of which represent long-standing requests. the improvements include matching albums with extra tracks, per-disc track numbering in multi-disc albums, an overhaul of the album art downloader, and robustness enhancements that should keep beets running even when things go wrong. all these smaller changes should help us focus on some larger changes coming before 1.0.",this version consists primarily of bug fixes and other small improvements. it s in preparation for a more feature-ful release in beta 7. the most important issue involves correct ordering of autotagged albums.,"the bpd plugin is now disabled by default. this greatly simplifies installation of the beets core, which is now 100% pure python. to use bpd, though, you ll need to set plugins: bpd in your .beetsconfig.","lastgenre plugin: the new multiple option has been replaced with the count option, which lets you limit the number of genres added to your music. also, the min_weight field filters out nonsense tags to make your genres more relevant. thanks to peter schnebel and rashley60.",the move command gained a new --timid flag to print and confirm which files you want to move. #1843,"some changes to the way candidates are recommended for selection, thanks to tai lee:",importfeeds plugin: avoid generating incorrect m3u filename when both of the m3u and m3u_multi options are enabled. #1490,"for plugin developers: when providing new importer prompt choices , you can now provide new candidates for the user to consider. for example, you might provide an alternative strategy for picking between the available alternatives or for looking up a release on musicbrainz.",the first release candidate for beets 1.0 includes a deluge of new features contributed by beets users. the vast majority of the credit for this release goes to the growing and vibrant beets community. a million thanks to everybody who contributed to this release.,importing a release with multiple release events now selects the event based on your preferred countries. #2501,"in addition, beets avoids problematic filename conflicts by appending numbers to filenames that would otherwise conflict. three new plugins are included in this release.","when you edit the configuration file with beet config -e and the file does not exist, beets creates an empty file before editing it. this fixes an error on os x, where the open command does not work with non-existent files. #1480","to support the above, there s also a new system for extending the autotagger via plugins. plugins can currently add components to the track and album distance functions as well as augment the musicbrainz search. the new api is documented at plugins.",date-based queries are now possible. try getting every track you added in february 2014 with beet ls added:2014-02 or in the whole decade with added:2010... thanks to stig inge lea bj rnsen.,importfeeds plugin: fix crash when importing albums containing / with the m3u_multi format.,this release adds a new plugin for checking file quality and a new source for lyrics. the larger features are:,importfeeds plugin: added a new configuration option that controls the base for relative paths used in m3u files. thanks to philippe mongeau.,major new features and bigger changes:,"edit plugin: fix a bug when editing items during a re-import with the -l flag. previously, diffs against against unrelated items could be shown or beets could crash. #2659","as a couple of added bonuses, imports can now automatically skip previously-imported directories and there s an experimental web interface to beets in a new standard plugin.",this second release candidate follows quickly after rc1 and fixes a few small bugs found since that release. there were a couple of regressions and some bugs in a newly added plugin.,or use templates to see the value of the field:,the plugin now works as an import metadata provider: you can match tracks and albums using the spotify database. thanks to rhlahuja. #3123,"removed the lastid plugin, which was deprecated in the previous version.",there are also core improvements and other substantial additions:,chromaprint/acoustid plugin: limit the number of releases and recordings fetched as the result of an acoustid match to avoid extremely long processing times for very popular music. #1068,this update adds a new hook plugin that lets you integrate beets with command-line tools and an export plugin that can dump data from the beets database as json. you can also automatically translate lyrics using a machine translation service.,convert plugin: the plugin now has an id3v23 option that allows you to override the global id3v23 option. thanks to holzhaus. #3104,the config command can now use $editor variables with arguments.,built with sphinx using a theme provided by read the docs.,"scrub plugin: scrubbing now removes all types of tags from a file rather than just one. for example, if your flac file has both ordinary flac tags and id3 tags, the id3 tags are now also removed.",fix a crash introduced in the previous version when the standard input was connected to a unix pipe. #2041,modify selection can now be applied early without selecting every item. #3083,"new default file locations: the default filename of the library database is now library.db in the same directory as the config file, as opposed to ~/.beetsmusic.blb previously. similarly, the runtime state file is now called state.pickle in the same directory instead of ~/.beetsstate.",there is one new thing for plugin developers to know about:,"the core of beets gained a new built-in command: beet write updates the metadata tags for files, bringing them back into sync with your database. thanks to heinz wiesinger.","truncate long filenames based on their bytes rather than their unicode characters, fixing situations where encoded names could be too long.","the output of the stats command is slightly different: the approximate size is now marked as such, and the total number of seconds only appears in exact mode.","lyrics plugin: avoid a crash and a spurious warning introduced in the last version about a google api key, which appeared even when you hadn t enabled the google lyrics source.","querying the library for items is now faster, for all queries that do not need to access album level properties. this was implemented by lazily fetching the album only when needed. thanks to simonpersson. #3260",plugins are now loaded in the order they appear in the config file. thanks to dang mai hai.,"the modify command now allows resetting fixed attributes. for example, beet modify -a artist:beatles artpath! resets artpath attribute from matching albums back to the default value. #2497","two new plugin hooks, albuminfo_received and trackinfo_received, let plugins intercept metadata as soon as it is received, before it is applied to music in the database. #872",fixed the ordering of items when manually selecting changes while updating tags thanks to taizosimpson. #3501,here are the larger new features in this release:,"overhauled methods for handling fileystem paths to allow filenames that have badly encoded special characters. these changes are pretty fragile, so please report any bugs involving unicodeerror or sqlite programmingerror messages in this version.","plugins can also provide metadata matches for id searches. for example, the new discogs plugin lets you search for an album by its discogs id from the same prompt that previously just accepted musicbrainz ids. thanks to johannes baiter.","track length is now displayed as m:ss rather than a raw number of seconds. queries on track length also accept this format: for example, beet list length:5:30.. will find all your tracks that have a duration over 5 minutes and 30 seconds. you can turn off this new behavior using the format_raw_length configuration option. #1749",fix a crash when writing some unicode comment strings to mp3s that used older encodings. the encoding is now always updated to utf-8. #879,"bpd now uses a pure-python socket library and no longer requires eventlet/greenlet . for the curious, the socket library in question is called bluelet.","fetchart plugin: in auto mode, the plugin now skips albums that already have art attached to them so as not to interfere with re-imports. #314",the refactoring work is due to the continued efforts of tai lee. the changes you ll notice while using the autotagger are:,fix an error introduced in 1.1b1 when importing using timid mode. thanks to sam doshi.,and there are a few bug fixes too:,"the ftintitle plugin, by @verrus, is now distributed with beets. it helps you rewrite tags to move featured artists from the artist field to the title field.","in this release, we refactored the logging system to be more flexible and more useful. there are more granular levels of verbosity, the output from plugins should be more consistent, and several kinds of logging bugs should be impossible in the future.","with the from_scratch configuration option set, only writable fields are cleared. beets now no longer ignores the format your music is saved in. #2972",and some little enhancements and bug fixes:,the art_filename option can now be a template rather than a simple string. thanks to jarrod beardwood.,"smart playlist plugin: playlist updating should now be faster: the plugin detects, for each playlist, whether it needs to be regenerated, instead of obliviously regenerating all of them. the splupdate command can now also take additional parameters that indicate the names of the playlists to regenerate.",the new scrub plugin can remove extraneous metadata either manually or automatically.,there are also many bug fixes and little enhancements:,fix an error in the rewrite and inline plugins when the corresponding config sections did not exist.,rewrite plugin: unicode rewriting rules are now allowed .,"queries can now use not logic. type a ^ before part of a query to exclude matching music from the results. for example, beet list -a beatles ^album:1 will find all your albums by the beatles except for their singles compilation, 1. see query term negation. #819 #1728","album cover art fetching is now encapsulated in the fetchart plugin. be sure to enable this plugin if you re using this functionality. as a result of this new organization, the new plugin has gained a few new features:","slow queries, such as those over flexible attributes, should now be much faster when used with certain commands notably, the play plugin.",this new release includes lots of new features in the importer and the metadata source backends that it uses. we ve changed how the beets importer handles non-audio tracks listed in metadata sources like musicbrainz:,fix some problem with identifying files on windows with unicode directory names in their path.,convert plugin: fix conversion for files that include a video stream by ignoring it. thanks to brunal.,the optionparser is now a commonoptionsparser that offers facilities for adding usual options . see add commands to the cli. #1271,$bitrate in path formats is now formatted as a human-readable kbps value instead of as a raw integer., as-is and non-autotagged imports can now have album art imported from the local filesystem .,"convert plugin: the extension setting is now optional for conversion formats. by default, the extension is the same as the name of the configured format.",beets queries can now use regular expressions. use an additional : in your query to enable regex matching. see regular expressions for the full details. thanks to matteo mecucci.,"convert plugin: a new copy_album_art option puts images alongside converted files. thanks to ngel alonso. #1050, #1055","a new beet modify command enables manual, command-line-based modification of music metadata. pass it a query along with field=value pairs that specify the changes you want to make.",fix compatibility with python 3.7 and its change to a name in the re module. #2978,we now only use primary aliases for artist names from musicbrainz. this eliminates some strange naming that could occur when the languages config option was set. thanks to filipe fortes.,"one side effect of this change: queries that include unknown fields will now match nothing instead of everything. so if you type beet ls fieldthatdoesnotexist:foo, beets will now return no results, whereas previous versions would spit out a warning and then list your entire library.",now optionally has a bias toward looking up more relevant releases according to the preferred configuration options. thanks to archer4499. #3017,"queries can now contain whitespace. spaces passed as shell arguments are now preserved, so you can use your shell s escaping syntax to include spaces in queries. for example, typing``beet ls the knife `` or beet ls the\ knife. read more in queries.","discogs plugin: fix the medium and medium_index values, which were occasionally incorrect for releases with two-sided mediums such as vinyl. also fix the medium_total value, which now contains total number of tracks on the medium to which a track belongs, not the total number of different mediums present on the release. thanks to dbogdanov. #2887",fetchart plugin: there are new settings to control what constitutes acceptable images. the minwidth option constrains the minimum image width in pixels and the enforce_ratio option requires that images be square. #1394,reorganized code for cli in preparation for adding pluggable subcommands. also removed dependency on the aging cmdln module in favor of a hand-rolled solution.,"one backwards-compatibility note: the lyrics plugin now requires the requests library. if you use this plugin, you will need to install the library by typing pip install requests or the equivalent for your os.",a better error message is given when the database file is unopenable.,the beetsconfig environment variable can now be used to specify the location of the config file that is at ~/.beetsconfig by default.,some messages in the console ui now use plural nouns correctly. thanks to jesseweinstein. #1521,"plugins can now provide fields for both album and item templates, thanks to pedro silva. accordingly, the inline plugin can also now define album fields. for consistency, the pathfields configuration section has been renamed item_fields .",queries can match items from the library by directory. a path: prefix is optional; any query containing a path separator is assumed to be a path query. running beet ls path/to/music will show all the music in your library under the specified directory. the queries reference again has more details.,fetchart plugin: you can now search for art on the itunes store. there s also a new sources config option that lets you choose exactly where to look for images and in which order.,"the colors used in the terminal interface are now configurable via the new config option colors, nested under the option ui. #1238","version 1.3.3 brings a bunch changes to how item and album fields work internally. along with laying the groundwork for some great things in the future, this brings a number of improvements to how you interact with beets. here s what s new with fields in particular:","according to the new max_rec configuration option, partial album matches are downgraded to a low recommendation by default.","ihate plugin: the plugin s configuration interface was overhauled. its configuration is now much simpler it uses beets queries instead of an ad-hoc per-field configuration. this is backwards-incompatible if you use this plugin, you will need to update your configuration. thanks to braindamage.",fix import with relative path arguments on windows.,ftintitle plugin: a new option lets you remove featured artists entirely instead of moving them to the title. thanks to sutjael.,lyrics plugin: only strip featured artists and parenthesized title suffixes if no lyrics for the original artist and title were found.,"a new link option in the import section creates symbolic links during import instead of moving or copying. thanks to rovanion luckey. #710, #114","the importer now gives you choices when duplicates are detected. previously, when beets found an existing album or item in your library matching the metadata on a newly-imported one, it would just skip the new music to avoid introducing duplicates into your library. now, you have three choices: skip the new music , keep both, or remove the old music. see the duplicates section in the autotagging guide for details.","the autotagger can now find matches for albums when you have extra tracks on your filesystem that aren t present in the musicbrainz catalog. previously, if you tried to match album with 15 audio files but the musicbrainz entry had only 14 tracks, beets would ignore this match. now, beets will show you matches even when they are too short and indicate which tracks from your disk are unmatched.","path queries are automatically triggered only if the path targeted by the query exists. previously, just having a slash somewhere in the query was enough, so beet ls ac/dc wouldn t work to refer to the artist.","a new --search-id importer option lets you manually specify ids for imported music. doing this skips the initial candidate search, which can be important for huge albums where this initial lookup is slow. also, the enter id prompt choice now accepts several ids, separated by spaces. #1808",the importer now provides the option to specify a musicbrainz id manually if the built-in searching isn t working for a particular album or track.,and countless little improvements and fixes:,mbsync plugin: track alignment now works with albums that have multiple copies of the same recording. thanks to rui gon alves.,"relatedly, the -l flag to the import command makes it take a query as its argument instead of a list of directories. the matched albums are then re-imported.",the musicbrainz collection plugin by jeffrey aylesworth was added to the core beets distribution.,importing a release with multiple release events now selects the event based on the order of your preferred countries rather than the order of release events in musicbrainz. #2816,"duplicates plugin: you can now merge duplicate track metadata , or duplicate album tracks .",there are also three more big features added to beets core:,fix a crash when beet is invoked without arguments. #1205 #1207,convert plugin: you can now configure the path formats for converted files separately from your main library. thanks again to lucas duailibe.,info plugin: fail gracefully when used erroneously with a directory.,suppress errors due to timeouts and bad responses from musicbrainz.," various artists releases are handled much more gracefully. the autotagger now sets the comp flag on albums whenever the album is identified as a various artists release by !musicbrainz. also, there is now a distinction between the album artist and the track artist , the latter of which is never various artists or other such bogus stand-in. ",the modify command s output now clearly shows when a file has been deleted.,"for developers, the short version of the story is that item and album objects provide uniform access across fixed, flexible, and computed attributes. you can write item.foo to access the foo field without worrying about where the data comes from.","to replace tracktotal as an album-level field, there is a new albumtotal computed attribute that provides the total number of tracks on the album. ","the media attribute is now a track-level field instead of an album-level one. this field stores the delivery mechanism for the music, so in its album-level incarnation, it could not represent heterogeneous releases for example, an album consisting of a cd and a dvd. now, tracks accurately indicate the media they appear on. thanks to heinz wiesinger.",the write command now only shows the changes to fields that will actually be written to a file.,terminal colors are now supported on windows via colorama .,there are a couple of changes for developers:,this final release of 1.1 brings a little polish to the betas that introduced the new configuration system. the album art and lyrics plugins also got a little love.,"plugins can now see updated import task state, such as when rejecting the initial candidates and finding new ones via a manual search. notably, this means that the importer prompt options that the edit plugin provides show up more reliably after doing a secondary import search. #2441 #2731","the big news in this release is a new interactive editor plugin. it s really nifty: you can now change your music s metadata by making changes in a visual text editor, which can sometimes be far more efficient than the built-in modify command. no more carefully retyping the same artist name with slight capitalization changes.",the old top-level colors configuration option has been removed .,and many improvements to existing plugins:,and many little fixes and improvements:,"this small update is part of our attempt to release new versions more often! there are a few important fixes, and we re clearing the deck for a change to beets dependencies in the next version.",a new initial_key field is available in the database and files tags. you can set the field manually using a command like beet modify initial_key=am.,the list_format_album and list_format_item configuration keys now affect every place where objects are printed and logged. #1269,"the load extension plugin allows loading of sqlite extensions, primarily for use with the icu sqlite extension for internationalization. #3160 #3226",for plugin developers: added an optparse callback utility function for performing actions based on arguments. thanks to pedro silva.,"this release introduces one new plugin to fetch audio information from the acousticbrainz project and another plugin to make it easier to submit your handcrafted metadata back to musicbrainz. the importer also gained two oft-requested features: a way to skip the initial search process by specifying an id ahead of time, and a way to manually provide metadata in the middle of the import process .",chromaprint/acoustid plugin: fix occasional crash at end of fingerprint submission and give more context to failed fingerprint generation errors.,"the calculation of the similarity score for autotagger matches was also improved, again thanks to tai lee. these changes, in general, help deal with the new metadata sources and help disambiguate between similar releases in the same musicbrainz release group:",the modify command avoids writing files and committing to the database when nothing has changed. thanks once more to brilnius.,this is a tiny bug-fix release. it copes with a dependency upgrade that broke beets. there are just two fixes:,metasync plugin: added a new backend to fetch metadata from itunes. this plugin is still in an experimental phase. #1450,lastgenre plugin: fixed a problem where path formats containing $genre would use the old genre instead of the newly discovered one.,"this version introduces one change to the default behavior that you should be aware of. previously, when importing new albums matched in musicbrainz, the date fields would be set to the release date of the original version of the album, as opposed to the specific date of the release selected. now, these fields reflect the specific release and original_year, etc., reflect the earlier release date. if you want the old behavior, just set original_date to true in your config file.","the case sensitivity of path queries is more useful now: rather than just guessing based on the platform, we now check the case sensitivity of your filesystem. #1586",the replace configuration option can now remove characters entirely if the special string <strip> is specified as the replacement.,lyrics plugin: the musixmatch backend now detects and warns when the server has blocked the client. thanks to anarcat. #2634 #2632,lyrics plugin: lyrics searches should now turn up more results due to some fixes in dealing with special characters.,"edit plugin: you can now edit metadata on the fly during the import process. the plugin provides two new interactive options: one to edit your music s metadata, and one to edit the matched metadata retrieved from musicbrainz . this feature is still in its early stages, so please send feedback if you find anything missing. #1846 #396",duplicates plugin: emit an error when the checksum config option is set incorrectly.,the write command avoids displaying the item name if there are no changes for it.,"refactored the move functions the beets.library module and the manipulate_files function in beets.importer to use a single parameter describing the file operation instead of multiple boolean flags. there is a new numerated type describing how to move, copy, or link files. #2682","relatedly, the beet program now accept top-level options --format-item and --format-album before any subcommand to control how items and albums are displayed. #1271","happy new year! this new version includes a cornucopia of new features from contributors, including new tags related to classical music and a new acousticbrainz submit plugin for performing acoustic analysis on your music. the random plugin has a new mode that lets you generate time-limited music for example, you might generate a random playlist that lasts the perfect length for your walk to work. we also access as many web services as possible over secure connections now https everywhere!",date-based queries that are malformed no longer crash beets and instead fail silently.,support for aiff files. tags are stored as id3 frames in one of the file s iff chunks. thanks to evan purkhiser for contributing support to mutagen.,fix a bug that caused the lastgenre plugin and other plugins not to modify files tags even when they successfully change the database.,"discogs plugin: fix a crash when a release does not contain format information, and increase robustness when other fields are missing. #2302",fix an incompatibility in bpd with libmpc .,quiet import: a new -q command line switch for the import command suppresses all prompts for input; it pessimistically skips all albums that the importer is not completely confident about.,convert plugin: avoid crashes when tags cannot be written to newly converted files.,"added support for the wavpack and musepack formats. unfortunately, due to a limitation in the mutagen library , musepack sv8 is not yet supported. here s the upstream bug in question.",lastgenre plugin: a new configuration option lets you choose to retrieve artist-level tags as genres instead of album- or track-level tags. thanks to peter fern and peter schnebel.,importing without autotagging now prints out album names as it imports them to indicate progress.,"fingerprint values are now properly stored as strings, which prevents strange repeated output when running beet write. thanks to holzhaus. #3097 #2942","fetchart plugin: determine the file extension for downloaded images based on the image s magic bytes. the plugin prints a warning if result is not consistent with the server-supplied content-type header. in previous versions, the plugin would use a .jpg extension for all images. #2053",fix a regression on windows that caused all relative paths to be not found .,fetchart plugin: the plugin no longer gets skipped during import when the edit candidates option is used from the edit plugin. #2734,the bitrate of lossless files is now calculated from their file size .,don t display changes for fields that are not in the restricted field set. this fixes write showing changes for fields that are not written to the file.,silenced some confusing error messages when searching for a non-musicbrainz id. using an invalid id at the enter id: importer prompt now just silently returns no results. more info is in the verbose logs.,a new beet move command can copy or move files into your library directory or to another specified directory.,"embedart plugin: the plugin now uses jpg as an extension rather than jpeg, to ensure consistency with the fetchart plugin. thanks to tweitzel. #2254 #2255","when importing files that are already in the library database, the items are no longer duplicated instead, the library is updated to reflect the new metadata. this way, the import command can be transparently used as a re-import.",lyrics plugin: avoid fetching truncated lyrics from the google backed by merging text blocks separated by empty <div> tags before scraping.,a new id3v23 config option makes beets write mp3 files tags using the older id3v2.3 metadata standard. use this if you want your tags to be visible to windows and some older players.,"embedart plugin: the embedart command now embeds each album s associated art by default. the --file option invokes the old behavior, in which a specific image file is used.",play plugin: the command config option can now contain arguments . thanks to alessandro ghedini.,"the importer no longer tries to highlight partial differences in numeric quantities , which was often confusing.","this release built up a longer-than-normal list of nifty new features. we now support dsf audio files and the importer can hard-link your files, for example.",the -f option to the beet list command can now contain template functions as well as field references. thanks to steve dougherty.,re-imports of your existing music now preserve its added date and flexible attributes. thanks to stig inge lea bj rnsen.,the playlist plugin can query the beets library using m3u playlists. thanks to holzhaus and xenopathic. #123 #3145,path formats can now include unescaped commas when they are not part of a function call. #2166 #2213,fixed a bug with reading invalid integers from id3 tags.,"this release focuses on a large number of small fixes and improvements that turn beets into a well-oiled, music-devouring machine. see the full release notes, below, for a plethora of new features.",fetchart plugin: the beet fetchart command can now associate local images with albums . thanks to brilnius.,plugins can now add parallel stages to the import pipeline. see writing plugins.,"the move command has a new --pretend option, making the command show how the items will be moved without actually changing anything.",add a new option to automatically upload to google play music library on track import. thanks to shuaiscott.,embyupdate plugin: the plugin can now use an api key instead of a password to authenticate with emby. #2045 #2117,thumbnails plugin: fix a crash with unicode paths. #1686,"a new importer configuration option, incremental_skip_later, lets you avoid recording skipped directories to the list of processed directories in incremental mode. this way, you can revisit them later with another import. thanks to sekjun9878. #2773","this is just a little bug fix release. with 1.4.2, we re also confident enough to recommend that anyone who s interested give python 3 a try: bugs may still lurk, but we ve deemed things safe enough for broad adoption. if you can, please install beets with pip3 instead of pip2 this time and let us know how it goes!","convert plugin: the plugin now runs before other plugin-provided import stages, which addresses an issue with generating replaygain data incompatible between the source and target file formats. thanks to autrimpo. #2814",convert plugin: embed cover art into converted files. previously they were embedded into the source files.,"a new flag -i to the import command runs incremental imports, keeping track of and skipping previously-imported directories. this has the effect of making repeated import commands pick up only newly-added directories. the import_incremental config option makes this the default.",mpdupdate plugin: domain sockets can now begin with a tilde as well as a slash. thanks to johann kl hn.,"original_date determines whether, when importing new albums, the year, month, and day fields should reflect the specific release date or the original release date. note that the original release date is always available as original_year, etc.",the write plugin event allows plugins to change the tags that are written to a media file.,"the modify now correctly converts types when modifying non-string fields. you can now safely modify the comp flag and the year field, for example. thanks to lucas duailibe.",fetchart plugin: command output is now colorized. thanks again to brilnius.,more consistent format and colorization of album and track metadata.,there are some changes for developers:,strongly prefer releases with a matching musicbrainz album id. this helps beets re-identify the same release when re-importing existing files.,note the changes to the dependencies on jellyfish and munkres.,lastgenre plugin: the force config option now defaults to true and controls the behavior of the import hook. ,filename collisions are now avoided when moving album art.,"compatibility with the latest version of mutagen, 1.23.",the new fromfilename plugin guesses tags from the filenames during import when metadata tags themselves are missing. thanks to jan-erik dahlin.,convert plugin: fix an issue where files of the wrong format would have their transcoding skipped . thanks to jakob schnitzer.,querying the library is now faster:,the ignore configuration option now includes the lost+found directory by default.,beet --version now includes the python version used to run beets.,"importing an archive will no longer leave temporary files behind in /tmp. thanks to multikatt. #1067, #1091","we again properly send albuminfo_received and trackinfo_received in all cases, most notably when using the mbsync plugin. this was a regression since version 1.4.1. #2921","python 2.6 compatibility for beatport, missing plugin, and duplicates plugin. thanks to wesley bitter and pedro silva.","the autotagging heuristics have been tweaked in situations where the musicbrainz database did not contain track lengths. previously, beets penalized matches where this was the case, leading to situations where seemingly good matches would have poor similarity. this penalty has been removed.",tracks on multi-disc albums can now be numbered per-disc instead of per-album via the per_disc_numbering config option.,"echonest plugin: echo nest similarity now weights the tempo in better proportion to other metrics. also, options were added to specify custom thresholds and output formats. thanks to adam m.",fix an error when fingerprinting files with unicode filenames on windows.,"convert plugin: you can now transcode files to any audio format, rather than just mp3. thanks again to rowan lewis.",avoid a crash on windows when writing to files with special characters in their names.,"fix a race in the importer when importing two albums with the same artist and name in quick succession. the importer would fail to detect them as duplicates, claiming that there were empty albums in the database even when there were not. #1652",fix a crash with some files with unreadable itunes soundcheck metadata. #1666,"albums and items now have flexible attributes. this means that, when you want to store information about your music in the beets database, you re no longer constrained to the set of fields it supports out of the box . instead, you can use any field name you can think of and treat it just like the built-in fields.",the list command s help output now has a small query and format string example. thanks to pkess. #1582,importadded plugin: now works with in-place and symlinked imports. #1170,a new lastimport plugin lets you download your play count data from last.fm into a flexible attribute. thanks to rafael bodill.,the web plugin encapsulates a simple web-based gui for beets. the current iteration can browse the library and play music in browsers that support html5 audio.,"the musicbrainz backend and discogs plugin now both provide a new attribute called track_alt that stores more nuanced, possibly non-numeric track index data. for example, some vinyl or tape media will report the side of the record using a letter instead of a number in that field. #1831 #2363",the performance of the autotagger s matching mechanism is vastly improved. this should be noticeable when matching against very large releases such as box sets.,added whitespace padding to missing tracks dialog to improve readability. thanks to jams2. #2962,"sorting is now case insensitive by default. this means that artists will be sorted lexicographically regardless of case. for example, the artist alt-j will now properly sort before yacht. you can turn this new behavior off using the sort_case_insensitive configuration option. see sort order. #1429",lyrics plugin: a new google custom search backend was added for finding lyrics on a wide array of sites. thanks to fabrice laporte.,"discogs plugin: compatibility with the new 2.0 version of the discogs_client python library. if you were using the old version, you wil need to upgrade to the latest version of the library to use the correspondingly new version of the plugin . thanks to andriy kohut.",discogs plugin: avoid a situation where a trailing comma could be appended to some artist names. #1049,default_action lets you determine the default option is when considering a candidate.,fix a bug with old versions of the monkey s audio format.,there is no longer a conflict between two plugins that declare the same field with the same type. thanks to peter schnebel. #1059 #1061,new duplicates plugin: find tracks or albums in your library that are duplicated.,the lastgenre plugin now correctly writes discovered genres to imported files .,"similarly, import_delete now causes original album art imported from the disk to be deleted.",discogs plugin: the plugin now stores master release ids into mb_releasegroupid. it also simulates track ids using the release id and the track list position. thanks to dbogdanov. #2336,"flexible field types mean that some functionality that has previously only worked for built-in fields, like range queries, can now work with plugin- and user-defined fields too. for starters, the echonest plugin and mpdstats plugin now mark the types of the fields they provide so you can now say, for example, beet ls liveness:0.5..1.5 for the echo nest liveness attribute. the types plugin makes it easy to specify field types in your config file.",new random plugin: randomly select albums and tracks from your library. thanks to philippe mongeau.,replaygain plugin: fix a corner-case with the bs1770gain backend where replaygain values were assigned to the wrong files. the plugin now requires version 0.4.6 or later of the bs1770gain tool. #2777,the importer now logs a message instead of crashing when errors occur while opening the files to be imported.,a new hardlink config option instructs the importer to create hard links on filesystems that support them. thanks to jacobwgillespie. #2445,"the tracktotal attribute is now a track-level field instead of an album-level one. this field stores the total number of tracks on the album, or if the per_disc_numbering config option is set, the total number of tracks on a particular medium . the field was causing problems with that per_disc_numbering mode: different discs on the same album needed different track totals. the field can now work correctly in either mode.","as usual, there are also innumerable little fixes and improvements:","as usual, there are loads of little fixes and improvements:","fix unicode encoding of album artist, album type, and label.",plugins can also now define new path fields in addition to functions.,mpdupdate plugin: you can now communicate with mpd over a unix domain socket. thanks to john hawthorn.,"chromaprint/acoustid plugin: a new command, beet submit, will submit fingerprints to the acoustid database. submitting your library helps increase the coverage and accuracy of acoustid fingerprinting. the chromaprint fingerprint and acoustid id are also now stored for all fingerprinted tracks. this version of beets requires at least version 0.6 of pyacoustid for fingerprinting to work.","when getting data from musicbrainz, the album disambiguation string now reflects both the release and the release group.","web plugin: added a new config option, include_paths, which will cause paths to be included in item api responses if set to true.","fix a problem caused by time zone misalignment that could make date queries fail to match certain dates that are near the edges of a range. for example, querying for dates within a certain month would fail to match dates within hours of the end of that month. #2652",a new duplicate_action importer config option controls how duplicate albums or tracks treated in import task. #185,fix unicode queries given on the command line.,this version also makes a few changes to the command-line interface and configuration that you may need to know about:,"plugin-supplied template values, such as those created by rewrite, are now properly sanitized .",convert plugin: the default configuration uses ffmpeg s built-in aac codec instead of faac. thanks to jansol. #2484,"when tagging a track with no title set, the track s filename is now shown .","new event system for plugins . plugins can now get callbacks from beets when certain events occur in the core. again, the api is documented in plugins.",info plugin: target files can now be specified through library queries . the --library option prints library fields instead of tags. multiple files can be summarized together with the new --summarize option.,the output of the fields command is now sorted. thanks to multikatt. #1402,the importer now uses the album artist field when guessing existing metadata for albums . thanks to geigerzaehler.,friendly error messages are now printed when trying to read or write files that go missing.,"the importer now ignores non-audio tracks listed in musicbrainz. also, a new option, ignore_video_tracks, lets you return to the old behavior and include these video tracks. #1210","for the first time, beets can now tag your music using additional data sources to augment the matches from musicbrainz. when you enable either of these plugins, the importer will start showing you new kinds of matches:",invalid date queries now print an error message instead of being silently ignored. thanks to discopatrick. #2513 #2517,"the migration from pre-1.1, non-yaml configuration files has been removed. if you need to upgrade an old config file, use an older version of beets temporarily.","convert plugin: also, a new auto config option will transcode audio files automatically during import. thanks again to lucas duailibe.",fetchart plugin: the enforce_ratio option now lets you tolerate images that are almost square but differ slightly from an exact 1:1 aspect ratio.,new plugin: zero plugin filters out undesirable fields before they are written to your tags. thanks again to blemjhoo tezoulbr.,the importer ui no longer shows a change when the track length difference is less than 10 seconds. ,there are other subtle improvements to metadata handling in the importer:,"web plugin: lyrics now display readably with correct line breaks. also, the detail view scrolls to reveal all of the lyrics. thanks to meet udeshi.",the importer now prints when no tags are present.,"with per_disc_numbering enabled, the tracktotal field is now set correctly .",item and album queries are much faster.,the database_change event now sends the item or album that is subject to a change.,"version 1.4.5 adds some oft-requested features. when you re importing files, you can now manually set fields on the new music. date queries have gotten much more powerful: you can write precise queries down to the second, and we now have relative queries like -1w, which means one week ago.",the %title template function now works correctly with apostrophes. thanks to guilhermehideki. #3033,convert plugin: a new --keep-new option lets you store transcoded files in your library while backing up the originals . thanks to lucas duailibe.
CHANGELOG - AllenNLP v2.4.0,"arrayfield is now called tensorfield, and implemented in terms of torch tensors, not numpy.","a duplicate method on instances and fields, to be used instead of copy.deepcopy",fixed issue with gradientdescenttrainer when constructed with validation_data_loader=none and learning_rate_scheduler!=none.,"the dataloader now decides whether to load instances lazily or not. with the pytorchdataloader this is controlled with the lazy parameter, but with the multiprocessdataloading this is controlled by the max_instances_in_memory setting.",allow overrides to be json string or dict.,"allennlp.data.dataloader is now an abstract registrable class. the default implementation remains the same, but was renamed to allennlp.data.pytorchdataloader.",fixed a bug where forward hooks were not cleaned up with saliency interpreters if there was an exception.,added a command to count the number of instances we're going to be training with,"improved nn.util.move_to_device function by avoiding an unnecessary recursive check for tensors and adding a non_blocking optional argument, which is the same argument as in torch.tensor.to.","fixed a lot of instances where tensors were first created and then sent to a device with .to. instead, these tensors are now created directly on the target device.","added tasksuite base class and command line functionality for running checklist test suites, along with implementations for sentimentanalysissuite, questionansweringsuite, and textualentailmentsuite. these can be found in the allennlp.confidence_checks.task_checklists module.",model.get_parameters_for_histogram_tensorboard_logging is deprecated in favor of model.get_parameters_for_histogram_logging.,"allennlp.common.util.peak_memory_mb renamed to peak_cpu_memory, and allennlp.common.util.gpu_memory_mb renamed to peak_gpu_memory, and they both now return the results in bytes as integers. also, the peak_gpu_memory function now utilizes pytorch functions to find the memory usage instead of shelling out to the nvidia-smi command. this is more efficient and also more accurate because it only takes into account the tensor allocations of the current pytorch process.","vocabulary.from_files and cached_path will issue a warning, instead of failing, when a lock on an existing resource can't be acquired because the file system is read-only.","the format is based on keep a changelog, and this project adheres to semantic versioning.","added an option to pretrainedtransformerembedder and pretrainedtransformermismatchedembedder to use a scalar mix of all hidden layers from the transformer model instead of just the last layer. to utilize this, just set last_layer_only to false.",fixed handling of http errors when fetching remote resources with cached_path. previously the content would be cached even when certain errors - like 404s - occurred. now an httperror will be raised whenever the http response is not ok.,added abstraction and concrete implementation for gridembedder,trainer can accept callbacks simply with name callbacks instead of trainer_callbacks.,fixed default masks that were erroneously created on the cpu even when a gpu is available.,replaced the nvidia apex amp module with torch's native amp module. the default trainer now takes a use_amp: bool parameter instead of the old opt_level: str parameter.,fixed a bug regarding token indexers with the interleavingdatasetreader when used with multi-process data loading.,"cpu memory for every worker is now reported in the logs and the metrics. previously this was only reporting the cpu memory of the master process, and so it was only correct in the non-distributed setting.",added a util function allennlp.nn.util.dist_reduce for handling distributed reductions. this is especially useful when implementing a distributed metric.,"fixed typo with registered name of rouge metric. previously was rogue, fixed to rouge.",tqdm output now looks much better when the output is being piped or redirected.,added the ability to use predictors with multitask models through the new multitaskpredictor.,fixed basictextfieldembedder to not raise configurationerror if it has embedders that are empty and not in input,changed the vocabulary loading to consider new lines for windows/linux and mac.,added a workflow to github actions that will automatically close unassigned stale issues and ping the assignees of assigned stale issues.,a batchcallback for logging cpu and gpu memory usage to tensorboard. this is mainly for debugging because using it can cause a significant slowdown in training.,added abstraction and concrete implementation for image loading,added the option to enable or disable gradient checkpointing for transformer token embedders via boolean parameter gradient_checkpointing.,"fixed how truncation was handled with pretrainedtransformertokenizer. previously, if max_length was set to none, the tokenizer would still do truncation if the transformer model had a default max length in its config. also, when max_length was set to a non-none value, several warnings would appear for certain transformer models around the use of the truncation parameter.","a multitaskmodel and abstractions to use with it, including backbone and head. the multitaskmodel first runs its inputs through the backbone, then passes the result to each head that's in use.","changed the behavior of lazy types in from_params methods. previously, if you defined a lazy parameter like foo: lazy = none in a custom from_params classmethod, then foo would actually never be none. this behavior is now different. if no params were given for foo, it will be none. you can also now set default values for foo like foo: lazy = lazy. or, if you want you want a default value but also want to allow for none values, you can write it like this: foo: optional] = lazy.",fixed a bug where parameters to a fromparams class that are dictionaries wouldn't get logged when an instance is instantiated from_params.,added an overrides argument to predictor.from_path.,fixed a bug where some activation implementations could not be pickled due to involving a lambda function.,"fixed the computation of saliency maps in the interpret code when using mismatched indexing. previously, we would compute gradients from the top of the transformer, after aggregation from wordpieces to tokens, which gives results that are not very informative. now, we compute gradients with respect to the embedding layer, and aggregate wordpieces to tokens separately.",fixed a bug where hotflip would crash with a model that had multiple tokenindexers and the input used rare vocabulary items.,added get_embedding_layer and get_text_field_embedder to the predictor class; to specify embedding layers for non-allennlp models.,discovered plugins are logged so you can see what was loaded.,"added new eval_mode in pretrainedtransformerembedder. if it is set to true, the transformer is always run in evaluation mode, which, e.g., disables dropout and does not update batch normalization statistics.","all of the tests moved from allennlp/tests to tests at the root level, and allennlp/tests/fixtures moved to test_fixtures at the root level. the pypi source and wheel distributions will no longer include tests and fixtures.",the trainercallback event methods now accept **kwargs. this may be useful to maintain backwards-compability of callbacks easier in the future. e.g. we may decide to pass the exception/traceback object in case of failure to on_end and this older callbacks may simply ignore the argument instead of raising a typeerror.,subcommands that don't require plugins will no longer cause plugins to be loaded or have an --include-package flag.,fixed a bug in distributed metrics that caused nan values due to repeated addition of an accumulated variable.,fixed a bug where namespaceswappingfield did not work correctly with .empty_field.,fixed a bug in the cnn_encoder where activations involving masked tokens could be picked up by the max,"coding_scheme parameter is now deprecated in conll2003datasetreader, please use convert_to_coding_scheme instead.",added abstraction and concrete implementation for region detectors.,"we first introduced this changelog after release v1.0.0rc4, so please refer to the github release notes for this and earlier releases.",fixed an issue in fromparams where parameters in the params object used to a construct a class were not passed to the constructor if the value of the parameter was equal to the default value. this caused bugs in some edge cases where a subclass that takes **kwargs needs to inspect kwargs before passing them to its superclass.,"added an optional include_in_archive parameter to the top-level of configuration files. when specified, include_in_archive should be a list of paths relative to the serialization directory which will be bundled up with the final archived model from a training run.","to be consistent with pytorch iterabledataset, allennlplazydataset no longer implements __len__. previously it would always return 1.",training metrics now include batch_loss and batch_reg_loss in addition to aggregate loss across number of batches.,predictor names were inconsistently switching between dashes and underscores. now they all use underscores.,"histogram_interval parameter is now deprecated in tensorboardwriter, please use distribution_interval instead.",use attributes of modeloutputs object in pretrainedtransformerembedder instead of indexing.,documentation updates made to softmaxloss regarding padding and the expected shapes of the input and output tensors of forward.,improved the error message from registrable.by_name when the name passed does not match any registered subclassess. the error message will include a suggestion if there is a close match between the name passed and a registered name.,"added an optional seed parameter to modeltestcase.set_up_model which sets the random seed for random, numpy, and torch.","added a filelock class to common.file_utils. this is just like the filelock from the filelock library, except that it adds an optional flag read_only_ok: bool, which when set to true changes the behavior so that a warning will be emitted instead of an exception when lacking write permissions on an existing file lock. this makes it possible to use the filelock class on a read-only file system.","added a filelock class to common.file_utils. this is just like the filelock from the filelock library, except that it adds an optional flag read_only_ok: bool, which when set to true changes the behavior so that a warning will be emitted instead of an exception when lacking write permissions on an existing file lock. this makes it possible to use the filelock class on a read-only file system.","removed the opt_level parameter to model.load and load_archive. in order to use amp with a loaded model now, just run the model's forward pass within torch's autocast context.",fixed a bug with the average and evalb_bracketing_score metrics in distributed training.,"added spanextractorwithspanwidthembedding, putting specific span embedding computations into the _embed_spans method and leaving the common code in spanextractorwithspanwidthembedding to unify the arguments, and modified bidirectionalendpointspanextractor, endpointspanextractor and selfattentivespanextractor accordingly. now, selfattentivespanextractor can also embed span widths.",changed how gradients are zeroed out with an optimization. see this video from nvidia at around the 9 minute mark.,"when cached_path is called on a local archive with extract_archive=true, the archive is now extracted into a unique subdirectory of the cache root instead of a subdirectory of the archive's directory. the extraction directory is also unique to the modification time of the archive, so if the file changes, subsequent calls to cached_path will know to re-extract the archive.",made with material for mkdocs,"fixed a bug in distributed training where the vocab would be saved from every worker, when it should have been saved by only the local master process.",fixed a bug where beamsearch would fail if max_steps was equal to 1.,"improved the band-aid solution for segmentation faults and the ""importerror: dlopen: cannot load any more object with static tls"" by adding a transformers import.",we set a value to epoch so in case of firing trainercallback.on_end the variable is bound. this could have lead to an error in case of trying to recover a run after it was finished training.,"removed epochcallback, batchcallback in favour of trainercallback. the metaclass-wrapping implementation is removed as well.","datasetreaders are now always lazy. this means there is no lazy parameter in the base class, and the _read method should always be a generator.",fixed a stall when using distributed training and gradient accumulation at the same time,fixed typo with labelfield string representation: removed trailing apostrophe.,"added the ability to ignore certain missing keys when loading a model from an archive. this is done by adding a class-level variable called authorized_missing_keys to any pytorch module that a model uses. if defined, authorized_missing_keys should be a list of regex string patterns.",added docker builds for other torch-supported versions of cuda.,fixed a bug with the sharded dataset reader where it would only read a fraction of the instances in distributed training.,added support for a global plugins file at ~/.allennlp/plugins.,fixed division by zero error when there are zero-length spans in the input to a pretrainedtransformermismatchedindexer.,transformer toolkit to plug and play with modular components of transformer architectures.,allow the order of examples in the task cards to be specified explicitly,"created the fairness module and added four fairness metrics: independence, separation, and sufficiency.",fixed handling of some edge cases when constructing classes with fromparams where the class accepts **kwargs.,the test for distributed metrics now takes a parameter specifying how often you want to run it.,the trainercallback constructor accepts serialization_dir provided by trainer. this can be useful for logger callbacks those need to store files in the run directory.,memory usage is not logged in tensorboard during training now. consoleloggercallback should be used instead.,fixed problem with automatically detecting whether tokenization is necessary. this affected primarily the roberta sst model.,"tensorboardwriter renamed to tensorboardwriter, and removed as an argument to the gradientdescenttrainer. in order to enable tensorboard logging during training, you should utilize the tensorboardcallback instead.","changed the token, instance, and batch classes along with all field classes to ""slots"" classes. this dramatically reduces the size in memory of instances.",removed,removed,removed,removed,removed,removed,removed,removed,removed,removed,removed,removed,"ability to train on cpu with multiple processes by setting cuda_devices to a list of negative integers in your training config. for example: ""distributed"": {""cuda_devices"": }. this is mainly to make it easier to test and debug distributed training code..",our caching mechanism had the potential to introduce race conditions if multiple processes were attempting to cache the same file at once. this was fixed by using a lock file tied to each cached file.,added abstraction and demo implementation for an image augmentation module.,fixed an issue where using the from_pretrained_transformer vocabulary constructor in distributed training via the allennlp train command would result in the data being iterated through unnecessarily.,added gaussian error linear unit as an activation.,fixed a bug where pretrainedtransformerembedder parameters appeared to be trainable in the log output even when train_parameters was set to false.,fixed a bug where the reported batch_loss metric was incorrect when training with gradient accumulation.,"added a new learning rate scheduler: combinedlearningratescheduler. this can be used to combine different lr schedulers, using one after the other.","added a new learning rate scheduler: combinedlearningratescheduler. this can be used to combine different lr schedulers, using one after the other.",fixed a bug with the shardeddatasetreader when used with multi-process data loading (link,tensorboardbatchmemoryusage is converted from batchcallback into trainercallback.,"make sure weights are first loaded to the cpu when using pretrainedmodelinitializer, preventing wasted gpu memory.","added tensorboardcallback to replace the tensorboardwriter. registered as a callback under the name ""tensorboard"".",added text_key and label_key parameters to textclassificationjsonreader class.,added the ability to pass an archive file instead of a glob to shardeddatasetreader.,not specifying a cuda_device now automatically determines whether to use a gpu or not.,added an example for fields of type listfield to apply_token_indexers api docs.,fixed documentation and validation checks for fbetamultilabelmetric.,"if a transformer is not in cache but has override weights, the transformer's pretrained weights are no longer downloaded, that is, only its config.json file is downloaded.",updated contributing.md to remind reader to upgrade pip setuptools to avoid spacy installation issues.,distributed training will now automatically search for a local open port if the master_port parameter is not provided.,added a clarification to predictions_to_labeled_instances api docs for attack from json,trackepochcallback is converted from epochcallback into trainercallback.,"fixed a bug in our doc building script where markdown links did not render properly if the ""href"" part of the link ) was on a new line.",fixed an import error that happens when pytorch's distributed framework is unavailable on the system.,added support for the huggingface hub as an alternative way to handle loading files. hub downloads should be made through the hf:// url scheme.,"added a script: scripts/release_notes.py, which automatically prepares markdown release notes from the changelog and commit history.","a multitaskdataloader, with a corresponding multitaskdatasetreader, and a couple of new configuration objects: multitaskepochsampler and a multitaskscheduler .","the trainercallack.on_epoch does not fire with epoch=-1 at the start of the training. instead, trainercallback.on_start should be used for these cases.","added the file-friendly-logging flag back to the train command. also added this flag to the predict, evaluate, and find-learning-rate commands.",reg_loss is only now returned for models that have some regularization penalty configured.,"removed old tutorials, in favor of the new allennlp guide","a parameter to the datasetreader class: manual_multi_process_sharding. this is similar to the manual_distributed_sharding parameter, but applies when using a multi-process dataloader.",a method to modeltestcase for running basic model tests when you aren't using config files.,readers using the new vision features now explicitly log how they are featurizing images.,added an option to file_utils.cached_path to automatically extract archives.,fixed a bug in the calculation of rouge metrics during distributed training where the total sequence count was not being aggregated across gpus.,removed unnecessary warning about deadlocks in dataloader.,remove temporary directory when extracting model archive in load_archive at end of function rather than via atexit.,a race condition bug in distributed training caused from saving the vocab to file from the master process while other processing might be reading those files.,removed the tensorboard_writer parameter to gradientdescenttrainer. you should use the tensorboardcallback now instead.,added,added,added,added,added,added,added,added,added,added,added,added,added,added,added,added,added,added,added,added,added,added,added,added,added,added,added,added,added,added,added,added,added,added,added,added,added,added,added,added,all notable changes to this project will be documented in this file.,fix bug where pretrainedtransformertokenizer crashed with some transformers ,"added multioptimizer, which allows you to use different optimizers for different parts of your model.","add new dimension to the interpret module: influence functions via the influenceinterpreter base class, along with a concrete implementation: simpleinfluence.",the build-vocab command no longer crashes when the resulting vocab file is in the current working directory.,"turned superfluous warning to info when extending the vocab in the embedding matrix, if no pretrained file was provided",get_text_field_mask now supports padding indices that are not 0.,predictor.from_path now automatically loads plugins so that you don't have to manually import a bunch of modules when instantiating predictors from an archive path.,sanitycheckscallback runs by default from the allennlp train command. it can be turned off by setting trainer.enable_default_callbacks to false in your config.,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,added a way to avoid downloading and loading pretrained weights in modules that wrap transformers such as the pretrainedtransformerembedder and pretrainedtransformermismatchedembedder. you can do this by setting the parameter load_weights to false. see pr #5172 for more details.,"added sampler class and parameter in beam search for non-deterministic search, with several implementations, including multinomialsampler, topksampler, toppsampler, and gumbelsampler. utilizing gumbelsampler will give stochastic beam search.",fixed a regression with logging in the distributed setting. only the main worker should write log output to the terminal.,fixed the heuristics for finding embedding layers in the case of roberta. an update in the transformers library broke our old heuristic.,improved the error message for the polynomialdecay lr scheduler when num_steps_per_epoch is missing.,added a way to run a multi task model with a dataset reader as part of allennlp predict.,fixes pretrainedtransformermismatchedindexer in the case where a token consists of zero word pieces.,reduced the amount of log messages produced by allennlp.common.file_utils.,added a warning when batches_per_epoch for the validation data loader is inherited from the train data loader.,moving modelcard and taskcard abstractions into the main repository.,moving modelcard and taskcard abstractions into the main repository.,added the ability to pass an archive file instead of a local directory to vocab.from_files.,now trainer always fires trainercallback.on_end so all the resources can be cleaned up properly.,functions to turn a sequence of token indices back into tokens,"added ability to pass additional key word arguments to cached_transformers.get, which will be passed on to automodel.from_pretrained.",enforced stricter typing requirements around the use of optional types.,"added fbetamultilabelmeasure, a multi-label fbeta metric. this is a subclass of the existing fbetameasure.","added wandbcallback class for weights & biases integration, registered as a callback under the name ""wandb"".",added support for pytorch version 1.7.,makes sure tensors that are stored in tensorcache always live on cpus,fixed a bug where pretrainedmodelinitializer fails to initialize a model with a 0-dim tensor,learning rate schedulers that rely on metrics from the validation set were broken in v2.0.0. this brings that functionality back.,distributed training now automatically figures out which worker should see which instances,pass serialization_dir to model and datasetreader.,fixed a bug in textclassificationpredictor so that it passes tokenized inputs to the datasetreader in case it does not have a tokenizer.,a bug where predictor.get_gradients would return an empty dictionary if an embedding layer had trainable set to false,weights & biases callback can now work in anonymous mode .,lazy dataset readers now work correctly with multi-process data loading.,fixed the transformer tokenizer cache when the tokenizers are initialized with custom kwargs.,added a function inspect_cache to common.file_utils that prints useful information about the cache. this can also be used from the cached-path command with allennlp cached-path --inspect.,sanity checks in the gradientdescenttrainer can now be turned off by setting the run_sanity_checks parameter to false.,made it possible to instantiate trainercallback from config files.,added a build-vocab subcommand that can be used to build a vocabulary from a training config file.,support spacy v3,add optuna integrated badge to readme.md,ignore *args when constructing classes with fromparams.,predictor.capture_model_internals now accepts a regex specifying which modules to capture.,the trainercallback.on_start is fired at the start of the training.,fixed a warning from transformers when using max_length in the pretrainedtransformertokenizer.,"the allennlp test-install command now just ensures the core submodules can be imported successfully, and prints out some other useful information such as the version, pytorch version, and the number of gpu devices available.",trackepochcallback is now a epochcallback.,"added allennlp diff command to compute a diff on model checkpoints, analogous to what git diff does on two files.","if you are trying to create a heterogeneous batch, you now get a better error message.",added a way to specify extra parameters to the predictor in an allennlp predict call.,a bug where textfields could not be duplicated since some tokenizers cannot be deep-copied. see link,added support for pytorch version 1.8 and torchvision version 0.9 .,added an epochcallback to track current epoch as a model class member.,a bug where where all datasets would be loaded for vocab creation even if not needed.
Theano Release Notes :: NVIDIA Deep Learning Frameworks Documentation,"other than the right for customer to use the information in this guide with the product, no other license, either expressed or implied, is hereby granted by nvidia under this guide. reproduction of information in this guide is permissible only if reproduction is approved by nvidia in writing, is reproduced without alteration, and is accompanied by all associated conditions, limitations, and notices.",you define the runtime resources of the container by including additional flags and settings that are used with the command. these flags and settings are described in running a container.,key features and enhancements,key features and enhancements,key features and enhancements,key features and enhancements,key features and enhancements,key features and enhancements,key features and enhancements,key features and enhancements,key features and enhancements,key features and enhancements,key features and enhancements,key features and enhancements,key features and enhancements,key features and enhancements,key features and enhancements,key features and enhancements,key features and enhancements,key features and enhancements,key features and enhancements,key features and enhancements,"nvidia makes no representation or warranty that the product described in this guide will be suitable for any specified use without further testing or modification. testing of all parameters of each product is not necessarily performed by nvidia. it is customer s sole responsibility to ensure the product is suitable and fit for the application planned by customer and to do the necessary testing for the application in order to avoid a default of the application or the product. weaknesses in customer s product designs may affect the quality and reliability of the nvidia product and may result in additional or different conditions and/or requirements beyond those contained in this guide. nvidia does not accept any liability related to any default, damage, costs or problem which may be based on or attributable to: the use of the nvidia product in any manner that is contrary to this guide, or customer product designs.","the information in this guide and all other information contained in nvidia documentation referenced in this guide is provided as is. nvidia makes no warranties, expressed, implied, statutory, or otherwise with respect to the information for the product, and expressly disclaims all implied warranties of noninfringement, merchantability, and fitness for a particular purpose. notwithstanding any damages that customer might incur for any reason whatsoever, nvidia s aggregate and cumulative liability towards customer for the product described in this guide shall be limited in accordance with the nvidia terms and conditions of sale for the product.","the nvidia product described in this guide is not fault tolerant and is not designed, manufactured or intended for use in connection with the design, construction, maintenance, and/or operation of any system where the use or a failure of such system could result in a situation that threatens the safety of human life or severe physical harm or property damage . nvidia expressly disclaims any express or implied warranty of fitness for such high risk uses. nvidia shall not be liable to customer or any third party, in whole or in part, for any claims or damages arising from such high risk uses.",this theano release includes the following key features and enhancements.,this theano release includes the following key features and enhancements.,this theano release includes the following key features and enhancements.,this theano release includes the following key features and enhancements.,this theano release includes the following key features and enhancements.,this theano release includes the following key features and enhancements.,this theano release includes the following key features and enhancements.,this theano release includes the following key features and enhancements.,this theano release includes the following key features and enhancements.,this theano release includes the following key features and enhancements.,this theano release includes the following key features and enhancements.,this theano release includes the following key features and enhancements.,this theano release includes the following key features and enhancements.,this theano release includes the following key features and enhancements.,this theano release includes the following key features and enhancements.,this theano release includes the following key features and enhancements.,this theano release includes the following key features and enhancements.,this theano release includes the following key features and enhancements.,this theano release includes the following key features and enhancements.,this theano release includes the following key features and enhancements.,supports fp32 arithmetic and storage,"the partner containers are stored in the nvcr.io/partner repository. currently the partner containers are focused on deep learning or machine learning, but that doesn t mean they are limited to those types of containers.",note: we will no longer incorporate upstream changes after the 18.02 release due to the lack of upstream activity and the end of support announcement for theano.,"release 18.02 is based on cuda 9, which requires nvidia driver release 384.xx.","release 18.06 is based on cuda 9, which requires nvidia driver release 384.xx.","release 18.03 is based on cuda 9, which requires nvidia driver release 384.xx.","theano is a python library that allows you to define, optimize, and evaluate mathematical expressions involving multi-dimensional arrays efficiently.",this container image contains the complete source of the version of nvidia theano in /opt/theano. it is pre-built and installed into the /usr/local/ directories in the container image.,this container image contains the complete source of the version of nvidia theano in /opt/theano. it is pre-built and installed into the /usr/local/ directories in the container image.,this container image contains the complete source of the version of nvidia theano in /opt/theano. it is pre-built and installed into the /usr/local/ directories in the container image.,this container image contains the complete source of the version of nvidia theano in /opt/theano. it is pre-built and installed into the /usr/local/ directories in the container image.,this container image contains the complete source of the version of nvidia theano in /opt/theano. it is pre-built and installed into the /usr/local/ directories in the container image.,this container image contains the complete source of the version of nvidia theano in /opt/theano. it is pre-built and installed into the /usr/local/ directories in the container image.,this container image contains the complete source of the version of nvidia theano in /opt/theano. it is pre-built and installed into the /usr/local/ directories in the container image.,this container image contains the complete source of the version of nvidia theano in /opt/theano. it is pre-built and installed into the /usr/local/ directories in the container image.,this container image contains the complete source of the version of nvidia theano in /opt/theano. it is pre-built and installed into the /usr/local/ directories in the container image.,this container image contains the complete source of the version of nvidia theano in /opt/theano. it is pre-built and installed into the /usr/local/ directories in the container image.,this container image contains the complete source of the version of nvidia theano in /opt/theano. it is pre-built and installed into the /usr/local/ directories in the container image.,this container image contains the complete source of the version of nvidia theano in /opt/theano. it is pre-built and installed into the /usr/local/ directories in the container image.,this container image contains the complete source of the version of nvidia theano in /opt/theano. it is pre-built and installed into the /usr/local/ directories in the container image.,this container image contains the complete source of the version of nvidia theano in /opt/theano. it is pre-built and installed into the /usr/local/ directories in the container image.,this container image contains the complete source of the version of nvidia theano in /opt/theano. it is pre-built and installed into the /usr/local/ directories in the container image.,this container image contains the complete source of the version of nvidia theano in /opt/theano. it is pre-built and installed into the /usr/local/ directories in the container image.,this container image contains the complete source of the version of nvidia theano in /opt/theano. it is pre-built and installed into the /usr/local/ directories in the container image.,this container image contains the complete source of the version of nvidia theano in /opt/theano. it is pre-built and installed into the /usr/local/ directories in the container image.,this container image contains the complete source of the version of nvidia theano in /opt/theano. it is pre-built and installed into the /usr/local/ directories in the container image.,this container image contains the complete source of the version of nvidia theano in /opt/theano. it is pre-built and installed into the /usr/local/ directories in the container image.,"release 17.11 is based on cuda 9, which requires nvidia driver release 384.xx.","release 18.07 is based on cuda 9, which requires nvidia driver release 384.xx.","before you can run an ngc deep learning framework container, your docker environment must support nvidia gpus. to run a container, issue the appropriate command as explained in the running a container chapter in the nvidia containers and frameworks user guide and specify the registry, repository, and tags.",cuda basic linear algebra subroutines library 9.0.282 patch 2 which is installed by default,"release 18.08 is based on cuda 9, which requires nvidia driver release 384.xx.","you might want to pull in data and model descriptions from locations outside the container for use by theano or save results to locations outside the container. to accomplish this, the easiest method is to mount one or more host directories as docker data volumes.","release 18.05 is based on cuda 9, which requires nvidia driver release 384.xx.","release 18.01 is based on cuda 9, which requires nvidia driver release 384.xx.","release 17.12 is based on cuda 9, which requires nvidia driver release 384.xx.",you must also have access and logged into the ngc container registry as explained in the ngc getting started guide.,"release 17.10 is based on cuda 9, which requires nvidia driver release 384.xx.",supports gpuarray backend that uses newer cuda ptx compilation technology. improves both quality of generated code and processing speed.,"we are continuing to incorporate monthly theano upstream changes as well as upgrade nvidia libraries, such as cudnn, cublas, nccl, and the ubuntu os. however, we will be discontinuing container updates once the next major cuda version is released.","we are continuing to incorporate monthly theano upstream changes as well as upgrade nvidia libraries, such as cudnn, cublas, nccl, and the ubuntu os. however, we will be discontinuing container updates once the next major cuda version is released.","we are continuing to incorporate monthly theano upstream changes as well as upgrade nvidia libraries, such as cudnn, cublas, nccl, and the ubuntu os. however, we will be discontinuing container updates once the next major cuda version is released.","we are continuing to incorporate monthly theano upstream changes as well as upgrade nvidia libraries, such as cudnn, cublas, nccl, and the ubuntu os. however, we will be discontinuing container updates once the next major cuda version is released.","we are continuing to incorporate monthly theano upstream changes as well as upgrade nvidia libraries, such as cudnn, cublas, nccl, and the ubuntu os. however, we will be discontinuing container updates once the next major cuda version is released.","release 17.09 is based on cuda 9, which requires nvidia driver release 384.xx.",merged numerous upstream bug fixes and enhancements.,includes pygpu 0.7 to handle cuda devices support,"on a system with gpu support for ngc containers, the following occurs when running a container:","the method implemented in your system depends on the dgx os version installed , the specific ngc cloud image provided by a cloud service provider, or the software that you have installed in preparation for running ngc containers on titan pcs, quadro pcs, or vgpus.","the nvidia container image of theano, release 17.05, is available.","release 18.04 is based on cuda 9, which requires nvidia driver release 384.xx.",the container also includes the following:,the container also includes the following:,the container also includes the following:,the container also includes the following:,the container also includes the following:,the container also includes the following:,the container also includes the following:,the container also includes the following:,the container also includes the following:,the container also includes the following:,the container also includes the following:,the container also includes the following:,the container also includes the following:,the container also includes the following:,the container also includes the following:,the container also includes the following:,the container also includes the following:,the container also includes the following:,the container also includes the following:,the container also includes the following:,cublas 9.0.234 patch 1 as a debian file. installing patch 1 by issuing the dpkg -i /opt/cuda-cublas-9-0_9.0.234-1_amd64.deb command is the workaround for the known issue described below.,"this document describes the key features, software enhancements and improvements, any known issues, and how to run this container.","the nvidia container image of theano, release 18.01, is available.","because of the removal of the old sandbox.cuda backend in this release, the user modules that use the old backend explicitly, require porting to the gpuarray backend. for more information, see converting to the new gpu back end .",removed the old sandbox.cuda backend. all of the tests and third-party sub-modules have been converted to the new gpuarray backend.,the gpus are explicitly defined for the docker container .,"before you can pull a container from the ngc container registry, you must have docker installed. for dgx users, this is explained in preparing to use nvidia containers getting started guide.",support of volta new tensor op feature,"the nvidia container image of theano, release 17.02, is available.","the nvidia container image of theano, release 17.04, is available.","the nvidia container image of theano, release 18.06, is available.","the nvidia container image of theano, release 18.08, is available.","the nvidia container image of theano, release 17.01, is available.",issue the command for the applicable release of the container that you want. the following command assumes you want to pull the latest container.,supports recurrent neural networks ,"the nvidia container image of theano, release 17.07, is available.","the nvidia container image of theano, release 18.02, is available.","the nvidia container image of theano, release 18.05, is available.","due to minimal upstream activity, we will no longer incorporate upstream changes going forward. we will continue to upgrade nvidia libraries, such as cudnn, cublas, and nccl, as well as the ubuntu os for another half a year until we discontinue support.","the nvidia container image of theano, release 18.07, is available.","the nvidia container image of theano, release 18.03, is available.","theano master branch updates since 0.9 release, including numerous bug fixes and use of cudnn 6 dilated convolutions."
Releases | Apache Arrow,arrow-12262 - docs built and pushed with s3 and flight disabled,"this is a major release, with expanded features in the supported languages and additional integration test coverage between java and c++.",arrow-1395 - remove apis deprecated as of 0.5.0 and later versions,arrow-7578 - add support for datasets with ipc files and with multiple sources,arrow-7395 - logical or with constants is a clang warning,arrow-4789 - deprecate and and later remove arrow::io::readablefileinterface,new features and improvements,new features and improvements,new features and improvements,new features and improvements,new features and improvements,new features and improvements,new features and improvements,new features and improvements,new features and improvements,new features and improvements,new features and improvements,new features and improvements,new features and improvements,new features and improvements,new features and improvements,new features and improvements,new features and improvements,new features and improvements,new features and improvements,new features and improvements,new features and improvements,new features and improvements,new features and improvements,new features and improvements,new features and improvements,new features and improvements,new features and improvements,new features and improvements,arrow-4280 - it looks like flex and bison are required for parquet,arrow-2989 - remove deprecated apis in 0.10.0 and below,parquet-1846 - remove deprecated io classes and related functions,arrow-4004 - replace gpu with cuda,arrow-1570 - define api for creating a kernel instance from function of scalar input and output with a particular signature,arrow-3784 - array with type fails with x is not a vector,arrow-9018 - remove apis that were deprecated in 0.17.x and prior,"arrow-6392 - list_actions server rpc is not tested in test_flight.py, nor is return value validated",arrow-9583 - offset is mishandled in arithmetic and boolean compute kernels,arrow-10728 - add sql support for join with using clause,arrow-1656 - endianness macro is incorrect on windows and mac,"arrow-3190 - writeablefile is misspelled, should be renamed writablefile with deprecation for old name",arrow-7940 - unable to generate cmake build with settings other than default,arrow-4055 - fails to convert pytz.utc with versions 2018.3 and earlier,arrow-9771 - predicate pushdown improvement: treat predicates separated by and separately,arrow-10434 - debug formatting arrays with lengths greater than 10 and less than 20 produces incorrect values,arrow-2982 - the show-progress option is only supported in wget 1.16 and higher,arrow-10750 - add sql support for left and right join,arrow-4160 - add readme and executable files to parquet,arrow-1906 - creating a pyarrow.array with timestamp of different unit is not casted,arrow-3971 - remove apis deprecated in 0.11 and prior,arrow-11799 - string and binary arrays created with incorrect length from unbound iterator,arrow-11323 - computeerror) with queries with order by or group by that return no,arrow-10271 - packed_simd is broken and continued under a new project,arrow-4696 - verify release script is over optimist with cuda detection,arrow-3303 - enable example arrays to be written with a simplified json representation,arrow-10648 - prepare java codebase for source release without requiring any git tags to be created or pushed,arrow-3153 - fix broken nightly package builds introduced with recent cmake changes and orc tests,arrow-254 - remove bit type as it is redundant with boolean,arrow-1484 - implement casts between timestamps and times of different units,"this is primarily a bug fix release, but also includes some packaging and documentation improvements.",arrow-4601 - master build is broken due to missing licence for .dockerignore,arrow-8087 - order of keys with hivepartitioning is lost in resulting schema,arrow-5765 - testdictionary.validate test is crashed with release build,arrow-3912 - add support for creating and referring objects,arrow-1047 - add generalized stream writer and reader interfaces that are decoupled from io / message framing,arrow-7101 - refactor docker-compose setup and use it with github actions,arrow-10346 - default s3 region is eu-central-1 even with lang=c,arrow-9290 - add features to allow opting out of dependencies,arrow-1891 - nat date32 values are only converted to nulls if from_pandas is used,arrow-10729 - add sql support for join using implicit syntax,arrow-2805 - tensorflow import workaround not working with tensorflow-gpu if cuda is not installed,arrow-5902 - implement hash table and equals & hashcode api for dictionary encoding,arrow-6508 - add tensor and sparsetensor factory function with validations,arrow-7813 - fix undefined behaviour and and remove unsafe,arrow-8841 - add benchmark and unittest for plain spaced,arrow-2199 - follow up fixes for arrow-2019. ensure density driven capacity is never less than 1 and propagate density throughout the vector tree,arrow-5396 - ensure reader and writer support files and streams with no recordbatches,arrow-7059 - reading parquet file with many columns is much slower in 0.15.x versus 0.14.x,arrow-7247 - wheel can t be built by wget and openssl error,arrow-1752 - add gpu packages for debian and ubuntu,arrow-1889 - exclude is not available in older git versions,arrow-8270 - example flight server with tls s certificate and key is not working,arrow-5738 - osx package builds are failing with missing intrinsics,arrow-12488 - use g_memdup2 with glib 2.68 or later,arrow-262 - add a new format document for metadata and logical types for messaging and ipc / on-wire/file representations,arrow-11477 - reorganize and improve readme and vignette content,arrow-11735 - allow parquet and arrow dataset to be optional components,arrow-3228 - immutability of bytes is ignored,arrow-6929 - validatearray is out of sync with the listarray ipc specification,arrow-1213 - enable s3fs to be used with parquetdataset and reader/writer functions,arrow-6989 - assert is triggered when decimal type inference occurs on a value with out of range precision,arrow-6195 - cmake fails with file not found error while bundling thrift if python is not installed,arrow-12333 - remove jest-environment-node-debug and do not emit from typescript by default,arrow-9130 - add deprecated wrappers functions to a pyarrow/compat.py module for 1.0.0 that will be removed later,arrow-1947 - change client create and get to use buffers,"arrow-11196 - add support for mock, hdfs and s3 file systems with factory function",arrow-5380 - fix and enable ubsan for unaligned accesses.,arrow-5380 - fix and enable ubsan for unaligned accesses.,arrow-5380 - fix and enable ubsan for unaligned accesses.,arrow-4029 - define and document naming convention for internal / private header files not to be installed,"arrow-3184 - add modular build targets, all target, and require explicit target when invoking make or ninja","arrow-1408 - refactor and make ipc read / write apis more consistent, add appropriate deprecations",arrow-7528 - the pandas.datetime class and pandas.np are deprecated,arrow-11582 - write_dataset format argument default and validation could be better,arrow-4640 - add docker-compose configuration to build and test the project without pandas installed,arrow-3480 - install document for ubuntu is broken,arrow-2018 - build instruction on macos and homebrew is incomplete,arrow-6683 - add unit tests that validate cross-compatibility with pyarrow.parquet when fastparquet is installed,"arrow-7495 - remove empty concept from arrowbuf, replace with custom referencemanager",arrow-2974 - replace usages of source activate with conda activate in ci scripts,arrow-7605 - create and install static library containing all dependencies built by arrow,arrow-1539 - remove functions deprecated as of 0.7.0 and prior releases,arrow-3287 - redeclared without dllimport attribute after being referenced with dll linkage with mingw,arrow-10285 - pyarrow.orc submodule is using deprecated functionality,arrow-9472 - provide configurable metadataversion in ipc api and environment variable to set default to v4 when needed,arrow-9345 - expression with dictionary type should work with operand of value type,arrow-922 - allow flatbuffers and rapidjson to be used locally on windows,arrow-6309 - parquet tests and executables are linked statically,arrow-3129 - stop to use deprecated buildroot and group in .rpm,arrow-9395 - provide configurable metadataversion in ipc api and environment variable to set default to v4 when needed,arrow-6365 - should be able to coerce numeric to integer with schema,arrow-2687 - example usage in readme is outdated,arrow-9042 - add subtract and multiply arithmetic kernels with wrap-around behavior,arrow-11497 - pyarrow parquet writer for list does not conform with apache parquet specification,arrow-2131 - serialization test fails on windows when library has been built in place / not installed,arrow-7725 - add infrastructure for unity builds and precompiled headers,arrow-2493 - add support for pickling to buffers and arrays,arrow-6685 - s3 filestat object s base_path and type depends on trailing slash,arrow-9129 - test is failed with jpype 0.7.5,arrow-2230 - js version number is sometimes picked up,arrow-10572 - use ahash and std::collections hashmap for aggregates / distinct,arrow-5541 - cast from negative int32 to uint32 and uint64 are now safe,arrow-10639 - simplify signature of is_null and add example,"arrow-9414 - apt package includes headers for s3 interface, but no support",arrow-8919 - add dispatchbest apis to compute::function that selects a kernel that may require implicit casts to invoke,arrow-1767 - support file reads and writes over 2gb on windows,arrow-1567 - implement fill null kernels that replace null values with some scalar replacement value,arrow-7054 - add option to override displayed docs version with an environment variable,arrow-6715 - describe non-free component is needed for plasma packages in install page,arrow-9962 - conversion to pandas with index column using fixed timezone fails,arrow-7370 - old protobuf with auto detection is failed,arrow-4262 - blog post to give preview into using r and arrow with apache spark,arrow-5935 - arraybuilders with mutable type are not robustly supported,"arrow-1487 - implement casts from list<a> to list<b>, where a cast function is defined from any a to b",arrow-8008 - framework python is preferred even though not the activated one,arrow-10489 - unable to configure or make with intel compiler,arrow-10489 - unable to configure or make with intel compiler,arrow-10489 - unable to configure or make with intel compiler,arrow-976 - provide api for defining and reading parquet datasets with more ad hoc partition schemes,arrow-4351 - fail to build with static parquet,arrow-2699 - add table method that replaces a column with a new supplied column,arrow-6288 - implement typeequalsvisitor comparing vector type equals considering names and metadata,arrow-11486 - use jekyll 4 and webpack to support ruby 3.0 or later,arrow-3436 - boost version required by gandiva is too new for ubuntu 14.04,arrow-7478 - group by expression ignored unless paired with aggregate expression,arrow-11313 - size hint of iterators is incorrect,arrow-4213 - c++ and java implementations are incompatible,arrow-5594 - add support for unionarrays to take and filter,arrow-3047 - cmake downloads and builds orc even though it s installed,arrow-6449 - io tell methods are inconsistently named and untested,arrow-1376 - recordbatchstreamreader::open api is inconsistent with writer,arrow-239 - hdfsfile.read called with no arguments should read remainder of file,"arrow-887 - for backward compatibility, new unit fields must have default values matching previous implied unit","this is a minor bug release. it was motivated by arrow-1601, but see the complete changelog.",arrow-11083 - build source release and merge script is broken,arrow-1412 - add higher level api for putting and getting python objects,arrow-10378 - update take kernel with support for large lists,arrow-11293 - don t require boost and gflags with find_package,arrow-12143 - r builds should timeout and fail after some threshold and dump the output.,arrow-10734 - build and test on solaris,"arrow-1624 - follow up fixes / tweaks to compiler warnings for plasma / llvm 4.0, add to readme",arrow-4166 - add support for saving to and loading from buffer,arrow-6724 - add simpler static ctor for bufferoutputstream than the current create function,arrow-10515 - update lists of supported languages to include julia,arrow-8427 - do not ignore file paths with underscore/dot when full path was specified,arrow-10008 - pyarrow.parquet.read_table fails with predicate pushdown on categorical data with use_legacy_dataset=false,arrow-4300 - restore apache-arrow homebrew recipe and define process for maintaining and updating for releases,arrow-6271 - add example for running sql against parquet,arrow-2931 - windows builds are attempting to run linux and osx packaging tasks,arrow-4686 - only accept y or n in merge_arrow_pr.py prompts,arrow-4602 - integrate query optimizer with executioncontext,arrow-10397 - outdated and confusing comment on dictionary indices,arrow-6492 - file written with latest fastparquet cannot be read with latest pyarrow,arrow-524 - provide apis to access nested vectors and buffers,arrow-6231 - consider assigning default column names when reading csv file and header_rows=0,"arrow-2808 - add unit tests for proxymemorypool, enable new default memorypool to be constructed","arrow-10412 - cmake build fails with grpc 1.33.1, grpc_cpp_plugin-notfound: program not found or is not executable ",arrow-4110 - do not generate distinct cast kernels when input and output type are the same,arrow-11109 - add garrow_array_builder_append_empty_value and values,arrow-2756 - remove redundant imports and minor fixes in parquet tests,arrow-1048 - allow user ld_library_path to be used with source release script,arrow-12075 - add cte to list of supported features,arrow-7754 - result is slow,arrow-9101 - document encoding expected by csv and json readers,arrow-10869 - add garrow_*_sort_indices and related options,arrow-2015 - use java time and date apis instead of jodatime,arrow-11251 - make sure that devtoolset-8 is really installed + being used,arrow-11836 - target libarrow_bundled_dependencies.a is not alreay created but is already required.,arrow-8361 - add result apis to buffer methods and functions,arrow-10584 - implement sql join support using explicit join on syntax,this is a patch release fixing bugs and regressions listed in the changelog below.,arrow-398 - java file format requires bitmaps of all 1 s to be written when there are no nulls,arrow-6803 - aggregate queries are slower with new physical query plan,arrow-6625 - allow concat_tables to null or default fill missing columns,arrow-4676 - add support for debug build with mingw,arrow-9845 - serde_json is only used in tests but isn t in dev-dependencies,arrow-5626 - expression cache should consider precision and scale too,arrow-2349 - boost shared library bundling is broken for msvc,arrow-580 - c++: also provide jemalloc_x targets if only a static or shared version is found,arrow-10390 - regression can not implement custom parquetwriter because `tryclone` is not publically exported,arrow-3648 - add api to get metadata and data at the same time,arrow-6127 - add favicons and meta tags,arrow-10169 - nulls should be rendered as rather than default value when pretty printing arrays,arrow-2702 - examine usages of invalid and typeerror errors in numpy_to_arrow.cc to see if we are using the right error type in each instance,parquet-1882 - writing an all-null column and then reading it with buffered_stream aborts the process,arrow-7303 - refactor benchmarks to use new result apis,arrow-484 - add more detail about what of technology can be found in the arrow implementations to readme,arrow-6982 - add bindings for compare and boolean kernels,arrow-6982 - add bindings for compare and boolean kernels,arrow-3093 - linking errors with orc enabled,arrow-11210 - restore workflows that had been blocked by infra,arrow-1003 - hdfs and java dlls fail to load when built for windows with msvc,arrow-11269 - unable to read parquet file because of mismatch in column-derived and embedded schemas,arrow-4562 - create outgoing composite grpc::bytebuffer instead of allocating contiguous slice and copying ipcpayload into it,arrow-4511 - remove individual documents in favor of new document once all content is moved,arrow-6110 - support largelist type and add integration test with c++,arrow-3004 - builds docs for master rather than a pinned commit,arrow-10103 - add a contains kernel,arrow-972 - add test cases and basic apis for unionarray,arrow-7985 - listbuilder.finish fails if underlying value builder is empty and .reserve d,arrow-7250 - undefined symbols for stringtofloatconverter::impl with clang 4.x,arrow-4699 - json parser should not rely on null terminated buffers,arrow-3200 - add support for reading flight streams with dictionaries,arrow-3574 - fix remaining bug with plasma static versus shared libraries.,arrow-4078 - run travis job where documentation is built when docs/ is changed,arrow-1392 - implement reader and writer io interfaces for gpu buffers,arrow-7260 - ubuntu 14.04 test is failed by user defined literal,arrow-7014 - write script to verify linux wheels given local environment with conda or virtualenv,arrow-6350 - remove arrow::struct and use hash instead,arrow-3819 - update conda variant files to conform with feedstock after compiler migration,arrow-8977 - table$create with schema crashes with some dictionary index types,arrow-1523 - add helper data struct with methods for reading a validity bitmap possibly having a non-zero offset,arrow-1190 - vectorloader corrupts vectors with duplicate names,arrow-7412 - ensure that dataset code is robust to schemas with duplicate field names,arrow-11427 - arrow uses avx512 instructions even when not supported by the os,arrow-11237 - compiler error with glog and unity build enabled,arrow-8296 - ipcfileformat should support writing files with compressed buffers,arrow-7052 - datasets example fails to build with arrow_shared=off,arrow-11233 - fail to link with bundled grpc and abseil,arrow-314 - jsonscalar is unnecessary and unused.,this is a bugfix release to address a python packaging issue with zlib that resulted in bug arrow-3514.,this is a bugfix release to address a python wheel packaging issues and parquet forward compatibility problems.,arrow-11510 - add note that pip >= 19.0 is required to get binary packages,arrow-5878 - parquet reader not forward compatible for timestamps without timezone,arrow-5878 - parquet reader not forward compatible for timestamps without timezone,arrow-3188 - table.from_arrays segfaults if lists and schema are passed,arrow-5365 - add ubsan and asan into ci,arrow-5393 - add tests and example for read_parquet,arrow-11491 - support json schema inference for nested list and struct,arrow-4516 - error while creating a parquetdataset on a path without `_common_dataset` but with an empty `_tempfile`,arrow-7836 - allocate_aligned / reallocate need to initialize memory to avoid ub,arrow-3256 - file footer and message metadata is inconsistent,arrow-5861 - initial implement to convert avro record with primitive types,arrow-11480 - segmentation fault reading parquet with date filter with int96 column,arrow-10740 - remove redundant clones found by clippy,arrow-7146 - various fixes and speedups for the r docker-compose setup,arrow-12254 - limit keeps polling input after limit is reached,arrow-3658 - validation of offsets buffer is incorrect for `list\`,arrow-10043 - introduce support for distinct by partially implementing count,arrow-10147 - constructing pandas metadata fails if an index name is not json-serializable by default,arrow-5581 - provide interfaces and initial implementations for vector sorting,arrow-577 - refactor streamwriter and filewriter to have private implementations,arrow-4296 - starting plasma store with use_one_memory_mapped_file enabled crashes due to improper memory alignment,arrow-4880 - python/asv-build.sh is probably broken after cmake refactor,arrow-1091 - decimal scale and precision are flipped,arrow-9729 - error prone causes other annotation processors to not work with eclipse,arrow-2521 - refactor rust api to use traits and generics,"arrow-1004 - arrowinvalid: invalid: python object of type float is not none and is not a string, bool, or date object",arrow-7321 - failed to build with glib warning,arrow-11857 - resource temporarily unavailable when using the new dataset api with pandas,arrow-5694 - list of decimals are not supported when converting to pandas,arrow-2370 - include path is wrong on meson build,arrow-2367 - listarray has trouble with sizes greater than kmaximumcapacity,arrow-5659 - add support for finding openssl installed by homebrew,arrow-1312 - set default value to arrow_jemalloc to off until arrow-1282 is resolved,arrow-8362 - ensure that the locally generated version is used in the docker tasks,arrow-4389 - installing clang-tools in ci is failing on trusty,arrow-7904 - decide about field/schema metadata printing parameters and how much to show by default,arrow-10677 - fix bug and add tests as documentation showing supported csv parsing,arrow-991 - pyarray_simplenew should not be used with npy_datetime,arrow-11589 - add methods for modifying schemas,arrow-10464 - implement utility to convert tpc-h tbl files to csv and parquet,arrow-8263 - add documentation for supported sql functions,arrow-11599 - add function to create array with all nulls,arrow-7741 - incorporate new level generation logic in parquet write path with a flag to revert back to old logic,arrow-9254 - factor out some integer casting internals so it can be reused with temporal casts,arrow-10732 - add sql support for table/relation aliases and compound identifiers,arrow-85 - c++: memcmp can be avoided in equal when comparing with the same buffer,arrow-11053 - optimize joins with dynamic capacity for output batches,arrow-438 - concatenate table instances with equal schemas,arrow-11005 - remove indirection from take kernel and simplify interface,arrow-10710 - example flight server is broken after tokio upgrade ,arrow-260 - testvaluevector.testfixedvectorreallocation and testvariablevectorreallocation are flaky,arrow-6977 - only enable jemalloc background_thread if feature is supported,arrow-6977 - only enable jemalloc background_thread if feature is supported,arrow-9996 - dictionary is unset when calling dictionaryarray.getscalar for null values,"arrow-761 - add function to compute the total size of tensor payloads, including metadata and padding",arrow-9961 - to_timestamp function parses timestamp without timezone offset as utc rather than local,arrow-417 - c++: add equals implementation to compare chunkedarrays,arrow-11338 - bindings for quantile and median,arrow-1928 - add benchmarks comparing performance of internal::bitmapreader/writer with naive approaches,arrow-3482 - build with jemalloc by default,arrow-11204 - fix build failure with bundled grpc and protobuf,arrow-7921 - add reset method to various components and clean up comments,arrow-8903 - implement optimized unsafe take for use with selection vectors for kernel execution,arrow-6391 - add built-in methods on flightserverbase to start server and wait for it to be available,arrow-9911 - select <expression> with no from clause should produce a single row of output,arrow-2760 - remove legacy property definition syntax from parquet module and test them,arrow-3598 - plasma_store_server fails linking with gpu enabled,arrow-6342 - add pyarrow.record_batch factory function with same basic api / semantics as pyarrow.table,arrow-10454 - support creating parquetexec from externally resolved file list and schema,arrow-2690 - plasma does not follow style conventions for variable and function names,arrow-4722 - implement bitmap class to modularize handling of bitmaps,arrow-1166 - errors in struct type s example and missing reference in layout.md,arrow-8979 - implement bitmap word reader and writer,arrow-9714 - typecoercionrule not implemented for limit or sort,arrow-2570 - add support for writing parquet files with lz4 compression,arrow-12031 - infer csv timestamps columns with fractional seconds,arrow-8577 - plasmaclient::connect of cuda enabled build is always failed on no cuda device machine,arrow-6710 - add jdbc adapter test to cover cases which contains some null values,arrow-338 - refactor ipc vector loading and unloading to be based on cleaner visitor pattern,arrow-11686 - flight-test-integration-client sometimes exits by sigabrt but does not print the stack trace,arrow-305 - add compression and use_dictionary options to parquet interface,arrow-5341 - add instructions about fixing and testing for -wdocumentation clang warnings locally,arrow-7209 - tests with pandas master are failing now __from_arrow__ support landed in pandas,arrow-9656 - slightly confusing error message when unsupported type is provided to create external table,arrow-2555 - provide an option to convert on coerce_timestamps instead of error,arrow-11229 - static build is failed,arrow-251 - expose apis for getting code and message of the status,"arrow-6938 - windows wheel depends on zstd.dll and libbz2.dll, which are not bundled","arrow-6938 - windows wheel depends on zstd.dll and libbz2.dll, which are not bundled",arrow-2240 - array initialization with leading numpy nan fails with exception,arrow-9684 - fix undefined behaviour on invalid ipc / parquet input ,arrow-9684 - fix undefined behaviour on invalid ipc / parquet input ,arrow-1335 - primitivearray::raw_values has inconsistent semantics re: offsets compared with subclasses,arrow-8477 - enable reading and writing of long filenames for windows,arrow-8477 - enable reading and writing of long filenames for windows,arrow-8886 - decide and implement appropriate behaviour for array builder resize to negative size,arrow-7590 - managed files in thirdparty/ are ignored,arrow-6728 - support reading and writing date32 and date64 arrays,arrow-6728 - support reading and writing date32 and date64 arrays,"arrow-2754 - when installing pyarrow via pip, a debug build is created",arrow-7456 - add support for yyyy-mm-ddthh and yyyy-mm-ddthh:mm timestamp formats,arrow-4948 - nightly test failing with cannot assign to read only property ,arrow-1949 - add option to array.from_pandas and pyarrow.array to perform unsafe casts,arrow-3056 - indicate in nativefile docstrings methods that are part of the rawiobase api but not implemented,arrow-9037 - unable to import array with null count == -1 ,arrow-11215 - use named volumes by default for caching in docker-compose,arrow-2280 - pyarrow.array.buffers should also include the offsets,arrow-9461 - reading date32 and date64 errors - they are incorrectly converted to recordbatch,arrow-3467 - building against external double conversion is broken,arrow-10844 - join of two dataframes is not possible,arrow-6292 - add an option to build with mimalloc,arrow-7329 - allocationmanager: allow managing different types of memory other than those are allocated using netty,arrow-4383 - use the cmake s standard find features,arrow-335 - improve type apis and tostring by encapsulating flatbuffers better,arrow-5924 - it is not convenient to release a gpu object,arrow-8522 - add environment variable option to toggle whether ephemeral nodejs is installed in release verification script,arrow-4047 - document use of int96 timestamps and options in parquet docs,arrow-3804 - consider lowering required r runtime,arrow-243 - add driver option to hdfsclient to choose between libhdfs and libhdfs3 at runtime,arrow-8028 - allow duplicate field names in schemas and nested types,arrow-1070 - feather files for date/time types should be written with the physical types,arrow-2298 - add option to not consider nan to be null when converting to an integer arrow type,arrow-2514 - inferring / converting nested numpy array is very slow,arrow-7095 - better handling of unsupported filter and mutate expressions in dplyr methods,arrow-11572 - add a kernel for division by single scalar,arrow-2318 - testplasmastore.multipleclienttest is flaky in release builds,arrow-8923 - improve usability of arrow::compute::callfunction by moving execcontext* argument to end and adding default,arrow-8071 - build error with configure,arrow-7061 - filesystemdiscovery with parquetfileformat should ignore files that aren t parquet,arrow-10255 - reorganize imports and exports to be more friendly to esm tree-shaking,arrow-5486 - add binding of gandiva::functionregistry and related things,arrow-6959 - clarify what signatures are preferred for compute kernels,arrow-5343 - consider using buffer for transpose maps in dictionarytype::unify instead of std::vector,arrow-7680 - partition discovery is not working with windows path,arrow-6569 - add support for auto deployment by github actions,arrow-8881 - add large list and binary support,arrow-8039 - support using dataset api in pyarrow.parquet with a minimal parquetdataset shim,arrow-5883 - support dictionary encoding for list and struct type,arrow-1783 - convert serializedpyobject to/from sequence of component buffers with minimal memory allocation / copying,arrow-5058 - 02-source.sh generates e-mail template with wrong links,arrow-2180 - remove apis deprecated in 0.8.0 release,arrow-6181 - only allow r package to install without libarrow on linux,arrow-1879 - dask integration tests are not skipped if dask is not installed,arrow-537 - stringarray/binaryarray comparisons may be incorrect when values with non-zero length are null,arrow-7997 - schema equals method with inconsistent docs in pyarrow,arrow-8922 - implement example string scalar kernel function to assist with string kernels buildout per arrow-555,arrow-6957 - nightly r with sanitizers build fails installing dependencies,arrow-2198 - docstring for parquet.read_table is misleading or incorrect,"arrow-8821 - nested binary expression with like, notlike and not operator results in type cast error",arrow-4848 - static libparquet not compiled with -darrow_static on windows,arrow-8959 - broken build due to new benchmark crate using old api,arrow-4343 - add as complete as possible ubuntu trusty / 14.04 build to docker-compose setup,arrow-7626 - add support for version macros,arrow-6190 - define and declare functions regardless of ndebug,arrow-2165 - enhance allocatorlistener to listen for child allocator addition and removal,arrow-2835 - readat/writeat are inconsistent with moving the files position,arrow-1524 - more graceful solution for handling non-zero offsets on inputs and outputs in compute library,arrow-6302 - reading dictionary type with serialized arrow schema does not restore ordered type property,arrow-6036 - add support for skip rows and column_names csv read option,arrow-7837 - bug in basevariablewidthvector.copyfromsafe results with an index out of bounds exception,arrow-5624 - -duriparser_source=bundled is broken,arrow-7273 - non-nullable null field is allowed / crashes when writing to parquet,arrow-9640 - implement round for integers and long integers,arrow-10364 - test is failed with semver 2.13.0,arrow-5666 - underscores in partition values are dropped when reading dataset,arrow-773 - add function to create arrow::table with column appended to existing table,arrow-2321 - release verification script fails with if cmake_install_libdir is not $arrow_home/lib,arrow-8356 - support * wildcards with crossbow submit via github actions,"arrow-5583 - when the isset of a nullablevalueholder is 0, the buffer field should not be used",arrow-1019 - implement input stream and output stream with gzip codec,arrow-640 - arrow scalar values should have a sensible __hash__ and comparison,arrow-1612 - add how to install for mac os to readme,arrow-5889 - parquet backwards compat for timestamps without timezone broken,arrow-5889 - parquet backwards compat for timestamps without timezone broken,"arrow-1111 - make aligning buffers optional, and allow -1 for unknown null count",arrow-836 - test for timedelta compat with pandas,arrow-2917 - tensor requiring gradiant cannot be serialized with pyarrow.serialize,"apache arrow, arrow, apache, the apache feather logo, and the apache arrow project logo are either registered trademarks or trademarks of the apache software foundation in the united states and other countries.","apache arrow, arrow, apache, the apache feather logo, and the apache arrow project logo are either registered trademarks or trademarks of the apache software foundation in the united states and other countries.","apache arrow, arrow, apache, the apache feather logo, and the apache arrow project logo are either registered trademarks or trademarks of the apache software foundation in the united states and other countries.","apache arrow, arrow, apache, the apache feather logo, and the apache arrow project logo are either registered trademarks or trademarks of the apache software foundation in the united states and other countries.","apache arrow, arrow, apache, the apache feather logo, and the apache arrow project logo are either registered trademarks or trademarks of the apache software foundation in the united states and other countries.","apache arrow, arrow, apache, the apache feather logo, and the apache arrow project logo are either registered trademarks or trademarks of the apache software foundation in the united states and other countries.","apache arrow, arrow, apache, the apache feather logo, and the apache arrow project logo are either registered trademarks or trademarks of the apache software foundation in the united states and other countries.","apache arrow, arrow, apache, the apache feather logo, and the apache arrow project logo are either registered trademarks or trademarks of the apache software foundation in the united states and other countries.","apache arrow, arrow, apache, the apache feather logo, and the apache arrow project logo are either registered trademarks or trademarks of the apache software foundation in the united states and other countries.","apache arrow, arrow, apache, the apache feather logo, and the apache arrow project logo are either registered trademarks or trademarks of the apache software foundation in the united states and other countries.","apache arrow, arrow, apache, the apache feather logo, and the apache arrow project logo are either registered trademarks or trademarks of the apache software foundation in the united states and other countries.","apache arrow, arrow, apache, the apache feather logo, and the apache arrow project logo are either registered trademarks or trademarks of the apache software foundation in the united states and other countries.","apache arrow, arrow, apache, the apache feather logo, and the apache arrow project logo are either registered trademarks or trademarks of the apache software foundation in the united states and other countries.","apache arrow, arrow, apache, the apache feather logo, and the apache arrow project logo are either registered trademarks or trademarks of the apache software foundation in the united states and other countries.","apache arrow, arrow, apache, the apache feather logo, and the apache arrow project logo are either registered trademarks or trademarks of the apache software foundation in the united states and other countries.","apache arrow, arrow, apache, the apache feather logo, and the apache arrow project logo are either registered trademarks or trademarks of the apache software foundation in the united states and other countries.","apache arrow, arrow, apache, the apache feather logo, and the apache arrow project logo are either registered trademarks or trademarks of the apache software foundation in the united states and other countries.","apache arrow, arrow, apache, the apache feather logo, and the apache arrow project logo are either registered trademarks or trademarks of the apache software foundation in the united states and other countries.","apache arrow, arrow, apache, the apache feather logo, and the apache arrow project logo are either registered trademarks or trademarks of the apache software foundation in the united states and other countries.","apache arrow, arrow, apache, the apache feather logo, and the apache arrow project logo are either registered trademarks or trademarks of the apache software foundation in the united states and other countries.","apache arrow, arrow, apache, the apache feather logo, and the apache arrow project logo are either registered trademarks or trademarks of the apache software foundation in the united states and other countries.","apache arrow, arrow, apache, the apache feather logo, and the apache arrow project logo are either registered trademarks or trademarks of the apache software foundation in the united states and other countries.","apache arrow, arrow, apache, the apache feather logo, and the apache arrow project logo are either registered trademarks or trademarks of the apache software foundation in the united states and other countries.","apache arrow, arrow, apache, the apache feather logo, and the apache arrow project logo are either registered trademarks or trademarks of the apache software foundation in the united states and other countries.","apache arrow, arrow, apache, the apache feather logo, and the apache arrow project logo are either registered trademarks or trademarks of the apache software foundation in the united states and other countries.","apache arrow, arrow, apache, the apache feather logo, and the apache arrow project logo are either registered trademarks or trademarks of the apache software foundation in the united states and other countries.","apache arrow, arrow, apache, the apache feather logo, and the apache arrow project logo are either registered trademarks or trademarks of the apache software foundation in the united states and other countries.","apache arrow, arrow, apache, the apache feather logo, and the apache arrow project logo are either registered trademarks or trademarks of the apache software foundation in the united states and other countries.",arrow-7734 - segfault when comparing status with and without detail,arrow-983 - implement inputstream and outputstream classes for interacting with socket connections,arrow-18 - fix bug with decimal precision and scale,arrow-1907 - feather format cannot accommodate string columns containing more than a total of 2gb of data,arrow-237 - create arrow specializations of parquet allocator and read interfaces,arrow-10918 - document supported parquet features,arrow-9058 - boost download is failed,arrow-8488 - replace value_or_stop with valueorstop,arrow-8801 - memory leak on read from parquet file with utc timestamps using pandas,arrow-1287 - emulate whence argument of seek in nativefile,arrow-1128 - command to build a wheel is not properly rendered,arrow-3308 - convert r character vector with data exceeding 2gb to large type,arrow-10934 - tests are failed with fsspec-0.8.5,arrow-6264 - there is no need to consider byte order in arrowbufhasher,arrow-9986 - to_timestamp function erroneously requires fractional seconds when no timezone is present,arrow-4309 - add a docker-compose entry which builds the documentation with cuda enabled,arrow-1088 - test_unicode_filename test fails when unicode filenames aren t supported by system,arrow-6978 - add bindings for sum and mean compute kernels,arrow-9850 - defer should not be used in the loop,arrow-4220 - add buffered input and output stream asv benchmarks with simulated high latency io,arrow-10475 - arrow flight server / client cannot be initialized with ipv6 host,arrow-7488 - fix typos and broken links,arrow-3750 - pass various wrapped arrow objects created in python into r with zero copy via reticulate,arrow-5285 - gpuprocesshandle is not released when gpu object deleted,arrow-6480 - add command to generate and send e-mail report for a crossbow run,arrow-9899 - switch from box<schema> > schemaref to be consistent with the rest of arrow,the following apache committers committed contributed patches to the repository. this includes patches from apache parquet that were merged.,arrow-12433 - builds failing due to new flatbuffer release introducing const generics,arrow-5185 - add support for boost with cmake configuration file,arrow-1784 - read and write pandas.dataframe in pyarrow.serialize by decomposing the blockmanager rather than coercing to arrow format,arrow-1152 - read_tensor should work with a readable file,arrow-12248 - allow static builds to change memory allocators,arrow-8561 - stop using deprecated google::protobuf::messagelite::bytesize,arrow-3474 - extend gparquet api with get_schema and read_column,arrow-2047 - test_serialization.py uses a python executable in path rather than that used for a test run,arrow-6260 - use deploy key on travis to build and push to asf-site,arrow-9292 - update feature matrix with passing tests,arrow-9800 - min and max written to standard out when writing columns,arrow-3543 - better support for timestamp format and time zones in r,arrow-11802 - mixing of crossbeam channel and async tasks can lead to deadlock,arrow-1363 - ipc writer sends buffer layout for dictionary rather than indices,arrow-7180 - java builds are not triggered on the master branch,arrow-4282 - builder benchmark is broken,this includes patches from apache parquet that were merged.,arrow-8007 - remove unused and defunct assert_get_object_equal in plasma tests,arrow-1943 - handle setinitialcapacity for deeply nested lists of lists,arrow-6381 - bufferoutputstream::write is slow for many small writes,arrow-3871 - replace usages of c++ getvaluessafely with new methods on arraydata,arrow-3603 - can t build with vendored boost,arrow-5321 - add isnull and isnotnull for utf8 and binary types,"arrow-6915 - do not overwrite minor release version with merge script, even if not specified by committer",arrow-6878 - pa.array does not handle list of dicts with bytes keys correctly under python3,arrow-6878 - pa.array does not handle list of dicts with bytes keys correctly under python3,arrow-8515 - bitmap tostring should have an option of grouping by bytes,arrow-8515 - bitmap tostring should have an option of grouping by bytes,arrow-8167 - add support for skipping builds with skip pattern in pull request title,arrow-3408 - add option to csv reader to dictionary encode individual columns or all string / binary columns,arrow-10131 - lazily parse parquet metadata / statistics in parquetdatasetfactory and parquetfilefragment,arrow-1757 - add dictionaryarray::fromarrays alternate ctor that can check or sanitized untrusted indices,arrow-445 - c++: arrow_ipc is built before arrow/ipc/message_generated.h was generated,arrow-4873 - clarify documentation about how to use external arrow_package_prefix while also using conda dependency resolution,arrow-5093 - add support for selective binary upload,arrow-10760 - predicate push down does not support joins correctly,arrow-7647 - json reader fails to read arrays with few values,arrow-2132 - add links / mentions of plasma store to main readme,arrow-6691 - use tokio and futures instead of spawning threads,arrow-3134 - implement n-ary iterator for a collection of chunked arrays with possibly different chunking layouts,arrow-11032 - add benchmark for local rpc through unix socket,arrow-5846 - create avro adapter module and add dependencies,arrow-1753 - provide for matching subclasses with register_type in serialization context,arrow-7925 - instructions about running iwyu and other tasks in cpp/development.rst have gone stale,arrow-1186 - enable option to build arrow with minimal dependencies needed to build parquet library,arrow-9442 - do not force validate to be called in pyarrow_wrap_table,arrow-9119 - add support for building with system static grpc,arrow-3090 - accompany error messages with assertions,arrow-1933 - build failure with with-arrow-cpp-build-dir and gpu enabled arrow c++,arrow-11354 - speed-up casts of dates and times,arrow-1020 - add additional language to schema.fbs to clarify naive vs. localized timestamp values,arrow-5943 - add support for function aliases,arrow-2540 - add constructor/destructor to make sure dlfree is called automatically,arrow-7645 - arm64 build by crossbow is broken,arrow-2087 - binaries of 3rdparty are not stripped in manylinux1 base image,arrow-19 - c++: externalize memory allocations and add a memorypool abstract interface to builder classes,arrow-2726 - the latest boost version is wrong,arrow-4815 - add support for * in sql projection,arrow-7607 - add to cpp/examples minimal examples of using arrow as a dependency of another cmake project,arrow-2400 - status destructor is expensive,arrow-5366 - implement duration and interval arrays,arrow-10337 - more liberal parsing of iso8601 timestamps with fractional seconds,arrow-1498 - add contributing.md and issue_template.md,arrow-1858 - add documentation about parquet.write_to_dataset and related methods,arrow-4558 - avoid undefined behavior with grpc memory optimizations,arrow-2328 - writing a slice with feather ignores the offset,arrow-202 - integrate with appveyor ci for windows support and get arrow building on windows,arrow-8204 - add support for aliased expressions in sql,arrow-2893 - remove poolbuffer class from public api and hide implementation details behind factory functions,arrow-6120 - including some headers causes decimal_test to fail,arrow-656 - implement io interface that can read and write to a fixed-size mutable buffer,arrow-3358 - replace usages of gandiva/status.h with arrow/status.h,arrow-1663 - follow up on arrow-1347 and make schema backward compatible,arrow-6157 - unionarray with invalid data passes validation / leads to segfaults,arrow-1682 - add documentation / example for reading a directory of parquet files on s3,arrow-7926 - archery lint target is not ergonomic for running a single check like iwyu,arrow-5606 - pandas.rangeindex._start/_stop/_step are deprecated,arrow-6730 - use github actions for c++ with clang 7 docker image,arrow-3197 - add instructions to cpp/readme.md about parquet-only development and arrow+parquet,arrow-7113 - buffer should accept memory owned by others,arrow-8513 - expose take with table input in python,arrow-6608 - make default for arrow_hdfs to be off,arrow-2443 - conversion from pandas of empty categorical fails with arrowinvalid,arrow-9573 - parquet doesn t load when partitioned column starts with _ ,arrow-9573 - parquet doesn t load when partitioned column starts with _ ,arrow-2069 - document that plasma is not supported on windows,arrow-3070 - host binary artifacts for rcs and releases on asf bintray account instead of dist/mirror system,arrow-2169 - msvc is complaining about uncaptured variables,"arrow-8895 - add c++ unit tests for filter and take functions on temporal type inputs, including timestamps",arrow-4782 - prototype scalar and array expression types for developing deferred operator algebra,arrow-8796 - allow parquet to be written directly to memory,arrow-4923 - expose setters for decimal vector that take long and double inputs,arrow-6118 - replace google preconditions with arrow preconditions,arrow-212 - clarify the fact that primitivearray is now abstract class,arrow-822 - streamwriter fails to open with socket as sink,arrow-8458 - prefer the original mirrors for the bundled thirdparty dependencies,arrow-2567 - unit is ignored on comparison of timestamparrays,arrow-6839 - add apis to read and write custom_metadata field of ipc file footer,arrow-4033 - thirdparty/download_dependencies.sh uses tools or options not available in older linuxes,arrow-946 - use new instead of open for constructor name,arrow-4724 - python not being built nor test under mingw builds,arrow-10867 - build failure on aarch64 with -darrow_python=on and gcc,arrow-8693 - dataset.get_fragments is missing an implicit cast when filtering,arrow-710 - enable feather apis to read and write using python file-like objects,arrow-10305 - filter with regular expressions,arrow-11156 - create hashes vectorized in hash join,arrow-5973 - variable width vectors get methods should return null when the underlying data is null,arrow-4191 - use same cc and ar for jemalloc as for the main sources,arrow-10041 - possible to create largestringarray with datatype::utf8,arrow-8164 - let datasets be viewable with non-identical schema,"arrow-3732 - add functions to write recordbatch or schema to message value, then read back",arrow-6824 - support batched create and seal requests for small objects,arrow-9718 - make pyarrow.parquet work with the new filesystem interfaces,arrow-4332 - instructions and scripts for publishing web site appear to be incorrect,arrow-6631 - do not build with any compression library dependencies by default,arrow-9168 - allow flight benchmark to use separated tcp connections,arrow-1467 - : fix reset and allocatenew in nullable value vectors template,arrow-3793 - testscalarappendunsafe is not testing unsafe appends,arrow-2264 - efficiently serialize numpy arrays with dtype of unicode fixed length string,"arrow-1861 - fix up asv setup, add developer instructions for writing new benchmarks and running benchmark suite locally",arrow-11620 - inconsistent use of box and arc for tableprovider,arrow-9723 - expected behaviour of mode kernel with nans ?,arrow-11130 - enable all required repositories by default,arrow-1097 - reading tensor needs file to be opened in writeable mode,arrow-6853 - support vector and dictionary encoder use different hasher for calculating hashcode,arrow-2408 - it should be possible to get a &mut from builder,arrow-8088 - partition columns with specified dictionary type result in all nulls,arrow-3620 - document multithreading options in sphinx and add to api.rst,arrow-2948 - generate changelog with crossbow,arrow-2627 - add option to toggle memory mapping functionality when using parquet.parquetfile or other read entry points,arrow-10383 - fix typos and spelling,arrow-3196 - enable merge_arrow_py.py script to merge parquet patches and set fix versions,arrow-5732 - macos builds failing idiosyncratically on master with warnings from pmmintrin.h,arrow-1940 - extra metadata gets added after multiple conversions between pd.dataframe and pa.table,arrow-5372 - add support for null/boolean values csv read option,arrow-10382 - fix typos and spelling,arrow-3597 - gandiva should integrate with add_arrow_test for tests,arrow-8943 - add support for partitioning to parquetdatasetfactory,arrow-2637 - build support and instructions for development on alpine linux,arrow-4088 - table.from_batches fails when passed a schema with metadata,arrow-10477 - add support for iterators over binary arrays,arrow-11709 - move `expressions` and `inputs` into logicalplan rather than helpers in util,arrow-598 - add support for converting pyarrow.buffer to a memoryview with zero copy,arrow-1731 - provide for selecting a subset of columns to convert in recordbatch/table.from_pandas,arrow-2369 - large files written to parquet via pyarrow are corrupted,arrow-10586 - add join support to query planner,arrow-3130 - add initial support for go modules,arrow-1273 - add convenience functions for reading only parquet metadata or effective arrow schema from a particular parquet file,arrow-1605 - pyarrow.array should be able to yield smaller integer types without an explicit cast,arrow-5687 - remove remaining uses of arrow_boost_vendored,arrow-11459 - allow listarray of primitives to be built from iterator,arrow-7368 - use :arrow_file and :arrow_streaming for format name,arrow-1214 - add classes / functions to enable stream message components to be handled outside of the stream reader class,arrow-7092 - add vignette for dplyr and datasets,arrow-4787 - include null values in hash kernel actions,arrow-218 - add option to use github api token via environment variable when merging prs,arrow-7697 - add a test for updating linux packages by 00-prepare.sh,arrow-9937 - average is not correct,arrow-8370 - add result to type / schema apis,arrow-1491 - add casting implementations from strings to numbers or boolean,arrow-7263 - implement locate and position functions,arrow-10495 - find_package is broken on ubuntu 18,arrow-7830 - parquet library version doesn t change with releases,arrow-1483 - implement casts between time32 and time64,arrow-11838 - support reading ipc data with shared dictionaries,arrow-2420 - memory is never released,arrow-713 - fix linking issue with ipc benchmark,arrow-4804 - read temporal values from csv - parse date32 and date64 in csv reader,arrow-11736 - allow string compute functions to be optional,arrow-10018 - disable sphinx and api documentation build since it takes 6 hours on master,arrow-2624 - random schema and data generator for arrow conversion and parquet testing,arrow-510 - add integration tests for date and time types,arrow-5960 - boost dependencies are specified in wrong order,arrow-9753 - remove the use of mutex in executionplan trait,arrow-8985 - add byte width field with default of 16 to decimal flatbuffers type for forward compatibility,arrow-10476 - allow string array to be built from iterator of &str,arrow-5314 - incorrect printing for string arrays with offsets,arrow-10060 - mergeexec currently discards partitions with errors,arrow-4733 - add ci entry that builds without the conda-forge toolchain but with system packages,arrow-10188 - some examples are broken,arrow-10653 - : update toolchain version to bring new features,arrow-3693 - invalid buffer for empty characters with null data,arrow-1139 - dlmalloc doesn t allow arrow to be built with clang 4 or gcc 7.1.1,arrow-7167 - add nightly tests for older pandas versions to github actions,arrow-3740 - calling arraybuilder::resize with length smaller than current appended length results in invalid state,arrow-7714 - variable expansion is missing,arrow-5446 - use cmake header install directory instead of include,arrow-7311 - return filesystem and path from uri,arrow-244 - some global apis of ipc module should be visible to the outside,arrow-1113 - gflags ep build gets triggered on subsequent calls to make or ninja build,arrow-1283 - vectorschemaroot should be able to be closed more than once,arrow-8326 - don t use deprecated typed_test_case,arrow-1157 - c++/python: decimal templates are not correctly exported on osx,arrow-8791 - creating stringdictionarybuilder with existing dictionary values,arrow-10522 - allow rename table and recordbatch columns with names,arrow-5242 - arrow doesn t compile cleanly with visual studio 2017 update 9 or later due to narrowing,arrow-9009 - arrow:schema should be removed from schema s metadata when reading parquet files,arrow-8025 - implement cast to binary and fixedsizebinary,arrow-8025 - implement cast to binary and fixedsizebinary,arrow-3796 - add example for primitivearraybuilder,arrow-1507 - arrow/compute/api.h can t be used without arrow/array.h,arrow-8021 - appveyor does not appear to be including pandas in test runs,arrow-4051 - add support for null literal,arrow-10490 - fail to build with xcode 12.0.1,arrow-3511 - support input selection vectors for both projector and filter,this is a major release covering more than 2 months of development.,this is a major release covering more than 2 months of development.,"arrow-9607 - add bitwise_and, bitwise_or and bitwise_not functions for integers",arrow-3959 - time and timestamp support,arrow-11029 - document why join order optimization does not work with filter pushdown,this is a major release covering more than 1 months of development.,arrow-1275 - default static library prefix for snappy should be _static ,arrow-2973 - pitrou/asv.git@customize_commands does not work with the new way of activating conda,arrow-5769 - org.apache.arrow.flight.testtls is failed via dev/release/00-prepare.sh,arrow-318 - revise readme to reflect current state of project,arrow-5901 - implement partialeq to compare array and json values,arrow-7886 - consolidate source and dataset,arrow-4326 - development instructions in python/development.rst will not work for many linux distros with new conda-forge toolchain,arrow-7323 - nightly ci is failed by different toolchain,arrow-2960 - fix verify-release-candidate for binary packages and fix release cutting script for lib64 cmake issue,arrow-10066 - make sure that default aws region is respected,arrow-9516 - refactor physical expressions to not care about their names nor indexes,arrow-6337 - as_tibble in r api is a misnomer,arrow-5517 - header collection cmake logic should only consider filename without directory included,arrow-10797 - investigate faster random generation for tests and benchmarks,arrow-1134 - allow c++/cli projects to build with arrow,arrow-8091 - fix nightly homebrew and r failures,arrow-1377 - add function to assist with benchmarking parquet scan performance,arrow-9476 - hivepartitioning discovery with dictionary types fails for multiple fields,arrow-2820 - recordbatch.from_arrays does not validate array lengths are all equal,arrow-11300 - improve hash aggregate performance with large number of groups in,arrow-9557 - iterating over parquet columns is slow in r,arrow-434 - segfaults and encoding issues in python parquet reads,arrow-7558 - use the host owner and group for artifacts,arrow-10224 - add support for python 3.9 except macos wheel and windows wheel,arrow-4810 - add largelist type with 64-bit offsets,arrow-2682 - notify in slack about broken builds,arrow-462 - implement in-memory conversions between non-nested primitive types and dictionaryarray equivalent,arrow-3162 - enable flight servers to be implemented in pure python,"arrow-8710 - continuation marker not written correctly in ipc writer, and stream not flushed",arrow-7625 - parquet glib and red parquet do not allow specifying compression type,arrow-3731 - r api for reading and writing parquet files,arrow-5430 - can read but not write parquet partitioned on large ints,arrow-10471 - ensure we have tests with s3fs and run those on ci,arrow-8186 - dataset expression != returns bool instead of expression for invalid value,"arrow-10071 - segfault with arrowobject from previous session, or saved",arrow-8878 - try_download is confused when download.file.method isn t default,arrow-7995 - io: coalescing and caching read ranges,arrow-8224 - remove apis deprecated prior to 0.16.0,arrow-7100 - libjvm.so not found on ubuntu 19.04 with openjdk-11,arrow-5329 - add support for building matlab interface to feather directly within matlab,"arrow-8246 - add -wa,-mbig-obj when compiling with mingw to avoid linking errors",arrow-9132 - implement hash kernels for dictionary data with constant dictionaries,arrow-2046 - add support for pep519 - pathlib and similar objects,arrow-2898 - setuptools_scm just shipped a new version which fails to parse `apache-arrow-\` tag,arrow-1012 - create a configurable implementation of recordbatchreader that reads from apache parquet files,arrow-1281 - add docker setup for running hdfs tests and other tests we may not run in travis ci,this is a major release covering more than 3 months of development.,this is a major release covering more than 3 months of development.,this is a major release covering more than 3 months of development.,this is a major release covering more than 3 months of development.,this is a major release covering more than 3 months of development.,this is a major release covering more than 3 months of development.,this is a major release covering more than 3 months of development.,this is a major release covering more than 3 months of development.,arrow-1857 - add switch for boost linkage with static parquet in wheels,arrow-8448 - can t build apt packages with ubuntu-focal,arrow-1114 - create record batch builder class as a reusable and efficient way to transpose row-by-row data to columns,arrow-6634 - do not require flatbuffers or flatbuffers_ep to build,arrow-1494 - document that shared_ptr returned by recordbatch::column needs to be retained,arrow-5545 - clarify expectation of utc values for timestamps with time zones in c++ api docs,arrow-6194 - add non-static approach in dictionaryencoder making it easy to extend and reuse,arrow-374 - python: clarify unicode vs. binary in api,arrow-9412 - add non-bundled dependencies to exported install_interface_libs of arrow_static and test that it works,arrow-5428 - add option to set read extent in arrow::io::bufferedinputstream,arrow-200 - convert values string looks like it has incorrect error handling,arrow-8384 - arrow/filesystem/hdfs.h and python wrapper does not have an option for setting a path to a kerberos ticket,arrow-6460 - add benchmark and large fake data ut for avro adapter,arrow-5698 - r/dockerfile docker-compose build is broken,arrow-4315 - home page of link does not mention go or rust,arrow-5191 - expose csv and json reader schemas,arrow-4694 - detect-changes.py is inconsistent,arrow-55 - python: fix legacy python tests and add to travis ci,arrow-9091 - utilize function s default options when passing no options to callfunction for a function that requires them,arrow-10953 - validate when creating table with schema,arrow-12381 - macos wheels are built with wrong package kind,arrow-5308 - remove deprecated feather format,arrow-6437 - add aws sdk to system dependencies for macos and windows,arrow-451 - override datatype::equals for other types with additional metadata,arrow-4464 - add support for limit,arrow-11547 - nightly builds are failed by undefined variable error,arrow-6950 - add example/benchmark for reading parquet files with dataset,arrow-589 - c++: use system provided shared jemalloc if static is unavailable,arrow-3897 - add matlab support for writing numeric datatypes to a feather file,arrow-10685 - add support for join on filter pushdown optimizer,arrow-2615 - refactor introduced a bug around arrays of string,arrow-12277 - min/max are not supported for timestamp types,arrow-5328 - add shell scripts to do a full package rebuild and test locally,arrow-5336 - implement arrow::concatenate for dictionary-encoded arrays with unequal dictionaries,arrow-3160 - improve pathlib.path support in parquet and filesystem modules,arrow-3340 - support for dates and time classes,arrow-6006 - empty ipc streams containing a dictionary are corrupt,arrow-1341 - deprecate arrow::maketable in favor of new ctor from arrow-1334,arrow-9864 - pathlib.path not supported in write_to_dataset with partition columns,arrow-6937 - fix conda linux and osx wheel nightly builds,arrow-6937 - fix conda linux and osx wheel nightly builds,arrow-7784 - diff.cc is extremely slow to compile,arrow-8005 - review and adjust any usages of apache dist system from website / tools,arrow-1749 - handle range of decimal128 values that require 39 digits to be displayed,arrow-7360 - can t use dplyr filter with variables defined in parent scope,arrow-6592 - add support for skipping decoding of columns/field in avro converter,"arrow-9475 - clean up usages of baseallocator, use bufferallocator instead",arrow-6786 - arrow-dataset-file-parquet-test is slow,arrow-11260 - don t require dictionaries for reading dataset with schema-based partitioning,arrow-7254 - basevariablewidthvector#setsafe appears to make value offsets inconsistent,arrow-7415 - implement ipcformat for sources composed of ipc files,arrow-3231 - sphinx s autodoc_default_flags is now deprecated,arrow-9078 - parquet writing of extension type with nested storage type fails,arrow-1755 - add build options for msvc to use static runtime libraries,arrow-7764 - builders allocate a null bitmap buffer even if there is no nulls,arrow-1272 - add script to arrow-dist to generate and upload manylinux1 python wheels,arrow-4892 - move sql parser and planner into sql package,arrow-584 - fix compiler warnings exposed with -wconversion,arrow-1727 - expand arrow streaming format to permit new dictionaries and deltas / additions to existing dictionaries,arrow-7939 - crashes when reading parquet file compressed with snappy,arrow-11607 - error when reading table with list values from parquet,arrow-9096 - pandas roundtrip with object-dtype column labels with integer values: data type integer not understood,arrow-631 - import c api based on glib from link,arrow-1718 - implement casts from timestamp to date32/date64 and support in array.from_pandas,arrow-444 - avoid unnecessary memory copies from use of pybytes_* c apis,arrow-4116 - clarify in development.rst that virtualenv cannot be used with miniconda/anaconda,arrow-5758 - support casting decimals to varchar and vice versa,arrow-11431 - add support for the sql having clause,arrow-2827 - lz4 and zstd build may be failed in parallel build,arrow-10384 - fix typos and spelling,arrow-3064 - add option to add_arrow_test to indicate additional dependencies for particular unit test executables,arrow-7960 - add support for schema translation from parquet nodes back to arrow for missing types,arrow-8954 - ca-certificates should be listed in installation instructions,arrow-4125 - asv benchmarks fail to run if plasma extension is not built ,arrow-12495 - numpy buffer sets is_mutable_ to true but does not set mutable_data_ when the numpy array is writable,arrow-187 - decide on how pedantic we want to be about exceptions,arrow-3866 - column metadata is not transferred to tables in pyarrow,arrow-2825 - need allocatebuffer / allocateresizablebuffer variant with default memory pool,arrow-4507 - create outline and introduction for new document.,arrow-2928 - appveyor crossbow conda builds are picking up boost 1.63.0 instead of the installed version,arrow-1486 - decide if arrow::recordbatch needs to be copyable,arrow-1432 - build bundled jemalloc functions with private prefix,arrow-3009 - pyarrow.orc uses apis now prohibited in 0.10.0,arrow-4710 - new linting script skip files with cpp extension,arrow-9060 - add support for building apache arrow datasets glib with non-installed apache arrow datasets,arrow-1197 - record_batch.hpp inclusion is missing,arrow-4158 - allow maintainers to use a github api token when merging pull requests,arrow-9190 - add blog post on efforts to make building lighter and easier,arrow-3023 - use gold linker in builds if it is available,arrow-2312 - verify-release-candidate-sh must be updated to include js in integration tests,for debian,for debian,for debian,for debian,for debian,for debian,for debian,for debian,for debian,for debian,for debian,for debian,for debian,arrow-6125 - remove any apis deprecated prior to 0.14.x,arrow-4076 - schema validation and filters,arrow-3562 - disallow creation of objects with null shared_ptr,arrow-6942 - add support for parquet in pull request check by github actions,arrow-1079 - empty private directories should be ignored by parquet interface,arrow-1315 - status check of arrow::arraybuilder::finish is missing,"arrow-1774 - add view function to create zero-copy views for compatible types, if supported",arrow-3400 - add support parquet glib related linux packages,arrow-7379 - introduce schemabuilder companion class and field::iscompatiblewith,arrow-4249 - remove reference to logging.h from plasma/common.h,arrow-2297 - babel-jest is not listed as a dev dependency,"arrow-1018 - add option to create fileoutputstream, readablefile from os file descriptor",arrow-11752 - replace usage of testthat::expect_is,arrow-7736 - binary verification sometimes fails with transient error,arrow-7057 - add api to parse uri query strings,arrow-8110 - buildarrays fails if nestedtype is included,arrow-5491 - remove unecessary semicolons following macro definitions,arrow-2204 - build fails with tls error on parquet-cpp clone,arrow-7009 - refactor filter/take kernels to use datum instead of overloads,arrow-2472 - the schema and fields types should not have public attributes,arrow-12380 - add scheduler ui,"arrow-2826 - clarification needed between arraybuilder::init, resize and reserve",arrow-6247 - provide a common interface for float4 and float8 vectors,arrow-896 - add jekyll plugin for including rendered jupyter notebooks on website,arrow-3140 - plasma fails building with gpu enabled,arrow-802 - add read examples,arrow-8757 - plasma header is written in native endian,arrow-10284 - pyarrow is raising deprecation warning about filesystems on import,arrow-477 - add support for second/microsecond/nanosecond timestamps in-memory and in ipc/json layer,arrow-10767 - speed up sum kernel with nulls,arrow-6451 - add clarifications to columnar.rst about the contents of null slots in varbinary or list arrays,arrow-4270 - update xcode version and remove toolchain builds,arrow-6103 - stop using the maven release plugin,arrow-5610 - define extension type api in python to receive or send a foreign extension type,arrow-4997 - arrowstreamreader doesn t consume whole stream and doesn t implement sync read,arrow-3650 - mixed column indexes are read back as strings,arrow-6022 - support equals api in valuevector to compare two vectors equal,arrow-7618 - fix crashes or undefined behaviour on corrupt ipc input,arrow-4084 - simplify status and stringstream boilerplate,arrow-6936 - improve error message when object of wrong type is given,arrow-4117 - asv dev command fails with latest revision,arrow-12020 - adding show tables and show columns + partial information_schema support to datafusion,arrow-6210 - remove equals api from valuevector,arrow-6506 - validation of extensiontype with nested type fails,arrow-6704 - cast from timestamp to higher resolution does not check out of bounds timestamps,arrow-4896 - remove all uses of panic! from tests,arrow-7463 - fix a broken link and typos,arrow-5999 - required header files missing when built with -darrow_dataset=off,arrow-11412 - expressions not working with logical boolean operators ,arrow-11412 - expressions not working with logical boolean operators ,arrow-10988 - require cmake 3.5 or later,arrow-5817 - use pytest marks for flight test to avoid silently skipping unit tests due to import failures,arrow-824 - date and time vectors should reflect timezone-less semantics,arrow-6427 - add support for column names autogeneration csv read option,arrow-1425 - document semantic differences between spark timestamps and arrow timestamps,arrow-7348 - add api to return references of buffer of null bitmap.,arrow-8864 - add methods to table/recordbatch for consistency with data.frame,arrow-6237 - add option to set cxxflags when compiling r package with $arrow_r_cxxflags,arrow-8078 - missing links in the docs regarding field and schema datatypes,arrow-11257 - pyarrow table contains different data after writing and reloading from parquet,arrow-3214 - disable insecure warnings with mingw build,arrow-7299 - use result instead of status,arrow-574 - python: add support for nested python lists in pandas conversion,arrow-8473 - statistics support in rust/parquet readme is incorrect,arrow-1746 - add build dependencies for arch linux,arrow-4865 - support casting lists and primitives to lists,arrow-5089 - writing dictionary encoded columns to parquet is extremely slow when using chunk size,arrow-1417 - allow more generic filesystem objects to be passed to parquetdataset,arrow-1364 - ipc reader and writer specialized for gpu device memory,arrow-355 - add tests for serialising arrays of empty strings to parquet,arrow-3889 - creating schema with invalid paramaters causes segmanetation fault,arrow-5284 - replace libc with std::alloc for memory allocation,arrow-2962 - bintray descriptor files are no longer needed,arrow-6315 - make change to ensure flatbuffer reads are aligned,arrow-2220 - change default fix version in merge tool to be the next mainline release version,arrow-5651 - incorrect conversion from strided numpy array when other type is specified,arrow-7503 - rust builds are failing on master,arrow-9728 - compute nested definition and repetition for structs,arrow-6582 - arrow to r fails with embedded nuls in strings,arrow-10908 - update relevant tpch-queries with between,arrow-9197 - revamp numeric casts: faster performance and reduced binary size,arrow-689 - install header files and documents to wrong directories,arrow-11069 - parquet writer incorrect data being written when data type is struct,"arrow-2181 - add concat_tables to api reference, add documentation on use",arrow-7313 - add function for retrieving a scalar from an array slot,arrow-8862 - numericbuilder does not use memorypool passed to ctor,arrow-11790 - change plan builder signature to take vec<expr> rather than &,arrow-4592 - stop configure immediately when glib isn t available,arrow-2110 - only require pytest-runner on test commands,arrow-681 - build arrow on windows with dynamically linked boost,arrow-6709 - jdbc adapter currentindex should increment when value is null,arrow-6111 - support largevarchar and largebinary types and add integration test with c++,arrow-4547 - update python/development.rst with instructions for cuda-enabled builds,arrow-8830 - add support for tell againt not seekable gio output stream,arrow-493 - allow in-memory array over 2^31 -1 elements but require splitting at ipc / rpc boundaries,arrow-3075 - incorporate apache/parquet-cpp codebase into arrow c++ codebase and build system,arrow-10394 - binaryarray can be created from non-binary datatypes,arrow-8598 - simd_compare_op creates buffer of incorrect length when item count is not a multiple of t::lanes,arrow-1837 - unable to read unsigned integers outside signed range for bit width in integration tests,arrow-6283 - implement operator to write query results to partitioned csv,arrow-9794 - add functionality to cpu_info to discriminate between intel vs amd x86,arrow-3843 - writing parquet file from empty table created with table.from_pandas fails,arrow-4240 - documents for plasma glib and gandiva glib are missing in source archive,arrow-2889 - add optional argument to add_arrow_test cmake function to add unit test prefix,arrow-10606 - support casts to and from decimal256 type.,arrow-278 - struct type name consistency in implementations and metadata,arrow-4585 - dependency of flight c++ sources on generated protobuf is not respected,arrow-8802 - schema metadata are lost when reading a subset of columns,arrow-4849 - add docker-compose entry for testing ubuntu bionic build with system packages,arrow-7735 - conda-forge channel is missing for verifying wheels,parquet-1857 - parquetfilereader unable to read files with more than 32767 row groups,parquet-1857 - parquetfilereader unable to read files with more than 32767 row groups,arrow-5831 - migrate and improve binary release verification script,arrow-6686 - pull and push docker images to speed up the nightly builds,arrow-11373 - add example of specifying type for a column when reading csv file,arrow-7928 - example of flight server and client not working,arrow-2582 - add negate functions for decimal128,arrow-617 - time type is not specified clearly,arrow-4503 - arrowstreamreader allocates and copies data excessively,arrow-1669 - consider adding abseil to toolchain,arrow-9503 - comparison sliced arrays is wrong,arrow-3422 - add toolchain target to ensure that all required toolchain libraries are built,"arrow-5788 - use { version = , path = ../ } for arrow and parquet dependencies",arrow-2418 - list builder fails due to memory not being reserved correctly,arrow-7480 - query fails/incorrect when aggregated + grouped columns don t match the selected columns,arrow-5265 - add integration test with kartothek,arrow-4258 - safe cast fails from numpy float64 array with nans to integer,arrow-1709 - decimal.tostring is incorrect for negative scale,arrow-4175 - add support for decimal compare operators,arrow-8875 - use aws sdk setresponsestreamfactory to avoid a copy of bytes,arrow-7793 - if there is a leak the base allocator should release the excess memory to parent before throwing exception,arrow-9316 - use dataset instead of datasets ,arrow-6602 - add feature / implementation matrix,arrow-3202 - build does not succeed on alpine linux,arrow-2692 - add test for writing dictionary encoded columns to chunked parquet files,arrow-702 - fix bitvector.copyfromsafe to reallocate instead of returning false,arrow-1482 - implement casts between date32 and date64,arrow-1562 - numeric kernel implementations for add ,arrow-4664 - dcheck macro conditions are evaluated in release builds,arrow-9146 - scanning a fragment with a filter + mismatching schema shouldn t abort,arrow-416 - c++: add equals implementation to compare columns,arrow-1948 - listvector does not handle ipc with all non-null values with none set,arrow-1162 - transfer between empty lists should not invoke callback,arrow-6489 - fix merge script and readme,arrow-11009 - add environment variable to elect default usage of system memory allocator instead of jemalloc/mimalloc,arrow-4328 - make r build compatible with darrow_tensorflow=on,arrow-7987 - fix for verbose nightly builds,arrow-1704 - go example in test suite is broken,arrow-8644 - dask integration tests failing due to change in not including partition columns,arrow-10575 - rename union.rs to be cosistent with other arrays,arrow-5261 - finish implementation of scalar types for duration and interval,arrow-4498 - plasma fails building with cuda enabled,arrow-11114 - metadata serialization is broken for field class,arrow-182 - remove array::validate virtual function and make a separate method,arrow-1789 - consolidate specification documents and improve clarity for new implementation authors,arrow-9164 - provide apis for adding docstrings to arrow::compute::function classes that can be accessed by bindings,arrow-10574 - allow collections for in / not in filter ,arrow-8266 - add backup mirrors for external project source downloads,arrow-5201 - import abcs from collections is deprecated in python 3.7,arrow-1452 - make unused macro name more unique so it does not conflict with thirdparty projects,arrow-8934 - add timestamp subtract kernel aliased to int64 subtract implementation,arrow-8238 - failed to build compute tests on windows with msvc2015,arrow-7530 - do not include list of commits from pr in squashed summary message,arrow-5946 - projection push down with aggregate producing incorrect results,arrow-8877 - add csv read option struct to simplify datafusion interface,arrow-8593 - parquet file_serialize_test.cc fails to build with musl libc,arrow-3652 - categoricalindex is lost after reading back,arrow-7257 - homebrew formula is failed by openssl formula name update,arrow-6656 - implement min and max aggregate expressions,arrow-6876 - reading parquet file with many columns becomes slow for 0.15.0,arrow-6876 - reading parquet file with many columns becomes slow for 0.15.0,arrow-7015 - write script to verify macos wheels given local environment with conda or virtualenv,arrow-1459 - pyarrow fails to load partitioned parquet files with non-primitive types,arrow-3460 - add a script to rebase master on local release branch,arrow-6316 - make change to ensure flatbuffer reads are aligned,arrow-10717 - add support for right join,arrow-10801 - support sending flightdata for dictionaries with that of a recordbatch,arrow-280 - consolidate file and shared memory io interfaces,arrow-6263 - recordbatch.from_arrays does not check array types against a passed schema,arrow-6325 - wrong conversion of dataframe with boolean values,arrow-779 - raise exception if old metadata encountered,arrow-7862 - linux installation should run quieter by default,arrow-8026 - support memoryview in addition to string value types for constructing string and binary type arrays,arrow-8762 - replace gandiva s bitmapand with common implementation,arrow-1871 - appending python decimals with different scales requires rescaling,arrow-9671 - basicdecimal128 constructor interprets uint64_t integers with highest bit set as negative,arrow-5174 - implement stringer for datatypes,arrow-6661 - implement apis like slice to enhance vectorschemaroot,arrow-225 - master travis ci build is broken,arrow-8741 - keep vs2015 with for the windows wheels,arrow-8741 - keep vs2015 with for the windows wheels,arrow-10941 - document supported parquet encryption features,arrow-10585 - add join support to dataframe and logicalplan,arrow-12000 - add note about deviation from style guide on struct/classes,arrow-4095 - implement optimizations for dictionary unification where dictionaries are prefixes of the unified dictionary,arrow-2209 - partition columns are not correctly loaded in schema of parquetdataset,arrow-10704 - remove nested from expression enum,arrow-6532 - write parquet files with compression,arrow-1448 - support uploading built .deb and .rpm to bintray,arrow-4811 - an incorrect dependency leads ninja to re-evaluate steps unnecessarily on subsequent calls,arrow-87 - implement decimal schema conversion for all ways supported in parquet,arrow-7772 - unable to filter on date32 object with date64 scalar,arrow-6158 - possible to create structarray with type that conflicts with child array s types,arrow-1192 - improve splitandtransfer performance for list and union vectors,arrow-5300 - 0.13 failed to build with option -darrow_no_default_memory_pool,arrow-12169 - fix compressed file reading with an empty stream at end of file,arrow-4246 - plasmaclient.list doesn t work with cuda enabled plasma,arrow-6540 - add validate methods,arrow-9888 - executioncontext can not be shared between threads,arrow-9901 - add hand-crafted parquet to arrow reconstruction test for nested reading,arrow-9670 - closeing a doput with an ongoing read locks up the client,arrow-3206 - building with arrow_hiveserver2=on with unit tests disabled causes error,"arrow-3154 - document how to write _metadata, _common_metadata files with parquet datasets",arrow-11785 - fallback when filtering table with unsupported expression fails,arrow-2162 - decimal values with too-high precision are multiplied by 100,arrow-3885 - update version to 0.12.0 and update release instructions on wiki,arrow-6073 - decimal128builder is not reset in finish,arrow-8937 - add parse_strptime function for string to timestamp conversions using the kernels framework,arrow-12314 - pq.read_pandas with use_legacy_dataset=false does not accept columns as a set ,arrow-11880 - handle empty or null transmute args properly,arrow-9751 - extend udfs to accept more than one type per argument,arrow-8184 - use arrow-nightlies organization name on anaconda and gemfury to host the nightlies,arrow-9983 - use larger default batch size than 32k for datasets api,arrow-6142 - install instructions on linux could be clearer,arrow-2817 - enable libraries to be installed in msys2 on windows,arrow-9155 - less precise but faster default settings for archery benchmark diff ,arrow-3516 - use unsigned type for difference of pointers in parallel_memcpy,arrow-3586 - segmentation fault when converting empty table to pandas with categoricals,arrow-6182 - add note to readme about r-arrow conda installation,arrow-4052 - linker errors with glog and gflags,arrow-6633 - do not require double-conversion for default build,"arrow-394 - add integration tests for boolean, list, struct, and other basic types",arrow-1499 - consider adding option to parquet.write_table that sets options for maximum spark compatibility,arrow-11212 - use vcpkg as dependency source for manylinux and windows wheels,"arrow-7359 - don t throw error for locate function with start position exceeding string length, return 0 instead",arrow-11349 - add from_iter_values to create arrays from t instead of option<t>,arrow-5867 - add support for cast int to decimal,arrow-2515 - errors with dictionaryarray inside of listarray or other dictionaryarray,arrow-8643 - tests with pandas master failing due to freq assertion,arrow-4289 - forward ar and ranlib to thirdparty builds,arrow-10463 - better messaging for currently unsupported csv options in open_dataset,arrow-3694 - avoid superfluous string creation when logging level is disabled,arrow-3593 - ci builds failing due to github api rate limits,arrow-5071 - performs a benchmark run with archery,arrow-8299 - reusable optional parallelfor function for optional use of multithreading,arrow-2382 - list was not using memory safely,arrow-9554 - fixedwidthinplacevectorsorter sometimes produces wrong result,arrow-2649 - add std::generate-like function for faster bitmap writing,arrow-4906 - fix document to describe that sparsematrixindexcsr assumes indptr is sorted for each row,arrow-11273 - remove unsupported debian gnu/linux stretch,arrow-954 - make it possible to compile arrow with header-only boost,arrow-11322 - arrow `memory` made private is a breaking api change,arrow-11322 - arrow `memory` made private is a breaking api change,arrow-9599 - appveyor toolchain build fails because cmake detects different c and c++ compilers,arrow-9599 - appveyor toolchain build fails because cmake detects different c and c++ compilers,arrow-10068 - add bundled external project for aws-sdk-cpp,arrow-3659 - clang travis build might not actually be using clang,arrow-8785 - build the windows wheels with mimalloc enabled,arrow-6964 - expose a nested parallel option for scanner::totable,arrow-7490 - avro converter should convert attributes and props to fieldtype metadata,arrow-3373 - fix bug in which plasma store can die when client gets multiple objects and object becomes available.,arrow-3485 - examples fail with protobuf error,arrow-8151 - benchmark parquet read performance with s3file,arrow-6992 - : undefined behavior sanitizer build option fails with gcc,arrow-12279 - add test for null handling in hash join ,arrow-10701 - benchmark sort_limit_query_sql fails because order by clause specifies column index instead of expression,arrow-2197 - document undefined symbol issue and workaround,arrow-2368 - decimalvector#setbigendian is not padding correctly for negative values,arrow-1343 - ensuring encapsulated stream / ipc message sizes are always a multiple of 8,arrow-5870 - development compile instructions need to include make ,arrow-11750 - add support for project expressions,arrow-2838 - speed up null testing with pandas semantics,arrow-5919 - add nightly tests for building r-arrow with dependencies from conda-forge,arrow-294 - do not use fopen / fclose / etc. methods for memory mapped file implementation,arrow-882 - on windows statically built lib file overwrites lib file of shared build,arrow-762 - kerberos problem with pyarrow,arrow-507 - construct list container from offsets and values subarrays,arrow-8366 - need to revert recent arrow-flight build change,arrow-3285 - add arrow_cpp_build_type and arrow_cpp_build_dir meson options,arrow-11147 - parquet tests failing in nightly build with dask master,arrow-4386 - implement date and time arrays,arrow-6822 - merge_pr.py is published,arrow-3456 - reuse docker images and optimize docker-compose containers,arrow-10693 - add support for the left join,arrow-11949 - accept raw ruby objects as sort key and options,the following apache committers merged contributed patches to the repository.,the following apache committers merged contributed patches to the repository.,the following apache committers merged contributed patches to the repository.,the following apache committers merged contributed patches to the repository.,the following apache committers merged contributed patches to the repository.,the following apache committers merged contributed patches to the repository.,the following apache committers merged contributed patches to the repository.,the following apache committers merged contributed patches to the repository.,the following apache committers merged contributed patches to the repository.,the following apache committers merged contributed patches to the repository.,the following apache committers merged contributed patches to the repository.,the following apache committers merged contributed patches to the repository.,the following apache committers merged contributed patches to the repository.,"arrow-4098 - deprecate pyarrow.open_stream,open_file in favor of pa.ipc.open_stream/open_file",arrow-636 - add boost / other system requirements to c++ readme,arrow-1062 - examples use old api,arrow-10299 - support reading and writing v5 of ipc metadata,arrow-10299 - support reading and writing v5 of ipc metadata,arrow-7785 - sparse_tensor.cc is extremely slow to compile,arrow-9646 - add support for writing parquet datasets,arrow-11466 - add basicauth and bearertoken handlers for go,arrow-6219 - add api for jdbc adapter that can convert less then the full result set at a time.,arrow-9424 - disable writing files with lz4 codec,arrow-4294 - add support for evicting objects to external store,arrow-2636 - unofficial package note is missing,arrow-3289 - implement doput command for flight on client and server side,arrow-2561 - crash in cuda-test shutdown with coverage enabled,arrow-10492 - allow users to config the mapping between sql types and arrow types,arrow-2520 - ci should also build against nightly rust,arrow-9674 - parquet reader should implement send + sync,arrow-2830 - enable parallel build for deb package build again,arrow-7571 - correct minimal java version on readme,arrow-11366 - add constant folding / support boolean literal in equality expression,arrow-9778 - logical and physical schemas nullability does not match in 8 out of 20 end-to-end tests,arrow-3983 - use static boost while packaging,arrow-11357 - take primitive implementation is unsound,arrow-1203 - disallow binarybuilder to append byte strings larger than the maximum value of int32_t,arrow-9289 - remove deprecated functions,arrow-302 - add support to use the arrow file format with file-like objects,arrow-3733 - add to_string to garrowtable and garrowcolumn,arrow-1406 - harden user api for generating serialized schema and record batch messages as memoryview-compatible objects,arrow-11845 - debug implementation of date32array panics if array contains negative values,arrow-3276 - add support parquet related linux packages,arrow-10001 - add developer guide to readme,arrow-5456 - installed plasma-glib may be used on building document,arrow-13 - add pr merge tool similar to that used in parquet,arrow-10751 - add re2 to minimal build example,arrow-7461 - fix typos and spelling,arrow-2632 - arrowstreamwriter accumulates arrowblock but does not use them,arrow-3791 - add type inference for boolean values in csv files,arrow-11472 - kartothek integrations build is failing with numpy 1.20,arrow-11472 - kartothek integrations build is failing with numpy 1.20,"arrow-4422 - enforce memory limit in plasma, rather than relying on dlmalloc_set_footprint_limit",arrow-3398 - update existing builder to use mutablebuffer internally,arrow-829 - python: parquet: dictionary encoding is deactivated if column-wise compression was selected,arrow-5222 - issues with installing pyarrow for development on macos,arrow-5368 - disable jemalloc by default with mingw,arrow-4891 - zlib include directories not added,arrow-11223 - basevariablewidthvector/baselargevariablewidthvector setnull and getbuffersizefor is buggy,parquet-1655 - decimal comparisons used for min/max statistics are not correct,arrow-10814 - drop support for debian gnu/linux stretch,arrow-4658 - shared gflags is also a run-time conda requirement,arrow-3058 - feather reads fail with unintuitive error when conversion from pandas yields chunkedarray,arrow-2385 - implement to_json for field and datatype,arrow-12238 - remove trailing spaces,arrow-4855 - generate default package version based on cpp tags in crossbow.py,parquet-1878 - lz4 codec is not compatible with hadoop lz4codec,arrow-6621 - examples for datafusion are not executed in ci,arrow-10037 - workaround to force find aws sdk to look for shared libraries,arrow-10885 - optimize join build vs probe based on statistics on row number,arrow-1230 - install libraries and headers,arrow-2008 - type inference for int32 numpy arrays returns int64 and then conversion fails,arrow-1739 - fix usages of assertraises causing broken build,arrow-421 - zero-copy buffers read by pyarrow::pybytesreader must retain a reference to the parent pybytes to avoid premature garbage collection issues,arrow-9598 - spaced definition levels is not assigned correctly.,arrow-9598 - spaced definition levels is not assigned correctly.,arrow-5208 - inconsistent resulting type during casting in pa.array when mask is present,arrow-6356 - avro adapter implement enum type and nested record type,arrow-11630 - introduce partial_sort and limit option for sort kernel,arrow-6139 - build r docs site and add to arrow-site,arrow-3024 - replace usages of std::mutex with atomics in memory_pool.cc,arrow-3790 - signed to unsigned integer cast yields incorrect results when type sizes are the same,arrow-6176 - allow to subclass extensionarray to attach to custom extension type,arrow-1652 - separate vector into batchvector and compositevector,arrow-5011 - add support in the source release script for custom hash,arrow-4141 - add support for creating schema from raw ruby objects,arrow-8751 - parquetfilearrowreader should be able to read empty parquet file without error,arrow-6318 - update integration test to use generated binaries to ensure backwards compatibility,arrow-12396 - clarify serialization docstrings about deprecated status,arrow-4776 - dictionarybuilder should support bootstrapping from an existing dict type,arrow-9021 - the filesystem keyword in parquet.read_table is not documented,arrow-12300 - arrowcuda erroneously links to cuda runtime while only using cuda driver api,arrow-6180 - create inputstream that is an isolated reader of a segment of a randomaccessfile,arrow-4741 - add documentation to all classes and enable checkstyle for class javadocs,"arrow-2163 - install apt dependencies separate from built-in travis commands, retry on flakiness",arrow-6711 - consolidate filter and expression classes,arrow-2852 - mark array as sync and send,arrow-2486 - provide a docker image that contains all dependencies for development,arrow-3031 - streamline release of arrays and builders,arrow-6584 - bundle zlib again with the windows wheels,arrow-9115 - process data buffers in batch in ascii_lower / ascii_upper kernels rather than using string_view value iteration,arrow-3010 - update readme to use bundler,arrow-7506 - jmh benchmarks should be called from main methods,"arrow-9600 - when used as a crate dependency, arrow-flight is rebuilt on every invocation of cargo build","arrow-9600 - when used as a crate dependency, arrow-flight is rebuilt on every invocation of cargo build","arrow-9600 - when used as a crate dependency, arrow-flight is rebuilt on every invocation of cargo build","arrow-9600 - when used as a crate dependency, arrow-flight is rebuilt on every invocation of cargo build",arrow-5309 - add clarifications to python append methods that return new objects,arrow-11132 - use pip to install crossbow s dependencies for the comment bot,arrow-6534 - fix typos and spelling,arrow-7147 - refactor dataset s api to use result,parquet-1716 - add support for byte_stream_split encoding,arrow-306 - add option to pass cmake arguments via environment variable,arrow-722 - pandas conversions for new date and time types/metadata,arrow-918 - use garrowbuffer for read,arrow-1397 - use docker instead of vagrant,arrow-7668 - use ninja if possible to reduce build time,arrow-6664 - add option to build without sse4.2,arrow-10766 - compute nested definition and repetition for list arrays,parquet-1831 - fix crashes on invalid input ,arrow-3720 - use indices instead of indexes ,arrow-1777 - add static ctor arraydata::make for nicer syntax in places,arrow-11721 - json schema inference should return schema type instead of schemaref,arrow-10589 - : implement avx-512 bit and operation,arrow-10792 - modulararize ci for faster and smaller builds,arrow-9137 - allow to read parquet files in chunks ,arrow-693 - add json support for dictionary vectors,arrow-9448 - circular initialization between arrowbuf and baseallocator leads to null historicallog for empty buffer,arrow-11122 - add ffi for date and time,arrow-348 - cmake build type should be configurable on the command line,arrow-5026 - conda package on non windows is broken,arrow-630 - ipc unloading for booleanarray does not account for offset,arrow-4030 - use travis_terminate to halt builds when a step fails,arrow-10136 - nulls are transformed into after filtering for stringarray,arrow-1742 - c++: clang-format is not detected correct on osx anymore,arrow-10531 - better display for logical plans: graphviz and schema information,arrow-9641 - implement round for floating point and double floating point numbers,arrow-2217 - add option to use dynamic linking for compression library dependencies,arrow-10711 - remove set-env from auto-tune to work with new gha settings,arrow-9534 - implement functions for creating literal expressions for all types,arrow-9534 - implement functions for creating literal expressions for all types,arrow-9809 - logical schema = physical schema is not true,arrow-12352 - remove needless workaround for msys2,arrow-1402 - possibly deprecate public apis that use mutablebuffer,arrow-8222 - use bcp to make a slim boost for bundled build,arrow-1002 - it is not necessary to add padding after the magic header in the filewriter implementation,arrow-9179 - replace usage of iris dataset in tests,arrow-1140 - allow optional build of plasma,arrow-10446 - timezone aware pd.timestamp s are incorrectly converted to timestamp arrys,arrow-11231 - add mimalloc to linux builds,arrow-6922 - pandas master build is failing ,arrow-6922 - pandas master build is failing ,arrow-3549 - replace i64 with usize for some bit utility functions,arrow-9416 - add test cases for some datatypes,arrow-2924 - mvn release fails when an older maven javadoc plugin is installed,arrow-44 - python: implement basic object model for scalar values ,arrow-2017 - array initialization with large uint64 values fails,arrow-10724 - add labeler to when prs need rebase,arrow-6162 - do not truncate string in castvarchar_varchar when out_len parameter is zero,arrow-5660 - use the latest macos image and all homebrew based libraries,arrow-12123 - use smallvec for indices for better join performance,arrow-11389 - inconsistent comments for datatypes,arrow-575 - python: auto-detect nested lists and nested numpy arrays in pandas,arrow-11942 - if tasks are submitted quickly the thread pool may fail to spin up new threads,arrow-4878 - arrow_dependency_source=conda does not work properly with msvc,arrow-2042 - revert api change of plasma::create to output a mutablebuffer,arrow-737 - support obtaining mutable slices of mutable buffers,arrow-238 - c++: internalmemorypool::free should throw an error when there is insufficient allocated memory,"arrow-1978 - add more visible link to powered by page to front page, simplify powered by",arrow-2241 - simple script for running all current asv benchmarks at a commit or tag,arrow-2250 - plasma_store process should cleanup on int and term signals,arrow-4069 - add tests for casting from binary to utf8,arrow-5552 - make schema and field implement stringer,arrow-6017 - allow creating locations with unknown schemes,arrow-6963 - use crossbow s command to deploy artifacts from travis builds,arrow-6963 - use crossbow s command to deploy artifacts from travis builds,arrow-10079 - : benchmark and improve count_set_bits function,arrow-11730 - add implicit future constructor for convenience,arrow-1224 - clarify language around buffer padding and alignment in ipc,arrow-3204 - enable package to be made available on cran,arrow-6070 - avoid creating new schema before ipc sending,arrow-1563 - implement logical unary and binary kernels for boolean arrays,arrow-2750 - add matlab support for reading numeric types from feather files,arrow-4730 - add docker-compose entry for testing fedora build with system packages,arrow-4645 - ship gandiva with osx and windows wheels,arrow-9160 - implement string/binary contains for exact matches,arrow-9521 - csvreadoptions should allow file extension to be specified,arrow-4613 - alpine build failing as libgtestd.so is not found,arrow-476 - add integration tests for binary / varbytes type,arrow-5701 - build expressions only for the required selection vector types,arrow-2177 - remove support for specifying negative scale values in decimaltype,arrow-2185 - remove ci directives from squashed commit messages,arrow-8125 - arrow-tests target broken with ninja build,arrow-9084 - cmake is unable to find zstd target when zstd_source=system,arrow-11285 - add support for ubuntu groovy,arrow-704 - fix bad import caused by conflicting changes,arrow-652 - remove trailing f in merge script output,arrow-1034 - enable creation of binary wheels on windows / msvc,arrow-923 - generate changelog for website with jira links,arrow-7246 - wheel can t be built by ssl_st_init error,arrow-6141 - enable memory-mapping a file region that is offset from the beginning of the file,arrow-12116 - fix or ignore 1.51 clippy lints,arrow-7983 - nightly builds should be more verbose when they fail,arrow-8371 - implement and exercise sanity checks for tasks.yml,arrow-6488 - pyarrow.null equals to itself,arrow-10864 - use standard ordering for floats,arrow-6372 - casting from un-signed to signed integers not supported,arrow-5684 - add support for ubuntu 19.04,arrow-7943 - add a new level builder capable of handling nested data,arrow-8058 - provide an option to toggle validation and schema inference in filesystemdatasetfactoryoptions,"arrow-5906 - set -darrow_verbose_thirdparty_build=off in builds running in travis ci, maybe all docker-compose builds by default",arrow-657 - write and read tensors into shared memory,arrow-6020 - refactor bytefunctionhelper#hash with new added arrowbufhasher,arrow-7733 - install locally a new enough version of go for release verification script,arrow-1604 - support common type aliases in cast and various type= arguments,arrow-7289 - listtype constructor argument is redundant,arrow-94 - expand list example to clarify null vs empty list,arrow-5959 - fuzzit does not know about branch + commit hash,arrow-8441 - fix crashes on invalid input ,arrow-2864 - add deletion cache to delete objects later,arrow-7096 - add options structs for concatenation-with-promotion and schema unification,arrow-9183 - failed to build arrow-cpp with gcc 4.9.2,arrow-3789 - enable calling object in table.to_pandas to self-destruct for improved memory use,arrow-1394 - add optional extension for allocating memory on gpus,arrow-2003 - do not use deprecated kwarg in pandas.core.internals.make_block,arrow-10105 - add client option to disable certificate validation with tls,arrow-7233 - add result apis to ipc module,arrow-4981 - add support for csv data encoding conversion,arrow-3910 - set date_as_object to true in *.to_pandas as default after deduplicating logic implemented,arrow-3107 - arrow::prettyprint for column instances,arrow-11104 - add append_null/append_nulls to garrowarraybuilder and use them,arrow-2790 - buffers contain uninitialized memory,arrow-10560 - crash when creating array with string over 2gb,arrow-6220 - add api to avro adapter to limit number of rows returned at a time.,arrow-10338 - : use const fn for applicable methods,arrow-2216 - ci descriptions and envars are misleading,arrow-6558 - refactor iterator to a type erased handle,arrow-9028 - should be able to convert an empty table,arrow-4435 - add .sln file and minor .csproj fix ups,arrow-6930 - create utility class for populating vector values used for test purpose only,arrow-12015 - integrate doc-comment crate to ensure readme examples remain valid,arrow-5559 - introduce ipcoptions struct object for better api-stability when adding new options,arrow-1560 - kernel implementations for match function,arrow-2614 - remove group: deprecated in travis,arrow-11291 - implement extend for mutablebuffer ,arrow-1172 - use unique_ptr with array builder classes,arrow-9520 - can t alias an aggregate expression,arrow-5025 - wheel for windows are broken,arrow-9757 - use pub use to expose a clean public api,arrow-2741 - pa.array from np.datetime and type=pa.date64 produces invalid results,arrow-11272 - remove unsupported python 3.5 and manylinux1,arrow-6601 - improve jdbc adapter performance & add benchmark,arrow-11500 - allow bundled build script to run on solaris,arrow-8883 - enable passing tests and update spec doc,arrow-6193 - add missing require in test,arrow-9548 - test output files in tmp directory are not removed correctly,arrow-10668 - filtering does not work with .data pronoun,arrow-9062 - support to read json into dictionary type,arrow-3701 - add support for decimal operations,arrow-3850 - support maptype and structtype for enhanced pyspark integration,arrow-10149 - add support to external release of un-owned buffers,arrow-1206 - enable msvc builds to work with some compression library support disabled,arrow-7099 - disambiguate function calls in csv parser test,arrow-10392 - avoid string copy while evaluating in expression,arrow-4813 - add tests for #== and #!=,arrow-6175 - fix mapvector#getminortype and extend abstractcontainervector addorget complex vector api,arrow-9856 - add bindings for string compute functions,arrow-2094 - use toolchain libraries and protobuf_home for protocol buffers,arrow-1068 - create external repo with appveyor.yml configured for building python wheel installers,arrow-7857 - failing test with pandas master for extension type conversion,arrow-5457 - environment variable name for test is wrong,arrow-8336 - use libthrift-dev on debian 10 and ubuntu 19.10 or later,arrow-9118 - add more general boundscheck function that also checks for arbitrary lower limits in integer arrays,arrow-11958 - garrowchunkedarray: combine is missing,arrow-6371 - row to columnar conversion example mentions arrow::column in comments,arrow-10110 - add support to consume c data interface,arrow-5748 - add support for debian gnu/linux buster,arrow-3738 - add csv conversion option to parse iso8601-like timestamp strings,arrow-8460 - ubuntu focal build is failed,arrow-12227 - fix re2 and median nightly build failures,arrow-3564 - writing version 2.0 parquet format with dictionary encoding enabled,arrow-11442 - expose the logic used to interpret date/times,arrow-9124 - dfparser should consume sql query as &str instead of string,arrow-1623 - add convenience method to construct buffer from a string that owns its memory,arrow-47 - consider adding a scalar type object model,arrow-2983 - verify source release and binary artifacts in different scripts,arrow-4851 - boundschecking.java defaulting behavior for old drill parameter seems off,arrow-10949 - avoid clones in getting values of boolean arrays,arrow-4983 - unmap memory when the client is destroyed,arrow-2795 - run tensorflow import workaround only on linux,arrow-5351 - add support for take kernel functions,arrow-5351 - add support for take kernel functions,arrow-6877 - boost not found from the correct environment,arrow-6877 - boost not found from the correct environment,arrow-10769 - integration tests are failing in master,arrow-4739 - it should be possible to share a logical plan between threads,arrow-10239 - aws-sdk-cpp apparently requires zlib too,arrow-2090 - add context manager methods to parquetwriter,arrow-8612 - add garrowreadoptions and garrowwriteoptions,arrow-7010 - support lossy casts from decimal128 to float32 and float64/double,arrow-9859 - s3 filesystemfromuri with special char in secret key fails,arrow-1775 - ability to abort created but unsealed plasma objects,arrow-8399 - extend memory alignments to include other architectures,arrow-7802 - support for largebinary and largestring in the hash kernel,arrow-11766 - better handling for missing compression codecs on linux,arrow-1233 - validate cmake script resolving of 3rd party linked libs from correct location in toolchain build,arrow-801 - provide direct access to underlying buffer memory addresses in consistent way without generating garbage or large amount indirections,arrow-11999 - support parallel vector element search with user-specified comparator,arrow-11440 - add method to csvexec to get csv schema,arrow-5077 - release process should change cargo.toml to use release versions,arrow-3681 - add benchmarks for csv reader,arrow-10076 - use temporarydir for all tests that don t already use it.,arrow-10183 - create a foreach library function that runs on an iterator of futures,arrow-571 - add apis to build parquet files incrementally from arrow tables,arrow-11355 - align date type with spec,arrow-11594 - support pretty printing with nullarrays,arrow-7815 - fix crashes on corrupt ipc input ,arrow-1915 - parquet tests should be optional,arrow-8300 - documentation and changelog updates for 0.17,arrow-3839 - add ability to infer schema in csv reader,arrow-11576 - remove unused variable in example,arrow-10371 - linux system requirements check needs to support older cmake versions,arrow-4734 - add option to write a header for csv writer,"parquet-1566 - indicate if null count, distinct count are present in column statistics",arrow-5479 - use arrow_test_data instead of relative path for testing,arrow-10279 - fix verification script to align with the new macos wheel platform tags,arrow-552 - add scalar value support for dictionary type,arrow-4284 - file / stream serialization fails due to type mismatch / missing footer,arrow-8190 - allow setting ipcwriteoptions and ipcreadoptions in flight ipc message reader and writer classes,arrow-8219 - sqlparser crate needs to be bumped to version 0.2.5,arrow-485 - users are required to initialize variablelengthvectors.offsetvector before calling variablelengthvectors.mutator.getsafe,arrow-1263 - cpuinfo should be able to get cpu features on windows,arrow-8829 - implement sql parser,arrow-5143 - enable integration testing of batches with dictionaries,arrow-415 - c++: add equals implementation to compare tables,arrow-7908 - can t install package without setting libarrow_download=true,arrow-6373 - make fixedwidthbinarybuilder consistent with other primitive fixed width builders,arrow-9082 - - stream reader fail when steam not ended with 0xffffffff 0x00000000 ,arrow-4491 - remove usage of std::to_string and std::stoi,arrow-2894 - format tests broken due to recent refactor,arrow-3700 - csv parser should allow ignoring empty lines,arrow-2383 - debian packages need to depend on libprotobuf,arrow-9217 - cover 0.01% null for the plain spaced encoding/decoding benchmark,arrow-11461 - getschema does not work with java flight server,arrow-10042 - buffer equalities may be incorrect,arrow-5793 - avoid duplicate known host ssh error in dev/release/03-binary.sh,arrow-5793 - avoid duplicate known host ssh error in dev/release/03-binary.sh,arrow-1057 - fix cmake warning and msvc debug asserts,arrow-10208 - string split kernels do not propagate nulls correctly on sliced input,arrow-6866 - improve the performance of calculating hash code for struct vector,arrow-1867 - add bitvector apis from old vector class,arrow-1200 - dictionarybuilder should use signed integers for indices,arrow-10393 - : fix null value reading in jsonreader for both dictionary and stringbuilders,arrow-10099 - also allow integer partition fields to be dictionary encoded,arrow-3240 - add build instructions using meson,arrow-12235 - limit returns incorrect results when used with several small partitions,arrow-6003 - better input validation and error messaging in csv reader,arrow-6787 - decommission c++ with clang 7 and system packages travis ci job,"arrow-6917 - arrow-6917: add support for jira curation, changelog generation and commit cherry-picking for maintenance releases",arrow-3890 - creating array with explicit string type fails on python 2.7,arrow-10290 - list pop_back is not available in older cmake versions,arrow-9133 - add utf8_upper and utf8_lower,arrow-2539 - use unique_ptr instead of raw pointer,arrow-2926 - parquetwriter segfaults in example where passed schema and table schema do not match,arrow-3208 - segmentation fault when casting dictionary to numeric with nullptr valid_bitmap,arrow-4586 - remove arrow/mod.rs as it is not needed,arrow-6344 - substring does not handle multibyte characters,arrow-276 - nullable value vectors should extend basevaluevector instead of basedatavaluevector,arrow-11977 - add documentation examples for sort kernel,arrow-4727 - implement ability to check if two schemas are the same,arrow-4414 - stop using cmake command_expand_lists because it breaks package builds for older distros,arrow-6172 - provide benchmarks to set intvector with different methods,arrow-1359 - add parquet writer option to normalize field names for use in spark,arrow-9463 - the writer is double closed in testreadwrite,arrow-453 - add filesystem implementation for amazon s3,arrow-10268 - support writing dictionaries to ipc file and stream,arrow-11290 - address hash aggregate performance with high number of groups,arrow-733 - change name of fixed width binary to fixed size binary for consistency,arrow-6910 - pyarrow.parquet.read_table takes up lots of memory which is not released until program exits,arrow-6910 - pyarrow.parquet.read_table takes up lots of memory which is not released until program exits,arrow-8560 - docs for mutablebuffer resize are incorrect,arrow-1455 - add dockerfile for validating dask integration outside of usual ci,arrow-3012 - installation crashes with setuptools_scm error,arrow-7264 - rangeequalsvisitor type check is not correct,arrow-3891 - remove long.bitcount with simple bitmap operations,arrow-1399 - add cuda build version in a public header to help prevent abi conflicts,arrow-2170 - construct_metadata fails on reading files where no index was preserved,arrow-9304 - add appendemptyvalue builder apis for use inside structbuilder::appendnull,arrow-6565 - intermittent test failure due to temp dir already existing,arrow-7460 - improve some kernels with autovectorisation,arrow-7761 - add s3 support to fs::filesystemfromuri,arrow-7204 - in expression should not require exact type match,arrow-8115 - conversion when mixing nat and datetime objects not working,arrow-6394 - support conversions between delta vector and partial sum vector,arrow-3262 - implement __getitem__ with integers on pyarrow.column,arrow-10027 - incorrect null column returned when using a dataset filter expression.,arrow-5920 - support sort & compare for all variable width vectors,arrow-381 - simplify primitive array type builders to use a default type singleton,arrow-10642 - can t get table from recordbatchreader with 0 batches,arrow-10759 - implement support for casting string to date in sql expressions,arrow-4693 - build boost library with multi precision,arrow-10696 - investigate a bit run reader that would only return runs of set bits,arrow-8330 - the post release script generates the documentation with a development version,arrow-7069 - replace constantpartitionscheme with prefixdictionarypartitionscheme,arrow-7149 - remove experimental status on filesystem apis,arrow-3798 - add support for column type csv read options,arrow-8788 - array builders to use bit-packed buffer builder rather than boolean array builder for validity map,arrow-6040 - dictionary entries are required in ipc streams even when empty,arrow-597 - add convenience function to yield dataframe from any object that a streamreader or filereader can read from,arrow-2384 - rust: use traits rather than defining methods directly,arrow-5203 - add support for compare filter,arrow-3865 - add double-conversion dependency to conda forge recipes and the windows wheel build,arrow-12200 - export and document list_compute_functions,arrow-5471 - array offset is ignored in gandiva projector,arrow-2560 - the rust readme should include rust-specific information on contributing,arrow-10204 - test failure in aggregate_grouped_empty with simd feature enabled,arrow-2268 - remove md5 checksums from release process,arrow-1239 - issue with current version of git-commit-id-plugin,arrow-5398 - flight tests broken by uri changes,arrow-7915 - run tests with python development mode enabled,arrow-11430 - kernel to combine two arrays based on boolean mask,arrow-1100 - add mode property to nativefile instances,"arrow-494 - when memorymappedfile is destructed, memory is unmapped even if buffer referecnes still exist",arrow-8425 - add support for writing temporal types,arrow-1409 - use for page attribute in buffer in metadata,arrow-1094 - incomplete buffer reads in arrow::io::readablefile should exactly truncate returned buffer,arrow-12330 - restore values in counters column of archery benchmark,arrow-2612 - fix deprecated plasma_default_release_delay,arrow-7759 - add csvfileformat for csv support,arrow-256 - add versioning to the arrow spec.,arrow-6049 - support using array::view from compatible dictionary type to another,arrow-11220 - df implement group by support for boolean,arrow-9799 - implementation of physical binary expression get_type method is incorrect,arrow-5726 - implement a common interface for int vectors,arrow-4549 - can t build benchmark code on cuda enabled build,arrow-11490 - bm_arrowbinarydict/encodelowlevel is not deterministic,arrow-6844 - list columns read broken with 0.15.0,arrow-6844 - list columns read broken with 0.15.0,arrow-8630 - pass schema including all materialized fields to catch csv edge cases,the following apache committers committed contributed patches to the repository.,the following apache committers committed contributed patches to the repository.,the following apache committers committed contributed patches to the repository.,arrow-11387 - arrow 3.0.0 release with simd feature doesn t compile without feature=avx512.,arrow-8203 - dotnet pack is failed,arrow-2895 - ci isn t ran when c++ is changed,arrow-10283 - python deprecation warning for py_ssize_t_clean will be required for # formats ,arrow-8206 - minor fix for backwards compatibility on linux installation,arrow-1108 - check if arrowbuf is empty buffer in getactualconsumedmemory and getpossibleconsumedmemory,arrow-5909 - optimize bytefunctionhelpers equals & compare logic,"arrow-7111 - add take support for garrowtable, garrowchunkedarray, and garrowrecordbatch",arrow-4431 - build grpc as externalproject without allowing it to build its vendored dependencies,arrow-4070 - arrow_boost_vendored doesn t work properly with ninja build,arrow-7276 - add support for building arrow::listarray from ],arrow-1289 - add pyarrow_build_plasma option like parquet,arrow-8708 - utilize github actions cache for docker-compose volumes,arrow-7328 - github actions should trigger on changes to github actions configuration,arrow-9678 - improve projection push down to remove unused columns,arrow-1388 - add table.drop method for removing columns,arrow-10428 - add support for http cookies,arrow-7464 - refine cpuinfo singleton with std::call_once,arrow-10021 - support finding nth frequently used value in mode kernel,arrow-751 - rename all cython extensions to private status with leading underscore,arrow-5562 - parquet writer does not handle negative zero correctly,arrow-8926 - improve docstrings in new public apis in arrow/compute and fix miscellaneous typos,arrow-8342 - dask and kartothek integration tests are failing,arrow-1754 - fix buggy parquet roundtrip when an index name is the same as a column name,arrow-66 - maybe some missing steps in installation guide,arrow-7631 - return zero if there is an overflow while converting a decimal to a lower precision/scale,"arrow-5510 - feather v2 based on arrow ipc file format, with compression support",arrow-12037 - support catalogs and schemas for table namespacing,arrow-3306 - objects and support functions different kinds of arrow::buffer,arrow-7249 - release test fails in master due to new arrow-flight rust crate,arrow-9777 - implement ipc changes to catch up to 1.0.0 format,arrow-5023 - default value syntax in shell is wrong,arrow-9402 - add portable wrappers for __builtin_add_overflow and friends,arrow-9402 - add portable wrappers for __builtin_add_overflow and friends,arrow-12303 - use iterators instead of generators in critical code paths,arrow-10753 - negative numbers in sql where clause not parsed correctly,arrow-4449 - convert file to t: read + seek for schema inference,arrow-8984 - revise install guides now that windows conda package exists,arrow-1993 - add function for determining implied arrow schema from pandas.dataframe,arrow-7716 - use the main component for ubuntu 19.10,arrow-2516 - appveyor build matrix should be specific to the changes made in a pr,arrow-4748 - group by performance could be optimized,arrow-11850 - garrow_version_0_16 macro is missing,arrow-5474 - document required boost version,arrow-7274 - add result apis to decimal class,arrow-11984 - implement sha1 and sha256 functions,arrow-11200 - physical operators and expressions should have public accessor methods,arrow-6674 - fix or ignore the test warnings,arrow-1930 - implement slice for chunkedarray and column,arrow-11832 - handle conversion of extra nested struct column,arrow-11221 - df implement group by support for float32/float64,arrow-7027 - pa.table returns instead of raises error if passing invalid object,arrow-2120 - add possibility to use empty _msvc_static_lib_suffix for thirdparties,arrow-967 - support initializing array with buffer,arrow-4130 - offset not used when accessing binary array,arrow-3584 - add support for table,arrow-2799 - add safe option to table.from_pandas to avoid unsafe casts,arrow-9992 - refactor python to arrow conversions based on a reusable conversion api,arrow-2412 - add nested dictionary integration test,arrow-10144 - add support for using the tls_sni extension,arrow-2543 - ci should cache dependencies for faster builds,arrow-11742 - add expr::is_null and expr::is_not_null functions,arrow-7062 - parquet file parse error messages should include the file name,arrow-3535 - pip install tensorflow install too new numpy in manylinux1 build,arrow-3026 - only run plasma python unit tests under valgrind once instead of twice in ci,arrow-1384 - add convenience function for serializing a record batch to an ipc message,arrow-5741 - make numeric vector from functions consistent with typedarray.from,arrow-6905 - nightly builds on macos are failing because of brew compile timeouts,arrow-6905 - nightly builds on macos are failing because of brew compile timeouts,arrow-5134 - run nightly tests against multiple r versions,arrow-1969 - do not build orc adapter by default,arrow-2769 - deprecate and rename add_metadata methods,arrow-2871 - array.to_numpy is invalid for boolean arrays,arrow-4731 - add docker-compose entry for testing ubuntu xenial build with system packages,arrow-3083 - version in manylinux1 wheel builds is wrong,arrow-4903 - building tests using only static libs not possible,arrow-4207 - add support for ifnode,arrow-3883 - update rust readme to reflect new functionality,arrow-8106 - builds on master broken by pandas 1.0.2 release,arrow-4672 - clang-7 matrix entry is build using gcc,arrow-4732 - add docker-compose entry for testing debian testing build with system packages,arrow-10396 - expose sliceablecursor and filesource,arrow-7546 - use new implementation to concat vectors values in batch,arrow-8789 - add separate crate for integration test binaries,arrow-7338 - improve inmemorydatasource to support generator instead of static list,arrow-11568 - mode kernel performance is bad in some conditions,arrow-7253 - fix master failure with release test,arrow-9234 - add support for dictionary memo on reading record batch from buffer,arrow-5939 - add support for generating vote email template separately,arrow-5939 - add support for generating vote email template separately,arrow-9126 - trimmed boost bundle fails to build on windows,arrow-8727 - do not require struct-initialization of stringconverter<t> to parse strings to other types,arrow-6871 - enhance transferpair related parameters check and tests,arrow-11753 - add test for join statement: schema contains duplicate unqualified field name,arrow-7766 - windows py38 wheels are built with wrong abi tag,arrow-10047 - conda integration tests failing with cmake error,arrow-5403 - test failures not propagated in windows shared builds,arrow-3770 - validate or add option to validate arrow::table schema in parquet::arrow::filewriter::writetable,arrow-6476 - travis java all-jdks job is broken,arrow-1021 - add documentation about using pyarrow from other cython and c++ projects,arrow-4657 - gbenchmark should not be needed for verification,arrow-3166 - consolidate io interfaces used in arrow/io and parquet-cpp,arrow-10568 - parquet writer crashes process when tell does not succeed,arrow-7258 - fuzzit job is failed by nonexistent directory,arrow-2530 - out-of-source build is failed,parquet-1865 - failure from c++17 feature used in parquet/encoding_benchmark.cc,arrow-3234 - link order is wrong when arrow_orc=on and arrow_protobuf_use_shared=on,arrow-7615 - ensure that the gandiva_jni library has only a whitelisted set of shared dependencies as part of travis ci job,arrow-2452 - spark integration test fails with permission error,arrow-3146 - barebones flight rpc server and client implementations,arrow-11501 - endianness check does not work on solaris,arrow-9122 - adapt ascii_lower/ascii_upper bulk transforms to work on sliced arrays,arrow-10366 - remove collect from merge,arrow-6669 - implement physical expression for binary expressions,arrow-5776 - revert template to have commit ids.,arrow-9889 - datafusion cli: create external table errors with unsupported logical plan variant ,arrow-245 - clarify arrow s relationship with big endian platforms,arrow-6336 - clarify pyarrow.serialize/deserialize docstrings viz-a-viz relationship with arrow ipc protocol,arrow-7333 - remove duplicated nightly job,arrow-10182 - add basic continuation support to futures,arrow-7036 - version up orc to avoid compile errors,arrow-1665 - support more custom datatypes in the default serialization context,arrow-2415 - fix using references in pattern matching,arrow-4105 - add rust-toolchain to enforce user to use nightly toolchain for building,arrow-1863 - pyobjectstringify could render bytes-like output for more types of objects,arrow-6688 - include s3 support in the conda packages,arrow-10749 - incorrect string format for datum with the collection type,arrow-12367 - stop producing when pushgenerator was destroyed,arrow-8325 - stop including boost in r windows bundle,arrow-1513 - c++: add cast from dictionary to plain arrays,arrow-5461 - add micro-benchmarks for float8vector and allocators,arrow-10803 - support r >= 3.3 and add ci,arrow-1580 - instructions for setting up nightly builds on linux,arrow-4138 - setuptools_scm customization does not work for versions above 0.9.0 on windows,arrow-3836 - add prefix option to add_arrow_benchmark,arrow-6604 - add support for nested types to makearrayfromscalar,arrow-4188 - there should be a readme in the top level rust directory,arrow-2113 - incomplete classpath with hadoop contained in it can fool the classpath setting hdfs logic,arrow-7175 - add a security page to track when vulnerabilities are patched,arrow-9853 - implement take kernel for dictionary arrays,arrow-413 - date type is not specified clearly,arrow-7559 - possibly incorrect index check assertion in stringarray and binaryarray,arrow-4540 - add basic json reader,arrow-7048 - support for combining multiple vectors under vectorschemaroot,arrow-70 - c++: add lite dcheck macros used in parquet-cpp,arrow-6524 - nightly build report s subject should contain arrow,arrow-9010 - framework and interface changes for recordbatch ipc buffer compression,arrow-3519 - add support for functions that can return variable len output,arrow-6692 - update examples to use physical query plan,arrow-7391 - remove unnecessary classes from the binding layer,arrow-4643 - add compiler diagnostic color when using ninja,arrow-9451 - unsigned integer types will accept string values in pyarrow.array,arrow-1946 - add apis to decimal vector for writing big endian data,arrow-10119 - fix parquet crashes on invalid input ,arrow-12405 - fix apt artifact patterns and artifact uploading from travis,arrow-3019 - use bundler to verify arrow glib,arrow-10109 - add support to produce a c data interface,arrow-6279 - add table.slice method or allow slices in __getitem__,arrow-6060 - too large memory cost using pyarrow.parquet.read_table with use_threads=true,arrow-1800 - fix and simplify random_decimals,arrow-3985 - pass -c option when compiling with ccache to avoid some warnings,arrow-545 - ignore files without .parq or .parquet prefix when reading directory of files,arrow-1379 - maven dependency issues - both unused and undeclared,arrow-1371 - add powered by page to the website,arrow-9713 - remove explicit panics,arrow-7565 - add support for download url redirect,arrow-4128 - update style guide to reflect some more exceptions,arrow-3982 - allow binary input in simple json format,arrow-9654 - add an explain command to the datafusion cli,arrow-4704 - plasma test is flaky,arrow-4193 - add support for decimal data type,arrow-350 - add kerberos support to hdfs shim,arrow-4532 - varchar value buffer much larger than expected,arrow-1721 - support null mask in places where it isn t supported in numpy_to_arrow.cc,arrow-5497 - build and publish r/java/js docs,arrow-10139 - add support for building arrow_testing without building tests,arrow-7639 - cannot convert dictionary array to r when values aren t strings,arrow-7828 - remove ssh keys for internal use,arrow-9193 - add method to parse date from null-terminated string,arrow-8904 - fix usages of deprecated c++ apis related to child/field,arrow-4254 - gandiva tests fail to compile with boost in ubuntu 14.04 apt,arrow-1423 - create non-owned cudacontext from context handle provided by thirdparty user,arrow-9887 - add support for complex return types of built-in functions,arrow-7907 - conversion to pandas of empty table with timestamp type aborts,arrow-5414 - using ninja build system generator overrides default release build type on windows,arrow-6960 - add support for more compression codecs in windows build,arrow-2251 - destroying garrowbuffer while garrowtensor that uses the buffer causes a crash,arrow-4566 - add option to run arrow-flight-benchmark against a perf server running on a different host,arrow-475 - high level support for reading directories of parquet files from supported file system interfaces,arrow-3363 - add helper functions to detect scalar python types,arrow-7666 - always use ninja to reduce build time,arrow-10195 - add string struct extract kernel using re2,arrow-2028 - extra_cmake_args needs to be passed through shlex.split,arrow-11332 - use mutablebuffer in take_string instead of vec,arrow-8481 - provide an allocation manager based on unsafe api,arrow-10206 - add client option to disable server validation,arrow-6313 - tracking for ensuring flatbuffer serialized values are aligned in stream/files.,arrow-5516 - development page for pyarrow has a missing dependency in using pip,arrow-5171 - use less instead of lower in compare enum option.,arrow-6423 - pyarrow.compressedoutputstream never completes with compression= snappy ,arrow-301 - add some form of user field metadata to ipc schemas,arrow-3488 - separate crossbow task definition files for packaging and tests,arrow-10319 - add context to client auth handler functions for flight,arrow-5472 - add warning to pr merge tool if no jira component is set,arrow-11365 - implement parsers for v2 of the text schema,arrow-6800 - add cmake option to build libraries targeting a c++14 or c++17 toolchain environment,arrow-10363 - remove workaround for cmake bug in manylinux,arrow-10237 - duplicate values in a dictionary result in corrupted parquet,arrow-6170 - docker-compose build r is slow,arrow-2863 - add context manager apis to recordbatch*writer/reader classes,arrow-9811 - unchecked floating point division by 0 should succeed,arrow-782 - change struct to class for objects that meet the criteria in the google style guide,arrow-4265 - automatic conversion between table and std::vector<std::tuple<.. ,arrow-8107 - use https for llvm apt repository for debian gnu/linux stretch,arrow-4847 - add pyarrow.table factory function that dispatches to various ctors based on type of input,arrow-9969 - recordbatchbuilder yields invalid result with dictionary fields,arrow-6089 - implement parallel execution for selection,arrow-4239 - updating .deb package names in the prepare script failed to run on osx,arrow-6396 - add resolvenulloptions to logical kernels,arrow-3566 - clarify that the type of dictionary encoded field should be the encoded type,arrow-2643 - travis-ci build failure with cpp toolchain enabled,arrow-3955 - add to free when no longer needed,arrow-9981 - allow configuring flight ipc with ipcwriteoptions,arrow-995 - 0.3 release announce has a typo in reference,arrow-2717 - postfix conda artifacts with target arch,arrow-3006 - .gir/.typelib for gpu aren t installed,arrow-1199 - introduce mutable pod struct for generic array data,arrow-9306 - add support for arrow::recordbatch.new,arrow-1914 - make -j may fail to build with -darrow_gpu=on,arrow-8978 - conditional jump or move depends on uninitialised value valgrind warning,"arrow-8279 - do not export symbols from codec implementations, remove need for pimpl pattern",arrow-1641 - do not include in public headers,arrow-2137 - don t print paths that are ignored when reading parquet files,arrow-11076 - refactor usage of right indices in hash join,arrow-1821 - add integration test case to explicitly check for optional validity buffer,arrow-4198 - add support to cast timestamp,arrow-1103 - utilize pandas metadata from common _metadata parquet file if it exists,arrow-4134 - properly setup timezone in docker tests to prevent orc adapter s abort,arrow-3099 - add benchmark for number parsing,arrow-3670 - use findbacktrace to find execinfo.h support,arrow-5632 - add some documentation describing compile/debug workflow on macos with xcode ide,arrow-9917 - add bindings for mode kernel,arrow-1415 - support date32 and date64,"arrow-5257 - update site to use official apache arrow logo, add clearly marked links to logo",arrow-5747 - better column name and header support in csv reader,arrow-4898 - old versions of findprotobuf.cmake use all-caps for variables,arrow-3191 - add support for arrowbuf to point to arbitrary memory.,arrow-6303 - add a feature to disable simd,arrow-12215 - fixed size binary columns cannot be null in csv reader,arrow-7696 - unit test on release branch is failed,arrow-1131 - python: parquet unit tests are always skipped,arrow-10192 - segfault when converting nested struct array with dictionary field to pandas series,arrow-5641 - remove enums files generated by gnu autotools from git targets,"arrow-10705 - lifetime annotations in the ipc writer are too strict, preventing code reuse",arrow-10174 - reading of dictionary encoded struct vector fails,arrow-10174 - reading of dictionary encoded struct vector fails,arrow-11707 - support csv schema inference without io,arrow-10354 - add support for regex extract,arrow-826 - compilation error on mac with -darrow_python=on,arrow-4629 - pandas to arrow conversion slowed down by local imports,arrow-6707 - improve the performance of jdbc adapters by using nullable information,arrow-12155 - require table columns to be same length,arrow-4681 - implement parallel query execution using threads,arrow-2029 - program crash on hdfsfile.tell if file is closed,arrow-7959 - add support for ruby 2.3 again,arrow-2019 - control the memory allocated for inner vector in list,parquet-1829 - fix crashes on invalid input ,arrow-10173 - improve performance of equality to a constant predicate support,arrow-6230 - reading in parquet files are 20x slower than reading fst files in r,arrow-1900 - add kernel functions for determining value range of integer arrays,arrow-1591 - c++: xcode 9 is not correctly detected,arrow-1571 - implement argsort kernels for integers using o counting sort,arrow-6659 - refactor of hashaggregateexec to support custom merge,arrow-1657 - multithreaded read test failing on arch linux,arrow-512 - c++: add method to check for primitive types,arrow-4329 - python should include the parquet headers,"arrow-9788 - handle naming inconsistencies between sql, dataframe api and struct names",arrow-7941 - logical plan should support unresolved column references,arrow-10770 - support reading nested json lists,arrow-7622 - mark tensor and sparsetensor fields required,arrow-7298 - cpp/thirdparty/download-dependencies.sh is broken,arrow-2876 - crossbow builds can hang if you cloned using ssh,arrow-4473 - add instructions to do a test-deploy of arrow website and fix bugs,arrow-5028 - creating list with pyarrow.array can overflow child builder,arrow-10491 - fix npe when using flightproducer without interceptors,arrow-11887 - add asynchronous read to streaming csv reader,arrow-11626 - move datafusion examples to own project to reduce nr dependencies,arrow-7710 - .net download url is redirected,arrow-4291 - support selecting features in release scripts,"arrow-1345 - conversion from nested numpy arrays fails on integers other than int64, float32",arrow-6045 - benchmark for parquet float and nan encoding/decoding,arrow-2513 - dictionarytype should give access to index type and dictionary array,arrow-6962 - stop compiling with -weverything,arrow-6962 - stop compiling with -weverything,arrow-8730 - use slice instead of &vec for function arguments,arrow-2302 - run autotools and meson linux builds in same travis ci build entry,arrow-5820 - remove undefined variable check from verify script,arrow-5820 - remove undefined variable check from verify script,"arrow-76 - revise format document to include null count, defer non-nullable arrays to the domain of metadata",arrow-4550 - fix amd pattern,arrow-12436 - add watch capabilities to config backend trait,arrow-8014 - provide cmake targets to test only within a given label,arrow-3904 - validate scale and precision of decimal128 type,arrow-4367 - stringdictionarybuilder segfaults on finish with only null entries,arrow-7708 - include parquet commits from git changelog in release changelogs,arrow-6462 - can t build with bundled double-conversion on centos 6 x86_64,arrow-539 - support reading parquet datasets with standard partition directory schemes,arrow-996 - add 0.3 release announce in japanese,arrow-7978 - github actions lint task is running include-what-you-use and failing,arrow-12419 - flatc is not used in mvn,arrow-3338 - crash when schema and columns do not match,arrow-2792 - consider uploading tarballs to avoid naming conflicts,arrow-11614 - fix round logic to return positive zero when argument is zero,arrow-2918 - improve formatting of struct pretty prints,arrow-5938 - create branch for adding release note automatically,arrow-5938 - create branch for adding release note automatically,arrow-11904 - pure virtual method called crash at the end of arrow-csv-test,arrow-3152 - use dynamic linking for zlib in conda recipes,"arrow-3501 - enable building with gcc 4.8.x on ubuntu trusty, similar distros",arrow-12120 - generate random arrays and batches,arrow-1684 - simplify user api for reading nested parquet columns,arrow-3350 - fix powered by links,arrow-2124 - arrowinvalid raised if the first item of a nested list of numpy arrays is empty,arrow-1115 - use absolute path for ccache,arrow-4651 - flight location should be more flexible than a pair,arrow-621 - implement an inline visitor template that enables visitor-pattern-like code without virtual function dispatch,arrow-3342 - appveyor builds have stopped triggering on github,arrow-731 - add shared library related versions to .pc,arrow-2157 - decimal arrays cannot be constructed from python lists,arrow-771 - add apis for reading individual parquet row groups,arrow-9298 - fix crashes on invalid input ,arrow-1629 - fix problematic code paths identified by infer tool,arrow-10054 - slice methods should return empty arrays instead of crashing,arrow-5873 - segmentation fault when comparing schema with none,arrow-5873 - segmentation fault when comparing schema with none,arrow-5299 - listarray comparison is incorrect,arrow-8426 - add support for writing dictionary types,arrow-8426 - add support for writing dictionary types,arrow-8426 - add support for writing dictionary types,arrow-4977 - add support for building on windows,arrow-5795 - add missing waits on uploading binaries,arrow-5795 - add missing waits on uploading binaries,arrow-5672 - refactor redundant method modifier,arrow-4622 - makedense and makesparse in unionarray should accept a vector of field,arrow-699 - arrow dynamic libraries are missed on run of unit tests on windows,arrow-185 - make sure alignment and memory padding conform to spec,arrow-11483 - c++ integration test creates json files incompatible with java,arrow-7758 - wrong conversion of timestamps that are out of bounds for pandas ,"arrow-10722 - reduce overhead in data types in aggregations / joins, improve benchmarks",arrow-9797 - amd64 conda integration tests is failing for the master branch,"arrow-7950 - when initializing pandas api shim, inform user if their installed pandas version is too old",arrow-5575 - arrowconfig.cmake includes uninstalled targets,arrow-5291 - add wrapper for take kernel on array,arrow-2878 - readme.md does not mention setting github api token in user s crossbow repo settings,arrow-8120 - add support for ubuntu focal,arrow-6736 - aggregate expressions get evaluated repeatedly,arrow-8433 - add feather alias for ipc format in dataset api,arrow-9187 - add bindings for arithmetic kernels,arrow-5940 - add support for re-uploading sign/checksum for binary artifacts,arrow-5940 - add support for re-uploading sign/checksum for binary artifacts,arrow-4212 - creating a cuda buffer from numba device array should be easier,arrow-6235 - conversion from arrow::binaryarray to r character vector not implemented,arrow-3135 - add helper functions for validity bitmap propagation in kernel context,arrow-5974 - enable csv reader to read from concatenated gzip stream,arrow-9120 - lint and format c++ files with codegen in file name,arrow-5404 - nonstd::string_view conflicts with std::string_view in c++17,arrow-11362 - use iterator apis in to_array_of_size to improve performance,arrow-1982 - return parquet statistics min/max as values instead of strings,arrow-7300 - implement functions to cast from strings to integers/floats,arrow-963 - add equal,arrow-2740 - add address property to buffer,arrow-7909 - add how to install on red hat enterprise linux,arrow-10214 - unicodedecodeerror when printing schema with binary metadata,arrow-3611 - give error more quickly when pyarrow serialization context is used incorrectly.,arrow-7676 - ensure that the static libraries are not built in the wheel scripts,arrow-1920 - add support for reading orc files,arrow-1461 - disable builds using llvm apt packages temporarily,"arrow-898 - expand metadata support to field level, provide for sharing instances of keyvaluemetadata",arrow-1400 - ability to create partitions when writing to parquet,arrow-9094 - bump versions of compiled dependencies in manylinux wheels,arrow-22 - c++: add schema adapter routines for converting flat parquet schemas to in-memory arrow schemas,arrow-1589 - fuzzing for certain input formats,arrow-7016 - write script to verify windows wheels given local environment with conda,arrow-6872 - empty table with dictionary-columns raises arrownotimplementederror,arrow-11914 - r-sanitizer nightly is broken,arrow-4208 - have automatized tests for s3,arrow-9287 - implement support for unsigned dictionary indices,arrow-8520 - use .asf.yaml to direct github notifications to e-mail lists and jira,arrow-9104 - parquet encryption tests should write files to a temporary directory instead of the testing submodule s directory,arrow-6086 - implement parallel execution for parquet scan,arrow-9362 - add support for writing metadataversion::v4-compatible ipc messages for compatibility with library versions <= 0.17.1,arrow-12208 - add the ability to run async tasks without using the cpu thread pool,arrow-6843 - disable deploy on pull request,arrow-1695 - fix reference counting of numpy arrays created in custom serialializer,arrow-1573 - implement stateful kernel function that uses dictionarybuilder to compute dictionary indices,arrow-6541 - use two-part eos and amend format documentation,arrow-9563 - use archery s changelog generator when creating release notes for the website,arrow-9563 - use archery s changelog generator when creating release notes for the website,arrow-62 - format: are the nulls bits 0 or 1 for null values?,arrow-5812 - refactor method name and param type in baseintvector,arrow-432 - avoid unnecessary memory copy in to_pandas conversion by using low-level pandas internals apis,arrow-11773 - allow json writer to write out json arrays as well as newline formatted objects,arrow-2807 - enable memory-mapping to be toggled in get_reader when reading parquet files,arrow-6357 - s3: allow for background writes,arrow-808 - remove needless ignore entries,"arrow-12317 - json writer does not support time, date or interval types",arrow-4758 - build fails on mac due to missing schema_generated.h,arrow-8374 - table to vector of dictonarytype will error when arrays don t have the same dictionary per array,arrow-469 - c++: add option so that resize doesn t decrease the capacity,arrow-1994 - test against pandas master,arrow-10137 - fix cpp helper that breaks if libarrow is not present,arrow-2192 - commits to master should run all builds in ci matrix,arrow-8624 - install page should mention arrow-dataset packages,arrow-1159 - static data members cannot be accessed from inline functions in arrow headers by thirdparty users,arrow-5157 - add matlab to powered by apache arrow page,arrow-10264 - parquet test failing with hadoopfilesystem uri,arrow-860 - decide if typed tensor subclasses are worthwhile,arrow-549 - add function to concatenate like-typed arrays,arrow-9931 - fix undefined behaviour on invalid ipc ,arrow-3369 - wheel builds are failing due to wheel 0.32 release,arrow-1235 - macos linker failure with operator and std::ostream,arrow-1427 - add a link to readme of arrow glib,arrow-3608 - support for time32 and time64 array types,arrow-2617 - schema should contain fields not columns,arrow-8628 - wrap docker-compose commands with archery,arrow-3970 - remove unnecessary boost dependencies,arrow-4178 - fix tsan and ubsan errors,arrow-5967 - dateutility#timezonelist is not correct,arrow-9371 - run vector tests for both allocators,arrow-1773 - add casts from date/time types to compatible signed integers,arrow-6438 - add bindings for filesystem api,arrow-9121 - do not wipe the filesystem when path is empty,arrow-2223 - installing umd release throws an error,arrow-6531 - add detach method to buffered streams,arrow-5194 - test is failing,arrow-4678 - minimize unstable feature usage,arrow-660 - restore function that can read a complete encapsulated record batch message,arrow-5964 - cast double to decimal with rounding returns 0,arrow-957 - add hdfs and windows documents to doxygen output,"arrow-9419 - test that fill_null function works with sliced inputs, expand tests",arrow-4834 - feature flag to disable parquet,arrow-10120 - create reading benchmarks for 2-level nested data,arrow-12190 - implement partitioned hash join,arrow-2946 - stop to use pwd in debian/rules,arrow-7640 - segfault when reading compressed parquet files if build didn t include support for codec,arrow-8383 - easier random access to dictionaryarray keys and values,arrow-10261 - lists should take field instead of datatype,arrow-6278 - read parquet files from raw vector,arrow-2897 - organize supported ubuntu versions,arrow-11872 - array validation of gpu buffers fails due to incorrect validation check,arrow-3546 - provide testing setup to verify wheel binaries work in one or more common linux distributions,arrow-6773 - filter kernel returns invalid data when filtering with an array slice,parquet-1820 - use a column filter hint to inform read prefetching in arrow reads,arrow-587 - add jira fix version to merge tool,arrow-4797 - avoid store crash if not enough memory is available,arrow-5377 - make ipcpayload public and add getpayloadsize,"arrow-10089 - inject base class for array, chunkedarray and scalar",arrow-11806 - optimize inner join creation of indices,arrow-8825 - cannot compiled pass with wunused-parameter flag,arrow-6738 - fix problems with current union comparison logic,arrow-8265 - table api collect should not require context,arrow-2969 - convert between structarray and nested data.frame column containing data frame in each cell,arrow-11110 - context.table should not take a mutable self reference,arrow-7327 - failing c glib and r buildbot builders,arrow-8077 - add wheel build script and crossbow configuration for windows on python 3.5,arrow-4420 - make spark integration test pass and test against spark s master branch,arrow-1168 - pandas metadata may contain mixed data types,arrow-1184 - dictionary.equals is not working correctly,arrow-7852 - 0.16.0 wheels not compatible with older numpy,arrow-1301 - add remaining supported libhdfs unix-like filesystem apis,arrow-1165 - refactor pythondecimaltoarrowdecimal to not use templates,arrow-1438 - pull serializationcontext through plasmaclient put and get,arrow-3040 - add support for comparing arrays,arrow-3348 - plasma store dies when an object that a dead client is waiting for gets created.,arrow-6457 - cmake build locally fails with msvc 2015 build generator,arrow-7355 - environment variables are defined twice for the fuzzit builds,arrow-5950 - add ability to log via logger dependency,arrow-1490 - allow travis ci failures for jdk9 for now,arrow-5828 - add protocol buffers version check,arrow-5828 - add protocol buffers version check,arrow-6679 - autobrew license in license.txt is not acceptable,arrow-8158 - getting length of data buffer and base variable width vector,arrow-1971 - add pandas serialization to the default,arrow-2122 - pyarrow fails to serialize dataframe with timestamp.,arrow-6790 - automatically disable integration test cases in release verification,arrow-7794 - cargo publish fails for arrow-flight due to relative path to flight.proto,arrow-7788 - add schema conversion support for map type,arrow-11418 - add ipc buffer compression to support matrix,arrow-2723 - arrow-orc.pc is missing,arrow-3931 - make possible to build regardless of lang,arrow-1722 - add linting script to look for c++/cli issues,arrow-3252 - do not hard code the v part of versions in thirdparty toolchain,arrow-10877 - add benchmark based on kaggle movies,arrow-5012 - testing headers not installed,arrow-12420 - reading null columns as dictionary not longer possible,arrow-1991 - docker-based documentation build is broken,arrow-3928 - add option to deduplicate pybytes / pystring / pyunicode objects in table.to_pandas conversion path,arrow-2375 - buffer should release memory when dropped,arrow-3034 - source archive can t be extracted by bsdtar on msys2,arrow-12149 - archery benchmark test case is failing,arrow-10356 - add support for is_in,arrow-4385 - default_version of a release should not include snapshot,arrow-1211 - consider making default_memory_pool the default for builder classes,arrow-5078 - sphinx is failed by removedinsphinx30warning,arrow-320 - complexcopier.copy should not start a list if reader is not set,arrow-12013 - failed to detect grpc version,arrow-1747 - don t export symbols of statically linked libraries,arrow-3853 - implement string to timestamp cast,arrow-4597 - targets for system google mock shared library are missing,arrow-7652 - insert implicit cast in scannerbuilder.filter,arrow-3459 - add support for variable length output vectors,arrow-4947 - remove redundant schema parameter in doget,arrow-8166 - avx512 intrinsics fail to compile with clang-8 on ubuntu 18.04,arrow-9144 - oss-fuzz build fails because recent changes in the google repository,arrow-10968 - don t build hash table for right side of the join,arrow-10365 - remove duplicate setting of s3 flag on macos,arrow-8874 - scanner::totable race when scantask exit early with an error,arrow-6416 - confusing api & documentation regarding chunksizes,arrow-2691 - travis fails due to formatting diff,arrow-268 - flesh out union implementation to have all required methods for ipc,arrow-8980 - metadata grows exponentially when using schema from disk,arrow-10267 - skip flight test if disable_server_verification feature is not available,arrow-3022 - support for struct,arrow-6619 - add support for building gandiva::expression by arrow::schema#build_expression,arrow-470 - add filesystem abstraction to access directories of files in a uniform way,arrow-4430 - add unit test for currently unused append method,arrow-604 - python: boxed field instances are missing the reference to datatype,arrow-11096 - add ffi for binary,arrow-4717 - consider exposing valuetask instead of task,arrow-12237 - add support for bulleye,arrow-3957 - better error message when user connects to hdfs cluster with wrong port,arrow-5010 - fix release script with llvm-7,arrow-11452 - parquet reader cannot read file where a struct column has the same name as struct member columns,arrow-2592 - error reading old parquet file due to metadata backwards compatibility issue,arrow-1726 - add setup description to verify c glib build,arrow-1741 - comparison function for dictionaryarray to determine if indices are compatible ,arrow-8497 - add missing component to builds,arrow-4112 - add support for deb packages,arrow-720 - arrow should not have a dependency on slf4j bridges in compile,arrow-9852 - fix crash on invalid ipc input ,arrow-9852 - fix crash on invalid ipc input ,arrow-4101 - binary identity cast not implemented,arrow-653 - add debugging function to print an array s buffer contents in hexadecimal,arrow-11040 - simplify builders with generics,arrow-7386 - array offset does not work properly,arrow-2958 - flatbuffers ep fails to compile with gcc 8.1,arrow-11718 - ipc writers shouldn t implicitly finish on drop,arrow-3929 - improve memory usage of csv reader to improve runtime performances,arrow-9604 - add benchmark for aggregate min/max compute kernels,arrow-10999 - tpc-h parquet files cannot be read by apache spark,arrow-8332 - require thrift compiler to use system libthrift for parquet build,arrow-7226 - json loader fails on example in documentation.,arrow-2166 - implement slice for column,arrow-5450 - timestamparray.to_pylist fails with overflowerror: python int too large to convert to c long,arrow-4749 - recordbatch::new should return result instead of panicking,arrow-3362 - guard against null buffers,arrow-3402 - utilize common bitmap operation implementations in precompiled ir routines,arrow-433 - date conversion is locale-dependent,arrow-224 - address static linking of boost dependencies,arrow-5319 - enable ccache with mingw builds,arrow-2661 - allow passing hdfs config values via map/dict instead of needing an hdfs-site.xml file,arrow-8103 - make default linux build more minimal,arrow-5787 - use local modules to verify rc,arrow-5787 - use local modules to verify rc,arrow-9460 - binarycontainsexact doesn t cope with double characters in the pattern,arrow-11301 - fix reading lz4-compressed parquet files produced by java parquet implementation,arrow-3767 - add cast for null to any type,arrow-4802 - hadoop classpath discovery broken hadoop_home is a symlink,"arrow-3437 - configure static linking of libgcc, libstdc++ with ldflags",arrow-437 - clang compiler warnings from overridden virtual functions,arrow-10266 - ensure using python 3.8 with homebrew,arrow-11422 - add support for decimals,arrow-8372 - add result to table / record batch apis,arrow-767 - adopt filesystem abstraction,arrow-9752 - add support for aggregate udfs,arrow-5378 - add local filesystem implementation,arrow-4442 - overly broad type annotation for chunked typeid leading to type mismatches in generated typing,arrow-4155 - implement array_ops::sum for primitivearray,arrow-5219 - build protobuf_ep in parallel when using ninja,arrow-5925 - cast decimal to int should round up,arrow-4605 - move filter and limit code from datafusion into compute module,arrow-6567 - sql aggregate query execution assume grouping expressions precede aggregate expressions,arrow-7277 - add discussion about vector lifecycle,arrow-5518 - set vectorschemaroot rowcount to 0 on allocatenew and clear,arrow-1901 - support recursive mkdir for daskfilesystem,arrow-7809 - vignette does not run on win 10 nor ubuntu,arrow-3962 - support null values while reading a csv file.,"arrow-7243 - add common implementation status table to the readme of each native language implementation, as well as top level readme",arrow-3988 - do not build unit tests by default in build system,arrow-6752 - implement stringer for null array,arrow-7687 - c++ developer document links in readme are broken,arrow-371 - python: table with null timestamp becomes float in pandas,arrow-9439 - fix crash on invalid ipc input ,arrow-3339 - support for character vectors,arrow-10244 - add docs on using pyarrow.dataset.parquet_dataset,arrow-3312 - use same .clang-format file for both r binding c++ code and main c++ codebase,arrow-2348 - remove go example,arrow-7962 - followup to consolidate source and dataset classes ,arrow-2724 - determine whether all the expected artifacts are uploaded,arrow-2244 - slicing nullarray should not cause the null count on the internal data to be unknown,arrow-858 - remove dependency on boost regex,arrow-9000 - build crashes with jdk14,arrow-8314 - provide a method to select a subset of columns of a table,arrow-7173 - add test to verify map field names can be arbitrary,arrow-9061 - add apache arrow datasets glib,arrow-1528 - resolve include dependency,arrow-3020 - addition of option to allow empty parquet row groups,arrow-6334 - improve the dictionary builder api to return the position of the value in the dictionary,arrow-1471 - document requirements and non/requirements for valuevector updates,arrow-1827 - add checkstyle config file and header file,arrow-4200 - conda_env_* files cannot be used to create a fresh conda environment on windows,arrow-8744 - parquetiterator s next method should be safe to call even after reached end of iteration,arrow-6456 - possible to reduce object code generated in compute/kernels/take.cc?,arrow-2720 - clean up cmake cxx_standard and pic flag setting,arrow-4886 - inconsistent behaviour with casting sliced primitive array to list array,arrow-2171 - ownedref is fragile,arrow-12069 - implement in expressions for decimal types,arrow-10543 - update dev instructions to note there may be a timelag,arrow-4942 - remove needless omits,arrow-647 - don t require boost static libraries to support centos 7,arrow-7047 - filter expressions should not require exact type match,arrow-9138 - make sure format version is hard coded in the docs,arrow-4609 - use google benchmark from toolchain,arrow-10503 - uriparser will not compile using intel compiler,arrow-747 - fix spurious warning caused by passing dl to add_dependencies,arrow-6527 - add outputstream::write variant taking an owned buffer,arrow-4243 - test failure with pandas 0.24.0rc1,arrow-7301 - sql type date should correspond to datedayvector,arrow-4152 - remove an example to show torch integration,arrow-3579 - unintuitive error message when remote branch has not been pushed,arrow-7709 - conversion from table column to pandas loses name for timestamps,arrow-10458 - context.create_logical_plan should not take a mutable self reference,arrow-1178 - create alternative to table.from_pandas that yields a list of recordbatch objects with a given chunk size,arrow-1401 - add extra debugging context to failures in return_not_ok in debug builds,arrow-578 - add cmake option to add custom $cxxflags,arrow-9871 - add uppercase support to arrow_user_simd_level.,arrow-915 - struct array reads limited support,arrow-2222 - add option to validate flatbuffers messages,arrow-11775 - feature flags for dependencies,arrow-3894 - error reading ipc file with no record batches,arrow-7262 - implement replace function in gandiva,arrow-3538 - ability to override the automated assignment of uuid for filenames when writing datasets,arrow-8616 - turn explicit simd off by default,arrow-8754 - enable tests for additional components on big-endian platforms,arrow-10654 - specialize parsing of floats / bools,arrow-724 - add how to contribute section to readme,"arrow-1396 - add prettyprint function for schemas, which also outputs any dictionaries",arrow-9125 - add missing include for arrow::internal::zeromemory for valgrind,arrow-7330 - add result to apis to arrow/gpu,arrow-7882 - optimise like function for substring pattern,arrow-6447 - builds with arrow_jemalloc=on wait until jemalloc_ep is complete before building any libarrow .cc files,arrow-9926 - use placement new for garrowrecordbatchfilereader,arrow-6690 - hashaggregate without group by should use simd,arrow-9683 - implement debug for executionplan trait,arrow-4017 - check and update vendored libraries,arrow-5184 - broken links and other documentation warnings,arrow-7508 - datetime32 reading is broken,arrow-6657 - implement count aggregate expression,arrow-10179 - labeler is not labeling,arrow-299 - use absolute namespace in macros,arrow-8591 - reverse lookup for a key in dictionaryarray,arrow-4990 - kernel to compare array with array,arrow-12082 - allow create dataset from vector of file paths,arrow-6650 - create methods to test arrow files against integration json,arrow-2337 - windows release verification script should use boost dsos instead of static linkage,arrow-8717 - add build dependency on boost to homebrew,arrow-3311 - functions for deserializing ipc components from arrow::buffer or from io interface,arrow-2073 - create structarray from sequence of tuples given a known data type,arrow-7592 - fix crashes on corrupt ipc input,arrow-222 - create prototype file-like interface to hdfs and begin defining more general io interface for arrow data adapters,arrow-10306 - add string replacement kernel,arrow-7685 - add support for github actions to crossbow,arrow-4093 - deprecated method suggests wrong method,arrow-8641 - regression in feather: no longer supports permutation in column selection,arrow-8641 - regression in feather: no longer supports permutation in column selection,arrow-10821 - implement negative expression,arrow-6542 - add view method to array types,arrow-1092 - more decimal and scale flipped follow-up,arrow-9603 - write arrow relies on unspecified behavior for nested types,arrow-4174 - add support for building composite array from raw ruby objects,arrow-2326 - cannot import pip installed pyarrow on os x ,arrow-1626 - add make targets to run the inter-procedural static analysis tool called infer .,arrow-7681 - explicitly seeking a bufreader will discard the internal buffer,arrow-6820 - map specification and implementation inconsistent,arrow-668 - convert nanosecond timestamps to pandas.timestamp when converting from timestampvalue,arrow-5835 - support dictionary encoding for binary type,arrow-9783 - logical aggregate expressions require explicit data type,arrow-9493 - dictionary encode string partition columns by default,arrow-729 - add vector type for 32-bit date as days since unix epoch,arrow-3788 - add support for csv parser writtin in c++,arrow-5875 - test rpc features in integration tests,arrow-768 - change the boxed object representation of date and time types,arrow-10808 - support nested expressions in aggregations,arrow-4907 - add docker container to inspect docker context,arrow-366 - implement dictionary vector,arrow-5358 - implement equality check for arraydata and array,arrow-8574 - implement debug for all plain types,arrow-4324 - array dtype inference incorrect when created from list of mixed numpy scalars,"arrow-8792 - improved declarative compute function / kernel development framework, normalize calling conventions",arrow-1027 - allow negative indexing in fields/columns on pyarrow table and schema objects,arrow-1812 - plasma store modifies hash table while iterating during client disconnect,arrow-11694 - array take may dereference absent null bitmap,arrow-330 - cmake functions to simplify shared / static library configuration,arrow-4253 - cannot use non-system boost specified with $boost_root,arrow-4399 - remove usage of extern template class from numericarray,arrow-4469 - ci failing for python 2.7 and 3.6 with valgrind,arrow-9174 - tests panic with 386 builds,arrow-7039 - typecheck expects pandas to be installed,arrow-8749 - ipcformatwriter writes dictionary batches with wrong id,arrow-5459 - implement stringer for float16 datatype,arrow-4162 - add support for creating data types from description,arrow-1937 - add documentation for different forms of constructing nested arrays from python data structures,"arrow-4261 - cmake paths for ipc, flight, thrift, and plasma don t support using arrow as a subproject",arrow-10578 - comparison kernels crashing for string array with null string scalar,arrow-8912 - keep reference of arrow::buffer s data for gc,arrow-3451 - allocate cuda memory from a cucontext created by numba.cuda,arrow-4705 - csv reader should show line number and error message when failing to parse a line,arrow-1216 - numpy arrays cannot be created from arrow buffers on python 2,arrow-3653 - support data copying between different gpu devices,arrow-53 - python: fix rpath and add source installation instructions,arrow-9501 - add logic in timestampdiff when end date is last day of a month,arrow-4466 - add support for parquet data sources,arrow-6742 - remove usage of boost::filesystem::path from arrow/io/hdfs_internal.cc,arrow-6285 - add support for largebinary and largestring types,arrow-10003 - create directories in copyfiles when copying within the same filesystem,arrow-7197 - suppress keyword argument related warnings with ruby 2.7,arrow-12086 - offline builds does not use arrow_$library_url to search for packages,arrow-3863 - use travis_retry with brew bundle command,arrow-5364 - use ascii rather than utf-8 in buildutils.cmake comment,arrow-10129 - cargo build is rebuilding dependencies on arrow changes,arrow-7292 - add asan / ubsan ci run,arrow-5898 - provide functionality to efficiently compute hash code for arbitrary memory segment,arrow-4767 - arrowstreamreader crashes while reading the end of a stream,arrow-7211 - support writing to byte buffers,arrow-3664 - add benchmark for primitivearraybuilder,arrow-2471 - assertion when pushing value to builder/listbuilder with zero capacity,arrow-5548 - link is not latest,arrow-2480 - enable casting the value of a decimal to int32_t or int64_t,arrow-1758 - remove pickle=true option for object serialization,arrow-7459 - documentation lint is failed,arrow-10637 - add examples to boolean kernels,arrow-3317 - test/support conversions from data.frame with a single character column exceeding 2gb capacity of binaryarray,arrow-11203 - enable jira and pull request integration,arrow-920 - add lua examples,arrow-8422 - implement function to convert arrow schema to parquet schema,arrow-1366 - add instructions for starting the plasma store when installing pyarrow from wheels,"arrow-10741 - apply clippy lints to source code, remove them from ignore list",arrow-4250 - use approximate comparisons for floating point numbers in gandiva-projector-test,arrow-11139 - add support for extension type,arrow-8287 - arrow examples should use utility to print results,arrow-8918 - add cast metafunction to functionregistry that addresses dispatching to appropriate type-specific castfunction,"arrow-8521 - group sub-task, task, test, and wish issue types as improvement in changelog",arrow-323 - opt-in to pyarrow parquet build rather than skipping silently on failure,arrow-5292 - static libraries are built on appveyor,arrow-2994 - only include python c header directories for python-related compilation units,arrow-7654 - ability to set column_types to a schema in csv.convertoptions is undocumented,arrow-4474 - flightinfo should use signed integer types for payload size,arrow-7351 - only suggest cpp-* fix versions when merging parquet patches,arrow-1202 - remove semicolons from status macros,arrow-10422 - removed unused binaryarraybuilder,arrow-7935 - remove netty dependency for bufferallocator and referencemanager,arrow-9399 - add forward compatibility checks for unrecognized future metadataversion,arrow-11289 - support group by for dictionary columns,arrow-1706 - structarray.from_arrays should handle sequences that are coercible to arrays,arrow-1924 - bring back pickle=true option for serialization,arrow-8798 - fix parquet crashes on invalid input ,arrow-7674 - add helpful message for captcha challenge in merge_arrow_pr.py,arrow-4022 - promote datum variant out of compute namespace,arrow-9639 - add dependency version check,arrow-3852 - used uninitialized warning,arrow-10272 - pin newer multibuild version to avoid updating homebrew,arrow-10336 - support fromiter and toiter for strings,arrow-6387 - errors with make,arrow-10539 - use github actions to build wheels for windows,arrow-775 - add simple constructors to value vectors,arrow-4126 - offset not used when accessing boolean array,arrow-1236 - library paths in exported pkg-config file are incorrect,arrow-4728 - failing test table#assign with a zero-length null column round-trips through serialization,arrow-3127 - add tutorial about sending tensor from c++ to python,"arrow-4054 - update gtest, flatbuffers and openssl in manylinux1 base image",arrow-5777 - basicdecimal128 is a small object it doesn t always make sense to pass by const ref,arrow-5631 - cmake 3.2 build is broken,arrow-6856 - use arraydata instead of array for arraydata::dictionary,arrow-9792 - logical aggregate functions should not return result,"arrow-2252 - create buffer from address, size and base",arrow-9109 - enable s3 support in manylinux wheels,arrow-8503 - can t build apache-arrow-archive-keyring for rc,arrow-8503 - can t build apache-arrow-archive-keyring for rc,arrow-12057 - remove direct usage of pandas block subclasses,arrow-8020 - implement vector validate functionality,arrow-5937 - stop parallel binary upload,arrow-5937 - stop parallel binary upload,arrow-4618 - makefile to build dependent docker images,arrow-4074 - test_get_library_dirs_win32 fails if libraries installed someplace different from conda or wheel packages,arrow-3128 - support system shared zlib,arrow-6705 - readme has invalid github url,arrow-5558 - support array::view on arrays with non-zero offsets,arrow-5085 - conversion of dict encoded null column fails in parquet writing when using rowgroups,arrow-5333 - fit build option summary into narrower console,arrow-4403 - ci fails due to formatting errors,arrow-10186 - tests fail when following instructions in readme,arrow-9535 - remove symlink fixes from conda recipe,arrow-9535 - remove symlink fixes from conda recipe,arrow-249 - define grpc idl / wire protocol for messaging with arrow data,arrow-7320 - target arrow-type-benchmark failed to be built on bullx linux,arrow-9108 - add parquet statistics conversion for timestamp columns,arrow-9488 - use the new changelog generation when updating the website,arrow-11516 - allow all c++ compute functions to be called by name in dplyr,arrow-10252 - add option to skip inclusion of arrow headers in python installation,arrow-7694 - can t build repository packages for rc,arrow-9437 - homebrew fails to install build dependencies in the macos wheel builds,arrow-5781 - ensure benchmark clone accepts remotes in revision,arrow-1069 - add instructions for publishing maven artifacts,arrow-10510 - add benchmarks for count,arrow-11641 - use docker buildkit s inline cache to reuse build cache across different hosts,arrow-7405 - listvector isempty api is incorrect,arrow-6418 - plasma cmake targets are not exported,arrow-11852 - update contributing to explain contributor role,arrow-732 - schema comparison bugs in struct and union types,arrow-5035 - arrowbuffer.builder<bool> is broken,arrow-3461 - add a script to upload rc artifacts as the official release,arrow-7399 - gandiva does not pick runtime cpu features,"arrow-3440 - remove outdated cpp/src/gandiva/readme.md, add build documentation to cpp/readme.md",arrow-10318 - use pimpl idiom in csv parser,arrow-6074 - implement middleware,arrow-5447 - ci is failed on appveyor,arrow-2565 - new subscriber cannot receive notifications about existing objects,arrow-984 - add go examples,arrow-8906 - support reading multiple csv files for schema inference,arrow-2450 - saving to parquet fails for empty lists,arrow-1243 - security: upgrade all libraries to latest stable versions,arrow-6520 - segmentation fault on writing tables with fixed size binary fields,arrow-4927 - update top level readme to describe current functionality,arrow-7011 - implement casts from float/double to decimal128,arrow-10873 - apple silicon is reported as arm64 in cmake,arrow-9445 - revert array.equals changes + expose comparison ops in compute,arrow-3157 - improve buffer creation for typed data,arrow-11126 - document and test arrow-10656,arrow-8319 - install thrift compiler in the debian build,arrow-8803 - row count should be set before loading buffers in vectorloader,arrow-9615 - add kernel to compute length of string array,arrow-11666 - add endianness gold integration file for decimal256,arrow-2507 - don t take a reference when not needed,arrow-5293 - take kernel on dictionaryarray does not preserve ordered flag,arrow-1643 - accept hdfs:// prefixes in parquet.read_table and attempt to connect to hdfs,arrow-12028 - unsupported group by for timestamp,arrow-7762 - exceptions in parquetwriter get ignored,arrow-8564 - add ubuntu 20.04 lts to supported package list,arrow-10708 - add support for ubuntu 20.10,arrow-1268 - blog post on arrow integration with spark,arrow-12161 - async streaming csv reader deadlocking when being run synchronously from datasets,arrow-12161 - async streaming csv reader deadlocking when being run synchronously from datasets,arrow-659 - add multithreaded memcpy implementation ,arrow-7516 - .net benchmarks are broken,arrow-2794 - add delete method for multiple objects,"arrow-7110 - add filter support for garrowtable, garrowchunkedarray, and garrowrecordbatch",arrow-9014 - bump the minor part of the automatically generated version in crossbow,arrow-1582 - set up + document nightly conda builds for macos,arrow-4899 - remove all uses of panic! from expression.rs,arrow-1117 - minor issues in glib readme,arrow-4042 - inconsistent method naming between binaryarray and primitivearray,arrow-4568 - add version macros to headers,arrow-5625 - convert array of struct type to data frame columns,arrow-2981 - support scripts / documentation for running clang-tidy on codebase,arrow-830 - python: jemalloc is not anymore publicly exposed,arrow-11209 - df - provide better error message on unsupported group by,arrow-6678 - regression in parquet file compatibility introduced by arrow-3246,arrow-3572 - correctly handle ssh origin urls for crossbow,arrow-4276 - remove needless bintray authentication from binaries verify script,arrow-8268 - test failure due to lack of built zstd support,arrow-601 - some logical types not supported when loading parquet,arrow-340 - opening a writeable file on disk that already exists does not truncate to zero,arrow-3005 - update website and write blog post for 0.10.0 release announcement,arrow-2851 - update rat excludes for new install file names,arrow-10304 - optimize variance kernel for integers,arrow-8615 - error better and insist on randomaccessfile in read_feather,arrow-2010 - compiler warnings with checkin warning level in orc adapter,arrow-10917 - update feature matrix,arrow-2133 - segmentation fault on conversion of empty nested arrays to pandas,arrow-7284 - ensure java implementation meets clarified dictionary spec,arrow-5493 - add go support for ipc integration tests,arrow-5495 - use https consistently for downloading dependencies,arrow-11066 - is there a bug in flight addwritablebuffer,arrow-11066 - is there a bug in flight addwritablebuffer,arrow-11066 - is there a bug in flight addwritablebuffer,arrow-11066 - is there a bug in flight addwritablebuffer,arrow-11066 - is there a bug in flight addwritablebuffer,arrow-626 - enable pyarrow.bufferreader to read from any python object implementing the buffer/memoryview protocol,arrow-8510 - arrow/dataset/file_base.cc fails to compile with internal compiler error with visual studio 15 2017 win64 generator,arrow-3864 - add support for allow-float-truncate cast option,arrow-7803 - autobrew/homebrew tests should not always install from master,arrow-4429 - add git rebase tips to the contributing page in the developer docs,arrow-1653 - use static cast to avoid compiler warning.,arrow-5718 - auto splice data frames in record_batch and table,arrow-1521 - add reset method to bufferoutputstream to enable object reuse,arrow-6809 - gem does not install on macos due to glib2 3.3.7 compilation failure,arrow-6809 - gem does not install on macos due to glib2 3.3.7 compilation failure,arrow-8347 - add result apis to array methods,arrow-8105 - pyarrow.array segfaults when passed masked array with shrunken mask,arrow-11307 - add workaround for dependency issue,arrow-6165 - use multiprocessing to run integration tests on multiple cpu cores,arrow-5323 - use compression with clcache,parquet-1990 - convertedtype::na is written out in some cases,arrow-8888 - heuristic in dataframe_to_arrays that decides to multithread convert cause slow conversions,arrow-7868 - reduce github api query parallelism,arrow-8213 - opening a dataset with a local incorrect path gives confusing error message,arrow-7450 - test-ubuntu-18.04-cpp-static failing with linking error in arrow-io-hdfs-test,arrow-592 - provide .deb and .rpm packages,arrow-9095 - fix nullarray to comply with spec,arrow-2464 - use a python_version marker instead of a condition,arrow-4081 - sum methods on mac os x panic when the array is empty,arrow-9339 - comments on simd in arrow readme are incorrect,arrow-5755 - add derived clone for type,arrow-5683 - add snappy to rtools windows builds,arrow-7288 - read_parquet freezes on windows with japanese locale,arrow-1260 - use factory method to create python plasmaclient,arrow-3821 - : fix typos and grammar issues in flight.proto comments,arrow-7008 - pyarrow.chunked_array fails on array with all-none buffers,arrow-4089 - the tutorial is wrong regarding the parameter type of plasmaclient.create,arrow-8660 - reduce dependence on boost,arrow-7235 - add result to apis to arrow/io,arrow-2739 - use g_declare_derivable_type for garrowdecimaldatatype and garrowdecimal128arraybuilder,arrow-820 - build dependencies for parquet library without arrow support,arrow-4352 - add support for system google test,arrow-11743 - use pkgdown s new found ability to autolink jiras,arrow-49 - python: add column and table wrapper interface,arrow-10108 - fix compiler warning about unused return value,arrow-11571 - cancel stale github actions workflow runs,arrow-9216 - use bitblockcounter for plain spaced encoding/decoding,arrow-2587 - unable to write structarrays with multiple children to parquet,arrow-8315 - don t rely on ordered dict keys in test_dataset.py,arrow-10332 - allow csv reader to start from a line,arrow-5778 - extract the logic for vector data copying to the super classes,arrow-333 - make writers update their internal schema even when no data is written.,arrow-9131 - faster ascii_lower and ascii_upper,arrow-9134 - parquet partitioning degrades int32 to float64,arrow-6521 - add function to arrow:: namespace that returns the current abi version
Release notes - Albumentations Documentation,"albumentations now explicitly checks that all inputs to augmentations are named arguments and raise an exception otherwise. so if an augmentation receives input like aug instead of aug, albumentations will raise an exception. ","api for a.fda is changed to resemble api of a.histogrammatching. now, both transformations expect to receive a list of reference images, a function to read those image, and additional augmentation parameters. ","fixed a bug that led to an exception when a.load was called to deserialize a pipeline that contained a.totensor or a.totensorv2, but those transforms were not imported in the code before the call. ",getting started with albumentations,cropnonemptymaskifexists now also works with multiple masks that are provided by the masks argument to the transform function. previously this augmentation worked only with a single mask provided by the mask argument. pr #761.,"a.sequential transform that can apply augmentations in a sequence. this transform is not intended to be a replacement for a.compose. instead, it should be used inside a.compose the same way a.oneof or a.oneorother. for instance, you can combine a.oneof with a.sequential to create an augmentation pipeline containing multiple sequences of augmentations and apply one randomly chosen sequence to input data. ","a.totensorv2 now supports an additional argument transpose_mask . if the argument is set to true and an input mask has 3 dimensions, a.totensorv2 will transpose dimensions of a mask tensor in addition to transposing dimensions of an image tensor. ",keypoints and bboxes are checked for visibility after each transform ,fix a bug that causes an exception when albumentations received images with the number of color channels that are even but are not multiples of 4 . pr #638.,do not try to resize an image if it already has the required height and width. that eliminates the redundant call to the opencv function that requires additional copying of the input data. pr #639. replaycompose is now serializable. pr #623 by ilyaovodov,a.shiftscalerotate now has two additional optional parameters: shift_limit_x and shift_limit_y. if either of those parameters is set a.shiftscalerotate will use the set values to shift images on the respective axis. ,"a.padifneeded now accepts additional pad_width_divisor, pad_height_divisor to ensure image has width & height that is dividable by given values. ",fixed problems with grayscale images for a.histogrammatching. ,"fix a bug that causes some keypoints and bounding boxes to lie outside the visible part of the augmented image if an augmentation pipeline contained augmentations that increase the height and width of an image . that happened because albumentations checked which bounding boxes and keypoints lie outside the image only after applying all augmentations. now albumentations will check and remove keypoints and bounding boxes that lie outside the image after each augmentation. if, for some reason, you need the old behavior, pass check_each_transform=false in your keypointparams or bboxparams. issue #565 and pr #566.",added support to apply a.coarsedropout to masks via mask_fill_value. ,who's using,totensorv2 now automatically expands grayscale images with the shape to the shape . pr #604 by @ingwar.,fix a bug that prevents huesaturationvalue for working with grayscale images. pr #500.,a.fda now correctly uses coordinates of the center of an image. ,transforms ,fix a bug that causes errors with some values for label_fields in bboxparams. pr #504 by ilyaovodov,a.gaussianblur now supports the sigma parameter that sets standard deviation for gaussian kernel. .,dropped support of python 3.5 ,documentation fixes and updates.,fix bugs that prevent serialization of imagecompression and gaussnoise. pr #569,"change the imgaug dependency version from imgaug>=0.2.5,<0.2.7 to imgaug>=0.4.0"". now albumentations won t downgrade your existing imgaug installation to the old version. pr #658.",examples,new transformations,new transformations,frequently asked questions,"a.histogrammatching now usesread_rgb_image as a default read_fn. this function reads an image from the disk as an rgb numpy array. previously, the default read_fn was cv2.imread which read an image as a bgr numpy array. ",a.colorjitter transform that behaves similarly to colorjitter from torchvision . ,minor changes,minor changes,minor changes
Changelog â€” Paramiko documentation,": paramiko s use of subprocess for proxycommand support is conditionally imported to prevent issues on limited interpreter platforms like google compute engine. however, any resulting importerror was lost instead of preserved for raising . this has been fixed."," #667: the rc4/arcfour family of ciphers has been broken since version 2.0; but since the algorithm is now known to be completely insecure, we are opting to remove support outright instead of fixing it. thanks to alex gaynor for catch & patch."," #667: the rc4/arcfour family of ciphers has been broken since version 2.0; but since the algorithm is now known to be completely insecure, we are opting to remove support outright instead of fixing it. thanks to alex gaynor for catch & patch.","this removes a bunch of warnings of the style cryptographydeprecationwarning: encode_point has been deprecated on ellipticcurvepublicnumbers and will be removed in a future version. please use ellipticcurvepublickey.public_bytes to obtain both compressed and uncompressed point encoding and similar, which users who had eventually upgraded to cryptography 2.x would encounter."," #1723: fix incorrectly swapped order of p and q numbers when loading openssh-format rsa private keys. at minimum this should address a slowdown when using such keys, and it also means paramiko works with cryptography 3.1 and above . thanks to alex gaynor for the patch."," #60: paramiko originally defaulted to zlib compression level 9 this has been found to be quite wasteful and tends to cause much longer transfers in most cases, than is necessary.","there aren t enough ways to thank alex gaynor for all of his work on this, and then his patience while the maintainer let his pr grow moss for a year and change. paul kehrer came in with an assist, and i think i saw olle lundberg, @techtonik and @johnthagen supplying backup as well. thanks to all!", #297: replace pycrypto s random with os.urandom for improved speed and security. thanks again to alex.,"additionally, pyasn1 was never actually hard-required; it was necessary during a development branch, and is used by the optional gssapi support, but is not required for regular installation. thus, it has been removed from our setup.py and its imports in the gssapi code made optional.", #1378: add support for the modern import location of mutablemapping to avoid the old location becoming deprecated in python 3.8. thanks to josh karpel for catch & patch., #1378: add support for the modern import location of mutablemapping to avoid the old location becoming deprecated in python 3.8. thanks to josh karpel for catch & patch.,"specifically, steps have been taken to start separating client and server related message types in the message handling tables within transport and authhandler; this work is not complete but enough has been performed to close off this particular exploit .","specifically, steps have been taken to start separating client and server related message types in the message handling tables within transport and authhandler; this work is not complete but enough has been performed to close off this particular exploit .","specifically, steps have been taken to start separating client and server related message types in the message handling tables within transport and authhandler; this work is not complete but enough has been performed to close off this particular exploit .","specifically, steps have been taken to start separating client and server related message types in the message handling tables within transport and authhandler; this work is not complete but enough has been performed to close off this particular exploit .","specifically, steps have been taken to start separating client and server related message types in the message handling tables within transport and authhandler; this work is not complete but enough has been performed to close off this particular exploit .","major thanks to everyone who contributed or tested versions of the patch, including but not limited to: kevin abel, michiel tiller, pierce lopez, and jared hobbs.", #402: check to see if an ssh agent is actually present before trying to forward it to the remote end. this replaces what was usually a useless typeerror with a human-readable authenticationexception. credit to ken jordan for the fix and yvan marques for original report., #402: check to see if an ssh agent is actually present before trying to forward it to the remote end. this replaces what was usually a useless typeerror with a human-readable authenticationexception. credit to ken jordan for the fix and yvan marques for original report., #402: check to see if an ssh agent is actually present before trying to forward it to the remote end. this replaces what was usually a useless typeerror with a human-readable authenticationexception. credit to ken jordan for the fix and yvan marques for original report., #1063: add a gss_trust_dns option to client and transport to allow explicitly setting whether or not dns canonicalization should occur when using gssapi. thanks to richard e. silverman for the report & sebastian dei for initial patchset.," #98: on windows, when interacting with the putty pageant, paramiko now creates the shared memory map with explicit security attributes of the user, which is the same technique employed by the canonical putty library to avoid permissions issues when paramiko is running under a different uac context than the putty ageant process. thanks to jason r. coombs for the patch."," #394: replace pycrypto with the python cryptographic authority cryptography library suite. this improves security, installability, and performance; adds pypy support; and much more.", #22: try harder to connect to multiple network families in case of connection issues; this helps with problems such as hosts which resolve both ipv4 and ipv6 addresses but are only listening on ipv4. thanks to dries desmet for original report and torsten landschoff for the foundational patchset.," #1041: modify logic around explicit disconnect messages, and unknown-channel situations, so that they rely on centralized shutdown code instead of running their own. this is at worst removing some unnecessary code, and may help with some situations where paramiko hangs at the end of a session. thanks to paul kapp for the patch."," #717: implement support for the match keyword in ssh_config files. previously, this keyword was simply ignored & keywords inside such blocks were treated as if they were part of the previous block. thanks to michael leinartas for the initial patchset."," #971: allow any type implementing the buffer api to be used with bufferedfile, channel, and sftpfile. this resolves a regression introduced in 1.13 with the python 3 porting changes, when using types such as memoryview. credit: martin packman."," #971: allow any type implementing the buffer api to be used with bufferedfile, channel, and sftpfile. this resolves a regression introduced in 1.13 with the python 3 porting changes, when using types such as memoryview. credit: martin packman."," #971: allow any type implementing the buffer api to be used with bufferedfile, channel, and sftpfile. this resolves a regression introduced in 1.13 with the python 3 porting changes, when using types such as memoryview. credit: martin packman."," #971: allow any type implementing the buffer api to be used with bufferedfile, channel, and sftpfile. this resolves a regression introduced in 1.13 with the python 3 porting changes, when using types such as memoryview. credit: martin packman.", #945: sshclient now requests the type of host key it has and does not consider a different type to be a missing host key. this fixes a common case where an ecdsa key is in known_hosts and the server also has an rsa host key. thanks to pierce lopez., #945: sshclient now requests the type of host key it has and does not consider a different type to be a missing host key. this fixes a common case where an ecdsa key is in known_hosts and the server also has an rsa host key. thanks to pierce lopez., #945: sshclient now requests the type of host key it has and does not consider a different type to be a missing host key. this fixes a common case where an ecdsa key is in known_hosts and the server also has an rsa host key. thanks to pierce lopez., #945: sshclient now requests the type of host key it has and does not consider a different type to be a missing host key. this fixes a common case where an ecdsa key is in known_hosts and the server also has an rsa host key. thanks to pierce lopez., #156: fix potential deadlock condition when using channel objects as sockets . thanks to steven noonan and frank arnold for catch & patch.,": a couple of outright sshconfig parse errors were previously represented as vanilla exception instances; as part of recent feature work a more specific exception class, configparseerror, has been created. it is now also used in those older spots, which is naturally backwards compatible."," #1168: add newer key classes for ed25519 and ecdsa to paramiko.__all__ so that code introspecting that attribute, or using from paramiko import * sees them. thanks to @patriksevallius for the patch."," #1168: add newer key classes for ed25519 and ecdsa to paramiko.__all__ so that code introspecting that attribute, or using from paramiko import * sees them. thanks to @patriksevallius for the patch."," #1168: add newer key classes for ed25519 and ecdsa to paramiko.__all__ so that code introspecting that attribute, or using from paramiko import * sees them. thanks to @patriksevallius for the patch."," #1168: add newer key classes for ed25519 and ecdsa to paramiko.__all__ so that code introspecting that attribute, or using from paramiko import * sees them. thanks to @patriksevallius for the patch."," #1168: add newer key classes for ed25519 and ecdsa to paramiko.__all__ so that code introspecting that attribute, or using from paramiko import * sees them. thanks to @patriksevallius for the patch.","this feature also adds setup.py extras support for installing paramiko as paramiko, which pulls in the optional dependencies you had to get by hand previously.", #865: sshclient now requests the type of host key it has and does not consider a different type to be a missing host key. this fixes a common case where an ecdsa key is in known_hosts and the server also has an rsa host key. thanks to pierce lopez., #865: sshclient now requests the type of host key it has and does not consider a different type to be a missing host key. this fixes a common case where an ecdsa key is in known_hosts and the server also has an rsa host key. thanks to pierce lopez.,this bumps the minimum cryptography version from 1.1 to 1.5. such an upgrade should be backwards compatible and easy to do. see their changelog for additional details.,"the core implementation is pkey.load_certificate and its corresponding .public_blob attribute on key objects, which is honored in the auth and transport modules. additionally, sshclient.connect will now automatically load certificate data alongside private key data when one has appropriately-named cert files - see its docstring for details.", #499: strip trailing/leading whitespace from lines when parsing ssh config files - this brings things in line with openssh behavior. thanks to alfredo esteban for the original report and nick pillitteri for the patch., #499: strip trailing/leading whitespace from lines when parsing ssh config files - this brings things in line with openssh behavior. thanks to alfredo esteban for the original report and nick pillitteri for the patch., #193: fix ssh agent problems present on windows. thanks to david hobbs for initial report and to aarni koskela & olle lundberg for the patches., #193: fix ssh agent problems present on windows. thanks to david hobbs for initial report and to aarni koskela & olle lundberg for the patches., #193: fix ssh agent problems present on windows. thanks to david hobbs for initial report and to aarni koskela & olle lundberg for the patches., #399: ssh agent forwarding would hang due to incorrect values passed into the new window size arguments for transport . this has been corrected. thanks to dylan thacker-smith for the report & patch., #399: ssh agent forwarding would hang due to incorrect values passed into the new window size arguments for transport . this has been corrected. thanks to dylan thacker-smith for the report & patch., #399: ssh agent forwarding would hang due to incorrect values passed into the new window size arguments for transport . this has been corrected. thanks to dylan thacker-smith for the report & patch.,see our updated installation docs for details on what is now required to install paramiko; many/most users should be able to simply pip install -u paramiko .," #93: overhaul ssh config parsing to be in line with man ssh_config , including addition of parameter expansion within config values. thanks to olle lundberg for the patch.",this change is backwards incompatible if you are unable to upgrade your version of cryptography. please see cryptography s own changelog for details on what may change when you upgrade; for the most part the only changes involved dropping older python versions which paramiko itself has already dropped., #731: add support for 384- and 512-bit elliptic curve groups in ecdsa key types . thanks to michiel tiller and @crazycasta for the patches.," #794: prior support for ecdsa-sha2-nistp algorithms didn t fully extend to covering host keys, preventing connection to hosts which only offer these key types and no others. this is now fixed. thanks to @ncoult and @kasdoe for reports and pierce lopez for the patch."," #794: prior support for ecdsa-sha2-nistp algorithms didn t fully extend to covering host keys, preventing connection to hosts which only offer these key types and no others. this is now fixed. thanks to @ncoult and @kasdoe for reports and pierce lopez for the patch.", #266: change numbering of transport channels to start at 0 instead of 1 for better compatibility with openssh & certain server implementations which break on 1-indexed channels. thanks to @egroeper for catch & patch., #266: change numbering of transport channels to start at 0 instead of 1 for better compatibility with openssh & certain server implementations which break on 1-indexed channels. thanks to @egroeper for catch & patch., #266: change numbering of transport channels to start at 0 instead of 1 for better compatibility with openssh & certain server implementations which break on 1-indexed channels. thanks to @egroeper for catch & patch.," #1065: add rekeying support to gssapi connections, which was erroneously missing. without this fix, any attempt to renegotiate the transport keys for a gss-kex-authed transport would cause a mic failure and terminate the connection. thanks to sebastian dei and anselm kruis for the patch."," #1065: add rekeying support to gssapi connections, which was erroneously missing. without this fix, any attempt to renegotiate the transport keys for a gss-kex-authed transport would cause a mic failure and terminate the connection. thanks to sebastian dei and anselm kruis for the patch."," #1065: add rekeying support to gssapi connections, which was erroneously missing. without this fix, any attempt to renegotiate the transport keys for a gss-kex-authed transport would cause a mic failure and terminate the connection. thanks to sebastian dei and anselm kruis for the patch.","thanks to jason rigby for a first draft and to paul kapp for the second draft, upon which the current functionality has been based ", #1379: raise cryptography dependency requirement to version 2.5 and update some deprecated uses of its api.," #267: add gss-api / sspi key exchange and authentication support . mega thanks to sebastian dei , with assist by torsten landschoff."," #1191: update our install docs with recently added additional dependencies; we previously only required cryptography, but the docs never got updated after we incurred bcrypt and pynacl requirements for ed25519 key support.", #697: remove whitespace in our setup.py s install_requires as it triggers occasional bugs in some versions of setuptools. thanks to justin lecher for catch & original patch., #697: remove whitespace in our setup.py s install_requires as it triggers occasional bugs in some versions of setuptools. thanks to justin lecher for catch & original patch., #697: remove whitespace in our setup.py s install_requires as it triggers occasional bugs in some versions of setuptools. thanks to justin lecher for catch & original patch., #162: clean up hmac module import to avoid deadlocks in certain uses of sshclient. thanks to gernot hillier for the catch & suggested fix., #162: clean up hmac module import to avoid deadlocks in certain uses of sshclient. thanks to gernot hillier for the catch & suggested fix., #116: limit message.get_bytes to an upper bound of 1mb to protect against potential dos vectors. thanks to @mvschaik for catch & patch.," #80: expose the internal is closed property of the file transfer class bufferedfile as .closed, better conforming to python s file interface. thanks to @smunaut and james hiscock for catch & patch."," #1292: backport changes from #979 to paramiko 2.0-2.2, using duck-typing to preserve backwards compatibility. this allows these older versions to use newer cryptography sign/verify apis when available, without requiring them ."," #1292: backport changes from #979 to paramiko 2.0-2.2, using duck-typing to preserve backwards compatibility. this allows these older versions to use newer cryptography sign/verify apis when available, without requiring them .",: display exception type and message when logging auth-rejection messages ; previously this error case had a bare except and did not display exactly why the key failed. it will now append info such as keyerror: 'some-unknown-type-string' or similar.,thanks to damien dub for the report and @drneutron for investigating & submitting the patch.," #1463: add a new keyword argument to sshclient.connect and transport, disabled_algorithms, which allows selectively disabling one or more kex/key/cipher/etc algorithms. this can be useful when disabling algorithms your target server does not support cleanly, or to work around unpatched bugs in paramiko s own implementation thereof.", #133: fix handling of window-change events to be on-spec and not attempt to wait for a response from the remote sshd; this fixes problems with less common targets such as some cisco devices. thanks to phillip heller for catch & patch., #906: clean up a handful of outdated imports and related tweaks. thanks to pierce lopez., #906: clean up a handful of outdated imports and related tweaks. thanks to pierce lopez.," #102: forego random padding for packets when running under *-ctr ciphers. this corrects some slowdowns on platforms where random byte generation is inefficient . thanks to @warthog618 for catch & patch, and michael van der kolff for code/technique review.",unix users should be aware that the python-gssapi library only appears to support python 2.7 and up at this time.," #490: skip invalid/unparseable lines in known_hosts files, instead of raising sshexception. this brings paramiko s behavior more in line with openssh, which silently ignores such input. catch & patch courtesy of martin topholm."," #490: skip invalid/unparseable lines in known_hosts files, instead of raising sshexception. this brings paramiko s behavior more in line with openssh, which silently ignores such input. catch & patch courtesy of martin topholm."," #490: skip invalid/unparseable lines in known_hosts files, instead of raising sshexception. this brings paramiko s behavior more in line with openssh, which silently ignores such input. catch & patch courtesy of martin topholm.", #789: add a missing .closed attribute to proxycommand so the earlier partial fix for #520 works in situations where one is gatewaying via proxycommand., #789: add a missing .closed attribute to proxycommand so the earlier partial fix for #520 works in situations where one is gatewaying via proxycommand.," #974: overhaul the codebase to be pep-8, etc, compliant and add a flake8 step to the travis config. big thanks to dorian pula!"," #974: overhaul the codebase to be pep-8, etc, compliant and add a flake8 step to the travis config. big thanks to dorian pula!"," #974: overhaul the codebase to be pep-8, etc, compliant and add a flake8 step to the travis config. big thanks to dorian pula!", #636: clean up and enhance the readme . thanks to @lucasrmehl., #636: clean up and enhance the readme . thanks to @lucasrmehl., #636: clean up and enhance the readme . thanks to @lucasrmehl.," #900: prefer newer ecdsa-sha2-nistp keys over rsa and dsa keys during host key selection. this improves compatibility with openssh, both in terms of general behavior, and also re: ability to properly leverage openssh-modified known_hosts files. credit: @kasdoe for original report/pr and pierce lopez for the second draft."," #900: prefer newer ecdsa-sha2-nistp keys over rsa and dsa keys during host key selection. this improves compatibility with openssh, both in terms of general behavior, and also re: ability to properly leverage openssh-modified known_hosts files. credit: @kasdoe for original report/pr and pierce lopez for the second draft."," #866: remove an old test-related file we don t support, and add pypy to travis-ci config. thanks to pierce lopez for the final patch and pedro rodrigues for an earlier edition."," #866: remove an old test-related file we don t support, and add pypy to travis-ci config. thanks to pierce lopez for the final patch and pedro rodrigues for an earlier edition."," #866: remove an old test-related file we don t support, and add pypy to travis-ci config. thanks to pierce lopez for the final patch and pedro rodrigues for an earlier edition."," #866: remove an old test-related file we don t support, and add pypy to travis-ci config. thanks to pierce lopez for the final patch and pedro rodrigues for an earlier edition."," #866: remove an old test-related file we don t support, and add pypy to travis-ci config. thanks to pierce lopez for the final patch and pedro rodrigues for an earlier edition."," #866: remove an old test-related file we don t support, and add pypy to travis-ci config. thanks to pierce lopez for the final patch and pedro rodrigues for an earlier edition."," #1212: updated sshconfig.lookup so it returns a new, type-casting-friendly dict subclass in lieu of dict literals. this ought to be backwards compatible, and allows an easier way to check boolean or int type ssh_config values. thanks to chris rose for the patch.", #100: remove use of pywin32 in win_pageant module. module was already dependent on ctypes for constructing appropriate structures and had ctypes implementations of all functionality. thanks to jason r. coombs for the patch., #649: update the module in charge of handling ssh moduli so it s consistent with openssh behavior re: prime number selection. thanks to damien tournoud for catch & patch.," #413: be significantly smarter about polling & timing behavior when running proxy commands, to avoid unnecessary cpu usage. major thanks to jason dunsmore for report & initial patchset and to chris adams & john morrissey for followup improvements."," #413: be significantly smarter about polling & timing behavior when running proxy commands, to avoid unnecessary cpu usage. major thanks to jason dunsmore for report & initial patchset and to chris adams & john morrissey for followup improvements."," #413: be significantly smarter about polling & timing behavior when running proxy commands, to avoid unnecessary cpu usage. major thanks to jason dunsmore for report & initial patchset and to chris adams & john morrissey for followup improvements.",: accidentally merged the new features from 1.18.0 into the 2.0.x bugfix-only branch. this included merging a bug in one of those new features the offending code has been stripped out of the 2.0.x line ,: accidentally merged the new features from 1.18.0 into the 2.0.x bugfix-only branch. this included merging a bug in one of those new features the offending code has been stripped out of the 2.0.x line , #491: implement timeout functionality to address hangs from dropped network connections and/or failed handshakes. credit to @vazir and @dacut for the original patches and to olle lundberg for reimplementation., #491: implement timeout functionality to address hangs from dropped network connections and/or failed handshakes. credit to @vazir and @dacut for the original patches and to olle lundberg for reimplementation., #491: implement timeout functionality to address hangs from dropped network connections and/or failed handshakes. credit to @vazir and @dacut for the original patches and to olle lundberg for reimplementation.,: update teardown of client test suite to avoid hangs due to eternally blocking accept calls on the internal server thread , #979: update how we use cryptography s signature/verification methods so we aren t relying on a deprecated api. thanks to paul kehrer for the patch., #713: don t pass initialization vectors to pycrypto when dealing with counter-mode ciphers; newer pycrypto versions throw an exception otherwise . thanks to @jmh045000 for report & patches., #713: don t pass initialization vectors to pycrypto when dealing with counter-mode ciphers; newer pycrypto versions throw an exception otherwise . thanks to @jmh045000 for report & patches.,"this support is client-focused; paramiko-driven server code is capable of handling cert-bearing pubkey auth packets, but it does not interpret any cert-specific fields, so the end result is functionally identical to a vanilla pubkey auth process we expect full server-side cert support to follow later.","a new subclass, channelstdinfile, has been created which closes remote stdin when it itself is closed. exec_command has been updated to use that class for its stdin return value.", #235: improve string type testing in a handful of spots is str/if isinstance/g.) thanks to @ksamuel for the report., #235: improve string type testing in a handful of spots is str/if isinstance/g.) thanks to @ksamuel for the report., #235: improve string type testing in a handful of spots is str/if isinstance/g.) thanks to @ksamuel for the report., #632: fix logic bug in the sftp client s callback-calling functionality; previously there was a chance the given callback would fire twice at the end of a transfer. thanks to @ab9-er for catch & original patch., #632: fix logic bug in the sftp client s callback-calling functionality; previously there was a chance the given callback would fire twice at the end of a transfer. thanks to @ab9-er for catch & original patch.," #1567: the new-style private key format suffered from an unpadding bug which had been fixed earlier for ed25519 . that fix has been refactored and applied to the base key class, courtesy of pierce lopez.", #467: fully enable two-factor authentication . thanks to @perryjrandall for the patch and to @nevins-b and matt robenolt for additional support.,this includes marking known-slow tests so they can be filtered out by inv test s default behavior; as well as other minor tweaks to test collection and/or display , #372: update default window & packet sizes to more closely adhere to the pertinent rfc; also expose these settings in the public api so they may be overridden by client code. this should address some general speed issues such as #175. big thanks to olle lundberg for the update., #1175: fix a security flaw in paramiko s server mode where authentication status was not checked before processing channel-open and other requests typically only sent after authenticating. big thanks to matthijs kooijman for the report., #1175: fix a security flaw in paramiko s server mode where authentication status was not checked before processing channel-open and other requests typically only sent after authenticating. big thanks to matthijs kooijman for the report., #1175: fix a security flaw in paramiko s server mode where authentication status was not checked before processing channel-open and other requests typically only sent after authenticating. big thanks to matthijs kooijman for the report., #1175: fix a security flaw in paramiko s server mode where authentication status was not checked before processing channel-open and other requests typically only sent after authenticating. big thanks to matthijs kooijman for the report., #1175: fix a security flaw in paramiko s server mode where authentication status was not checked before processing channel-open and other requests typically only sent after authenticating. big thanks to matthijs kooijman for the report., #1175: fix a security flaw in paramiko s server mode where authentication status was not checked before processing channel-open and other requests typically only sent after authenticating. big thanks to matthijs kooijman for the report., #1175: fix a security flaw in paramiko s server mode where authentication status was not checked before processing channel-open and other requests typically only sent after authenticating. big thanks to matthijs kooijman for the report.,"this feature adds a new optional install dependency, invoke, for managing match exec subprocesses."," #859: a tweak to the original patch implementing #398 was not fully applied, causing calls to invoke_shell to fail with attributeerror. this has been fixed. patch credit: kirk byers."," #859: a tweak to the original patch implementing #398 was not fully applied, causing calls to invoke_shell to fail with attributeerror. this has been fixed. patch credit: kirk byers."," #859: a tweak to the original patch implementing #398 was not fully applied, causing calls to invoke_shell to fail with attributeerror. this has been fixed. patch credit: kirk byers."," #859: a tweak to the original patch implementing #398 was not fully applied, causing calls to invoke_shell to fail with attributeerror. this has been fixed. patch credit: kirk byers."," #859: a tweak to the original patch implementing #398 was not fully applied, causing calls to invoke_shell to fail with attributeerror. this has been fixed. patch credit: kirk byers.",thanks to fabian b chler for original report & pierce lopez for the foundational patch.,": update our ci to catch issues with sdist generation, installation and testing.",": update our ci to catch issues with sdist generation, installation and testing."," #949: sshclient and transport could cause a memory leak if there s a connection problem or protocol error, even if transport.close is called. thanks kyle agronick for the discovery and investigation, and pierce lopez for assistance."," #949: sshclient and transport could cause a memory leak if there s a connection problem or protocol error, even if transport.close is called. thanks kyle agronick for the discovery and investigation, and pierce lopez for assistance."," #949: sshclient and transport could cause a memory leak if there s a connection problem or protocol error, even if transport.close is called. thanks kyle agronick for the discovery and investigation, and pierce lopez for assistance."," #949: sshclient and transport could cause a memory leak if there s a connection problem or protocol error, even if transport.close is called. thanks kyle agronick for the discovery and investigation, and pierce lopez for assistance.","includes a directly related fix, namely adding the ability to read aes-256-cbc ciphered private keys ","includes a directly related fix, namely adding the ability to read aes-256-cbc ciphered private keys ","this is a no-op for paramiko 2.3+, which have required newer cryptography releases since they were released.","this is a no-op for paramiko 2.3+, which have required newer cryptography releases since they were released.", #984: enhance default cipher preference order such that aes-cbc are preferred over blowfish-cbc. thanks to alex gaynor., #984: enhance default cipher preference order such that aes-cbc are preferred over blowfish-cbc. thanks to alex gaynor., #428: fix an issue in bufferedfile concerning incorrect behavior by readlines on files whose size exceeds the buffer size. thanks to @achapp for catch & patch., #428: fix an issue in bufferedfile concerning incorrect behavior by readlines on files whose size exceeds the buffer size. thanks to @achapp for catch & patch., #428: fix an issue in bufferedfile concerning incorrect behavior by readlines on files whose size exceeds the buffer size. thanks to @achapp for catch & patch., #824: fix the implementation of pkey.write_private_key_file so it passes the correct params to open. this bug apparently went unnoticed and unfixed for 12 entire years. congrats to john villalovos for noticing & submitting the patch!, #824: fix the implementation of pkey.write_private_key_file so it passes the correct params to open. this bug apparently went unnoticed and unfixed for 12 entire years. congrats to john villalovos for noticing & submitting the patch!, #36: fix the port-forwarding demo to avoid file descriptor errors. thanks to jonathan halcrow for catch & patch., #36: fix the port-forwarding demo to avoid file descriptor errors. thanks to jonathan halcrow for catch & patch.,": modify protocol message handling such that transport does not respond to msg_unimplemented with its own msg_unimplemented. this behavior probably didn t cause any outright errors, but it doesn t seem to conform to the rfcs and could cause feedback loops in some scenarios .",": modify protocol message handling such that transport does not respond to msg_unimplemented with its own msg_unimplemented. this behavior probably didn t cause any outright errors, but it doesn t seem to conform to the rfcs and could cause feedback loops in some scenarios .",": modify protocol message handling such that transport does not respond to msg_unimplemented with its own msg_unimplemented. this behavior probably didn t cause any outright errors, but it doesn t seem to conform to the rfcs and could cause feedback loops in some scenarios .",": modify protocol message handling such that transport does not respond to msg_unimplemented with its own msg_unimplemented. this behavior probably didn t cause any outright errors, but it doesn t seem to conform to the rfcs and could cause feedback loops in some scenarios .",": modify protocol message handling such that transport does not respond to msg_unimplemented with its own msg_unimplemented. this behavior probably didn t cause any outright errors, but it doesn t seem to conform to the rfcs and could cause feedback loops in some scenarios .", #168: update config handling to properly handle multiple localforward and remoteforward keys. thanks to emre y lmaz for the patch., #168: update config handling to properly handle multiple localforward and remoteforward keys. thanks to emre y lmaz for the patch., #1283: fix exploit in paramiko s server mode where hostile clients could trick the server into thinking they were authenticated without actually submitting valid authentication., #1283: fix exploit in paramiko s server mode where hostile clients could trick the server into thinking they were authenticated without actually submitting valid authentication., #1283: fix exploit in paramiko s server mode where hostile clients could trick the server into thinking they were authenticated without actually submitting valid authentication., #1283: fix exploit in paramiko s server mode where hostile clients could trick the server into thinking they were authenticated without actually submitting valid authentication., #1283: fix exploit in paramiko s server mode where hostile clients could trick the server into thinking they were authenticated without actually submitting valid authentication., #295: swap out a bunch of pycrypto hash functions with use of hashlib. thanks to alex gaynor.," #602: implement support for openssh 6.5-style private key files . if you were getting any sort of weird auth error from modern keys generated on newer operating system releases , this is the first update to try.", #356: add support for sha-2 based key exchange algorithm diffie-hellman-group-exchange-sha256 and mac algorithms hmac-sha2-256 and hmac-sha2-512., #673: fix protocol banner read errors which would occasionally pop up when using proxycommand gatewaying. thanks to @depado for the initial report and paul kapp for the fix., #673: fix protocol banner read errors which would occasionally pop up when using proxycommand gatewaying. thanks to @depado for the initial report and paul kapp for the fix., #673: fix protocol banner read errors which would occasionally pop up when using proxycommand gatewaying. thanks to @depado for the initial report and paul kapp for the fix.,thanks to brandon rhodes for the report & steps to reproduce., #588: add missing file-like object methods for bufferedfile and sftpfile. thanks to adam meily for the patch., #496: fix a handful of small but critical bugs in paramiko s gssapi support . thanks to anselm kruis for catch & patch.," #16: python 3 support! our test suite passes under python 3, and it continues to pass under python 2. python 2.5 is no longer supported with this change!","thanks to @virlos for the original report, chris harris and @ibuler for initial draft prs, and @jhgorrell for the final patch.","thanks to @virlos for the original report, chris harris and @ibuler for initial draft prs, and @jhgorrell for the final patch."," #65: add support for openssh s sftp posix-rename protocol extension , via a new posix_rename method in sftpclient and sftpserverinterface. thanks to wren turkal for the initial patch & mika pfl ger for the enhanced, merged pr.", #431: replace handrolled ssh_config parsing code with use of the shlex module. thanks to yan kalchevskiy., #431: replace handrolled ssh_config parsing code with use of the shlex module. thanks to yan kalchevskiy., #431: replace handrolled ssh_config parsing code with use of the shlex module. thanks to yan kalchevskiy., #431: replace handrolled ssh_config parsing code with use of the shlex module. thanks to yan kalchevskiy.,"the definitions of exceptions __init__ methods have not changed, nor have any log messages been altered, so this should be backwards compatible for everything except the actual exceptions __str__ outputs."," #252: enhanced the implementation of proxycommand to avoid a deadlock/hang condition that frequently occurs at transport shutdown time. thanks to mateusz kobos, matthijs van der vleuten and guillaume zitta for the original reports and to marius gedminas for helping test nontrivial use cases."," #252: enhanced the implementation of proxycommand to avoid a deadlock/hang condition that frequently occurs at transport shutdown time. thanks to mateusz kobos, matthijs van der vleuten and guillaume zitta for the original reports and to marius gedminas for helping test nontrivial use cases."," #252: enhanced the implementation of proxycommand to avoid a deadlock/hang condition that frequently occurs at transport shutdown time. thanks to mateusz kobos, matthijs van der vleuten and guillaume zitta for the original reports and to marius gedminas for helping test nontrivial use cases.",big thanks to anselm kruis for the patch and to sebastian dei for review., #604: add support for the aes192-ctr and aes192-cbc ciphers. thanks to michiel tiller for noticing it was as easy as tweaking some key sizes :d, #393: replace internal use of pycrypto s sha.new with the stdlib s hashlib.sha1. thanks to alex gaynor., #990: the bcrypt dependency should have been on version 3.1.3 or greater thanks to paul howarth for the report., #990: the bcrypt dependency should have been on version 3.1.3 or greater thanks to paul howarth for the report., #990: the bcrypt dependency should have been on version 3.1.3 or greater thanks to paul howarth for the report.," #44: sshclient now gives its internal transport a handle on itself, preventing garbage collection of the client until the session is closed. without this, some code which returns stream or transport objects without the client that generated them, would result in premature session closure when the client was gcd. credit: @w31rd0 for original report, omer anson for the patch."," #44: sshclient now gives its internal transport a handle on itself, preventing garbage collection of the client until the session is closed. without this, some code which returns stream or transport objects without the client that generated them, would result in premature session closure when the client was gcd. credit: @w31rd0 for original report, omer anson for the patch."," #44: sshclient now gives its internal transport a handle on itself, preventing garbage collection of the client until the session is closed. without this, some code which returns stream or transport objects without the client that generated them, would result in premature session closure when the client was gcd. credit: @w31rd0 for original report, omer anson for the patch."," #44: sshclient now gives its internal transport a handle on itself, preventing garbage collection of the client until the session is closed. without this, some code which returns stream or transport objects without the client that generated them, would result in premature session closure when the client was gcd. credit: @w31rd0 for original report, omer anson for the patch."," #729: clean up setup.py to always use setuptools, not doing so was a historical artifact from bygone days. thanks to alex gaynor."," #729: clean up setup.py to always use setuptools, not doing so was a historical artifact from bygone days. thanks to alex gaynor."," #729: clean up setup.py to always use setuptools, not doing so was a historical artifact from bygone days. thanks to alex gaynor.", #373: attempt to fix a handful of issues related to infinite loops and threading deadlocks. thanks to olle lundberg as well as a handful of community members who provided advice & feedback via irc.," #353: fix a bug introduced in the python 3 port which caused overflowerror in sftp functionality. thanks to @dboreham for leading the troubleshooting charge, and to scott maxwell for the final patch."," #353: fix a bug introduced in the python 3 port which caused overflowerror in sftp functionality. thanks to @dboreham for leading the troubleshooting charge, and to scott maxwell for the final patch."," #353: fix a bug introduced in the python 3 port which caused overflowerror in sftp functionality. thanks to @dboreham for leading the troubleshooting charge, and to scott maxwell for the final patch."," #298: don t perform point validation on ecdsa keys in known_hosts files, since a) this can cause significant slowdown when such keys exist, and b) known_hosts files are implicitly trustworthy. thanks to kieran spear for catch & patch.","this technically changes behavior, insofar as very slow auth steps >30s will now cause timeout exceptions instead of completing. we doubt most users will notice; those affected can simply give a higher value to auth_timeout.","to be very clear, this patch does not remove support for the older python-gssapi library. we may remove that support in a later release, but for now, either library will work. please upgrade to gssapi when you can, however, as python-gssapi is no longer maintained upstream."," #415: fix ssh_config parsing to correctly interpret proxycommand none as the lack of a proxy command, instead of as a literal command string of ""none"". thanks to richard spiers for the catch & sean johnson for the fix."," #415: fix ssh_config parsing to correctly interpret proxycommand none as the lack of a proxy command, instead of as a literal command string of ""none"". thanks to richard spiers for the catch & sean johnson for the fix."," #415: fix ssh_config parsing to correctly interpret proxycommand none as the lack of a proxy command, instead of as a literal command string of ""none"". thanks to richard spiers for the catch & sean johnson for the fix.","however, it should only affect installation requirements; no api changes are intended or expected. please report any such breakages as bugs.", #792: minor updates to the readme and demos; thanks to alan yee., #792: minor updates to the readme and demos; thanks to alan yee., #792: minor updates to the readme and demos; thanks to alan yee., #792: minor updates to the readme and demos; thanks to alan yee.,: additional installation extras_require flavors have been added to our packaging metadata; see the install docs for details.," #993: ed25519 host keys were not comparable/hashable, causing an exception if such a key existed in a known_hosts file. thanks to oleh prypin for the report and pierce lopez for the fix."," #993: ed25519 host keys were not comparable/hashable, causing an exception if such a key existed in a known_hosts file. thanks to oleh prypin for the report and pierce lopez for the fix."," #993: ed25519 host keys were not comparable/hashable, causing an exception if such a key existed in a known_hosts file. thanks to oleh prypin for the report and pierce lopez for the fix.", #146: indentation fixes for readability. thanks to abhinav upadhyay for catch & patch.," #1070: drop python 2.6 and python 3.3 support; now only 2.7 and 3.4+ are supported. if you re unable to upgrade from 2.6 or 3.3, please stick to the paramiko 2.3.x release lines.",this change adds the bcrypt and pynacl python libraries as dependencies. no c-level dependencies beyond those previously required have been added.," #951: add support for ecdh key exchange , specifically the algorithms ecdh-sha2-nistp256, ecdh-sha2-nistp384, and ecdh-sha2-nistp521. they now come before the older diffie-hellman-* family of kex algorithms in the preferred-kex list. thanks to shashank veerapaneni for the patch & pierce lopez for a follow-up.", #532: add support for curve25519 key exchange . thanks to alex gaynor and dan fuhry for supplying patches., #676: fix a backwards incompatibility issue that cropped up in sftpfile.prefetch re: the erroneously non-optional file_size parameter. should only affect users who manually call prefetch. thanks to @stevevanhooser for catch & patch., #676: fix a backwards incompatibility issue that cropped up in sftpfile.prefetch re: the erroneously non-optional file_size parameter. should only affect users who manually call prefetch. thanks to @stevevanhooser for catch & patch., #774: add a _closed private attribute to channel objects so that they continue functioning when used as proxy sockets under python 3 , #774: add a _closed private attribute to channel objects so that they continue functioning when used as proxy sockets under python 3 , #774: add a _closed private attribute to channel objects so that they continue functioning when used as proxy sockets under python 3 , #652: fix behavior of gssapi-with-mic auth requests so they fail gracefully instead of raising an exception. patch courtesy of @jamercee., #652: fix behavior of gssapi-with-mic auth requests so they fail gracefully instead of raising an exception. patch courtesy of @jamercee., #167: add get_hostnames for easier introspection of a loaded ssh config file or object. courtesy of s ren l vborg.,professionally-supported paramiko is available with the tidelift subscription., #681: fix a python3-specific bug re: the handling of read buffers when using proxycommand. thanks to paul kapp for catch & patch., #681: fix a python3-specific bug re: the handling of read buffers when using proxycommand. thanks to paul kapp for catch & patch.," #312: paramiko.transport.transport had a bug in its __repr__ which surfaces during errors encountered within its __init__, causing problematic tracebacks in such situations. thanks to simon percivall for catch & patch."," #312: paramiko.transport.transport had a bug in its __repr__ which surfaces during errors encountered within its __init__, causing problematic tracebacks in such situations. thanks to simon percivall for catch & patch.", #1440: tweak many exception classes so their string representations are more human-friendly; this also includes incidental changes to some super calls.,": paramiko.file.bufferedfile.read incorrectly returned text strings after the python 3 migration, despite bytes being more appropriate for file contents this has been addressed.",": paramiko.file.bufferedfile.read incorrectly returned text strings after the python 3 migration, despite bytes being more appropriate for file contents this has been addressed.",": paramiko.file.bufferedfile.read incorrectly returned text strings after the python 3 migration, despite bytes being more appropriate for file contents this has been addressed."," #272: fix a bug where known_hosts parsing hashed the input hostname as well as the hostnames from the known_hosts file, on every comparison. thanks to @sigmunau for final patch and @ostacey for the original report."," #272: fix a bug where known_hosts parsing hashed the input hostname as well as the hostnames from the known_hosts file, on every comparison. thanks to @sigmunau for final patch and @ostacey for the original report."," #670: due to an earlier bugfix, less-specific host blocks proxycommand values were overriding proxycommand none in more-specific host blocks. this has been fixed in a backwards compatible manner . thanks to pat brisbin for the catch."," #670: due to an earlier bugfix, less-specific host blocks proxycommand values were overriding proxycommand none in more-specific host blocks. this has been fixed in a backwards compatible manner . thanks to pat brisbin for the catch.",": a big formatting pass to clean up an enormous number of invalid sphinx reference links, discovered by switching to a modern, rigorous nitpicking doc-building mode.",": a big formatting pass to clean up an enormous number of invalid sphinx reference links, discovered by switching to a modern, rigorous nitpicking doc-building mode.",": a big formatting pass to clean up an enormous number of invalid sphinx reference links, discovered by switching to a modern, rigorous nitpicking doc-building mode.", #284: add python language trove identifiers to setup.py. thanks to alex gaynor for catch & patch., #758: apply type definitions to _winapi module from jaraco.windows 3.6.1. this should address issues on windows platforms that often result in errors like argumenterror: int too long to convert. thanks to @swohlerll for the report and jason r. coombs for the patch., #758: apply type definitions to _winapi module from jaraco.windows 3.6.1. this should address issues on windows platforms that often result in errors like argumenterror: int too long to convert. thanks to @swohlerll for the report and jason r. coombs for the patch., #758: apply type definitions to _winapi module from jaraco.windows 3.6.1. this should address issues on windows platforms that often result in errors like argumenterror: int too long to convert. thanks to @swohlerll for the report and jason r. coombs for the patch.," #780: add an optional timeout parameter to transport.start_client this helps prevent situations where network connectivity isn t timing out, but the remote server is otherwise unable to service the connection in a timely manner. credit to @sanseihappa."," #780: add an optional timeout parameter to transport.start_client this helps prevent situations where network connectivity isn t timing out, but the remote server is otherwise unable to service the connection in a timely manner. credit to @sanseihappa.", #1108: rename a private method keyword argument so that we re compatible with the upcoming python 3.7 release thanks to @vepiphyte for the report., #1108: rename a private method keyword argument so that we re compatible with the upcoming python 3.7 release thanks to @vepiphyte for the report., #1108: rename a private method keyword argument so that we re compatible with the upcoming python 3.7 release thanks to @vepiphyte for the report., #1108: rename a private method keyword argument so that we re compatible with the upcoming python 3.7 release thanks to @vepiphyte for the report., #1108: rename a private method keyword argument so that we re compatible with the upcoming python 3.7 release thanks to @vepiphyte for the report., #1108: rename a private method keyword argument so that we re compatible with the upcoming python 3.7 release thanks to @vepiphyte for the report., #142: sftp put of empty file will still return the attributes of the put file. thanks to jason r. coombs for the patch., #335: fix ecdsa key generation . thanks to @solarw for catch & patch., #1233: add support for encrypt-then-mac schemes and two newer diffie-hellman group key exchange algorithms . patch courtesy of edgar sousa.," #285: update our python 3 b compatibility shim to handle buffer objects correctly; this fixes a frequently reported issue affecting many users, including users of the bzr software suite. thanks to @basictheprogram for the initial report, jelmer vernooij for the fix and andrew starr-bochicchio & jeremy t. bouse for discussion & feedback."," #285: update our python 3 b compatibility shim to handle buffer objects correctly; this fixes a frequently reported issue affecting many users, including users of the bzr software suite. thanks to @basictheprogram for the initial report, jelmer vernooij for the fix and andrew starr-bochicchio & jeremy t. bouse for discussion & feedback."," #617: fix up novalidconnectionserror so it pickles correctly, and fix a related python 3 compatibility issue. thanks to rebecca schlussel for the report & marius gedminas for the patch."," #617: fix up novalidconnectionserror so it pickles correctly, and fix a related python 3 compatibility issue. thanks to rebecca schlussel for the report & marius gedminas for the patch.", #429: server-level debug message logging was overlooked during the python 3 compatibility update; python 3 clients attempting to log ssh debug packets encountered type errors. this is now fixed. thanks to @mjmaenpaa for the catch., #429: server-level debug message logging was overlooked during the python 3 compatibility update; python 3 clients attempting to log ssh debug packets encountered type errors. this is now fixed. thanks to @mjmaenpaa for the catch., #429: server-level debug message logging was overlooked during the python 3 compatibility update; python 3 clients attempting to log ssh debug packets encountered type errors. this is now fixed. thanks to @mjmaenpaa for the catch.," #398: add an environment dict argument to client.exec_command which implements the env ssh message type. this means the remote shell environment can be set without the use of varname=value shell tricks, provided the server s acceptenv lists the variables you need to set. thanks to philip lorenz for the pull request."," #398: add an environment dict argument to client.exec_command which implements the env ssh message type. this means the remote shell environment can be set without the use of varname=value shell tricks, provided the server s acceptenv lists the variables you need to set. thanks to philip lorenz for the pull request.", #1565: fix a bug in support for ecdsa keys under the newly supported openssh key format. thanks to pierce lopez for the patch., #194: streamline use of stat when downloading sftp files via sftpclient.get; this avoids triggering bugs in some off-spec sftp servers such as ibm sterling. thanks to @muraleee for the initial report and to torkil gustavsen for the patch., #136: add server-side support for the ssh protocol s env command. thanks to benjamin pollack for the patch., #1039: ed25519 auth key decryption raised an unexpected exception when given a unicode password string . report by theodor van nahl and fix by pierce lopez., #1039: ed25519 auth key decryption raised an unexpected exception when given a unicode password string . report by theodor van nahl and fix by pierce lopez., #1039: ed25519 auth key decryption raised an unexpected exception when given a unicode password string . report by theodor van nahl and fix by pierce lopez., #1039: ed25519 auth key decryption raised an unexpected exception when given a unicode password string . report by theodor van nahl and fix by pierce lopez., #1039: ed25519 auth key decryption raised an unexpected exception when given a unicode password string . report by theodor van nahl and fix by pierce lopez.,next 2.x feature release, #152: add tentative support for ecdsa keys. this adds the ecdsa module as a new dependency of paramiko. the module is available at warner/python-ecdsa on github and ecdsa on pypi., #921: tighten up the __hash__ implementation for various key classes; less code is good code. thanks to francisco couzo for the patch., #1012: enhance documentation around the new sftp.posix_rename method so it s referenced in the standard rename method for increased visibility. thanks to marius flage for the report., #621: annotate some public attributes on channel such as .closed. thanks to sergey vasilyev for the report., #621: annotate some public attributes on channel such as .closed. thanks to sergey vasilyev for the report., #621: annotate some public attributes on channel such as .closed. thanks to sergey vasilyev for the report., #87: ensure updates to known_hosts files account for any updates to said files after paramiko initially read them. thanks to @sunweaver for the contribution., #895: fix a bug in server-mode concerning multiple interactive auth steps . thanks to dennis kaarsemaker for catch & patch., #895: fix a bug in server-mode concerning multiple interactive auth steps . thanks to dennis kaarsemaker for catch & patch., #895: fix a bug in server-mode concerning multiple interactive auth steps . thanks to dennis kaarsemaker for catch & patch., #895: fix a bug in server-mode concerning multiple interactive auth steps . thanks to dennis kaarsemaker for catch & patch., #421: modernize threading calls to use newer api. thanks to olle lundberg., #421: modernize threading calls to use newer api. thanks to olle lundberg., #421: modernize threading calls to use newer api. thanks to olle lundberg., #421: modernize threading calls to use newer api. thanks to olle lundberg.," #359: use correct attribute name when trying to use python 3 s int.bit_length method; prior to fix, the python 2 custom fallback implementation was always used, even on python 3. thanks to alex gaynor."," #359: use correct attribute name when trying to use python 3 s int.bit_length method; prior to fix, the python 2 custom fallback implementation was always used, even on python 3. thanks to alex gaynor."," #359: use correct attribute name when trying to use python 3 s int.bit_length method; prior to fix, the python 2 custom fallback implementation was always used, even on python 3. thanks to alex gaynor.", #1291: backport pytest support and application of the black code formatter to everything 2.0 and newer. this makes back/forward porting bugfixes significantly easier., #1291: backport pytest support and application of the black code formatter to everything 2.0 and newer. this makes back/forward porting bugfixes significantly easier.," #128: defer fqdn resolution until needed, when parsing ssh config files. thanks to parantapa bhattacharya for catch & patch.", #741: writing encrypted/password-protected private key files was silently broken since 2.0 due to an incorrect api call; this has been fixed., #741: writing encrypted/password-protected private key files was silently broken since 2.0 due to an incorrect api call; this has been fixed.,installing,installing ,"openssh defaults to compression level 6, which is a much more reasonable setting ; paramiko now uses this value instead.",this is a backwards incompatible change.," #537: fix a bug in bufferedpipe.set_event which could cause deadlocks/hangs when one uses select.select against channel objects . thanks to przemys aw strzelczak for the report & reproduction case, and to krzysztof rusek for the fix."," #537: fix a bug in bufferedpipe.set_event which could cause deadlocks/hangs when one uses select.select against channel objects . thanks to przemys aw strzelczak for the report & reproduction case, and to krzysztof rusek for the fix."," #537: fix a bug in bufferedpipe.set_event which could cause deadlocks/hangs when one uses select.select against channel objects . thanks to przemys aw strzelczak for the report & reproduction case, and to krzysztof rusek for the fix.",": perform deduplication of identityfile contents during ssh_config parsing; previously, if your config would result in the same value being encountered more than once, identityfile would contain that many copies of the same string.", #502: fix exec requests in server mode to use get_string instead of get_text to avoid unicodedecodeerror on non-utf-8 input. thanks to anselm kruis for the patch & discussion.,"note that you might still run into problems with key negotiation paramiko picks the first key that the server offers, which might not be what you have in your known_hosts file."," #1055: fix up host-key checking in our gssapi support, which was previously using an incorrect api call. thanks to anselm kruis for the patches."," #1055: fix up host-key checking in our gssapi support, which was previously using an incorrect api call. thanks to anselm kruis for the patches."," #1055: fix up host-key checking in our gssapi support, which was previously using an incorrect api call. thanks to anselm kruis for the patches."," #1055: fix up host-key checking in our gssapi support, which was previously using an incorrect api call. thanks to anselm kruis for the patches."," #1055: fix up host-key checking in our gssapi support, which was previously using an incorrect api call. thanks to anselm kruis for the patches.", #200: fix an exception-causing typo in demo_simple.py. thanks to alex buchanan for catch & dave foster for patch., #200: fix an exception-causing typo in demo_simple.py. thanks to alex buchanan for catch & dave foster for patch., #862: avoid test suite exceptions on platforms lacking errno.etime thanks to sofian brabez., #862: avoid test suite exceptions on platforms lacking errno.etime thanks to sofian brabez., #862: avoid test suite exceptions on platforms lacking errno.etime thanks to sofian brabez., #862: avoid test suite exceptions on platforms lacking errno.etime thanks to sofian brabez., #322: sshclient.exec_command previously returned a naive channelfile object for its stdin value; such objects don t know to properly shut down the remote end s stdin when they .close. this lead to issues when running remote commands that read from stdin.,thanks to daniel hoffman for the detailed report.,thanks to daniel hoffman for the detailed report.,thanks to daniel hoffman for the detailed report.,thanks to daniel hoffman for the detailed report.,thanks to daniel hoffman for the detailed report.," #612: identify & work around a race condition in the test for handshake timeouts, which was causing frequent test failures for a subset of contributors as well as travis-ci . props to ed kellett for assistance during some of the troubleshooting."," #612: identify & work around a race condition in the test for handshake timeouts, which was causing frequent test failures for a subset of contributors as well as travis-ci . props to ed kellett for assistance during some of the troubleshooting."," #612: identify & work around a race condition in the test for handshake timeouts, which was causing frequent test failures for a subset of contributors as well as travis-ci . props to ed kellett for assistance during some of the troubleshooting."," #1100: updated the test suite & related docs/metadata/config to be compatible with pytest instead of using the old, custom, crufty unittest-based test.py.", #179: fix a missing variable causing errors when an ssh_config file has a non-default addressfamily set. thanks to ed marshall & tomaz muraus for catch & patch., #179: fix a missing variable causing errors when an ssh_config file has a non-default addressfamily set. thanks to ed marshall & tomaz muraus for catch & patch., #71: add sftpclient.putfo and .getfo methods to allow direct uploading/downloading of file-like objects. thanks to eric buehl for the patch., #554: fix inaccuracies in the docstring for the ecdsa key class. thanks to jared hance for the patch., #554: fix inaccuracies in the docstring for the ecdsa key class. thanks to jared hance for the patch., #554: fix inaccuracies in the docstring for the ecdsa key class. thanks to jared hance for the patch., #554: fix inaccuracies in the docstring for the ecdsa key class. thanks to jared hance for the patch., #34: fix sftp prefetching incompatibility with some sftp servers regarding request/response ordering. thanks to richard kettlewell., #34: fix sftp prefetching incompatibility with some sftp servers regarding request/response ordering. thanks to richard kettlewell., #34: fix sftp prefetching incompatibility with some sftp servers regarding request/response ordering. thanks to richard kettlewell.," #325: add ed25519 support, for both host keys and user authentication. big thanks to alex gaynor for the patch.", #127: turn sftpfile into a context manager. thanks to michael williamson for the patch., #218: add support for ecdsa private keys on the client side. thanks to @aszlig for the patch.,": ssh_config token expansion used a different method of determining the local username , compared to what the client connection code does . both modules now use getpass.getuser.", #455: tweak packet size handling to conform better to the openssh rfcs; this helps address issues with interactive program cursors. courtesy of jeff quast., #455: tweak packet size handling to conform better to the openssh rfcs; this helps address issues with interactive program cursors. courtesy of jeff quast., #455: tweak packet size handling to conform better to the openssh rfcs; this helps address issues with interactive program cursors. courtesy of jeff quast.,next 1.x feature release, #419: modernize a bunch of the codebase internals to leverage decorators. props to @beckjake for realizing we re no longer on python 2.2 :d, #419: modernize a bunch of the codebase internals to leverage decorators. props to @beckjake for realizing we re no longer on python 2.2 :d, #419: modernize a bunch of the codebase internals to leverage decorators. props to @beckjake for realizing we re no longer on python 2.2 :d, #419: modernize a bunch of the codebase internals to leverage decorators. props to @beckjake for realizing we re no longer on python 2.2 :d," #1727: add missing test suite fixtures directory to manifest.in, reinstating the ability to run paramiko s tests from an sdist tarball. thanks to sandro tosi for reporting the issue and to blazej michalik for the pr."," #1727: add missing test suite fixtures directory to manifest.in, reinstating the ability to run paramiko s tests from an sdist tarball. thanks to sandro tosi for reporting the issue and to blazej michalik for the pr.", #853: tweak how rsakey.__str__ behaves so it doesn t cause typeerror under python 3. thanks to francisco couzo for the report., #853: tweak how rsakey.__str__ behaves so it doesn t cause typeerror under python 3. thanks to francisco couzo for the report., #853: tweak how rsakey.__str__ behaves so it doesn t cause typeerror under python 3. thanks to francisco couzo for the report., #853: tweak how rsakey.__str__ behaves so it doesn t cause typeerror under python 3. thanks to francisco couzo for the report.," #1060: fix key exchange algorithm list for gssapi authentication; previously, the list used solely out-of-date algorithms, and now contains newer ones listed preferentially before the old. credit: anselm kruis."," #1060: fix key exchange algorithm list for gssapi authentication; previously, the list used solely out-of-date algorithms, and now contains newer ones listed preferentially before the old. credit: anselm kruis."," #1060: fix key exchange algorithm list for gssapi authentication; previously, the list used solely out-of-date algorithms, and now contains newer ones listed preferentially before the old. credit: anselm kruis.","practically speaking, this change prevents spamming of cryptographydeprecationwarning notices which pop up in the above scenario .","practically speaking, this change prevents spamming of cryptographydeprecationwarning notices which pop up in the above scenario .", #819: document how lacking gmp headers at install time can cause a significant performance hit if you build pycrypto from source. , #819: document how lacking gmp headers at install time can cause a significant performance hit if you build pycrypto from source. , #334: make the subprocess import in proxy.py lazy so users on platforms without it can import paramiko successfully. credit: shinya okano., #334: make the subprocess import in proxy.py lazy so users on platforms without it can import paramiko successfully. credit: shinya okano.,: added self.args for exception classes. used for unpickling. related to . thanks to alex plugaru.,: added self.args for exception classes. used for unpickling. related to . thanks to alex plugaru.,: added self.args for exception classes. used for unpickling. related to . thanks to alex plugaru.
Altair Change Log â€” Altair 4.1.0 documentation,"new alt.concat function that is similar to alt.hconcat and alt.vconcat, but allows for more general wrapped concatenation","new facet encoding that is similar to the row and column encoding, but allows for wrapped facets","it is the first version of altair to drop python 2 compatibility, and is tested on python 3.5 and newer.","new chart.show method replaces chart.serve, and relies on altair_viewer to allow offline viewing of charts .",update to vega-lite 1.2.1 and add its supported features,"alt.chart.facet now accepts a wrapped facet encoding as a first positional argument, rather than a row encoding. the following are examples of old invocations, and the equivalent new invocations:",all inline datasets are now converted to named datasets and stored at the top level of the chart. this behavior can be disabled by setting alt.data_transformers.consolidate_datasets = false ,"check for missing and misspelled column names upon exporting or rendering, and raise fielderror if any problems are found. this can be disabled by setting chart.validated_columns=false.","new default html renderer, directly compatible with jupyter notebook and jupyterlab without the need for frontend extensions, as well as tools like nbviewer and nbconvert, and related notebook environments such as zeppelin, colab, kaggle kernels, and databricks. to enable the old default renderer, use:",altair now uses black and flake8 for maintaining code quality & consistency.,data context is propagated when encodings are specified as lists ,data argument is now properly handled by chart.properties ,selector values can be used directly in expressions ,new encoding channels are properly parsed ,add chart.serve and chart.display methods for more flexibility in displaying charts ,following are changes to altair in addition to those that came with vl 3.4:,allow multiple fields to be passed to encodings such as tooltip and detail ,avoid selenium import until it is actually needed ,"compound charts now move data to the top level by default. in particular, this means that the facet method can now be called directly on a layered chart without having to change how data is specified. ",top-level chart repr is now truncated to improve readability of error messages ,update includes full compatibility with version 3.3 of vega-lite.,add altair.expr machinery to specify transformations and filterings ,built with sphinx using a theme provided by read the docs.,"align, center, spacing, and columns are no longer valid chart properties, but are moved to the encoding classes to which they refer.","make to_json and to_csv have deterministic filenames, so in json mode a single datasets will lead to a single on-disk serialization ",includes many reworked examples in the example gallery.,fix issue with duplicate chart divs in html renderer ,only api change is internal: alt.markproperties is now alt.markconfig,raise maxrowsexceeded if the number of rows in the dataset is larger than chart.max_rows to guard against sending large datasets to the browser.,move the vega-lite 1.x api into altair.v1 to make it easier for us to migrate to vega-lite 2.x and continue to support 1.x. no import change are needed as altair.v1 is aliased to altair in this releasealtair.v1 .,support pickle and copy.deepcopy for chart objects ,strokedash encoding can now be used to control line styles ,change default import in all code and docs to import altair as alt,unsupported mark_* methods removed from layerchart ,several of the encoding channels added in 3.0 have had their capitalization corrected to better match the names used in the schema:,tooltips can now be automatically populated using the tooltip mark configuration.,"new columns keyword that allows wrapped faceting, repeating, and concatenation.",added support for vega themes via alt.themes.enable ,improved user-facing warnings/errors around layering and faceting .,make sure default mark is a point .,minimum python version is now 3.6,add an add_selection method to add selections to charts ,set up travis to run conda & pip; and to build documentation,add a scale_factor argument to chart.save to allow the size/resolution of saved figures to be adjusted. ,fix incompatibility with pandas version 0.24 ,better handling of datetimes and timezones ,selection predicates now recognize all valid entries ,top-level add_selection methods now delegate to sub-charts. previously they produced invalid charts ,more streamlined shorthand syntax for window transforms ,moved the example notebooks into a separate repository .,added kaggle renderer & more html output options ,sort-by-field can now use the field name directly. so instead of:,times and dates in altair,"add chart.savechart method, which can output json, html, and png and svg. see link ","in each case, the new invocations are compatible back to altair 2.x.",add html renderer which works across frontends ,"make timeunit specifications more succinct, by parsing them in a manner similar to aggregates ",scale and guide resolution,added an alt.renderers.disable_max_rows method for disabling the maximum rows check ,fixed serialization of logical operands on selections within transform_filter: ,"the rangestep argument to scale and chart.configure_scale is deprecated. instead, use chart.properties or chart.configure_view.",update to vega-lite 3.2 and vega 5.3 & support all new features. see link for vega-lite feature lists.,support for jupyterlab/nteract through mime based rendering. enable this by calling enable_mime_rendering before rendering visualizations .,"version 4.0.0 is based on vega-lite version 4.0, which you can read about at link",support pandas nullable ints and string types ,"alt.layerchart now supports mark_* methods. if a layer specifies a mark at the top level, all child charts will inherit it .",added support & ci testing for python 3.7 ,getting started,this version of altair is based on vega-lite 1.2.1.
Release notes â€” Scrapy 2.5.0 documentation,concurrent_requests_per_spider setting has been deprecated and replaced by:,the previously bundled scrapy.xlib.pydispatch library was deprecated and replaced by pydispatcher.,replaced default spider manager with one with similar functionality but not depending on twisted plugins ,deprecated settings.overrides and settings.defaults attributes are removed .,chunkedtransfermiddleware is deprecated and removed from the default downloader middlewares.,using environment variables prefixed with scrapy_ to override settings is deprecated ,"scrapy now supports anonymous ftp sessions with customizable user and password via the new ftp_user and ftp_password settings. and if you re using twisted version 17.1.0 or above, ftp is now available with python 3.",the noconnect query string argument of proxy urls is deprecated and should be removed from proxy urls ,redirects to urls starting with 3 slashes are now supported ,the following deprecated apis have been removed :,the feed_format and feed_uri settings have been deprecated in favor of the new feeds setting ,fix deprecated crawlersettings and increase backward compatibility with .defaults attribute ,deprecated crawlersettings class is removed .,new features and enhancements,the following deprecated settings have also been removed :,new features and settings,new features and improvements,new features and improvements,new features and improvements,replaced chain with chain.from_iterable ,add signal to be sent when request is dropped by the scheduler ,the correct encoding is now used for attach names in mailsender ,pem file is used by mockserver and required by scrapy bench ,"when using pypy, pypy 7.2.0 or greater is now required",documented autothrottle extension and added to extensions installed by default. you still need to enable it with autothrottle_enabled,"the spiders property has been removed from crawler, use crawlerrunner.spider_loader or instantiate spider_loader_class with your settings instead ",use a mutable mapping to proxy deprecated settings.overrides and settings.defaults attribute ,removed all code that was deprecated in 1.7.0 and had not already been removed in 2.4.0. ,make spiderloader raise importerror again by default for missing dependencies and wrong spider_modules. these exceptions were silenced as warnings since 1.3.0. a new setting is introduced to toggle between warning or exception if needed ; see spider_loader_warn_only for details.,"old domain argument has been deprecated and will be removed in 0.9. for spiders, you should always use the spider argument and pass spider references. if you really want to pass a string, use the component argument instead.",zope.interface 5.0.0 and later versions are now supported ,use of the undocumented scrapy_pickled_settings_to_override environment variable is deprecated ,google cloud storage is supported in filespipeline and imagespipeline.,sending emails is not supported,"compatibility with python 3.6, pypy and pypy3 is improved; pypy and pypy3 are now supported officially, by running tests on ci.","drop libxml2 and multi selector s backend support, lxml is required from now on.",process_spider_exception is now also invoked for generators ,the following datatypes were deprecated :,telnet console is not supported,additional new features and enhancements,"link extractors are also improved. they work similarly to what a regular modern browser would do: leading and trailing whitespace are removed from attributes (think href="" link when building link objects. this whitespace-stripping also happens for action attributes with formrequest.",code rearranged and removed,lxml is now the default selectors backend instead of libxml2,most visible change is that .get and .getall selector methods are now preferred over .extract_first and .extract. we feel that these new methods result in a more concise and readable code. see extract and extract_first for more details.,scrapy may very well work with older versions of these packages but it is not guaranteed .,"support for python 3.5.0 and 3.5.1 has been dropped; scrapy now refuses to run with a python version lower than 3.5.2, which introduced typing.type ","the processing of ansi escape sequences in enabled in windows 10.0.14393 and later, where it is required for colored output ",an empty string is now used for submit buttons without a value ,python 3.6 or greater is now required; support for python 3.5 has been dropped,filespipeline.file_path and imagespipeline.file_path no longer choose file extensions that are not registered with iana ,the scrapy.utils.python.retry_on_eintr function is now deprecated ,"there s been a large rearrangement of modules trying to improve the general structure of scrapy. main changes were separating various subpackages into new projects and dissolving both scrapy.contrib and scrapy.contrib_exp into top level packages. backward compatibility was kept among internal relocations, while importing deprecated modules expect warnings indicating their new place.",fixed deprecated uses of the twisted api. ,binary mode is required for exporters ,using your browser s developer tools for scraping is a new tutorial which replaces old firefox and firebug tutorials .,the scrapy.utils.py36 module is now deprecated in favor of scrapy.utils.asyncgen. ,remove concurrency limitation when using download delays and still ensure inter-request delays are enforced ,mailsender now accepts single strings as values for to and cc arguments ,"a new robotstxt_parser setting allows choosing which robots.txt parser to use. it includes built-in support for robotfileparser, protego , reppy, and robotexclusionrulesparser, and allows you to implement support for additional parsers ",jsonrequest is now called jsonrequest for consistency with similar classes ,"spider subclass instances were never meant to work, and they were not working as one would expect: instead of using the passed spider subclass instance, their from_crawler method was called to generate a new instance.","our documentation policies now cover usage of sphinx s versionadded and versionchanged directives, and we have removed usages referencing scrapy 1.4.0 and earlier versions ",added partial support for python s coroutine syntax and experimental support for asyncio and asyncio-powered libraries ,"the fix is backward incompatible, it enables telnet user-password authentication by default with a random generated password. if you can t upgrade right away, please consider setting telnetconsole_port out of its default value.",exceptions from itemloader input and output processors are now more verbose ,the serialize attribute has been removed ,add test for webclient with post method and no body given ,"this includes also settings where only part of its value is made of an import path, such as downloader_middlewares or download_handlers.","new selector s api including css selectors ,",make sure you install scrapy 1.7.1. the scrapy 1.7.0 package in pypi is the result of an erroneous commit tagging and does not include all the changes described below.,zstd-compressed responses are now supported if zstandard is installed ,"this release comes rather soon after 1.2.2 for one main reason: it was found out that releases since 0.18 up to 1.2.2 use some backported code from twisted , even if newer twisted modules are available. scrapy now uses twisted.web.client and twisted.internet.endpoints directly. ","assertionerror exceptions triggered by assert statements have been replaced by new exception types, to support running python in optimized mode without changing scrapy s behavior in any unexpected ways.",simplified and improved response encoding support ,the scrapy.utils.python.weakkeycache class is now deprecated ,"last but not least, scrapy now has the option to make json and xml items more human-readable, with newlines between items and even custom indenting offset, using the new feed_export_indent setting.",scrapy.utils.datatypes.caselessdict now accepts mapping instances and not only dicts ,make filespipeline and imagespipeline backward compatible again regarding the use of legacy class attributes for customization ,test the parse command locally instead of against an external url ,"from_crawler support is added to feed exporters and feed storages. this, among other things, allows to access scrapy settings from custom feed storages and exporters .",the leveldb storage backend of httpcachemiddleware is deprecated ,bear in mind this feature is still under development and its api may change until it reaches a stable status.,"lower versions of these optional requirements may work, but it is not guaranteed ",request.from_curl and curl_to_request_kwargs now set the request method to post when a request body is specified and no request method is specified ,"docs are re-written to suggest .get/.getall api instead of .extract/.extract_first. also, selectors docs are updated and re-structured to match latest parsel docs; they now contain more topics, such as selecting element attributes or extensions to css selectors .",response.encoding is now the detected encoding ,selectors were extracted to the parsel library . this means you can use scrapy selectors without scrapy and also upgrade the selectors engine without needing to upgrade scrapy.,ftp download handler is not supported,added installation notes about using conda for windows and other oses. ,"as a consequence, we got rid of scrapy.xlib.tx.* modules, which copied some of twisted code for users stuck with an old twisted version",there is not support for python3 yet ,"filespipeline and imagespipeline settings are now instance attributes instead of class attributes, enabling spider-specific behaviors .",added support for dynamically adjusting download delay and maximum concurrent requests ,instances of downstream_queue_cls should be created using the new scrapypriorityqueue.qfactory or downloaderawarepriorityqueue.pqfactory methods.,removed deprecated core.signals.domain_open signal - use core.signals.domain_opened instead ,"when a response is larger than download_maxsize, the logged message is now a warning, instead of an error ",linkextractor now strips leading and trailing whitespaces from attributes ,url and body attributes of request objects are now read-only ,scrapy is imported by default when using shell tools .,"when uploading files or images to s3 , the default acl policy is now private instead of public warning: backward incompatible!. you can use files_store_s3_acl to change it.",leveldb support has been removed ,"for amazon s3 storage support in feed exports or media pipelines, botocore 1.4.87 or greater is now required",new feed_export_encoding setting to customize the encoding used when writing items to a file. this can be used to turn off \uxxxx escapes in json output. this is also useful for those wanting something else than utf-8 for xml or csv output .,mention issue with formrequest.from_response due to bug in lxml ,spider.make_requests_from_url is deprecated .,"added to_bytes and to_unicode, deprecated str_to_unicode and unicode_to_str functions .","dont_filter=true is used for contract requests, which allows to test different callbacks with the same url ;",documentation examples are now checked as part of our test suite and we have fixed some of the issues detected ,the following changes affect specifically the scrapypriorityqueue and downloaderawarepriorityqueue classes from scrapy.core.scheduler and may affect subclasses:,"for those of you wanting more control on the referer: header that scrapy sends when following links, you can set your own referrer policy. prior to scrapy 1.4, the default referermiddleware would simply and blindly set it to the url of the response that generated the http request . by default, scrapy now behaves much like your regular browser does. and this policy is fully customizable with w3c standard values . see referrer_policy for details.",removed references to unsupported versions of twisted ,a new keyword parameter has been added: key. it is a string that is always an empty string for memory queues and indicates the job_dir value for disk queues.,updated test requirements to reflect an incompatibility with pytest 5.4 and 5.4.1 ,obey request method when scrapy deploy is redirected to a new endpoint ,"the urllengthmiddleware spider middleware now logs ignored urls with info logging level instead of debug, and it now includes the following entry into stats to keep track of the number of ignored urls:",collections.deque is used to store middlewaremanager methods instead of a list ,"spider objects now raise an attributeerror exception if they do not have a start_urls attribute nor reimplement start_requests, but have a start_url attribute ","robots.txt compliance is now enabled by default for newly-created projects . scrapy will also wait for robots.txt to be downloaded before proceeding with the crawl . if you want to disable this behavior, update robotstxt_obey in settings.py file after creating a new project.",linkextractors and new crawlspider now handle relative base tag urls ,deprecations and backward incompatible changes,update other places where w3lib version is mentioned ,"new persistent scheduler that stores requests on disk, allowing to suspend and resume crawls ","media downloads, with filespipeline or imagespipeline, can now optionally handle http redirects using the new media_allow_redirects setting ",added support for sphinx 3.0 and later ,the new response.follow_all method offers the same functionality as response.follow but supports an iterable of urls as input and returns an iterable of requests ,original item_scraped signal was removed,this is needed to allow adding values to existing fields ).,429 is now part of the retry_http_codes setting by default,replace unencodable codepoints with html entities. fixes #562 and #285 ,cookies with an empty value are no longer considered invalid cookies ,"if you are using a custom context factory , its __init__ method must accept two new parameters: tls_verbose_logging and tls_ciphers ",requests with private callbacks are now correctly unserialized from disk ,verbose logging and new stats counters for dupefilter ,optional pretty-printing of json and xml items via feed_export_indent setting ,request serialization no longer breaks for callbacks that are spider attributes which are assigned a function with a different name ,qfactory was instantiated with a priority value .,new filepipeline and mediapipeline features,new filespipeline with functionality factored out from imagespipeline ,"to use the images pipeline, pillow 4.0.0 or greater is now required",it is now possible to set the new overwrite feed option to false to append to an existing file instead of overwriting it,add notes about scrapy not working on windows with python 3 ,ported s3imagesstore to use boto and threads ,"removed scheduler middleware to simplify architecture. duplicates filter is now done in the scheduler itself, using the same dupe fltering class as before ","exporters now work on unicode, instead of bytes by default . if you use pythonitemexporter, you may want to update your code to disable binary mode which is now deprecated.",remove extra import added by cherry picked changes ,replace alternative macos install workaround with virtualenv ,note in install docs about pip being already included in python>=2.7.9 ,"response.follow now supports a flags parameter, for consistency with request ",nested items now fully supported in json and jsonlines exporters,added precise to supported ubuntu distros ,overridden settings are now logged in a different format. this is more in line with similar information logged at startup ,troubleshooting section is added to install instructions ;,"linkextractor now ignores m4v extension by default, this is change in behavior.",removed deprecated scrapy.item.scrapeditem class - use scrapy.item.item instead ,"please also note that link extractors do not canonicalize urls by default anymore. this was puzzling users every now and then, and it s not what browsers do in fact, so we removed that extra transformation on extracted links.","scrapy.http.cookies.cookiejar.clear accepts domain , path and name optional arguments .",a few fixed typos and clarifications ,"scrapy logs a warning when it detects a request callback or errback that uses yield but also returns a value, since the returned value would be lost ","spider callbacks defined using coroutine syntax no longer need to return an iterable, and may instead return a request object, an item, or none ",new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,removed deprecated scrapysettings_module environment variable - use scrapy_settings_module instead ,o gzip decompression issue which affected python 3 and pypy is fixed ;,removed code that added support for old versions of twisted that we no longer support ,the __init__ method of csvitemexporter now supports an errors parameter to indicate how to handle encoding errors ,clarified that one extension instance is created per crawler. ,the following changes affect specifically the downloaderawarepriorityqueue class and may affect subclasses:,added flags argument and attribute to request objects ,"while these are not changes in scrapy itself, but rather in the parsel library which scrapy uses for xpath/css selectors, these changes are worth mentioning here. scrapy now depends on parsel >= 1.5, and scrapy documentation is updated to follow recent parsel api conventions.",added flake8 style checks to our test suite and applied many of the corresponding changes ,fix for selected callbacks when using crawlspider with scrapy parse .,feed exporters with pluggable backends ,the runspider command now supports files with the .pyw file extension ,"css selectors are cached in parsel >= 1.5, which makes them faster when the same css path is used many times. this is very common in case of scrapy spiders: callbacks are usually called several times, on different pages.","warnings, exception and logging messages are improved to make debugging easier.",added options -o and -t to the runspider command,"this is a maintenance release with important bug fixes, but no new features:",add note about html entities decoding with .re/.re_first .,python 3.5.2+ is required now,"the response is handled by the callback of that custom request object, instead of being handled by the callback of the original request object","fix logging of settings overridden by custom_settings; this is technically backward-incompatible because the logger changes from to , so please update your log parsers if needed ",improved cookies middleware by making cookies_debug nicer and documenting it ,linkextractor now ignores m4v extension by default,.pps links are now ignored by default in link extractors .,the new headers_received signal gives early access to response headers and allows stopping downloads. ,minimum versions of optional scrapy requirements that are covered by continuous integration tests have been updated:,"updated references to scrapinghub, which is now called zyte. ",it is used in push to make up for the removal of its priority parameter.,scrapy.bat is not needed anymore ,request.copy and request.replace now also copies their callback and errback attributes ,added marshal to formats supported by feed exports ,the genspider command no longer overwrites existing files unless the --force option is used ,remove deprecated code from feedexporter ,"tests: remove temp files and folders , fixed projectutilstest on macos , use portable pypy for linux on travis ci ",clarified that logging.basicconfig should not be used when also using crawlerprocess ,"the base implementation of item loaders has been moved into a separate library, itemloaders, allowing usage from outside scrapy and a separate release schedule","make handling of gzipped responses more robust . now scrapy will try and decompress as much as possible from a gzipped response, instead of failing with an ioerror.",github templates for bug reports and feature requests ,"security bugfix: telnet console extension can be easily exploited by rogue websites posting content to http://localhost:6023, we haven t found a way to exploit it from scrapy, but it is very easy to trick a browser to do so and elevates the risk for local development environment.",a new keep_fragments parameter of scrapy.utils.request.request_fingerprint allows to generate different fingerprints for requests with different fragments in their url ,default per-command settings are now specified in the default_settings attribute of command object class ,moved persistent queues to a separate project which scrapy now depends on,bugfix cookie merging by hostname and not by netloc ,"in settings, where the import path of a class is required, it is now possible to pass a class object instead .",a warning is now issued when a value in allowed_domains includes a port ,"new scrapy command which replaces the old scrapy-ctl.py - there is only one global scrapy command now, instead of one scrapy-ctl.py per project - added scrapy.bat script for running more conveniently from windows","as a result, when an item loader is initialized with an item, itemloader.load_item once again makes later calls to itemloader.get_output_value or itemloader.load_item return empty data.","sitemapspider: added support for sitemap urls ending in .xml and .xml.gz, even if they advertise a wrong content type ",include_package_data is required to build wheels from published sources ,"the next method of scrapy.utils.python.mutablechain is deprecated, use the global next function or mutablechain.__next__ instead ","python 3.4 is no longer supported, and some of the minimum requirements of scrapy have also changed:",this 1.1 release brings a lot of interesting features and bug fixes:,improve and correct documentation ,fixed an inconsistency between code and output in scrapy at a glance ,fixed broken tests and refactored some tests ,add omitted self arguments in default project middleware template ,"you will find a lot of new features and bugfixes in this major release. make sure to check our updated overview to get a glance of some of the changes, along with our brushed tutorial.",stats are now dumped to scrapy log . this is to make scrapy users more aware of scrapy stats and the data that is collected there.,"the parameter that used to contain a factory function, qfactory, is now passed as a keyword parameter named downstream_queue_cls.",from_crawler support is added to dupefilters ; this allows to access e.g. settings or a spider from a dupefilter.,added debian packages for ubuntu quantal and raring ,"by default, logger names now use a long-form path, e.g. , instead of the shorter top-level variant of prior releases ; this is backward incompatible if you have log parsers expecting the short logger name part. you can switch back to short logger names using log_short_names set to true.",old log lines passed item... were renamed to scraped item... lines and downgraded to debug level,new extensibility features,there are currently no plans to deprecate .extract and .extract_first methods.,real support for returning iterators on start_requests method. the iterator is now consumed during the crawl when the spider is getting idle ,dbm is now the default storage backend for http cache middleware,a common situation where you will face these changes is while running scrapy from scripts. here s a quick example of how to run a spider manually with the new api:,json encoder now supports serialization of set instances .,in addition to absolute and relative urls it supports selectors; for <a> elements it can also extract their href values.,removed a warning about importing stringtransport from twisted.test.proto_helpers in twisted 19.7.0 or newer ,scrapy.contracts fixes and new features;,python 2 support has been removed,temporary data folder for ftp and s3 feed storages can be customized using a new feed_tempdir setting .,improved the documentation about linkextractor.extract_links and simplified link extractors ,sgmllinkextractor - fix for parsing <area> tag with unicode present ,new features for feed exports,add note to ubuntu install section about debian compatibility ,"rule.process_request no longer admits callables which expect a single request parameter, rather than both request and response ","when inspecting a callback to check if it is a generator that also returns a value, an exception is no longer raised if the callback has a docstring with lower indentation than the following code. ",updated deprecated cgi.parse_qsl to use six s parse_qsl ,editor environment variable now takes precedence over editor option defined in settings.py ; scrapy default settings no longer depend on environment variables. this is technically a backward incompatible change.,scheduler disk and memory queues may now use the class methods from_crawler or from_settings ,now works with <button> elements too .,removed section on deprecated contrib/ ,the crawl and runspider commands now support specifying an output format by appending :<format> to the output file ,"changed default representation of items to pretty-printed dicts. . this improves default logging by making log more readable in the default case, for both scraped and dropped lines.",downloading and processing files and images,"when feeds defines multiple uris, log messages about items being stored now contain information from the corresponding feed, instead of always containing information about only one of the feeds ","another useful new feature is the introduction of selector.attrib and selectorlist.attrib properties, which make it easier to get attributes of html elements. see selecting element attributes.",the parse command now allows specifying an output file ,testing and ci fixes ,multiple documentation enhancements and fixes ,some parts of the documentation that were confusing or misleading are now clearer ,fix start_requests laziness and early hangs ,the new scrapy.downloadermiddlewares.retry.get_retry_request function may be used from spider callbacks or middlewares to handle the retrying of a request beyond the scenarios that retrymiddleware supports. ,the following changes affect specifically the scrapypriorityqueue class and may affect subclasses:,built with sphinx using a theme provided by read the docs.,dump stacks for all running threads and fix engine status dumped by stacktracedump extension ,support for bpython and configure preferred python shell via scrapy_python_shell .,added support for adding variables to telnet console ,add a setting to control what class is instantiated as downloader component ,add information and example on errbacks ,"binary_is_text is introduced, to replace use of isbinarytext ","added two new methods to item pipeline open_spider, close_spider with deferred support ",request_reached_downloader is fired when downloader gets a new request; this signal can be useful e.g. for custom schedulers .,httperrormiddleware now logs errors with info level instead of debug; this is technically backward incompatible so please check your log parsers.,spelling mistake and typos ,removed deprecated execution queue ,"scrapy s new requirements baseline is debian 8 jessie . it was previously ubuntu 12.04 precise. what this means in practice is that we run continuous integration tests with these packages versions at a minimum: twisted 14.0, pyopenssl 0.14, lxml 3.4.",the sum up of travis-ci builds are taking like 50min to complete ,"dataclass objects and attrs objects are now valid item types, and a new itemadapter library makes it easy to write code that supports any item type ",encode invalid xpath with unicode_escape under py2 ,a new request_left_downloader signal is sent when a request leaves the downloader ,removed backslashes preceding *args and **kwargs in some function and method signatures ,per-request retry times with the new max_retry_times meta key ,a new scraper_slot_max_active_size setting allows configuring the existing soft limit that pauses request downloads when the total response data being processed is too high ,"also, stats signals were renamed and now pass around spider references . here s a summary of the changes:",internal fixes and cleanup ,original item_passed signal was renamed to item_scraped,"removed track_refs setting, now trackrefs is always enabled",request no longer requires a callback parameter when an errback parameter is specified ,selector does not allow passing both response and text anymore .,changed stats api to use spiders instead of domains ,added quantal & raring to support ubuntu releases ,"crawling with proxy servers becomes more efficient, as connections to proxies can be reused now.",requests and responses,update crawlspider template with selector changes ,show warning when a url is put to spider.allowed_domains instead of a domain .,versioning and api stability,"the serialize parameter is no longer passed. the disk queue class must take care of request serialization on its own before writing to disk, using the request_to_dict and request_from_dict functions from the scrapy.utils.reqser module.",the first spider middleware now also processes exceptions raised from callbacks that are generators ,improve request delay and concurrency handling ,backport fix compatibility with twisted 15.4.0 ,"a future version of scrapy will include a new, better implementation of the reverted bug fix.",removed top-level reactor imports to prevent errors about the wrong twisted reactor being installed when setting a different twisted reactor using twisted_reactor ,comma instead of fullstop ,download handlers may now use the from_settings and from_crawler class methods that other scrapy components already supported ,"crawler, crawlerrunner.crawl and crawlerrunner.create_crawler now fail gracefully if they receive a spider subclass instance instead of the subclass itself ",fix offsite middleware case on urls with no hostnames ,added new command to edit spiders: scrapy edit and -e flag to genspider command that uses it ,support for overriding default request headers per spider ,checks for generator callbacks with a return statement no longer warn about return statements in nested functions ,a much improved completion definition is now available for zsh ,"removed warnings about using old, removed settings ",fixed bug in json-rpc webservice reported in link also removed no longer supported run command from extras/scrapy-ws.py ,the ftp password can now be omitted if it is not necessary,flags are now preserved when copying requests ;,"modified the tox configuration to allow running tests with any python version, run bandit and flake8 tests by default, and enforce a minimum tox version programmatically ",the feed_uri_params setting is now documented ,the documentation now covers how to define and configure a custom log format ,new item exporter using native python types with nesting support ,scrapy.xlib has been removed ,be more responsive with io operations ,configured travis ci to also run the tests with python 3.5.2 ,there is now a scrapy server command to start a scrapyd server of the current project,tests and docs for request_fingerprint function ,"the parameter for disk queues that contains data from the previous crawl, startprios or slot_startprios, is now passed as a keyword parameter named startprios.",dropped support for twisted 2.5,removed the following classes and their parent modules from scrapy.linkextractors:,clarified the requirements for request objects when using persistence ,ftp passwords in feed_uri containing percent-escaped characters are now properly decoded ,this release brings small new features and improvements across the codebase. some highlights:,"when using asyncio, it is now possible to set a custom asyncio loop ",stopped using python 2 unicode literal syntax ,improved the documentation of link extractors with an usage example from a spider callback and reference documentation for the link class ,a memory-handling and error-handling issue in scrapy.utils.ssl.get_temp_key_info has been fixed ,a new redirect_reasons request meta key exposes the reason behind every followed redirect ,"added new scrapy-ctl view command - to view url in the browser, as seen by scrapy ",improved code sharing between the crawl and runspider commands ,callbacks that receive keyword arguments can now be tested using the new @cb_kwargs spider contract ,"a minimal web ui was added, available at http://localhost:6800 by default","last google summer of code project accomplished an important redesign of the mechanism used for populating settings, introducing explicit priorities to override any given setting. as an extension of that goal, we included a new level of priority for settings that act exclusively for a single spider, allowing them to redefine project settings.",deprecated scrapy.interfaces.ispidermanager is removed; please use scrapy.interfaces.ispiderloader.,"new persistent spider queue , available by default, which allows to start scrapy in server mode and then schedule spiders to run.",new chunkedtransfermiddleware to support chunked transfer encoding ,"another milestone for last google summer of code was a refactoring of the internal api, seeking a simpler and easier usage. check new core interface in: core api","refactored close spider behavior to wait for all downloads to finish and be processed by spiders, before closing the spider ",doc fixed httpcache_storage typo in the default value which is now filesystem instead dbm. ,"the scrapy_check variable is now set to the true string during runs of the check command, which allows detecting contract check runs from code ",support for requests without callbacks ,backport scrapy check command fixes and backward compatible multi crawler process,"removed support for the scrapy_pickled_settings_to_override environment variable, deprecated in 1.8.0. ",class attributes for subclasses of imagespipeline and filespipeline work as they did before 1.1.1 ,added system tests with mock server,"declaring and returning scrapy items is no longer necessary to collect the scraped data from your spider, you can now return explicit dictionaries instead.","updated the description of the screenshot pipeline example, which now uses coroutine syntax instead of returning a deferred ",travis-ci now tests scrapy changes against development versions of w3lib and queuelib python packages.,split redirection middleware into status and meta based middlewares ,switched to formatted string literals where possible ,closespider and spiderstate extensions now get disabled if no relevant setting is set .,"fixed logic issues, broken links and typos ","textresponse.body_as_unicode is now deprecated, use textresponse.text instead ",fix deprecated settings api in tests ,added support for http proxies ,statscollector was changed to receive spider references in its methods .,"in settings, where the import path of a class is required, it is now possible to pass a class object instead.",an additional crawler parameter has been added to the __init__ method of the scheduler class. custom scheduler subclasses which don t accept arbitrary parameters in their __init__ method might break because of this change.,unneeded .strip call is removed ;,s3downloadhandler: fix auth for requests with quoted paths/query params ,"a new setting, feeds, allows configuring multiple output feeds with different settings each ",improved encoding detection by adding support for html5 meta charset declaration ,scrapy parse command now allows to set custom request meta via --meta argument.,"pylinted, pep8 and removed old-style exceptions from source ",itemloader now turns the values of its input item into lists:,skipping of tls validation errors is improved ;,a new feed_storage_ftp_active setting allows using ftp s active connection mode for feeds exported to ftp servers ,automated tests now pass on the latest pypy version for supported python versions in our continuous integration system ,"started reporting slowest tests, and improved the performance of some of them ","enforce numeric values for components order in spider_middlewares, downloader_middlewares, extensions and spider_contracts .",support kwargs with response.xpath to use xpath variables and ad-hoc namespaces declarations ; this requires at least parsel v1.1 .,"scrapy.utils.python.mutablechain.__iter__ now returns self, allowing it to be used as a sequence ","spider.make_requests_from_url, deprecated in scrapy 1.4.0, now issues a warning when used ","update docstring in project template to avoid confusion with genspider command, which may be considered as an advanced feature. refs #107 ","http cache extension and plugins that use the .scrapy data directory now work outside projects . warning: this is technically backward incompatible, though we consider this a bug fix.",update deprecated test aliases ,a new bytes_received signal allows monitoring response download progress and stopping downloads ,stats now include the following entries that indicate the number of successes and failures in storing feeds:,system exceptions like keyboardinterrupt are no longer caught ,"the redirect_max_metarefresh_delay setting is no longer supported, use metarefresh_maxdelay instead ",simplified the code example in working with dataclass items ,added support for passing custom settings to scrapyd schedule.json api ,a new metarefresh_ignore_tags setting allows overriding which html tags are ignored when searching a response for html meta tags that trigger a redirect ,dropped signals singleton. signals should now be accessed through the crawler.signals attribute. see the signals documentation for more info.,"fixed some external links, typos, and so on. ",if a downloader middleware returns a response object from process_response or process_exception with a custom request object assigned to response.request:,"decoupled encoding detection code to w3lib.encoding, and ported scrapy code to use that module",it is again possible to download the documentation for offline reading ,telnet console now binds to 127.0.0.1 by default ,removed outdated debian package build files ,add scrapy commands using external libraries ,"scrapy 1.0 has moved away from twisted logging to support python built in s as default logging system. we re maintaining backward compatibility for most of the old custom interface to call logging functions, but you ll get warnings to switch to the python logging api entirely.",new extension for keeping persistent spider contexts among different runs ,"major stats collection refactoring: removed separation of global/per-spider stats, removed stats-related signals . stats are much simpler now, backward compatibility is kept on the stats collector api and signals.",removed obsolete scrapy.utils.markup.remove_escape_chars function - use scrapy.utils.markup.replace_escape_chars instead ,"in request errbacks, offending requests are now received in failure.request attribute ",deprecated queue command in favor of using scrapyd schedule.json api. see also: scrapyd changes,updated shell docs with the crawler reference and fixed the actual shell output. ,the crawl and runspider commands now support multiple -o parameters ,default scrapy user-agent now uses https link to scrapy.org . this is technically backward-incompatible; override user_agent if you relied on old value.,default scrapy user-agent now uses https link to scrapy.org . this is technically backward-incompatible; override user_agent if you relied on old value.,replace unencodeable codepoints with html entities in sgmllinkextractor ,"merged item passed and item scraped concepts, as they have often proved confusing in the past. this means: ",renewed the localhost certificate used for ssl tests ,fix typos in news.rst and remove header ,removed modules: scrapy.xlib.beautifulsoup and scrapy.xlib.clientform,scrapy.extensions.feedexport.s3feedstorage no longer reads the values of access_key and secret_key from the running project settings when they are not passed to its __init__ method; you must either pass those parameters to its __init__ method or use s3feedstorage.from_crawler ,you can now choose whether feed exports overwrite or append to the output file.,fixed a typo in the message of the valueerror exception raised when scrapy.utils.misc.create_instance gets both settings and crawler set to none ,py3-ignores.txt supports comments ,http cache now stored by default in the project data dir ,stopped using a backlash for line continuation ,"logging of settings overridden by custom_settings is fixed; this is technically backward-incompatible because the logger changes from to . if you re parsing scrapy logs, please update your log parsers .","http cache middleware has been heavilty refactored, retaining the same functionality except for the domain sectorization which was removed. ",made use of set literals in tests ,use single quotes uniformly in templates ,dataclass objects and attrs objects are now valid item types,link extraction improvements: ftp is added to scheme list ; flv is added to common video extensions ,added tests to ensure that coroutine support is tested. ,"the __init__ and from_crawler methods of feed storage backend classes now receive a new keyword-only parameter, feed_options, which is a dictionary of feed options",put a blurb about support channels in contributing ,httperrormiddleware now returns none or raises an exception ,formrequest.from_response now handles invalid methods like major web browsers ,add verification to check if request callback is callable ,remove dead code supporting old twisted versions .,plural renames and modules unification,we have refactored the scrapy.core.scheduler.scheduler class and related queue classes to make it easier to implement custom scheduler queue classes. see changes to scheduler queue classes below for details.,fixed so it refers to the correct folder ,made our tests run with the new pip resolver. ,google cloud storage support for filespipeline and imagespipeline .,redirectmiddleware now skips the status codes from handle_httpstatus_list on spider attribute or in request s meta key .,"implemented code refactorings, style fixes and cleanups. ",support link rel attribute with multiple values .,removed from coroutines the warning about the api being experimental ,keep reading for more details on other improvements and bug fixes.,deprecations and removals,deprecations and removals,scrapy now requires twisted >= 13.1 which is the case for many linux distributions already.,removed references to python 2 s unicode type ,"in custom feed storage backend classes, __init__ method signatures that do not accept a keyword-only feed_options parameter are now deprecated ","that custom request object is now sent as the request argument to the response_received signal, instead of the original request object",renamed request_handlers to download_handlers and make download handlers classes ,lot of bugfixes to retry middleware under disconnections using http 1.1 download handler,covered how to deal with long lists of allowed domains in the faq. ,partial coroutine syntax support and experimental asyncio support,replace import image by more standard from pil import image . closes #88 ,"scrapy.item.dictitem is deprecated, use item instead ",improve testsuite comparing csv and xml exporters ,it is now possible to run all tests from the same tox environment in parallel; the documentation now covers this and other ways to run tests ,backport master fixes to json exporter ,exceptions in contracts code are handled better ;,"the scrapy.utils.boto.is_botocore function is now deprecated, use scrapy.utils.boto.is_botocore_available instead ",serialized requests now support callbacks that are spider methods that delegate on other callable ,added xpathselector.remove_namespaces which allows to remove all namespaces from xml documents for convenience . documented in selectors.,scrapy.mail.mailsender now can connect over tls or upgrade using starttls ,allow to disable a downloader handler just like any other component ,you can use the overwrite key in the feeds setting to configure whether to overwrite the output file or append to its content ,the following class attributes have been added:,startproject command now supports an optional destination directory to override the default one based on the project name .,promote startup info on settings and middleware to info level ,"if you re using custom selector or selectorlist subclasses, a backward incompatible change in parsel may affect your code. see parsel changelog for a detailed description, as well as for the full list of improvements.","when using google cloud storage for a media pipeline, a warning is now logged if the configured credentials do not grant the required permissions ",the httpcompressionmiddleware downloader middleware now logs the number of decompressed responses and the total count of resulting bytes:,deprecated runserver command in favor of server command which starts a scrapyd server. see also: scrapyd changes,rule now accepts an errback parameter ,add a middleware to crawl ajax crawleable pages as defined by google ,"the logstats_interval setting , the filespipeline.file_path and imagespipeline.file_path methods and the crawler.stop method are now documented","fixed installation on pypy installing pydispatcher in addition to pypydispatcher, which could prevent scrapy from working depending on which package got imported. ",do not fail handling unicode xpaths in libxml2 backed selectors ,a new pqueues attribute offers a mapping of downloader slot names to the corresponding instances of downstream_queue_cls.,"when using the crawl or runspider commands, you can use the -o option instead of -o to overwrite the output file",fix wrong checks on subclassing of deprecated classes ,"link extractors are now serializable, as long as you do not use lambdas for parameters; for example, you can now pass link extractors in request.cb_kwargs or request.meta when persisting scheduled requests ",the httpproxymiddleware middleware now simply ignores unsupported proxy values ,fix duplicate content-length header for post requests with empty body ,added instructions to install scrapy in windows using pip. ,scrapy.utils.misc.create_instance now raises a typeerror exception if the resulting instance is none ,"upgraded the pickle protocol that scrapy uses from protocol 2 to protocol 4, improving serialization capabilities and performance ","scrapy.item.baseitem is now deprecated, use scrapy.item.item instead ",changed item pipeline to use spiders instead of domains,"revert the fix for issue 3804 , which has a few undesired side effects .",a new robotstxt_user_agent setting allows defining a separate user agent string to use for robots.txt parsing ,improved consistency when referring to the __init__ method of an object ,removed some obsolete remaining code related to sqlite support in scrapy ,"in custom media pipelines, signatures that do not accept a keyword-only item parameter in any of the methods that now support this parameter are now deprecated ",added namespace support to xmliter_lxml ,connections to proxy servers are reused ,"we decided to revert this bug fix, introduced in scrapy 2.2.0, because it was reported that the current implementation could break existing code.",handle a regression introduced in python 2.7.5 that affects xmlitemexporter ,changes to default settings,broad crawls now features information about memory usage ,dropped support for python 2.5. see link,set context factory implementation based on twisted version ,item_error is fired when an error happens in a pipeline ;,a new dns_resolver setting allows enabling ipv6 support ,"the dictionaries in the result list of a media pipeline now include a new key, status, which indicates if the file was downloaded or, if the file was not downloaded, why it was not downloaded; see filespipeline.get_media_requests for more information ",passed item is now sent in the item argument of the item_passed ,item_pipelines is now defined as a dict ,refactored execution queue in a common base code and pluggable backends called spider queues ,basesgmllinkextractor: added unit test of a link with an inner tag ,"it also serves as a workaround for delayed file delivery, which causes scrapy to only start item delivery after the crawl has finished when using certain storage backends .",there s a new response.follow method for creating requests; it is now a recommended way to create requests in scrapy spiders. this method makes it easier to write correct spiders; response.follow has several advantages over creating scrapy.request objects directly:,tons of documentation updates and related fixes .,imagespipeline: fixed processing of transparent png images with palette ,scrapy does not work on windows with python 3,py3: use six for robotparser and urlparse ,fix compatibility with twisted 17+ .,better error message when an exporter is disabled ;,version 1 now exists ,thanks to everyone who contribute to this release. here is a list of contributors sorted by number of commits:,"when feeds defines multiple uris, feed_store_empty is false and the crawl yields no items, scrapy no longer stops feed exports after the first uri ",the list of request.meta keys is now sorted alphabetically. ,doc removed pywin32 from install instructions as it s already declared as dependency. ,"replaced memory usage acounting with resource module, removed scrapy.utils.memory module","defaultrequestheaders middleware now runs before useragent middleware . warning: this is technically backward incompatible, though we consider this a bug fix.",selectors register exslt namespaces by default ,test xml nodename with dots ,the scrapy.utils.datatypes.mergedict class is deprecated for python 3 code bases. use chainmap instead. ,a new feed_storage_s3_acl setting allows defining a custom acl for feeds exported to amazon s3 ,added comment about why we disable ssl on boto images upload ,include openssl s more permissive default ciphers when establishing tls/ssl connections .,add openssl version to version command ,add selector shortcuts to responses ,response.follow_all now supports an empty url iterable as input ,the signature of the __init__ method is now __init__.,"logging with spiders remains the same, but on top of the log method you ll have access to a custom logger created for the spider to issue log events:",the following changes may impact custom disk and memory queue classes:,fix inconsistencies among twisted releases ,"don t retry bad requests by default . if you need the old behavior, add 400 to retry_http_codes.",find form nodes in invalid html5 documents ,fix engine to support filtered start requests ,fix for invalid json and xml files when spider yields no items .,it is now possible to generate an api documentation coverage report ,the crawl command now also exits with exit code 1 when an exception happens before the crawling starts ,new headers_received signal that allows stopping downloads early,"for example, when using the crawl or runspider commands, you can use the -o option instead of -o to overwrite the output file.",removed remnants of python 2 support ,"fixed errback handling in contracts, e.g. for cases where a contract is executed for url which returns non-200 response .",improved the documentation about signals that allow their handlers to return a deferred ,the new item_export_kwargs key of the feeds setting allows to define keyword parameters to pass to item exporter classes,the new item_export_kwargs key of the feeds setting allows to define keyword parameters to pass to item exporter classes ,fixed logging of wrong callback name with scrapy parse .,"default to canonicalize=false in scrapy.linkextractors.linkextractor : warning, this is technically backward-incompatible","a new twisted_reactor setting allows customizing the reactor that scrapy uses, allowing to enable asyncio support or deal with a common macos issue ",custom log formats can now drop messages by having the corresponding methods of the configured log_formatter return none ,ajax crawling wasn t expanding for unicode urls ,to quickly port your code just use spider.domain_name where you previously used domain. spider_stats contains exactly the same data as domain_stats.,do no include responsefailed if http11 handler is not enabled ,fixed the output of the genspider command showing placeholders instead of the import path of the generated spider module ,new robotstxt_parser and robotstxt_user_agent settings,fix: retrymiddleware is now robust to non-standard http status codes ,use the new downloader_client_tls_ciphers setting to customize the tls/ssl ciphers used by the default http/1.1 downloader ,restore filesystem based cache as default for http cache middleware ,request.from_curl and curl_to_request_kwargs now also support --data-raw ,overview and tutorial rewritten to use link websites .,additional files are included to sdist ;,the base implementation of item loaders has been moved into itemloaders ,update extensions ignored by link extractors ,new feeds setting to export to multiple feeds,"the display-on-hover behavior of internal documentation references now also covers links to commands, request.meta keys, settings and signals ","the metarefresh_ignore_tags setting is now an empty list by default, following web browser behavior ",renamed usertimeouterror and servertimeouterror #583 ,splitted debian package into two packages - the library and the service ,the optional_features set has been removed .,enable memusage extension by default ; this is technically backward-incompatible so please check if you have any non-default memusage_*** options set.,disable scrapy.telnet if twisted.conch is not available ,remove pep8 warnings in project and spider templates ,mention how to disable request filtering in documentation of dupefilter_class setting ,https+connect tunnels could get mixed up when using multiple proxies to same remote host .,"scrapy fetch url, scrapy shell url and fetch inside scrapy shell now follow http redirections by default ; see fetch and shell for details.",a new class for json requests,doc bring ubuntu and archlinux outside of windows subsection ,fix broken links; use https:// for external links ,"item loader processors can now be regular functions, they no longer need to be methods ",added a mention to contributors in the readme. 
Changes â€” Werkzeug Documentation (2.1.x),"middleware from werkzeug.wsgi has moved to separate modules under werkzeug.middleware, along with the middleware moved from werkzeug.contrib. the old werkzeug.wsgi imports are deprecated and will be removed in version 1.0. ",cookie values are now also permitted to include slashes and equal signs without quoting.,unicode errors in hosts are now better caught or converted into bad request errors.,cgirootfix no longer modifies path_info for very old versions of lighttpd. lighttpdcgirootfix was renamed to cgirootfix in 0.9. both are deprecated and will be removed in version 1.0. ,optional request log highlighting with the development server is handled by click instead of termcolor. #1235,"the environ keys request_uri and raw_uri contain the raw path before it was percent-decoded. this is non-standard, but many wsgi servers add them. middleware could replace path_info with this to route based on the raw value. ",fixed a bug with parsing http digest headers. it rejected headers with missing nc and nonce params.,removed support for deprecated fix_headers.,"atom is deprecated. this did not fit in with the rest of werkzeug, and is better served by a dedicated library in the community.",werkzeug.wsgi.make_chunk_iter and werkzeug.wsgi.make_line_iter now support processing of iterators and streams.,added support for alternative encoding error handling and the new httpunicodeerror which behaves like a badrequest.,"when using an adhoc ssl cert with run_simple, the cert is shown as self-signed rather than signed by an invalid authority. ",if cookies are sent without values they are now assumed to have an empty value and the parser accepts this. previously this could have corrupted cookies that followed the value.,"the deprecated num_proxies argument to proxyfix sets x_for, x_proto, and x_host to match 0.14 behavior. this is intended to make intermediate upgrades less disruptive, but the argument will still be removed in 1.0. #1630","the response generated by unauthorized produces one www-authenticate header per value in www_authenticate, rather than joining them into a single value, to improve interoperability with browsers and other clients. #1755",the contrib modules are deprecated and will either be moved into werkzeug core or removed completely in version 1.0. some modules that already issued deprecation warnings have been removed. be sure to run or test your code with python -w default::deprecationwarning to catch any deprecated code you re using. ,the default url converter correctly encodes bytes to string rather than representing them with b''. ,"deprecate support for python 2.6 and 3.3. ci tests will not run for these versions, and support will be dropped completely in the next version. ",memcache client now no longer uses the buggy cmemcache module and supports pylibmc. gae is not tried automatically and the dedicated class is no longer necessary.,test.environbuilder and test.client take a json argument instead of manually passing data and content_type. this is serialized using the test.environbuilder.json_dumps method. ,"environbuilder was added and unifies the previous distinct create_environ, client and baserequest.from_values. they all work the same now which is less confusing.",fixed an issue with the filesystem session support s prune function and concurrent usage.,"limiter is removed. its specific use is handled by werkzeug directly, but stream limiting is better handled by the wsgi server in general.","new sans-io base classes for request and response have been extracted to contain all the behavior that is not wsgi or io dependent. these are not a public api, they are part of an ongoing refactor to let asgi frameworks use werkzeug. #2005","412 responses once again include entity headers and an error message in the body. they were originally omitted when implementing if-match , but the spec doesn t seem to disallow it. ","is_resource_modified will run for methods other than get and head, rather than always returning false. #409",heavily improved local objects. should pick up standalone greenlet builds now and support proxies to free callables as well. there is also a stacked local now that makes it possible to invoke the same application from within itself by pushing current request/response on top of the stack.,added support for parsing of the content-range header of responses and provided an accessor object for it and werkzeug.datastructures.contentrange).,using multidict when building urls is now not supported again. the behavior introduced several regressions.,added a favicon to the debugger which fixes problem with state changes being triggered through a request to /favicon.ico in google chrome. this should fix some problems with flask and other frameworks that use context local objects on a stack with context preservation on errors.,added support for parsing of the range header and werkzeug.datastructures.range).,optional ad-hoc tls support for the development server is handled by cryptography instead of pyopenssl. #1555,deprecate most top-level attributes provided by the werkzeug module in favor of direct imports. the deprecated imports will be removed in version 1.0.,fixed another issue with werkzeug.wsgi.make_line_iter where lines longer than the buffer size were not handled properly.,for unknown http methods the request stream is now always limited instead of being empty. this makes it easier to implement dav and other protocols on top of werkzeug.,sets server_port and modifies http_host based on x-forwarded-port. ,http exceptions are now automatically caught by request.application.,merge all request and response wrapper mixin code into single request and response classes. using the mixin classes is no longer necessary and will show a deprecation warning. checking isinstance or issubclass against baserequest and baseresponse will show a deprecation warning and check against request or response instead. #1963,"werkzeug.urls.url_fix now doesn t crash on malformed urls anymore, but returns them unmodified. this is a cheap workaround for #582, the proper fix is included in version 0.10.",implemented pin based authentication for the debugger. this can optionally be disabled but is discouraged. this change was necessary as it has been discovered that too many people run the debugger in production.,fixed a problem with newer versions of ipython.,in addition to that there is now a flag for the .get_data method that controls what should happen with form data parsing and the form parser will honor cached data. this makes dealing with custom form data more consistent.,fixed an issue with integers no longer being accepted in certain parts of the routing system or url quoting functions.,cookie names are no longer unquoted. this was against rfc 6265 and potentially allowed setting __secure prefixed cookies. #1965,added mimeaccept and charsetaccept that work like the regular accept but have extra special normalization for mimetypes and charsets and extra convenience methods.,for conditional responses the content length is no longer set when it is already there and added if missing.,improved reloader to track added files and to recover from broken sys.modules setups with syntax errors in packages.,fixed an issue with url_quote_plus not quoting + correctly.,headers is more compatible with wsgiref now.,multidict copies now instead of revealing internal lists to the caller for getlist and iteration functions that return lists.,werkzeug now uses a new method to check that the length of incoming data is complete and will raise io errors by itself if the server fails to do so.,removed support for deprecated parameter for iter_encoded.,"an exception is raised when an encoded cookie is larger than, by default, 4093 bytes. browsers may silently ignore cookies larger than this. baseresponse has a new attribute max_cookie_size and dump_cookie has a new argument max_size to configure this. ",overhauled the utilization of the input stream to be easier to use and better to extend. the detection of content payload on the input side is now more compliant with http by detecting off the content type header instead of the request method. this also now means that the stream property on the request class is always available instead of just when the parsing fails.,removed support for deprecated header_list.,"for example, instead of import werkzeug; werkzeug.url_quote, do from werkzeug.urls import url_quote. a deprecation warning will show the correct import to use. werkzeug.exceptions and werkzeug.routing should also be imported instead of accessed, but for technical reasons can t show a warning.","added wsgi.get_query_string, wsgi.get_path_info and wsgi.get_script_name and made the wsgi.pop_path_info and wsgi.peek_path_info functions perform unicode decoding. this was necessary to avoid having to expose the wsgi encoding dance on python 3.",url_encode and url_decode now accept a separator argument to switch between & and ; as pair separator. the magic switch is no longer in place.,"the werkzeug.wrappers module has been converted to a package, and its various classes have been organized into separate modules. any previously documented classes, understood to be the existing public api, are still importable from werkzeug.wrappers, or may be imported from their specific modules. ",the multipart parser works better with hand-crafted multipart requests now that have extra newlines added. this fixes a bug with setuptools uploads not handled properly ,the debugger is now generating private pastes on lodgeit.,"fix a bug in parse_options_header where an invalid content type starting with comma or semi-colon would result in an invalid return value, see issue #995.",fix issues with eventlet s monkeypatching and the builtin server .,"test support was refactored, semi-undocumented werkzeug.test.file was replaced by werkzeug.filestorage.",the routing request redirect exception s code attribute is now used properly.,requestredirect is now a subclass of httpexception and uses a 301 status code instead of 302.,"use stdlib ssl module instead of openssl for the builtin server . this means that openssl contexts are not supported anymore, but instead ssl.sslcontext from the stdlib.",added support for parsing of the if-range header and werkzeug.datastructures.ifrange).,the version of jquery used by the debugger is updated to 3.3.1. ,"url_encode and all interfaces that call it, support ordering of options now which however is disabled by default.",http.parse_cookie ignores empty segments rather than producing a cookie with no key or value. ,mimetype parameters on request and response classes are now always converted to lowercase.,add a response.cache_control.immutable flag. keep in mind that browser support for this cache-control header option is still experimental and may not be implemented. #1185,"use sha-1 instead of md5 for generating etags and the debugger pin, and in some tests. md5 is not available in some environments, such as fips 140. this may invalidate some caches since the etag will be different. #1897",fixed a bug in the form parser that caused the last character to be dropped off if certain values in multipart data are used.,switched from the default ignore to the better replace unicode error handling mode.,soft deprecated the data descriptors for request and response objects.,fixed an issue for python 2.7.1 and higher that broke copying of multidicts with copy.copy.,response objects are no longer modified in place when they are evaluated as wsgi applications. for backwards compatibility the fix_headers function is still called in case it was overridden. you should however change your application to use get_wsgi_headers if you need header modifications before responses are sent as the backwards compatibility support will go away in future versions.,added the fixers module with various fixes for webserver bugs and hosting setup side-effects.,deprecated werkzeug.contrib.kickstart and werkzeug.contrib.testtools,fixed a problem with unicode keys appearing in headers on 2.x.,fixed a few unicode issues with non-ascii characters being hardcoded in url rules.,added a safe conversion for iri to uri conversion and use that internally to work around issues with spec violations for protocols such as itms-service.,"send_file can be called with etag=""string"" to set a custom etag instead of generating one. etag replaces flask s add_etags. #1868","reloader: correctly detect file changes made by moving temporary files over the original, which is e.g. the case with pycharm .","builderrors are now more informative. they come with a complete sentence as error message, and also provide suggestions .",fixed regression with multiple query values for urls .,changed host lookup logic for forwarded hosts to allow lists of hosts in which case only the first one is picked up.,fix an issue where sys.path would change between reloads when running with python -m app. the reloader can detect that a module was run with -m and reconstructs that instead of the file path in sys.argv when reloading. ,fixed an issue with copy operations not working against proxies.,fixed an issue with the new multipart parser that happened when a linebreak happened to be on the chunk limit.,"uri_to_iri does not unquote ascii characters in the unreserved class, such as space, and leaves invalid bytes quoted when decoding. iri_to_uri does not quote reserved characters. see rfc 3987 for these character classes. ","map and rule have a merge_slashes option to collapse multiple slashes into one, similar to how many http servers behave. this is enabled by default. #1286, #1694",fixed another regression with ssl wrapping similar to the fix in 0.11.2 but for a different code path.,"if localproxy s wrapped object is a function, refer to it with __wrapped__ attribute.",the url builder supports dropping of unexpected arguments now. previously they were always appended to the url as query string.,improved performance of make_line_iter and the multipart parser for binary uploads.,fixed an issue with shareddatamiddleware not reading the path correctly and breaking on etag generation in some cases.,added support for using the reloader with console scripts on windows.,"get_content_type appends a charset for any mimetype that ends with +xml, not just those that start with application/. known text types such as application/javascript are also given charsets. ","the content-length header is removed for 1xx and 204 responses. this fixes a previous change where no body would be sent, but the header would still be present. the new behavior matches rfc 7230. ",fixed an issue with debuggers running on a different url than the url root.,temporary files for form data are opened in rb+ instead of wb+ mode for better compatibility with some libraries. #1961,moved limitedstream from the contrib package into the regular werkzeug one and changed the default behavior to raise exceptions rather than stopping without warning. the old class will stick in the module until 0.6.,request objects are now enforced to be read only for all collections.,"the qop parameter for www-authenticate headers is now always quoted, as required by rfc 2617 .",badrequestkeyerror adds the keyerror message to the description if e.show_exception is set to true. this is a more secure default than the original 0.15.0 behavior and makes it easier to control without losing information. #1592,if url maps are now bound to environments the query arguments are properly decoded from it for redirects.,added content_encoding and content_md5 to the request object s common request descriptor mixin.,"if the development server is started with an sslcontext configured to verify client certificates, the certificate in pem format will be available as environ. #1469",added etag support to the shareddatamiddleware and added an option to disable caching.,fixed a bug in boolean attribute handling of html and xhtml.,"the test client removes the cookie header if there are no persisted cookies. this fixes an issue introduced in 0.15.0 where the cookies from the original request were used for redirects, causing functions such as logout to fail. ","localproxy matches the current python data model special methods, including all r-ops, in-place ops, and async. __class__ is proxied, so the proxy will look like the object in more cases, including isinstance. use issubclass, localproxy) to check if an object is actually a proxy. #1754","send_file sets conditional=true and max_age=none by default. cache-control is set to no-cache if max_age is not set, otherwise public. this tells browsers to validate conditional requests instead of using a timed cache. max_age=none replaces flask s cache_timeout=43200. #1882",request.values does not include form for get requests . this prevents bad caching proxies from caching form data instead of query strings. #2037,accept values are no longer ordered alphabetically for equal quality tags. instead the initial order is preserved. #1686,implemented experimental multipart parser that replaces the old cgi hack.,the environ_property is now read-only by default,fixed a bug with href query parameter handling. previously the last item of a call to href was not handled properly if it was a dict.,routing.rule.empty now works correctly with subclasses of rule .,the built-in dev server supports receiving requests with chunked transfer encoding. ,the platform for crosswalk on android is correctly reported as android instead of chromeos . ,werkzeug.contrib.cache.memcached accepts now objects that implement the memcache.client interface as alternative to a list of strings with server addresses. there is also now a gaememcachedcache that connects to the google appengine cache.,headers are now assumed to be latin1 for better compatibility with python 3 once we have support.,"parsing multipart/form-data has been refactored to use sans-io patterns. this should also make parsing forms with large binary file uploads significantly faster. #1788, #875","when passing a headers object to a test client method or environbuilder, multiple values for a key are joined into one comma separated value. this matches the http spec on multi-value headers. #1655",the user agent for opera 60 on mac is correctly reported as opera instead of chrome . #1556,added as_bytes operations to some of the headers to simplify working with things like cookies.,recognize seamonkey browser name and version correctly,added support for using werkzeug.wrappers.baseresponse in a with statement.,fixed an issue with multipart parsing that could cause memory exhaustion.,fixed a regression with setting of content types through the headers dictionary instead with the content type parameter.,added reloader_paths option to run_simple and other functions in werkzeug.serving. this allows the user to completely override the python module watching of werkzeug with custom paths.,"the interactive debugger highlights frames that come from user code to make them easy to pick out in a long stack trace. note that if an env was created with virtualenv instead of venv, the debugger may incorrectly classify some frames. ","redirect function s status code assertion now allows 201 to be used as redirection code. while it s not a real redirect, it shares enough with redirects for the function to still be useful.",if a nested importerror occurs from import_string the traceback mentions the nested import. removes an untested code path for handling modules not yet set up by the parent. ,"securecookie and sessions have been extracted into a separate project, secure-cookie. the version in werkzeug is deprecated.",url routing now can be passed the url arguments to keep them for redirects. in the future matching on url arguments might also be possible.,fixed an url generation bug that caused urls to be invalid if a generated component contains a colon.,"bytes may be used as keys in headers, they will be decoded as latin-1 like values are. ","range requests that span an entire file respond with 206 instead of 200, to be more compliant with rfc 7233. this may help serving media to older browsers. #410, #1704",fixed a problem with external url generation discarding the port.,"proxyfix is refactored to support more headers, multiple values, and more secure configuration.",building a url when host_matching is enabled takes into account the current host when there are duplicate endpoints with different hosts. #488,head is now implicitly added as method in the routing system if get is present. not doing that was considered a bug because often code assumed that this is the case and in web servers that do not normalize head to get this could break head requests.,restored behavior of the data descriptor of the request class to pre 0.9 behavior. this now also means that .data and .get_data have different behavior. new code should use .get_data always.,added support for status code 451 and 423,"the development server adds the underlying socket to environ as werkzeug.socket. this is non-standard and specific to the dev server, other servers may expose this under their own key. it is useful for handling a websocket upgrade request. #2052",directive keys for the set-cookie response header are not ignored when parsing the cookie request header. this allows cookies with names such as expires and version . ,script root and path are correctly distinguished when redirecting to a path under the root.,refactored form parsing into a form parser class that makes it possible to hook into individual parts of the parsing process for debugging and extending.,shareddatamiddleware returns 404 rather than 500 when trying to access a directory instead of a file with the package loader. the dependency on setuptools and pkg_resources is removed. #1599,"werkzeug.test.environbuilder now doesn t use the request method anymore to guess the content type, and purely relies on the form, files and input_stream properties .",added the ability to suppress some auto corrections in the wrappers that are now controlled via autocorrect_location_header and automatically_set_content_length on the response objects.,bind_to_environ now doesn t differentiate between implicit and explicit default port numbers in http_host .,changed the error handling of and improved testsuite for the caches in contrib.cache.,added support for ssl to the builtin development server.,wsgi.get_current_url is now ascii safe for browsers sending non-ascii data in query strings.,"refactored request and response objects into base objects, mixins and full featured subclasses that implement all mixins.","authorization.qop is a string instead of a set, to comply with rfc 2617. ",added support for redirecting in url routing.,removed support for previous dummy writable parameter on the cached property.,improved the pin based protection for the debugger to make it harder to brute force via trying cookies. please keep in mind that the debugger is not intended for running on production environments,"colors in the development server log are displayed if colorama is installed on windows. for all platforms, style support no longer requires click. #1832",fixed a typo in the multipart parser that caused content-type to not be picked up properly.,added proper ipv6 support for the builtin server.,changed hashing methodology of immutable ordered multi dicts for a potential problem with alternative python implementations.,cookies are now set properly if ports are in use. a runtime error is raised if one tries to set a cookie for a domain without a dot.,fixed an xss problem with redirect targets coming from untrusted sources.,"the test client request methods always return an instance of testresponse. in addition to the normal behavior of response, this class provides request with the request that produced the response, and history to track intermediate responses when follow_redirects is used. #763, #1894",the debugger detects cycles in chained exceptions and does not time out in that case. ,fixed bug with shareddatamiddleware.,"the development server logs the unquoted iri rather than the raw request line, to make it easier to work with unicode in request paths during development. ",make_line_iter now requires a limit that is not higher than the length the stream can provide.,fix timeouts greater than 2592000 being misinterpreted as unix timestamps in werkzeug.contrib.cache.memcachedcache .,fixed a problem with request handling of the builtin server not responding to socket errors properly.,added options and trace to the test client.,improved ssl interface of the devserver so that it can generate certificates easily and load them from files.,environbuilder doesn t set content_type or content_length in the environ if they aren t set. previously these used default values if they weren t set. now it s possible to distinguish between empty and unset values. ,simplified exception interface to no longer require environments to be passed to receive the response object.,call_on_close now can be used as a decorator.,fix a bug in the user agent parser where safari s build number instead of version would be extracted .,the redirect environ is copied from the initial request environ.,fixed valueerrors being raised on calls to best_match on mimeaccept objects when invalid user data was supplied.,fixed a bug where log lines will be duplicated if an application uses logging.basicconfig ,added support for filename* filename attributes according to rfc 2231,"the development server accepts paths that start with two slashes, rather than stripping off the first path segment. #491",sets server_name and server_port based on x-forwarded-host. ,each header supports multiple values. the trusted number of proxies is configured separately for each header. the num_proxies argument is deprecated. ,baseresponse.calculate_content_length now correctly works for unicode responses on python 3. it first encodes using iter_encoded. ,added support for specifying a response subclass to use when calling redirect.,url_encode treats lists and tuples in dicts passed to it as multiple values for the same key so that one doesn t have to pass a multidict to the function.,added support for host based matching in the routing system.,fixed an issue with scrolling up in the debugger.,added authorization and authorizationmixin,new custom routing parser and better ordering.,"headers are tested for equality independent of the header key case, such that x-foo is the same as x-foo. #1605",deprecate the useragents module and the built-in user agent parser. use a dedicated parser library instead by subclassing user_agent.useragent and setting request.user_agent_class. #2078,werkzeug.routing.mapadapter.match now recognizes the difference between the path / and an empty one .,the builtin server now adds a function named werkzeug.server.shutdown into the wsgi env to initiate a shutdown. this currently only works in python 2.6 and later.,restore stdout after debug console finished executing so that the debugger can be used on gae better.,fixed an issue with the safe string compare function on python 2.7.7 and python 3.4.,the filenames generated by profilermiddleware can be customized. ,http header values without encoding can contain single quotes. ,fixed a bug with unicode strings in the test builder.,"test.client now properly handles location headers with relative urls, see pull request #879.",added support for static weights in url rules.,fixed an issue with python 3.3 and an edge case in cookie parsing.,fix a bug in typeconversiondict where errors are not propagated when using the converter. ,the form data parser will now look at the filename instead the content type to figure out if it should treat the upload as regular form data or file upload. this fixes a bug with google chrome.,improved the session support for more efficient session storing on the filesystem. also added support for listing of sessions currently stored in the filesystem session store.,"response.age is parsed as a timedelta. previously, it was incorrectly treated as a datetime. the header value is an integer number of seconds, not a date string. ","rule templates properly work with submounts, subdomains and other rule factories now.",fixed an issue with template.from_file not working for file descriptors.,changed repr of exceptions to be less magical.,fixed a problem with proxies not forwarding some rarely used special methods properly.,resolved an issue where machine id for the reloader pin was not read accurately on windows.,the description field of http exceptions is now always escaped. use markup objects to disable that.,the environheaders object now skips over empty content type and lengths if they are set to falsy values.,"all datetime values are timezone-aware with tzinfo=timezone.utc. this applies to anything using http.parse_date: request.date, .if_modified_since, .if_unmodified_since; response.date, .expires, .last_modified, .retry_after; parse_if_range_header, and ifrange.date. when comparing values, the other values must also be aware, or these values must be made naive. when passing parameters or setting attributes, naive values are still assumed to be in utc. #2040","the development server recognizes connectionerror on python 3 to silence client disconnects, and does not silence other oserrors that may have been raised inside the application. ",location autocorrection in response.get_wsgi_headers is relative to the current path rather than the root path. ,"change accept datastructure to sort by specificity first, allowing for more accurate results when using best_match for mime types ",multi-value test-client posts from a standard dictionary are now supported. previously you had to use a multi dict.,the routing system now also accepts strings instead of dictionaries for the query_args parameter since we re only passing them through for redirects.,werkzeug.wrappers.json.jsonmixin has been replaced with flask s implementation. check the docs for the full api. ,removed support for deprecated non-silent usage of the limited stream object.,sys.path is now printed from the testapp.,"rule code generation uses a filename that coverage will ignore. the previous value, generated , was causing coverage to fail. ",fixed a path quoting bug in environbuilder that caused path_info and script_name to end up in the environ unquoted.,profiler now writes to the correct stream.,intermediate response bodies are iterated over even when buffered=false to ensure iterator middleware can run cleanup code safely. only the last response is not buffered. ,it s now possible to initialize requests as shallow requests which causes runtime errors if the request object tries to consume the input stream.,"headers are passed to the new request for all codes, following what browsers do.",use native strings for memcached keys to work with python 3 client .,environheaders contain content-type and content-length now,the werkzeug.routing.map now has a class attribute with the default converter mapping. this helps subclasses to override the converters without passing them to the constructor.,the test client request methods takes an auth parameter to add an authorization header. it can be an authorization object or a tuple for basic auth. #1809,fixed `extra_files` parameter for reloader to not cause startup to crash when included in server params,307 and 308 codes preserve the method and body. all others ignore the body and related headers.,the local manager can now accept custom ident functions in the constructor that are forwarded to the wrapped local objects.,mapadapter.build can be passed a multidict to represent multiple values for a key. it already did this when passing a dict with a list value. ,werkzeug no longer utilizes the python time module for parsing which means that dates in a broader range can be parsed.,improved rule.empty by providing a `get_empty_kwargs to allow setting custom kwargs without having to override entire empty method. ,werkzeug.test.client can now run the application buffered in which case the application is properly closed automatically.,corrected an issue that caused the debugger not to use the machine guid on posix systems.,fixed an issue with the memcache not working properly.,fixed a bug in the secure cookie that made server-side expiration on servers with a local time that was not set to utc impossible.,shared data middleware accepts a list instead of a dict of static locations to preserve lookup order. ,fixed an issue with url_quote not producing the right escape codes for single digit codepoints.,"run_simple tries to show a valid ip address when binding to all addresses, instead of 0.0.0.0 or ::. it also warns about not running the development server in production in this case. #1964",headers now support a pop operation to better work with environ properties.,renamed the attribute implicit_seqence_conversion attribute of the request object to implicit_sequence_conversion.,fixed an issue with the forking server not starting any longer.,werkzeug.urls.url_fix now properly encodes hostnames with idna encoding . it also doesn t crash on malformed urls anymore .,fixed a bug that occurs when running on python 2.6 and using a broken locale. see pull request #912.,"remove most top-level attributes provided by the werkzeug module in favor of direct imports. for example, instead of import werkzeug; werkzeug.url_quote, do from werkzeug.urls import url_quote. install version 0.16 first to see deprecation warnings while upgrading. #2, #1640",added a workaround for syntax errors in init files in the reloader.,the head method is not changed to get.,added a more list like interface to headers ,fixed a bug with shutdowns on windows.,add send_from_directory function to safely serve an untrusted path within a trusted directory. adapted from flask s implementation. #1880,mapadapter.match now accepts a return_rule keyword argument that returns the matched rule instead of just the endpoint,added extends to headers.,werkzeug.import_string now works with partially set up packages properly.,many fixes and small improvements,werkzeug now automatically sets the content length immediately when the data attribute is set for efficiency and simplicity reasons.,"cached_property is generic over its return type, properties decorated with it report the correct type. #2113",added support for tell on the limited stream.,changed filestorage filename fallback logic to skip special filenames that python uses for marking special files like stdin.,added support for platforms that lack spooledtemporaryfile.,implemented has for nullcache,"combinedmultidict.copy returns a shallow mutable copy as a multidict. the copy no longer reflects changes to the combined dicts, but is more generally useful. ",added stream based url decoding. this reduces memory usage on large transmitted form data that is url decoded since werkzeug will no longer load all the unparsed data into memory.,werkzeug.utils.import_string now fails with much better error messages that pinpoint to the problem.,removed pending deprecations,"request cookies are parsed into a multidict to capture all values for cookies with the same key. cookies returns the first value rather than the last. use cookies.getlist to get all values. parse_cookie also defaults to a multidict. #1562, #1458","languageaccept will fall back to matching en for en-us or en-us for en to better support clients or translations that only match at the primary language tag. #450, #1507",test client works correctly with multiple cookies now.,work around a bug in pip that caused the reloader to fail on windows when the script was an entry point. this fixes the issue with flask s flask run command failing with no module named scriptsflask . #1614,fix bug where werkzeug.exceptions.abort would raise an arbitrary subclass of the expected class .,fixed an rfc 2068 incompatibility with cookie value quoting.,resolved a regression with status code handling in the integrated development server.,drop support for python 2 and 3.5. #1693,"the interactive debugger handles outer variables in nested scopes such as lambdas and comprehensions. #913, #1037, #1532","disable autocorrect and spellchecker in the debugger middleware s python prompt, see pull request #994.",partially revert change to class hierarchy of headers. see #1084.,"the shareddatamiddleware default fallback_mimetype is application/octet-stream. if a filename looks like a text mimetype, the utf-8 charset is added to it. this matches the behavior of baseresponse and flask s send_file. #1689",properly handle expect: 100-continue in the development server to resolve issues with curl.,add arguments to delete_cookie to match set_cookie and the attributes modern browsers expect. #1889,"fixed an issue where crlf line endings could be split into two by the line iter function, causing problems with multipart file uploads.","support matching and building websocket rules in the routing system, for use by async frameworks. #1709",corrected the timestamp verification in the pin debug code. without this fix the pin was remembered for too long.,"the defaults of generate_password_hash have been changed to more secure ones, see pull request #753.",the test client and environbuilder now support mimetypes like the request object does.,changed cache so that cache never expires if timeout is 0. this also fixes an issue with redis setex ,removed support for is_behind_proxy. use a wsgi middleware instead that rewrites the remote_addr according to your setup. also see the werkzeug.contrib.fixers.proxyfix for a drop-in replacement.,"fixed a bug on python 3, that caused make_ssl_devcert to fail with an exception.",introduced get_data and set_data methods for responses.,fixed a problem with the machine guid detection code on os x on python 3.,added a plain request type that disables all form parsing to only leave the stream behind.,added exceptions for 504 and 505.,the debugger security pin is unique in containers managed by podman. #1661,added support for stdlib pbkdf2 hmac if a compatible digest is found.,"unauthorized takes a www_authenticate parameter to set the www-authenticate header for the response, which is technically required for a valid 401 response. ",the secure cookie works properly in load balanced environments with different cpu architectures now.,added support for edge as browser.,cachecontrol.no_cache and cachecontrol.private behavior changed to reflect the possibilities of the http rfc. setting these attributes to none or true now sets the value to the empty value . more details in the documentation.,routing.map.bind_to_environ raises a more correct error message now if the map was bound to an invalid wsgi environment.,fixed ssl wrapping on platforms that supported opening sockets by file descriptor.,"the default securecookie.serialization_method will change from pickle to json in 1.0. to upgrade existing tokens, override unquote to try pickle if json fails. ",shareddatamiddleware uses wrap_file now and has a configurable cache timeout.,header encoding changed from utf-8 to latin1 to support a port to python 3. bytestrings passed to the object stay untouched which makes it possible to have utf-8 cookies. this is a part where the python 3 version will later change in that it will always operate on latin1 values.,the client now supports cookies.,fix bug in werkzeug.contrib.cache.simplecache with python 3 where add/set may throw an exception when pruning old entries from the cache .,"etags now is nonzero if it contains at least one etag of any kind, including weak ones.",added wwwauthenticate and wwwauthenticatemixin,multidict.items and mutidict.iteritems now accept an argument to return a pair for each value of each key.,raise typeerror when port is not an integer. ,conditional request handling or access to the data property on responses no longer ignores direct passthrough mode.,fixed a bug with client cookie header parsing being case sensitive.,improved url_decode and url_encode performance.,range validates that list of range tuples passed to it would produce a valid range header. ,fixed a problem with deepcopy not working for multi dicts.,"int and float converters in url rules will handle negative values if passed the signed=true parameter. for example, /jump/<int:count>. ",a range request for an empty file will return a 200 response with the empty file instead of a 416 error. #1937,werkzeug.test.client now uses the original request method when resolving 307 redirects .,basereporterstream is now part of the werkzeug contrib module. from werkzeug 0.3 onwards you will have to import it from there.,baseresponse.make_conditional now always returns self. previously it didn t for post requests and such.,corrected a unicode error on python 3 for the debugger s pin usage.,fixed a bug with the __setitem__ method of headers that didn t properly remove all keys on replacing.,"multidict, combinedmultidict, headers, and environheaders raise special key errors now that are subclasses of badrequest so if you don t catch them they give meaningful http responses.",implemented find_modules,added utils.invalidate_cached_property to invalidate cached properties. 
Release Notes â€” Featuretools 0.24.0 documentation,entity.query_by_values has been removed and replaced by entityset.query_by_values with an added entity_id parameter to specify which entity in the entityset should be used for the query.,text variable type has been replaced with naturallanguage ,the text variable type has been deprecated and been replaced with the naturallanguage variable type. the text variable type will be removed in a future release.,added load_features and save_features to persist and reload features,the libraries used for downloading or uploading from s3 or urls are now optional and will no longer be installed by default. to use this functionality they will need to be installed separately.,fix errors with equals and notequals primitives when comparing categoricals or different dtypes ,fix duplicate label column generation when labels are passed in cutoff times and approximate is being used ,fix issue with converting to pickle or parquet after adding interesting features ,fix feature visualization for features with > or < in name ,improve how files are copied and written ,load and save features from open files and strings ,replace pd.timedelta time units that were deprecated ,removing type casting in equals and notequals primitives ,"ft.dfs will no longer build features from transform primitives where one of the inputs is a transform feature, a groupbytransform feature, or a direct feature of a transform / groupbytransform feature. this will make some features that would previously be generated by ft.dfs only possible if explicitly specified in seed_features.",fix hyperlinks in docs and docstrings with updated address ,handle primitives with same function being applied to same column ,encode features with unknown class in categorical ,add words and chars primitives ,remove unnecessary pd.series and pd.datetimeindex calls from primitives ,fix issue with missing instance ids and categorical entity index ,generate transform features of direct features ,"* when passing multiple instances of a primitive built with make_trans_primitive or maxe_agg_primitive, those instances must have the same relative order when passed to dfs to ensure a consistent ordering of features.",change type of features calculated on index features to categorical ,add dtype to interesting_values to fix deprecated empty series with no dtype ,fix bug in encode_features that created duplicate columns of features with multiple outputs ,add primitive.get_filepath and example of primitive loading data from external files ,allow featureoutputslice features to be serialized ,determine calculate_feature_matrix behavior with approximate and a cutoff df that is a subclass of a pandas dataframe ,renamed features have names correctly serialized ,added approximate parameter to calculate_feature_matrix and dfs,"related to the above change, cumulative transform features are now defined using a new feature class, groupbytransformfeature.",added return values to dfs and calculate_feature_matrix ,numtrue primitive added and docstring of other primitives updated ,added serializing and deserializing from s3 and deserializing from urls ,"add master, and release tests for premium primitives ",feature calculations will return in the order of instance ids provided instead of the order of time points instances are calculated at.,fixed hash issue with same base features ,"add age primitive, and make it a default transform primitive for dfs ",removed time remaining from displayed progress bar in dfs and calculate_feature_matrix ,install data and dependencies ,"calls to featuretools.dfs or featuretools.calculate_feature_matrix that use a cutoff time dataframe, but do not label the time column with either the target entity time index variable name or as time, will now result in an attributeerror. previously, the time column was selected to be the first column that was not the instance id column. with this update, the position of the column in the dataframe is no longer used to determine the time column. now, both instance id columns and time columns in a cutoff time dataframe can be in any order as long as they are named properly.",remove unnecessary check no related instances call and refactor ,switch which csv is associated with which variable ,fix inconsistent ordering of features between kernel restarts ,prevent dfs from creating identity features of globally ignored variables ,add example of using dask to parallelize to docs ,automatically generate feature name for controllable primitives ,"ft.dfs now has a groupby_trans_primitives parameter that dfs uses to automatically construct features that group by an id column and then apply a transform primitive to search group. this change applies to the following primitives: cumsum, cumcount, cummean, cummin, and cummax.",normalized type_strings of variable classes so that the find_variable_types function produces a dictionary with a clear key to name transition ,add associative attribute to primitives ,use more consistent and uniform warnings ,add graph_feature to generate a feature lineage graph for a given feature ,update primitive options to check reversed inputs if primitive is commutative ,performance improvements for approximate in calculate_feature_matrix and dfs,use logger.warning to fix deprecated logger.warn ,add list_variable_types and graph_variable_types for variable types ,"add feature selection functions for null, correlated, and single value features ",fix bug and improve tests for entityset.__eq__ and entity.__eq__ ,the fix to how the diff primitive is calculated may slow down the overall calculation time of feature lists that use this primitive.,add ability to install optional add on libraries ,add describe_feature to generate an english language feature description for a given feature ,enable specifying primitives on a per column or per entity basis ,don t calculate dependencies of unnecessary features ,fix multi-output features not created when there is no child data ,raise typeerror if improper input is supplied to entity.delete_variables ,add pyspark and koalas to automated dependency checks ,allow where clauses on direct features in deep feature synthesis ,allow boolean variable types to be used in the multiply primitive ,add ability to use primitive classes and instances as keys in primitive_options dictionary ,fix issue where some primitive options would not be applied ,added error message when datetimeindex is a variable but not set as the time_index ,use s3 demo csv with better column names ,added support for pandas dateoffsets in dfs and timedelta ,fix boolean dtype mismatch between encode_features and dfs and calculate_feature_matrix ,only calculate features for instances before cutoff ,add commutative argument to subtractnumeric and dividenumeric primitives ,"add page on variable types to describe some variable types, and util functions ",fix github links with correct organizations ,add modulo to override tests ,added ipaddress and emailaddress variable types ,fixed faq question with multiple question marks ,split requirements to separate files and pin to latest versions ,ensure config dir is writable ,update release doc for clarity and to add future release template ,reorganize and clean up tests ,use circleci matrix jobs in config to trigger multiple runs of same job with different parameters ,normalize_entity specifies error when make_time_index is an invalid string ,add seed features later in dfs process ,warn python 3.6 users support will be dropped in future release ,change feature calculation to return in order of instance ids provided ,fix encode_features converting excluded feature columns to a numeric dtype ,add support for building and uploading conda package ,uses full entity update for dependencies of uses_full_entity features ,update how standard primitives are imported internally ,"removed feature.get_names, feature.get_feature_names should be used instead",add names for binary ,warn user if supplied primitives are not used during dfs ,resolve bug preventing using first column as index by default ,calculate direct features uses default value if parent missing ,allow variables_types to be referenced by their type_string for the entity_from_dataframe function ,add include_cutoff_time arg - control whether data at cutoff times are included in feature calculations ,renamed feature submodule to primitives,handle transform features that need access to all values of entity ,don t run changelog check for release prs or automated dependency prs ,improve cutoff time handling when a single value or no value is passed ,minor updates to work with koalas version 1.7.0 ,allow variable descriptions to be set directly on variable ,changed order and text of arguments in make_trans_primitive docstring ,parallel verbose fixes ,handle return type when creating features from id variables ,entityset repr to use get_name rather than id ,serialize features as json ,add guide for feature selection functions ,handle parquet serialization with last time index ,allow user to pass in desired feature return types ,more informative n jobs prints and warnings ,remove duplicate features check in dfs ,allow installation of additional primitives ,"using training windows in feature calculations can result in different values than previous versions. this was done to prevent consecutive training windows from overlapping by excluding data at the oldest point in time. for example, if we use a cutoff time at the first minute of the hour with a one hour training window, the first minute of the previous hour will no longer be included in the feature calculation.",handle no child data when calculating aggregation features with multiple arguments ,improved chunking when calculating feature matrices ,raise warning and not error on schema version mismatch ,fixed cumcount and other group-by transform primitives that take id as input ,improve calculation of aggregation features on grandchildren ,remove unecessary time_last variable ,added progress_callback parameter to dfs and calculate_feature_matrix ,add ability to add feature description captions to feature lineage graphs ,remove casting to list in transform feature calculation ,remove list of times as on option for cutoff_time in calculate_feature_matrix ,remove python 2.7 support and add 3.7 in install.rst ,updates for compatibility with pandas 1.1.0 ,add download count to github readme ,"_calculate_idenity_features now only returns the features asked for, instead of the entire entity ",prevents user from removing base entity time index using additional_variables ,add make_index when initializing an entityset by passing in an entities dictionary ,check that agg_primitives and trans_primitives are right primitive type ,diff primitive now calculates using all available data ,improved error message for index/time_index being the same column in normalize_entity and entity_from_dataframe ,removed all mentions of allow_where ,remove get_values from test_es.py to remove warnings ,make median agg primitives ignore nans by default ,add readme to pypi,error if attempting to add entityset relationship where child variable is also child index ,update properties of cumulative transform primitives ,entity.query_by_values now preserves row order of underlying data ,make id an optional parameter of entityset constructor ,updates timesinceprevious and diff primitives ,fix readme.md badge with correct link ,update spark config in test fixtures and docs ,add conda install instructions ,use new version of pull request github action ,keep dataframe sorted by time during feature calculation ,update agg primitives to use more efficient functions ,use multiple cpus to run tests on ci ,support calling a primitive instance s function directly ,added percentile transform primitive,add first primitive to api reference docs ,improve performance of all feature calculations ,reset index of cutoff times in calculate feature matrix ,the list_primitives function returns valid input types and the return type ,add development install instructions to contributing.md ,updated url for compose ,sort primitives passed to dfs to get consistent ordering of features* ,improve consistency of transform primitives ,adding non-feature columns to calculated feature matrix ,install,added week transform primitive,clarification of multi output feature creation ,require pandas 0.24.1 or higher ,added support for stacking multi-output primitives ,improve formatting of release notes ,fix entityset.combine_variables and standardize encode_features ,remove usage of ravel to resolve unexpected warning with pandas 1.2.0 ,use randomly generated names in retail csv ,update variable type inference to better check for string values ,added functionality for relative units in timedelta ,generate features along all paths when there are multiple paths between entities ,implementing country code and sub region codes as variable types ,refactor test entityset creation to avoid saving to disk ,mean primitive changes ,fixes error when a multioutput primitive was supplied to dfs as a groupby trans primitive ,entity normalization preserves types of copy & additional variables ,add auto assign bot on github ,fix logic for inferring variable type from unusual dtype ,removed unused variable in normalize entity ,"thanks to the following people for contributing to this release: @frances-h, @rwedge","thanks to the following people for contributing to this release: @frances-h, @rwedge",refactor entrypoints to use decorator ,add support for local tar file in read_entityset ,schema version added for entityset serialization 
Changelog â€” gevent 21.1.3.dev0 documentation,"note this has been tested on linux , macos, and windows. it hasn t been tested on other platforms, so results are unknown for them. the c-ares support, in particular, is using some additional socket functions and defines. please let the maintainers know if this introduces issues.","note that cygwin is not an officially supported platform of upstream libuv and is not tested by gevent, so the actual working status is unknown, and this may bitrot in future releases.",make worker threads created by gevent.threadpool.threadpool install the threading.setprofile and threading.settrace hooks while tasks are running. this provides visibility to profiling and tracing tools like yappi.,it is now possible to build and use the embedded libuv on a cygwin platform.,"the embedded libev is now asked to detect the availability of clock_gettime and use the realtime and/or monotonic clocks, if they are available.","at the same time, asyncresult is tuned to behave more like it did in older versions, meaning that the hang is once again much less likely. if you were getting lucky and using asyncresult successfully across threads, this may restore your luck. in addition, cross-thread wakeups are faster. note that the gevent hub now uses an extra file descriptor to implement this.","make zope.interface, zope.event and setuptools required dependencies. the events install extra now does nothing and will be removed in 2021. see issue #1619.","make gevent locks that are monkey-patched usually work across native threads as well as across greenlets within a single thread. locks that are only used in a single thread do not take a performance hit. while cross-thread locking is relatively expensive, and not a recommended programming pattern, it can happen unwittingly, for example when using the threadpool and logging.",features,features,features,features,features,features,features,features,features,features,features,features,features,features,features,features,features,features,features,features,"the libev extension was incompatible with this. as part of this, certain internal, undocumented names have been changed.","asyncresult has never been safe to use from multiple threads. it, like most gevent objects, is intended to work with greenlets from a single thread. using asyncresult from multiple threads has undefined semantics. the safest way to communicate between threads is using an event loop async watcher.","make gevent.pywsgi stop trying to enforce the rules for reading chunked input or content-length terminated input when the connection is being upgraded, for example to a websocket connection. likewise, if the protocol was switched by returning a 101 status, stop trying to automatically chunk the responses.",this was a difference from the way the standard library behaved . it was added to gevent during early testing of openssl 1.1 and tls 1.3. see issue #1637.,"improve the ability to use monkey-patched locks, and gevent.lock.boundedsemaphore, across threads, especially when the various threads might not have a gevent hub or any other active greenlets. in particular, this handles some cases that previously raised loopexit or would hang. note that this may not be reliable on pypy on windows; such an environment is not currently recommended.","previously it was pinned to 5.6.3 for pypy2, except for on windows, where it was excluded. it is now treated the same as cpython again. see issue #1643.","any ip address is no longer subject to an extra call to getaddrinfo. depending on the resolver in use, this is likely to change the number and order of greenlet switches. see issue #1634.","a few minor errors and discrepancies were fixed as well, such as gethostbyaddr working on python 3 and failing on python 2. the dnspython resolver now raises the expected typeerror in more cases instead of an attributeerror. see issue #1012.","let ci build and upload release wheels for windows, macos and manylinux. as part of this, gevent s tests can run if the standard library s test.support module has been stripped. see issue #1555.",the c-ares and dnspython resolvers now raise exceptions much more consistently with the standard resolver. types and errnos are substantially more likely to match what the standard library produces.,"this is available on python 2 if the selectors2 backport is installed. when monkey-patching, selectors is made available as an alias to this module. see issue #1532.",joining a hub also cleans up some memory resources that might have stuck around for longer before as well. see issue #1601.,fix destroying the libuv default loop and then using the default loop again. see issue #1580.,"make gevent s semaphore objects properly handle native thread identifiers larger than can be stored in a c long on python 3, instead of raising an overflowerror.",fix some potential crashes under libuv when using gevent.signal_handler. the crashes were seen running the test suite and were non-deterministic. see issue #1606.,"destroying a hub after joining it didn t necessarily clean up all resources associated with the hub, especially if the hub had been created in a secondary thread that was exiting. the hub and its parent greenlet could be kept alive.","before, cross-thread lock uses might succeed, or, if the lock was contended, raise greenlet.error. now, in the contended case, if the lock has been acquired by the main thread at least once, it should correctly block in any thread, cooperating with the event loop of both threads. in certain cases, it might be possible for contended case to raise loopexit when previously it would have raised greenlet.error; if these cases are a practical concern, please open an issue.","depending on the system and configuration, results may not match exactly, at least with dnspython. there are still some rare cases where the system resolver can raise herror but dnspython will raise gaierror or vice versa. there doesn t seem to be a deterministic way to account for this. on pypy, getnameinfo can produce results when cpython raises socket.error, and gevent s dnspython resolver also raises socket.error.","gevent s ci is now tested on ubuntu 18.04 , an upgrade from 16.04 . see issue #1623.",rename gevent s c accelerator extension modules using a prefix to avoid clashing with other c extensions. see issue #1480.,"make gevent.greenlet objects function as context managers. when the with suite finishes, execution doesn t continue until the greenlet is finished. this can be a simpler alternative to a gevent.pool.group when the lifetime of greenlets can be lexically scoped.","now, destroying a hub drops the reference to the hub and ensures it cannot be switched to again. ","now, when asyncresult detects a situation that would hang, it prints a warning to stderr. note that this is best-effort, and hangs are still possible, especially under pypy 7.3.3.",incorrectly passing an exception instance instead of an exception type to gevent.greenlet.kill or gevent.killall no longer prints an exception to stderr. see issue #1663.,"also, the underlying semaphore always behaves in an atomic fashion when pure_python is set. previously, it only correctly did so on pypy. see issue #1437.","if your application appears to hang acquiring semaphores, but adding a call to gevent.get_hub in the thread attempting to acquire the semaphore before doing so fixes it, please file an issue. see issue #1698.",deprecations and removals,deprecations and removals,caution this currently means that it can be imported. but it cannot yet be used. gevent has a pinned dependency on dnspython < 2 for now.,the dummythread objects created automatically by certain operations when the standard library threading module is monkey-patched now match the naming convention the standard library uses . previously they used dummythread-12345 . see issue #1659.,use ares_getaddrinfo instead of a manual lookup.,"add gevent.selectors containing geventselector. this selector implementation uses gevent details to attempt to reduce overhead when polling many file descriptors, only some of which become ready at any given time.","in addition, several other small discrepancies were addressed, including handling of localhost and broadcast host names.",forking a process that had use the threadpool to run tasks that created their own hub would fail to clean up the threadpool by raising greenlet.error. see issue #1631.,previous: installation and requirements,"as part of this, certain parts of the c-ares extension were adapted to use modern cython idioms.","on cpython, depend on greenlet >= 0.4.17. this version is binary incompatible with earlier releases on cpython 3.7 and later.",fix compatibility with dnspython 2.,"as part of this, exceptions raised in the main greenlet will now include a more complete traceback from the failing greenlet. see issue #1540.",python 3 gevent.ssl.sslsocket objects no longer attempt to catch connectionreseterror and treat it the same as an sslerror with ssl_error_eof .,fix a spurious warning about watchers and resource leaks on libuv on windows. reported by st phane rainville. see issue #1564.,gevent.socket.create_connection and gevent.socket.socket.connect no longer ignore ipv6 scope ids.,"on python 3.7 and above, the module gevent.contextvars is no longer monkey-patched into the standard library. contextvars are now both greenlet and asyncio task local. see issue #1656. see issue #1674.",the name remains accessible after the file object is closed.,"objects opened from a file descriptor integer have that integer as their name. have the string <fdopen> as their name , but here gevent always follows python 3.)",make destroying a hub try harder to more forcibly stop loop processing when there are outstanding callbacks or io operations scheduled.,"the semaphore tries to avoid creating a hub if it seems unnecessary, automatically creating one in the single-threaded case when it would block, but not in the multi-threaded case. while the differences should be correctly detected, it s possible there are corner cases where they might not be.",similar changes apply to gevent.event.event .,pypy no longer uses the python allocation functions for libuv and libev allocations. see issue #1569.,"on linux, this can reduce the number of system calls libev makes. originally provided by josh snyder. see issue #1648.",update tested pypy version from 7.2.0 on windows to 7.3.1. see issue #1569.,make it possible to monkey-patch contextvars before python 3.7 if a non-standard backport that uses the same name as the standard library does is installed. previously this would raise an error. reported by simon davy. see issue #1572.,add support for python 3.9.,"python 2: make gevent.subprocess.popen.stdin objects have a write method that guarantees to write the entire argument in binary, unbuffered mode. this may require multiple trips around the event loop, but more closely matches the behaviour of the python 2 standard library . the number of bytes written is still returned . see issue #1711.","waiters on event and semaphore objects that call wait or acquire, respectively, that find the event already set, or the semaphore available, no longer cut in line and run before any previously scheduled greenlets. they now run in the order in which they arrived, just as waiters that had to block in those methods do. see issue #1520.",gevent.pywsgi: avoid printing an extra traceback to standard error on certain invalid client requests.,gevent can now be built using cython 3.0a5 and newer. the pypi distribution uses this version.,"as part of this refactoring, share more common socket code between python 2 and python 3. see issue #1724.",make monkey-patching properly remove select.epoll and select.kqueue. reported by kirill smelkov. see issue #1570.,make gevent.event.asyncresult print a warning when it detects improper cross-thread usage instead of hanging.,depend on greenlet >= 0.4.16. this is required for cpython 3.9 and 3.10a0. see issue #1627.,older releases,older releases,"using gevent.wait on an event more than once, when that event is already set, could previously raise an assertionerror.",reported by dan milon. see issue #1704.,thanks to berkakinci for the patch. see issue #1645.,"those undefined semantics changed in recent gevent versions, making it more likely that an abused asyncresult would misbehave in ways that could cause the program to hang.",update all the bundled config.guess and config.sub scripts. see issue #1589.,fix a typeerror on startup on python 2 with zope.schema installed. reported by josh zuech.,"for full information on older versions, see information about older releases."
Changelog â€” marshmallow 3.12.1 documentation,marshmallow.pprint is deprecated and will be removed in marshmallow 4 .,backwards-incompatible: only and exclude are bound by declared and additional fields. a valueerror is raised if invalid fields are passed . thanks @jan-23 for reporting. thanks @ikilledthecat and @deckar01 for the prs.,error_handler and accessor options are replaced with the handle_error and get_attribute methods #284.,exclude parameter is respected when used together with only parameter . thanks @lustdante for the catch and patch.,passing field metadata via keyword arguments is deprecated and will be removed in marshmallow 4 . use the explicit metadata=... argument instead. thanks @sirosen.,fix passing only and exclude to nested with an ordered schema . thanks @juannorris for the pr.,add warnings for api that is deprecated or changed to help users prepare for marshmallow 3 .,"allow only and exclude parameters to take nested fields, using dot-delimited syntax . thanks @tim-erwin and @deckar01 for the discussion and implementation.","if a field s default is fields.missing and its serialized value is none, it will not be included in the final serialized result.",dump_only and load_only for function and method are set based on serialize and deserialize arguments .,fix deprecated functions compatibility with python 2 . thanks @airstandley for the catch and patch.,"add strict parameter and option: causes serializer to raise an error if invalid data are passed in, rather than storing errors.",fix behavior of many argument passed to dump and load. thanks @svenstaro for reporting and helping with this.,"func and method_name are still present for backwards-compatibility, but they will both be removed in marshmallow 3.0.","the behavior to apply when encountering unknown fields while deserializing can be controlled with the unknown option . it makes it possible to either include , exclude , or raise . thanks @tuukkamustonen for the suggestion and thanks @ramnes for the pr.","major reworking and simplification of the public api, centered around support for deserialization, improved validation, and a less stateful schema class.",error messages for validators can be interpolated with {input} and other values .,many=true no longer iterates over str and collections.abc.mapping objects and instead raises a validationerror with {'_schema': } .,"use internal util functions instead of conditionally using dateutil for parsing iso 8601 datetimes, dates and times. timezone info is now correctly deserialized whether or not dateutil is installed. ",prefix parameter or schema class is removed . the same can be achieved using a @post_dump method.,"backwards-incompatible: many is passed as a keyword argument to methods decorated with pre_load, post_load, pre_dump, post_dump, and validates_schema. partial is passed as a keyword argument to methods decorated with pre_load, post_load and validates_schema. **kwargs should be added to all decorated methods.","methods decorated with the pre_*, post_*, and validates_* decorators must be instance methods. class methods and instance methods are not supported at this time.","when unknown is not passed to nested, default to nested schema unknown meta option rather than raise . thanks @vgavro for the pr.",fix @validates behavior when used when attribute is specified and strict=true . thanks @density for reporting.,marshallingerror and unmarshallingerror error are deprecated in favor of a single validationerror .,"if an invalid type is passed to schema and strict=false, store a _schema error in the errors dict rather than raise an exception . thanks @density for reporting.",backwards-incompatible: missing and default values are passed in deserialized form . thanks @chadrik for the suggestion and thanks @lafrech for the pr.,propagate only and exclude parameters to nested fields within list and dict .,fix bug that raised typeerror when invalid data type is passed to a nested schema with @validates .,fields.list works as expected with generators and sets . thanks @sergey-aganezov-jr.,make_object is only called after all validators and postprocessors have finished . thanks @sunsongxp for reporting.,the select/enum field is deprecated in favor of using validate.oneof validator .,"if a date format string is passed to a datetime field, it is always used for deserialization . thanks @bartaelterman and @praveen-p.",fix strict behavior when errors are raised in pre_dump/post_dump processors . thanks @tvuotila for the catch and patch.,allow strict class meta option to be overriden by constructor . thanks @douglas-treadwell for reporting and thanks @podhmo for the pr.,use email.utils.parsedate_to_datetime instead of conditionally using dateutil for parsing rfc dates .,"backwards-incompatible: when pass_original=true is passed to one of the decorators and a collection is being serialized, the original_data argument will be a single object unless pass_many=true is also passed to the decorator . thanks @stj for the pr.",queryselect and queryselectlist are deprecated . these fields will be removed in version 2.1.,includes bug fixes from releases 2.13.5 and 2.13.6.,make allow_null=true the default for nested fields. this will make none serialize to none rather than a dictionary with empty values . thanks @nickrellack for the suggestion.,"backwards-incompatible: when many=true, the errors dictionary returned by dump and load will be keyed on the indices of invalid items in the serialized collection . add index_errors=false on a schema s class meta options to disable this behavior.","fix list of nullable nested fields list . because this fix reverts an optimization introduced to speed-up serialization and deserialization of lists of nested fields, a negative impact on performance in this specific case is expected.",a valueerror is raised when the missing parameter is passed for required fields .,backwards-incompatible: email and url fields don t validate on serialization . this makes them more consistent with the other fields and improves serialization performance. thanks again @lafrech.,improve default error messages for oneof and containsonly . thanks @mcgfeller for the suggestion and @maxalbert for the pr.,fix usage of @validates with a nested field when many=true . thanks @nelfin for the catch and patch.,fix propagating dot-delimited only and exclude parameters to nested schema instances .,"if required=true validation is violated for a given field, it will raise an error message that is different from the message specified by the error argument. thanks @asteinlein.",raise validationerror instead of typeerror when non-iterable types are validated with many=true .,improved performance and stability.,these fixes were backported from 3.0.0b15 and 3.0.0b16.,errors raised by pre/post-load/dump methods will be added to a schema s errors dictionary . thanks @dbertouille for the suggestion and for the pr.,add support for partial deserialization with the partial argument to schema and schema.load . thanks @taion.,backwards-incompatible: change the signature of utils.get_value and schema.get_attribute for consistency with python builtins . thanks @stas for reporting and thanks @deckar01 for the pr.,"make @validates consistent with field validator behavior: if validation fails, the field will not be included in the deserialized output . thanks @martinstein for reporting and thanks @vuonghv for the fix.","object serialization and deserialization, lightweight and fluffy.",fix serialization of datetime.time objects with microseconds . thanks @tim-erwin for reporting and thanks @vuonghv for the fix.,prevent duplicate error messages when validating nested collections . thanks @alexmorken for the catch and patch.,date fields correctly deserializes to a datetime.date object when python-dateutil is not installed . thanks @malexer for the catch and patch.,passing string arguments to required and allow_none is deprecated. pass the error_messages argument instead. this api will be removed in version 2.2.,make_object is only called when input data are completely valid . thanks @kissgyorgy for reporting.,"the arbitrary, price, and fixed fields are deprecated in favor of the decimal field .",only add schemas to class registry if a class name is provided. this allows schemas to be constructed dynamically using the type constructor without getting added to the class registry .,handle empty sqlalchemy lazy lists gracefully when dumping . thanks @vke-code for the catch and @yuriheupa for the patch.,backwards-incompatible with previous 3.x versions: change ordering of keys and values arguments to fields.dict.,fix behavior of exclude parameter when passed from parent to nested schemas . thanks @timc13 for reporting and @deckar01 for the fix.,schema.loads correctly defaults to use the value of self.many rather than defaulting to false . thanks @davidism for the catch and patch.,raise a stringnotcollectionerror if only or exclude is passed as a string . thanks @paulocheque for reporting.,url and email fields are validated upon serialization.,remove unnecessary call to utils.get_value for function and method fields . thanks @jmcarp.,serializing an iterator will not drop the first item . thanks @jmcarp for the patch. thanks @edgarallang and @jmcarp for reporting.,add warnings for functions in marshmallow.utils that are removed in marshmallow 3.,cve-2018-17175: fix behavior when an empty list is passed as the only argument . thanks @deckar01 for reporting and thanks @lafrech for the fix.,allow error message for fields.boolean to be customized with the error parameter .,fix behavior for serializing missing data with number fields when as_string=true is passed . thanks @jessemyers for reporting.,backwards-incompatible: validate.containsonly allows empty and duplicate values . thanks @maximkulkin for the suggestion and thanks @lafrech for the pr.,"deserializing none or the empty string with either a datetime, date, time or timedelta results in the correct unmarshalling errors . thanks @svenstaro for reporting and helping with this.",backwards-incompatible: validators.length is no longer a subclass of validators.range . thanks @deckar01 for the catch and patch.,"email validator permits email addresses with non-ascii characters, as per rfc 6530 . thanks @lextoumbourou for reporting and @mwstobo for sending the patch.","schema validators can take an optional raw_data argument which contains raw input data, incl. data not specified in the schema . thanks @ryanlowe0.",ensure that errors dictionary is correctly cleared on each call to schema.dump and schema.load.,backwards-incompatible: allow nesting a serializer within itself recursively. use exclude or only to prevent infinite recursion.,copying missing with copy.copy or copy.deepcopy will not duplicate it .,fix bug that raised an attributeerror when instantiating a schema with a field named parent . thanks @flying-sheep for reporting and helping with the fix.,"add allow_none parameter to fields.field. if false , validation fails when the field s value is none . if allow_none is true, none is considered valid and will deserialize to none.",add example of schema inheritance in docs . thanks @martinstein for the suggestion and @juanrossi for the pr.,backwards-incompatible: multiple errors can be stored for a single field. the errors dictionary returned by load and dump have lists of error messages keyed by field name.,remove the error parameter and attribute of field.,the serialize function passed to fields.function is optional . thanks again @damianheard.,upgrade syntax with pyupgrade in pre-commit . thanks again @hugovk.,includes bug fixes from 2.16.2 and 2.16.3.,includes features from release 2.14.0.,"fix serialization of collections for which iter will modify position, e.g. pymongo cursors . thanks @mise for the catch and patch.",fix typeerror when serializing none with pluck . thanks @toffan for the catch and patch.,"backwards-incompatible: a field's default parameter is only used if explicitly set and the field s value is missing in the input to schema.dump. if not set, the key will not be present in the serialized output for missing values . this is the behavior for all fields. fields.str no longer defaults to '', fields.int no longer defaults to 0, etc. . thanks @jmcarp for the feedback.",add only and exclude parameters to serializer constructor.,includes bug fixes from 2.19.4 and 2.19.5.,allow non-field names to be passed to validationerror . thanks @evgeny-sureev for the catch and patch.,raise a stringnotcollectionerror if only or exclude is passed as a string to fields.nested .,add context param to serializer. allows accessing arbitrary objects in function and method fields.,includes bug fixes from 1.2.6.,allow partially-valid data to be returned for nested fields . thanks @jomag for the suggestion.,fix method resolution for __init__ method of fields.email and fields.url . thanks @dursk for the catch and patch.,restore backwards-compatibility of schemaopts constructor . thanks @wesmania for reporting and thanks @frol for the fix.,fix error message consistency for invalid input types on nested fields . this is a backport of the fix in #857. thanks @cristi23 for the thorough bug report and the pr.,the only argument passed to a schema is bounded by the fields option . thanks @lustdante for the suggestion.,marshallingerror stores its underlying exception as an instance variable. this is useful for inspecting errors.,fixes validationerror.valid_data when a nested field contains errors . this bug was introduced in 3.0.0b3. thanks @lafrech.,fix passing only as a string to nested when the passed field defines dump_to . thanks @deckar01 for the catch and patch.,"backwards-incompatible: when a schema error is raised with a dict as payload, the dict overwrites any existing error list. before this change, it would be appended to the list.","add pre_load, post_load, pre_dump, and post_dump schema method decorators for defining pre- and post- processing routines . thanks @davidism, @taion, and @jmcarp for the suggestions and feedback. thanks @taion for the implementation.",the default for unknown will be changed to raise in the next release.,tested on python 3.4 and pypy.,add format argument to fields.time and timeformat class meta option . thanks @bennyalex for the suggestion and thanks @infinityxxx for the pr.,documentation: improve custom fields example . thanks @pablospizzamiglio for reporting the problem with the old example and thanks @resinderate for the pr.,"add schema.validate method which validates input data against a schema. similar to schema.load, but does not call make_object and only returns the errors dictionary.",fix default value for fixed and price fields.,backwards-incompatible: add data_key parameter to fields for specifying the key in the input and output data dict. this parameter replaces both load_from and dump_to . thanks @lafrech.,add decimal field which is safe to use when dealing with precise numbers .,fix integer field default. it is now 0 instead of 0.0. thanks @kalasjocke.,change default error messages for url and email validators so that they don t include user input .,improve error message if a list of dicts is not passed to a nested field for which many=true. thanks again @max-orhai.,backwards-incompatible: don t recursively check nested required fields when the nested field s key is missing . this reverts #235. thanks @chekunkov reporting and thanks @lafrech for the pr.,fix bug with including an object property in fields meta option.,add include class meta option to support field names which are python keywords . thanks @nickretallack for the suggestion.,"function field works with callables that use python 3 type annotations . thanks @martinstein for reporting and thanks @sabinem, @lafrech, and @maximkulkin for the work on the pr.",fix serializing keyed tuple types with class meta options.,prevent memory leak when dynamically creating classes with type . thanks @asmodehn for writing the tests to reproduce this issue.,fix behavior when a non-list collection is passed to the validate argument of fields.email and fields.url .,the serialize function passed to fields.method is optional . thanks @justanr.,remove marshmallow.compat.plain_function since it is no longer used.,include tests and docs in release tarballs .,fix behavior when a nested field is composed within a list field . thanks @avish for reporting and @yuriheupa for the pr.,declaring serializers just got easier. the class meta paradigm allows you to specify fields more concisely. can specify fields and exclude options.,cast to mapping type in mapping.serialize and mapping.deserialize .,store field name and instance on exceptions raised in strict mode.,add exceptions.forcederror which allows errors to be raised during serialization .,includes changes from release 2.13.2.,fix a race condition in validation when concurrent threads use the same schema instance . thanks @yupeng0921 and @lafrech for the fix.,fix bug that raised an uncaught error when passing both a schema instance and only to nested . this bug also affected passing a schema instance to fields.pluck.,allow passing nested attributes to the dump_only and load_only parameters of schema . thanks @yuriheupa for the pr.,add naivedatetime and awaredatetime to enforce timezone awareness .,"remove skip_missing class meta option. by default, missing inputs are excluded from serialized output .",add equal argument to validate.length. thanks @daniloakamine.,fix bug where nested would skip first element when serializing a generator . thanks @khvn26 for the catch and patch.,"if a field corresponds to a callable attribute, it will be called upon serialization. thanks @alexmorken.",skip field validators for fields that aren t included in only . thanks @carlos-alberto for reporting and @eprikazc for the pr.,add more type annotations . type information is distributed per pep 561 . thanks @fuhrysteve for helping with this.,python 2.6 is no longer officially supported .,see also,add register class meta option to allow bypassing marshmallow s internal class registry when memory usage is critical .,fix treatment of dotted keys when unknown=include . thanks @rbu for reporting and thanks @sirosen for the fix .,backwards-incompatible: utils.from_iso is deprecated in favor of utils.from_iso_datetime . thanks @sklarsa.,backwards-incompatible: remove serializer.factory method. it is no longer necessary with the dump method.,drop support for python 2.6 and 3.3.,allow input value to be included in error messages for a number of fields . thanks @hdoupe for the pr.,a removedinmarshmallow3 warning is raised when using fields.formattedstring. use fields.method or fields.function instead .,add support for structured dictionaries by providing values and keys arguments to the dict field s constructor. this mirrors the list field s ability to validate its items . thanks @deckar01.,add require_tld parameter to validate.url . thanks @sduthil for the suggestion and the pr.,"backwards-incompatible: rework validationerror api. it now expects a single field name, and error structures are merged in the final validationerror raised when validation completes. this allows schema-level validators to raise errors for individual fields . thanks @maximkulkin for writing the original merge_errors implementation in #442 and thanks @lafrech for completing the implementation in #1026.",fix typing for data param of schema.load and validationerror . thanks @mehdigmira for reporting and thanks @dfirst for the pr.,use fixed-point notation rather than engineering notation when serializing with decimal . thanks @gdub.,includes the bugfix from 2.15.1.,"prevent typeerror when a non-collection is passed to a schema with many=true. instead, raise validationerror with {'_schema': } .",backwards-incompatible: field classes implement _serialize and _deserialize methods. serialize and deserialize comprise the public api for a field. field.format and field.output have been removed.,add fields.pluck for serializing a single field from a nested object . thanks @timc13 for the feedback and @deckar01 for the implementation.,fields nested within dict correctly inherit context from their parent schema . thanks @rosanneze for reporting and @deckar01 for the pr.,includes bug fix from 2.18.0.,"use the schema.dump and schema.load methods for serializing and deserializing, respectively.",fix validation of nested fields on dumping . thanks again @tvuotila.,copyright year in docs uses changelog.rst s modified date for reproducible builds . thanks @bmwiedemann.,the validator functions in the validate module are deprecated in favor of the class-based validators .,dump and load can receive the many argument.,deserializing none returns none rather than raising an attributeerror . thanks @realsalmon for the catch and patch.,the extra param of schema is deprecated. add extra data in a post_load method instead.,backwards-incompatible: field name is not checked when load_from is specified . thanks @lafrech.,serializing a collection without passing many=true will not result in an error. be very careful to pass the many argument when necessary.,"adds new features, speed improvements, better error handling, and updated documentation.",respect the many value on schema instances passed to nested . thanks @kamforka for reporting.,"if nested field only parameter is a field name, only return a single value for the nested object or a flat list of values.",use raise from error for better stack traces . thanks @fuhrysteve.,function and method fields raise marshallingerror if their argument is uncallable.,backwards-incompatible: nested field now defaults to unknown=raise instead of exclude. this harmonizes behavior with schema that already defaults to raise . thanks @tuukkamustonen.,fix serializing values from keyed tuple types . thanks @makmanalp for reporting.,add dict field for arbitrary mapping data . thanks @dwieeb for adding this and @dowwie for the suggestion.,schema.accessor and schema.error_handler decorators are deprecated. define the accessor and error_handler class meta options instead.,includes bug fix from 2.19.3.,allow accessor function to be configured via the schema.accessor decorator or the __accessor__ class member.,allow a field's attribute to be modified during deserialization . thanks @floqqi.,"add fields.ipinterface, fields.ipv4interface, and ipv6interface . thanks @madeinoz67 for the suggestion and the pr.",validationerror.fields is removed . access field instances from schema.fields.,"if load_from is used on deserialization, the value of load_from is used as the key in the errors dict . thanks @alexmorken.",fix inheritance of ordered option when schema subclasses define class meta . thanks @frol.,context argument passed to method fields is deprecated. use self.context instead .,fix behavior of as_string on fields.integer . thanks @taion for the catch and patch.,fix validation of invalid types passed to a nested field when many=true . thanks @juanrossi for reporting.,professionally-supported marshmallow is available with the tidelift subscription.,passing of strings to required and allow_none is removed. pass the error_messages argument instead.,add valid_data attribute to validationerror.,a changedinmarshmallow3warning is no longer raised when strict=false . thanks @aegdesil for reporting.,errored fields will not appear in serialized output dictionaries .,remove optional context parameter that gets passed to methods for method fields.,includes bug fix from 2.19.2.,includes bug fixes from release 2.13.4.,fix bug that raised an uncaught error when a nested schema instance had an unpickleable object in its context . thanks @metheoryt for reporting.,"if a nested field is passed many=true, none serializes to an empty list. thanks @nickretallack for reporting.",use raise from more uniformly to improve stack traces .,backwards-incompatible: fields.field._deserialize now takes attr and data as arguments . thanks @alexmic and @kevinastone for the suggestion.,add require_tld argument to fields.url . thanks @denerkup for reporting and thanks @surik00 for the pr.,unbound fields return none rather returning the field itself. this fixes a corner case introduced in #572. thanks @touilleman for reporting and @yuriheupa for the fix.,add required option to fields . thanks @deacondesperado.,"allow date formats to be changed by passing format parameter to datetime field constructor. can either be ""rfc"" , ""iso"", or a date format string.",fix behavior when using validate.equal . thanks @pktangyue for reporting and thanks @tuukkamustonen for the fix.,"add truthy and falsy params to fields.boolean . thanks @zwack for the pr. note: this is potentially a breaking change if your code passes the default parameter positionally. pass default as a keyword argument instead, e.g. fields.boolean.",localdatetime is removed .,handle when data_key is an empty string . thanks @jtrakk for reporting.,"remove unused attributes root, parent, and name from schemaabc . thanks @tim-erwin for the pr.",add schema.preprocessor and schema.validator decorators for registering preprocessing and schema-level validation functions respectively.,add fields.__all__ and marshmallow.__all__ so that the modules can be more easily extended.,remove spurious warning about implicit collection handling . thanks @lalvarezguillen for reporting.,fix bug that could cause an attributeerror when nesting schemas with schema-level validators . thanks @vovanbo for reporting.,"add support for millisecond, minute, hour, and week precisions to fields.timedelta . thanks @fedalto for the suggestion and the pr.",fix bug where nested fields in meta.exclude would not work on multiple instantiations . thanks @mhannila for reporting.,fix typo in exception message . thanks @wonderbeyond for reporting and thanks @yoichi for the pr.,fields.timedelta always serializes to an integer value in order to avoid rounding errors . thanks @philtay.,"if you find marshmallow useful, please consider supporting the team with a donation:","errors reported by a schema-level validator for a field in a nested field are stored under corresponding field name, not _schema key .","thanks @lafrech for implementing these changes. special thanks to @michalkononenko, @douglas-treadwell, and @maximkulkin for the discussions on these changes.",fix behavior of the required parameter on nested fields.,make_object is deprecated. use a post_load method instead . this method will be removed in the final 2.0 release.,"validators, data handlers, and preprocessors are no longer shared between schema subclasses . thanks @amikholap for reporting.",fix error handling when deserializing invalid uuids . thanks @vesauimonen for the catch and patch.,allow binding of extra data to a serialized object by passing the extra param when initializing a serializer.,backwards-incompatible: remove support for python 2 . only python>=3.5 is supported. thank you @rooterkyberian for the suggestion and the pr.,backwards-incompatible: schema.load and schema.dump return data instead of a tuple .,prevent warning about importing from collections on python 3.7 . thanks @nkonin for reporting and @jmargeta for the pr.,includes bugfixes from 2.15.2.,fix root attribute for nested container fields on inheriting schemas . thanks @bmcbu for reporting.,fields.select is aliased to fields.enum.,add strict parameter to integer . thanks @yoichi.,add several validation functions to the validate module. thanks @philtay.,remove make_object. use a post_load method instead .,fix bug that raised error when passing extra data together with many=true. thanks @buttsicles for reporting.,fix error format for nested fields when many=true. thanks @alexmorken.,add schemameta.get_declared_fields class method to support adding additional declared fields.,"marshaller, unmarshaller were moved to marshmallow.marshalling. these should be considered private api .",remove validated decorator. validation occurs within field methods.,"backwards-incompatible: by default, nan, infinity, and -infinity are invalid values for fields.decimal. pass allow_nan=true to allow these values. thanks @philtay.",fix behavior of skip_missing and accessor options when many=true . thanks @3rdcycle.,"add fields.mapping, which makes it easier to support other mapping types . thank @sayanarijit for the suggestion and the pr.",expose serializer.options_class as a class variable so that options defaults can be overridden.,documentation: split up api reference into multiple pages and add summary tables . thanks @epicwink for the pr.,"in strict mode, a validationerror is raised. error messages are accessed via the validationerror's messages attribute .",fix root attribute for nested container fields on list on inheriting schemas . thanks @bmcbu for reporting.,let fields be accessed by name as schema attributes .,fix bug letting dict pass invalid dict on deserialization when no key or value field is specified .,documentation: improve example in validating original input data . thanks @altaurog.,"backwards-incompatible: schema output is no longer an ordereddict by default. if you want ordered field output, you must explicitly set the ordered option to true.","if a nested field is required, recursively validate any required fields in the nested schema . thanks @max-orhai.",handle unicodedecodeerror when deserializing bytes with a string field . thanks @dan-blanchard for the suggestion and thanks @4lissonsilveira for the pr.,"boolean field serializes none to none, for consistency with other fields . thanks @cmanallen for reporting."
Release History - Stanza,"1.0.1 2020-04-27 this is a maintenance release of stanza. it features new support for jieba as chinese tokenizer, faster lemmatizer implementation, improved compatibility with corenlp v4.0.0, and several bugfixes including correct character offsets in ner output and correct vietnamese tokenization outputs .","0.2.0 2019-05-16 this release introduces substantially reduced model size, substantial lemmatizer speed up and more options for customizing server start up and requests .","1.1.1 2020-08-13 this release features support for extending the capability of the stanza pipeline with customized processors, a new sentiment analysis tool for english/german/chinese, improvements to the corenlpclient functionality , new models for a few languages , new biomedical and clinical english packages, alternative servers for downloading resource files, and various improvements and bugfixes .","1.0.0 2020-03-17 this release introduces new multi-lingual named entity recognition support for 8 languages, expanded ud pipeline coverage of 66 languages, improved download and pipeline interfaces, improved document object interfaces, anaconda installation support, improved neural lemmatizer, spacy tokenization integration, and various other enhancements and bugfixes .",stanza is created by the stanford nlp group. this site is based on a jekyll theme just the docs.,"note that prior to version 1.0.0, the stanza library was named as stanfordnlp . to install historical versions prior to to v1.0.0, you ll need to run pip install stanfordnlp.","0.1.2 2019-02-26 this release introduces support for pretokenized text, speed ups in the pos/feats tagger and various bug fixes .",frequently asked questions 
Change log â€” Docker SDK for Python 5.0.0 documentation,documentation for classes and methods is now included alongside the code as docstrings.,the invalid networks argument in dockerclient.containers.run has been replaced with a singular network argument.,added support for adding and dropping capabilities,".dockerignore rules should now be respected as defined by the spec, including respect for last-line precedence and proper handling of absolute paths",client.execute is being deprecated in favor of the more dev-friendly client.exec_start and client.exec_create. it will be removed in 1.3.0,"added support for connecting to the docker engine over ssh. additional dependencies for this feature can be installed with pip install ""docker""",installation with pip 10.0.0 and above no longer fails,docker.utils.create_host_config is deprecated in favor of client.create_host_config.,"create_host_config, create_ipam_pool and create_ipam_config have been removed from docker.utils. they have been replaced by the following classes in docker.types: hostconfig, ipampool and ipamconfig.",fixed a bug where commands containing unicode characters would be incorrectly handled by client.create_container.,"client.timeout is now a public attribute, and users are encouraged to use it when request timeouts need to be changed at runtime.",replace use of deprecated filter argument on docker/api/image ,"the docker.utils.types module was removed in favor of docker.types, but some applications imported it explicitly. it has been re-added with an import warning advising to use the new module path.",endpoint_config in create_service and update_service has been deprecated in favor of endpoint_spec,fixed an issue with ssl connections behaving improperly when pyopenssl was installed in the same environment.,added support for verbose parameter in apiclient.inspect_network and dockerclient.networks.get.,passing dns or volumes_from in client.start with api version < 1.10 will now raise an exception ,placement preferences for swarm services are better validated on the client and documentation has been updated accordingly,fixed an issue where lists of networks in create_service and update_service wouldn t be properly converted for the engine.,fixed a bug where the networks data provided to create_service and update_service would be sent incorrectly to the engine with api < 1.25,default api version is now 1.9,default api version has been bumped to 1.17 ,fixed a bug where the decoded apiclient.events stream would sometimes raise an exception when a container is stopped or restarted.,added support for the filters param in images and containers,default api version has been bumped to 1.18 ,bumped version of pyopenssl in requirements.txt and setup.py to prevent installation of a vulnerable version,added support for the runtime parameter in apiclient.create_container and dockerclient.containers.run.,changed the way the ports and volumes are provided in client.start and client.create_container to make them simpler and more intuitive.,fixed a bug where the package would fail with an importerror if requests was installed using apt-get,fixed a bug where specifying volume binds with unicode characters would fail.,fixed a bug where environment values with unicode characters weren t handled properly in create_container.,"docker-py is now unit-tested, and travis-ci has been enabled on the source repository.",default api version has been bumped to 1.26 ,the minimum supported api version is now 1.21 ,added support for memory_limit and memswap_limit in host config to comply with recent deprecations.,support for python 3.3 and python 3.4 has been dropped,"kwargs_from_env now supports an optional environment parameter. if present, values will be fetched from this dictionary instead of os.environ",added an endpointspec class to docker.types to be used in create_service and update_service.,updated the docker-pycreds dependency as it was causing issues for some users with dependency resolution in applications using docker-py.,added support for init and init_path parameters in hostconfig and dockerclient.containers.run,the name of the pip package is now docker . new versions of this library will only be published as docker from now on.,fixed a bug where specifying volumes with windows drives would cause incorrect parsing in dockerclient.containers.run,fixed a bug where detach was being ignored by exec_start.,fixed a bug where patterns ending with ** in .dockerignore would raise an exception,fixed a bug where handling http errors with no body would cause an unexpected exception to be thrown while generating an apierror object.,fixed a bug where builds on windows with a context path using the \\?\ prefix would fail with some relative dockerfile paths.,added fetch_current_spec to apiclient.update_service and service.update that will retrieve the current configuration of the service and merge it with the provided parameters to determine the new configuration.,fixed a bug that caused auth values in config files written using one of the legacy formats to be ignored,fixed an issue where context files were bundled with the wrong permissions when calling build on windows.,fix ssh connection bug where the hostname was incorrectly trimmed and the error was hidden,"apiclient.inspect_distribution now correctly sets the authentication headers on the request, allowing it to be used with private repositories this change also applies to dockerclient.get_registry_data",fixed a bug where an empty string would be considered a valid container id or image id.,fixed a bug where using attach with the stream argument set to false would raise an exception,apiclient.logs and container.logs now raise an exception if the since argument uses an unsupported type instead of ignoring the value.,added new methods client.get_image and client.load_image ,error management overhaul. the new version should be more consistent and,added extra requirements for better tls support on some platforms. these can be installed or required through the docker notation.,fixed a bug preventing removal of networks with names containing a space.,fixed a bug where values in environment files would be parsed incorrectly if they contained an equal sign.,fixed a bug where authentication through login was being ignored if the sdk was configured to use a credential store.,features,features,features,features,features,features,features,features,features,features,features,features,features,features,features,features,features,features,features,features,features,features,features,features,features,features,features,features,features,features,features,features,features,features,features,features,features,features,features,features,"fixed an issue where pinging a v2 private registry wasn t working properly, preventing users from pushing and pulling.",the client has been updated to support requests 2.x. requests==2.2.1 is now the recommended version.,fixed a bug where files with a negative mtime value would cause errors when included in a build context,added support for the target and network_mode parameters in apiclient.build and dockerclient.images.build.,datetime arguments passed to client.events parameters since and until are now always considered to be utc.,added support for a changes parameter in client.import_image.,fixed a bug where invalid image ids / container ids could be provided to bypass or reroute request urls,fixed resolve_authconfig issues by bringing it closer to docker engine s behavior. this should fix all issues encountered with private registry auth,added support for driver in apiclient.create_secret and dockerclient.secrets.create.,client.build can now be provided with a custom context using the custom_context parameter.,mock has been removed from the runtime requirements.,fixed a bug where using dockerclient.images.pull to pull an image by digest would lead to an exception being raised.,added support for the decode param in client.push and client.pull,the client now tries to load the auth config from ~/.dockercfg. this is necessary to use the push command if api version is >1.0,client.logs now uses the logs endpoint when api version is sufficient,fixed an issue where endpoint_config in create_service and update_service would be ignored.,added support for the environment parameter in apiclient.exec_create and container.exec_run,"added support for the named parameter in image.save, which may be used to ensure the resulting tarball retains the image s name on save.",fixed an issue that caused builds to fail when an in-context dockerfile would be specified using its absolute path,added support for the condition argument in apiclient.wait and container.wait,fixed an issue where url-quoting in docker-py was inconsistent with the quoting done by the docker cli client.,fixed a bug where the priority protocol returned by client.port would be udp instead of the expected tcp.,build context files are now ordered by filename when creating the archive ,the command parameter in client.create_container is now optional ,fixed a bug with api version checks.,fixed an issue where passwords containing a colon weren t being handled properly.,added support for the volumes api introduced in docker 1.9.0 .,fixed a bug on python 3 installations preventing the use of the attach and exec_run methods.,added support for add command in builder,default api version is now 1.12 ,added support for the follow param in client.logs,added support for the changes param in client.commit,"generators returned by attach, logs and events now have a cancel method to let consumers stop the iteration client-side.",fixed a bug that caused a user value of 0 to be ignored in apiclient.create_container and dockerclient.containers.create,added support for hostname parameter in containerspec and dockerclient.service.create,"the package structure has been flattened in certain cases, which may affect import for docker.auth and docker.utils.ports",fixed a bug that led to a dockerfile not being included in the build context in some situations when the dockerfile s path was prefixed with ./,added pause and unpause commands.,client.insert is deprecated in api version > 1.11,fixed a bug in client.create_container on python 2.6 where unicode commands would fail to be parsed,mode parameter in create_service is now properly converted to a valid data type for the engine api. use servicemode for advanced configurations.,added support for stop_timeout in apiclient.create_container and dockerclient.containers.run,added support for mounts in apiclient.create_host_config and dockerclient.containers.run,default api version is now 1.21 ,the docker python sdk is now officially supported on python 3.6,improve exception messages for server and client errors,connection timeout for stop and restart now gets properly adjusted to allow for the operation to finish in the specified time,"added support for scope in apiclient.inspect_network and apiclient.create_network, and their dockerclient equivalent.",the plugin_privileges method can now be called for plugins requiring authentication to access,use shlex to parse plain string commands when creating a container,added support for labels and enable_ipv6 in client.create_network.,fixed a bug where exec_inspect would allow invocation when the api version was too low.,support for python 3.3 will be dropped in the 4.0.0 release,fixed an issue with the handling of ** patterns in .dockerignore,"as announced in the 1.2.0 release, client.execute has been removed in favor of client.exec_create and client.exec_start.",added decode parameter to client.stats and client.events to decode json objects on the fly .,made name parameter optional in apiclient.create_volume and dockerclient.volumes.create,volume binds can now also be specified as a list of strings.,default api version is now 1.22 ,fixed a bug where generated images would be removed after a successful build,added support for advanced modes in volume binds ,fixed a bug where calling create_service or update_service with task_template as a dict would raise an exception.,added support for contextual builds,fixed a bug where credential stores weren t queried for relevant registry credentials with certain variations of the config.json file.,it is now possible to provide sctp ports for port mappings,credential helpers are now properly leveraged by the build method,fixed a bug where parameters passed to client.exec_resize would be ignored ,404 api status now raises docker.errors.notfound. this exception inherits apierror which was used previously.,client.attach has been reworked to work similarly to client.logs minus the historical data.,fixed an issue where network.connect and network.disconnect would not accept some of the documented parameters.,added pid_mode param support to utils.create_host_config and client.start ,fixed a bug with builds not properly identifying dockerfile paths relative to the build context,fixed an issue where setting a npipesocket instance to blocking mode would put it in non-blocking mode and vice-versa.,the minimum requirement for the requests dependency has been bumped to 2.20.0,client.build now uses tempfiles to store build context instead of storing it in memory,fixed ssl not working due to an incorrect version comparison,added support for timestamps parameter in logs,added commands client.top and client.copy,default base_url now adapts depending on the os ,installation of the package now fails if the docker-py package is installed in order to prevent obscure naming conflicts when both packages co-exist.,added support for the force parameter in apiclient.remove_volume and volume.remove,added scale method to the service model ; this method is a shorthand that calls update_service with the required number of replicas,added support for the networking api introduced in docker 1.9.0 .,docker.client has been renamed to docker.apiclient,docs fixes and improvements,fixed a bug where a list of mounts provided to apiclient.create_service would sometimes be parsed incorrectly.,fixed a bug where inclusion patterns in .dockerignore would cause some excluded files to appear in the build context on windows.,added support for the until parameter in apiclient.logs and container.logs,fixed an issue where concurrent attempts to access to a named pipe by the client would sometimes cause recoverable exceptions to be raised.,fixed a bug where .dockerignore patterns starting with a slash were ignored.,"added support for the isolation parameter in containerspec, dockerclient.services.create and service.update",fixed a bug where forward slashes in some .dockerignore patterns weren t being parsed correctly on windows,fixed a bug where the filters parameter in client.volumes would not be applied properly.,fixed a bug where auth config credentials containing unicode characters would cause failures when pushing / pulling images.,"fixed a bug with docker 1.7.x where the wrong auth headers were being passed in client.build, failing builds that depended on private images.",fixed a bug where streaming data over https would sometimes behave incorrectly with python 3.x,added support for the since param in client.logs ,added support for the squash parameter in apiclient.build and dockerclient.images.build.,fixed pushing / pulling to v2 registries,added support for the internal param in client.create_network.,auth credentials are provided to the docker daemon when using client.build ,"docker-py will now look for login configuration under the new config path, and fall back to the old ~/.dockercfg path if not present.","bumped requests version requirement, which should fix most of the ssl issues encountered recently.",fixed a bug where using the read_only parameter when creating a service using the dockerclient was being ignored,added support for max_failure_ratio and monitor in updateconfig,fixed a bug where getting logs from tty-enabled containers wasn t working properly with more recent versions of docker,fixed an issue with integration tests being run inside a container ,broke up client code into several files to facilitate maintenance and contribution.,apiclient.wait and container.wait now return a dict representing the api s response instead of returning the status code directly.,"added a greedy parameter to dockerclient.networks.list, yielding additional details about the listed networks.",added insecure_registry parameter in client.push and client.pull. it defaults to false and code pushing to non-https private registries might break as a result.,fixed an issue that was preventing the dockerclient.swarm.init method to take into account arguments passed to it.,default api version is now 1.8,"fixed several bugs in client.login. it should now work with api versions 1.4, 1.5.",adds a basehttpadapter with a close method to ensure that the pools is clean on close,fixed a bug where dockerfile would sometimes be excluded from the build context.,user guides and tutorials,fixed a number of issues tied with named pipe transport on windows.,added support for ipv4_address and ipv6_address in utils function create_endpoint_config.,fixed an issue in create_host_config where empty sequences wouldn t be interpreted properly ,added support for host devices ,fixed a bug where calling login against the default registry would fail with the 1.10.x engine,disable compression by default when using container.get_archive method,fixed a bug that caused placement preferences to be ignored when provided to dockerclient.services.create,added support for force and noprune parameters in remove_image,links can now be specified as tuples in client.start ,"please note that client.login currently doesn t write auth to the .dockercfg file, thus auth is not persistent when using this method.",fixed a bug where providing timeout=none to client.stop would result in an exception despite the usecase being valid.,added support for the workdir argument in apiclient.exec_create and container.exec_run,added api version support,fixed a bug where empty directories weren t correctly included when providing a context to client.build.,added support for insert_defaults in apiclient.inspect_service and dockerclient.services.get.,added support for the ingress parameter in apiclient.create_network and dockerclient.networks.create.,fixed an issue where auth info would not be retrieved from its default location on windows.,fixed a bug where the status_code attribute of apierror exceptions would not reflect the expected value.,added support for a version parameter in client.from_env.,fixed an issue where dockerclient.image.build wouldn t return an image object even when the build was successful,added labels property to the image and container classes.,integration tests are now run as part of our continuous integration.,"when a resource identifier is passed to a client method, we now check for none values to avoid crashing ",added support for links,fixed an issue where dockerclient.images.pull would fail to return the corresponding image object if a tag was set.,added support for attachable in create_network,fixed an issue where the default tls version in tlsconfig would break in some environments. docker-py now uses tlsv1 by default this setting can be overridden using the ssl_version param in kwargs_from_env or the tlsconfig constructor,added the df method to apiclient and dockerclient,added sparse argument to dockerclient.containers.list,add support for docker contexts through docker.contextapi,"fixed a bug that caused custom dockerfile paths in a subfolder of the build context to be invalidated, preventing these builds from working",docker.apierror has been moved to the new docker.errors module as well.,pulling all tags from a repository with no latest tag using the dockerclient will no longer raise a notfound exception,"fixed a bug where apiclient.login didn t populate the _auth_configs dictionary properly, causing subsequent pull and push operations to fail",remove_image now supports a dict containing an id key as its id parameter ,added support for the stream param in client.stats ,fixed a bug that caused .dockerignore comments to be read as exclusion patterns,fixed an issue with some exclusion patterns in build.,"when no tag is provided, dockerclient.images.pull now returns a list of images associated to the pulled repository instead of just the latest image.",apiclient.insert has been removed. users may use apiclient.put_archive combined with apiclient.commit to replicate the method s behavior.,add option on when to use tls on context constructor,drastically improved support for .dockerignore syntax,"the websocket-client dependency has been updated to a more recent version. this new version also supports python 3.x, making attach_socket available on those versions as well.",added new mkdocs documentation. currently hosted on readthedocs,fixed a bug where some files in .dockerignore weren t being handled properly,name in dockerclient.images.pull is now repository,"fixed a bug where the build method tried to include inaccessible files in the context, leading to obscure errors during the build phase .",port specifications including ipv6 endpoints are now supported.,fixed a bug where docker-py would crash if the docker daemon was stopped while reading a streaming response,docker.ssladapter is now docker.transport.ssladapter,fixed the handling of tty-enabled containers in attach and exec_run.,fixed a bug where some build context files were incorrectly recognized as being inaccessible.,"fixed a bug where some errors wouldn t be properly constructed in client.py, leading to unhelpful exceptions bubbling up ",added support for labels and shmsize in build.,fixed a bug where private registries on https weren t handled properly,added tag support for the builder,dockerclient.images.build now returns a tuple of instead of just the image object.,added a assert_hostname option to tlsconfig which can be used to disable verification of hostnames.,"in apiclient.build and dockerclient.images.build, the use_config_proxy parameter now defaults to true",added read_only param support to utils.create_host_config and client.start ,added support for ignore_removed parameter in dockerclient.containers.list,fixed a bug where mount.parse_mount_string would incorrectly mark host binds as being of volume type.,fixed a bug where some methods would raise a nullresource exception when the resource id was provided using a keyword argument.,fixed an issue where explicit relative paths in .dockerignore files were not being recognized.,fixed an issue where pulls made with the dockerclient would fail when setting the stream parameter to true.,docker.utils.types has been moved to docker.types,fixed a bug where memory limits would parse to incorrect values.,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,list of prs / issues for this release,added bind mounts support,fixed an issue where the events method would time out unexpectedly if no data was sent by the engine for a given amount of time.,the client now sends tcp upgrade headers to hint potential proxies about connection hijacking.,fixed an issue where the auto_remove parameter in dockerclient.containers.run was not taken into account.,several test improvements and cleanup that should make the suite easier to expand and maintain moving forward.,added support for unspecified transfer protocol in base_url when tls is enabled.,added support for custom http headers in docker config file.,"added support for the platform parameter in apiclient.build, dockerclient.images.build, apiclient.pull and dockerclient.images.pull",added support for privileged param in client.exec_create ,support for api version 1.7 through 1.9 ,endpoint_config in apiclient.create_service and apiclient.update_service is now endpoint_spec,fixed an issue where early http errors weren t handled properly in streaming responses.,fixed a bug where some environment values in create_container containing unicode characters would raise an encoding error.,fixed an issue where identity tokens in configuration files weren t handled by the library.,fixed a bug with client.push when using api version < 1.5,added support for url paths in the docker host url ,fixed a bug where build contexts containing directory symlinks would produce invalid tar archives,added support for the ulimit param in host config.,added support for auto_remove and storage_opt in apiclient.create_host_config and dockerclient.containers.run,"added a high-level, user-focused api as docker.dockerclient. see the readme and documentation for more information.",added support for network_mode parameter in start,fixed a bug where client.port would fail if provided with a port of type number,fixed a bug with adapter lookup when using the unix socket adapter ,extra_hosts parameter in host config can now also be provided as a list.,fixed issues with handling of double-wildcard ** patterns in .dockerignore files,added support for the tail param in logs.,bumped version of websocket-client,fixed a bug where using the npipe protocol would sometimes break with valueerror: buffer size must be strictly positive.,added a makefile for running tests in docker,added support for decode in client.build ,fixed a bug in client.start where legacy notation for volumes wasn t supported anymore.,"added support for consistency, tmpfs_size and tmpfs_mode when creating mount objects.",the client s base_url now tolerates trailing slashes.,added support for remote url builds,there is now a single source of truth for the docker-py version number.,added support for the docker credentials store.,client.push and client.pull will now raise exceptions if the http status indicates an error.,fixed a bug where sockets were closed immediately when attaching over tls.,container.exec_run now returns a tuple of instead of just the output.,removed unused parameter in client.import_image.,fixed an issue where builds would raise a valueerror when attempting to build with a dockerfile on a different windows drive.,dockerclient.swarm.init and apiclient.init_swarm now support the data_path_addr parameter,added git@ to the list of valid prefixes for remote build paths.,added support for prune_builds in apiclient and dockerclient.images,added cpu_rt_runtime and cpu_rt_period as parameters to apiclient.create_host_config and dockerclient.containers.run.,users can now specify a publish mode for ports in endpointspec using the {published_port: } syntax.,fixed a bug where constraints in a tasktemplate object wouldn t be properly converted for the engine.,added support for api connection through unix socket ,fixed an issue where the http timeout on streaming responses would sometimes be set incorrectly.,added support for options in ipamconfig,fixed attaching when connecting to the daemon over a unix socket.,fixed a bug where tcp hosts would fail to connect to tls-enabled endpoints,added support for dns_search parameter in start,fixed an issue where providing a dictionary for env in containerspec would provoke an apierror when sent to the engine.,added the upgrade method to the plugin class,all methods that expected a container id as argument now also support a dict containing an id key.,added support for the log_config param in host config.,image.tag now properly returns true when the operation is successful.,fixed a bug where providing an explicit protocol in client.port would fail to yield the expected result.,added now client.stats method ,fixed a bug where broken symlinks inside a build context would cause the build to fail,added support for ipv6 docker host addresses in the client constructor.,set default api version to auto,set a different default number for ssh pools,added support for arbitrary log drivers,resource objects generated by the dockerclient are now hashable.,"added support for volumes_from and dns parameters in start. as of api version >= 1.10, these parameters no longer belong to create_container","switched to a better supported backport of the match_hostname function, fixing dependency issues in some environments.",added support for the rm parameter in client.build,added a healthcheck class to docker.types to be used in create_container.,fixed a bug where the cpuset_cpus parameter would not be properly set in apiclient.create_host_config.,build methods can now handle dockerfiles supplied outside of the build context.,fixed a bug where calling network.containers would crash when no containers were associated with the network.,added apiclient.inspect_distribution method and dockerclient.images.get_registry_data,fixed a bug in client.build where the tag parameter would not be taken into account,"as a result, urls that don t specify a port are now invalid ",fixed a bug where decoding a result stream using the decode parameter would break when using python 3.x,fixed a bug where client.pull and client.push couldn t handle image names containing a dot.,added swarm mode and service management methods. see the documentation for details.,added experimental support for windows named pipes .,"added support for a configurable chunk_size parameter in export, get_archive and get_image ",added support for global request timeout,added support for the configs api:,fixed a bug where streaming responses were unreliable ,fixed a bug where using an integer as the user param in client.create_container would result in a failure.,added support for isolation in hostconfig.,added support for labels in client.create_volume.,added support for the docker_config environment variable when looking up auth config,fixed a bug in client.port where absence of a certain key in the container s json would raise an error ,"fix base_url to keep tcp protocol on utils.py by letting the responsibility of changing the protocol to parse_host afterwards, letting base_url with the original value.",added input support to client.exec_create,the updateconfig constructor now allows rollback as a valid value for failure_action,"the apiclient and dockerclient constructors now accept a credstore_env parameter. when set, values in this dictionary are added to the environment when executing the credential store process.",added docker.from_env shortcut function. instantiates a client with kwargs_from_env,added support for restart policy,fixed a bug where auth information would not be properly passed to the engine during a build if the client used a credentials store.,"fixed a bug where unix socket connections weren t properly cleaned up, causing resourcewarnings to appear in some cases.",fixed a bug where some environment variables specified through create_container would be improperly formatted,added support for link_local_ips in create_endpoint_config.,fixed a bug where empty chunks in streams was misinterpreted as eof.,the default ssl protocol is now the highest tls v1.x ,client.remove_container now raises an exception when trying to remove a running container,fixed a bug where some output wouldn t be streamed properly in streaming chunked responses,fixed a bug that caused attempts to read a data stream over an unsecured tcp socket to crash on windows clients,fixed an issue that caused the client to fail to reach api endpoints when the provided base_url had a trailing slash.,"use hostname, username, port and proxycommand settings from .ssh/config when on ssh",the history command now returns a dict instead of a raw json string.,"add an alternative ssh connection to the paramiko one, based on shelling out to the ssh client. similar to the behaviour of docker cli",added support for size parameter in containers,fixed a bug where the check_resource decorator would break with some argument-passing methods. ,the latter returns an instance of the new registrydata class,fix containers and images documentation examples,fixed a bug where auth would break with python 3,add support for docker.types.placement.maxreplicas,update port_spec regex to allow square brackets for ipv6 addresses,"added since, until and filters params to client.events.",added support for container resource limits in client.build.,implemented first version of the builder client,"added the use_config_proxy parameter to the following methods: apiclient.build, apiclient.create_container, dockerclient.images.build and dockerclient.containers.run . this parameter will become true by default in the 4.0.0 release.","added support for custom user agent setting in the client constructor. by default, docker-py now also declares itself in the user-agent header.",fixed an issue where the ssl connection adapter would receive an invalid argument.,fixed a bug where the id member on swarm objects wasn t being populated.,added support for the plugins api:,fixed a bug where sockets would close unexpectedly using python 3.x,fixed a bug in streaming methods with python 3 ,"client.pull, client.push and client.build can be streamed now",remove ld_library_path and ssl_cert_file environment variables when shelling out to the ssh client,fixed an issue with client.build streamed logs in python 3,the following parameters have been renamed:,"fixed an issue where service.scale would not properly update the service s mode, causing the operation to fail silently",fixed a bug where client.build would try to close context when externally provided ,fixed a bug with streaming responses in python 3,"when using api version 1.23 or above, load_image will now return a generator of progress as json dicts.",fixed a bug where dockerclient.secrets was not accessible as a property.,fixed a bug in pull where the repo:tag notation wasn t interpreted properly,fixed a bug that caused costly dns lookups on mac osx when connecting to the engine through unix socket,dropped support for python 2.6,"added support for block io constraints in client.create_host_config. this includes parameters blkio_weight, blkio_weight_device, device_read_bps, device_write_bps, device_read_iops and device_write_iops.",added unlock and get_unlock_key to dockerclient.swarm.,added support for custom auth_config in client.push.,added support for ipc_mode in host config.,added support for custom loggers in client.build,logs can now be streamed using the stream parameter.,added support for a custom timeout in client.wait,"added exec_create, exec_start, exec_inspect and exec_resize to client, accurately mirroring the exec api",added support for the pull parameter in client.build,it is now possible to run the docker-py test suite on windows.,added support for volume_driver in client.create_container,added support for custom .dockercfg loading in client.login ,"in service.update, when the force_update parameter is set to true, the current force_update counter is incremented by one in the update request.",the client now defaults to using the npipe protocol on windows.,added support for the archive api endpoint .,added support for the cpu cfs parameters in create_host_config.,added support for the forcerm parameter in client.build,pull parameter in client.build now defaults to false. fixes a bug where the default options would try to force a pull of non-remote images.,improved docker credential store support on windows,added support for restart_policy in update_container.,client.create_container now accepts dicts for the environment parameter,added support for the check_duplicate param in client.create_network,default image tag to latest on pull,added support for port range to single port in port mappings ,added support for force param in client.disconnect_container_from_network.,fixed placementpreference instances to produce a valid api type,dropped explicit support for python 3.2,fixed a bug where a docker config file containing unknown keys would raise an exception.,add python3.8 and 3.9 in setup.py classifier list,fixed ports for docker 0.6.5+,added utils.parse_env_file to support env-files. see docs for usage.,increased the default number of connection pools from 10 to 25. this number can now be configured using the num_pools parameter in the client constructor.,containerspecs now support the init parameter,setup.py now indicates a maximum version of requests to work around the boot2docker / assert_hostname bug.,various fixes for integration tests.,the pass credential store is now properly supported.,"dockerclient.images.load now returns a list of image objects that have for the images that were loaded, instead of a log stream.",added support for various options in client.create_container ,apiclient.update_swarm and dockerclient.swarm.update now support the rotate_manager_unlock_key parameter,adjust --platform tests for changes in docker engine,fixed a bug where the quiet parameter wouldn t be taken into account in client.containers,client constructor now enforces passing the version parameter as a string.,fixed a bug where unicode characters in passed for environment in create_container would break.,fixed a bug where instantiating a client object would sometimes crash if base_url was unspecified.,"apiclient.init_swarm, and dockerclient.swarm.init now return the api s response body as a dict",added support for device_cgroup_rules in host config,fixed a bug where the events method in apiclient and dockerclient would not respect custom headers set in config.json,docs building has been repaired,fixed a bug where building from a private docker hub image when not using a cred store would fail.,the following parameters have been removed:,fixed a bug where auth config wouldn t be resolved properly in client.pull ,added support for force parameter in remove_container,"fixed a bug where the build method would try to read from fifos present inside the build context, causing it to hang.",added contributing guidelines to the repository.,support for api version < 1.21 has been removed.,fixed a bug with the trunc parameter in client.containers having no effect ,added isolation parameter to build methods.,the cpuset param in client.create_container is also passed as the cpusetcpus param ,added support for tarball imports in client.import_image through data parameter.,added new method client.ping,added support for tty configuration in docker.types.containerspec.,init_path is no longer a valid parameter for hostconfig,"fixed a bug where download methods would use an absurdly small chunk size, leading to slow data retrieval",fixed a bug where tls verification was improperly executed when providing a custom ca certificate.,mount objects now support the tmpfs and npipe types.,fixed a bug in client.pull where private registry images wouldn t be parsed properly if it contained port information.,remove support for python 2.7,fixed a bug where the devices parameter in client.create_host_config would sometimes be misinterpreted.,added support for extra_hosts in the build methods.,added support for the group_add parameter in create_host_config.,apiclient instances can now be pickled.,added missing filters parameter to apiclient.networks.,the following methods have been removed:,the base_url parameter in the client constructor should now allow most of the docker_host environment values ,added support for multiplexed streams . learn more at link,makes sshhttpadapter reopen a closed connection when needed like the others,fixed a bug where the devices param didn t recognize the proper delimiter,added ability to specify ip address when connecting a container to a network,added support for string values in client.create_container s mem_limit,fixed a bug where not setting a value for buildargs in build could cause the library to attempt accessing attributes of a none value,the credhelpers section in docker s configuration file is now recognized.,added support for cache_from in apiclient.build and dockerclient.images.build.,added configs parameter to containerspec. each item in the configs list must be a docker.types.configreference instance.,add support for driveropts in endpointconfig,removed obsolete custom error message in client.create_container.,processing of .dockerignore has been made significantly faster.,fixed a bug where setting the volume_driver parameter in dockerclient.containers.create would result in an error,fixed a bug where the read_only param in host_config wasn t handled properly.,fix plugin model upgrade,added support for authentication in client.pull ,improved integration tests should now run much faster.,fixed a bug where tls verification would fail when using ip addresses in the certificate s subjectaltname fields,fix conversion to bytes for float,configs,fixed a bug where resolve_authconfig wouldn t properly resolve configuration for private repositories ,fixed a bug where passing decode=true in some streaming methods would crash when the daemon s response had an unexpected format.,fixed a bug where passing a container dictionary to client.commit would fail,fixed a bug where anonymous push/pull would break when no authconfig is present,added support for build arguments in client.build through the buildargs param.,fixed a bug in client.push where it would raise an exception if the auth config wasn t loaded.,fixed a bug where the build command would list tar contents before sending the request,client.exec_create can now retrieve the id key from a dictionary for its container param.,fixed several bugs with auth config parsing.,fixed a bug where dockerclient.containers.run would crash if the auto_remove parameter was set to true.,added support for websockets in client.attach,add limit parameter to image search endpoint,added support for cusom ipam configuration in client.create_network,added unlock_swarm and get_unlock_key methods to the apiclient.,fixed a bug where using the unix socket connection would raise an error in some edge-case situations,utils.ping_registry and utils.ping have been removed.,fixed a bug where building from a directory containing socket-type files would raise an unexpected attributeerror.,added support for publish_all_ports in client.start,fixed a bug where loading a valid docker configuration file would fail,several improvements have been made to the client.import_image method.,several unit tests and integration tests improvements.,fixed streams not working on windows,fixed a bug where dockerclient.images.build would report a failure after a successful build if a tag was set.,fix ssh port parsing when shelling out to the ssh client,fixed a bug where setting replicas to zero in servicemode would not register as a valid entry.,docker sdk for python,update default api version to v1.39,added support for placement configuration in docker.types.tasktemplate.,updated dependencies to ensure support for python 3.7 environments,set logging level of paramiko to warn,the return value for the following methods has changed:,the memswap_limit argument in client.create_container now accepts string type values similar to mem_limit ,regenerated invalid wheel package,docker.from_env now creates a dockerclient instance instead of an apiclient instance.,added support for .dockerignore file in client.build,fixed an obsolete import in the credentials subpackage that caused import errors in python 3.7,fixed a bug that would cause some data at the beginning of an upgraded connection stream to disappear.,added the execute command.,tls connections now default to using the tlsv1.2 protocol when available,"apiclient.export, apiclient.get_archive and apiclient.get_image now return generators streaming the raw binary data from the server s response.","added the ability to specify 'auto' as version in client.__init__, allowing the constructor to autodetect the daemon s api version.",fixed a bug where docker.utils.ports.split_port would break if an open range was provided., 2021 docker inc. | powered by sphinx 1.4.6 & alabaster 0.7.12 | page source,added support for gzipped context in client.build,fix examples url in ulimits,removed invalid exception when using the registry hub s fqdn when pulling.,"apiclient.update_service, apiclient.init_swarm, and dockerclient.swarm.init now return a dict from the api s response body",removed the builderclient,fix keyerror exception on secret create,fixed a bug where whitespace-only lines in .dockerignore would break builds on windows,added client.attach command,fixed a bug that caused client.build to crash when the provided source was a remote source.,adjusted version requirements for the requests library.,added dockerfile param support to client.build ,make python 3.6 the minimum version supported,added support for ps_args parameter in client.top.,switched to server side build system,fixed a bug where reading a 0-length frame in log streams would incorrectly interrupt streaming.,fixed a bug where instantiating a dockerclient using docker.from_env wouldn t correctly set the default timeout value.,added installation instructions in the readme.,fixed a bug where determining the protocol of a private registry would sometimes yield the wrong result.,client.create_container provides better validation of the volumes parameter
Upgrade Guide â€” CuPy 9.0.0 documentation,cupy.sparse module has been deprecated and will be removed in future releases. use cupyx.scipy.sparse instead.,cupy official docker images are now updated to use cuda 8.0 and cudnn 6.0. this change was introduced because cuda 7.5 does not support nvidia pascal gpus.,dtype argument of cupy.ndarray.min and cupy.ndarray.max has been removed to align with the numpy specification.,"prior to cupy v4, memory pool was only enabled by default when cupy is used with chainer. in cupy v4, memory pool is now enabled by default, even when you use cupy without chainer. the memory pool significantly improves the performance by mitigating the overhead of memory allocation and cpu/gpu synchronization.",cupy official docker images are now updated to use cuda 9.2 and cudnn 7.,"prior to cupy v6, ld_library_path environment variable can be used to override cudnn / nccl libraries bundled in the binary distribution . in cupy v6, ld_library_path will be ignored during discovery of cudnn / nccl; cupy binary distributions always use libraries that comes with the package to avoid errors caused by unexpected override.","starting from cupy v7, python 2.7 and 3.4 are no longer supported as it reaches its end-of-life in january 2020 and march 2019 . python 3.5.1 is the minimum python version supported by cupy v7. please upgrade the python version if you are using affected versions of python to any later versions listed under installation.","for this rule, cupy.scatter_add has been moved to cupyx.scatter_add. cupy.scatter_add is still available as an alias, but it is encouraged to use cupyx.scatter_add instead.",cupy official docker images are now updated to use cuda 11.2 and python 3.8.,"the version number has been bumped from v2 to v4 to align with the versioning of chainer. therefore, cupy v3 does not exist.",cupyx namespace has been introduced to provide features specific to cupy while avoiding collision in future. see cupy-specific functions for the list of such functions.,this is a list of changes introduced in each release that users should be aware of when migrating from older versions.,nccl and cudnn no longer included in wheels,nccl and cudnn shared libraires are no longer included in wheels . you can manually install them after installing wheel if you don t have a previous installation; see installation for details.,cupy official docker images are now updated to use cuda 10.2 and python 3.6.,cupyx.scipy namespace has been introduced to provide cuda-enabled scipy functions. cupy.sparse module has been renamed to cupyx.scipy.sparse; cupy.sparse will be kept as an alias for backward compatibility.,cupy v4 now requires nvidia gpu with compute capability 3.0 or larger. see the list of cuda gpus to check if your gpu supports compute capability 3.0.,dropping support of python 2.7 and 3.4,dropped support for cuda 7.0 / 7.5,dropping support of cuda 8.0 and 9.1,cub support and compiler requirement,"cub module is now built by default. you can enable the use of cub by setting cupy_accelerators=""cub"" .","due to this change, g++-6 or later is required when building cupy from the source. see installation for details.",dropping support of cudnn v7.5 and nccl v2.3," copyright 2015, preferred networks, inc. and preferred infrastructure, inc..","when you monitor gpu memory usage , you may notice that gpu memory not being freed even after the array instance become out of scope. this is expected behavior, as the default memory pool caches the allocated memory blocks.","as cuda stream is fully supported in cupy v4, cupy.cuda.randomstate.set_stream, the function to change the stream used by the random number generator, has been removed. please use cupy.cuda.stream.use instead.","# even if the array goes out of scope, its memory block is kept in the pool.",cub_path: no longer required as cupy uses either the cub source bundled with cuda or the one in the cupy distribution.,cupy.rawmodule now delays the compilation to the time of the first call to align the behavior with cupy.rawkernel.,"to access the default memory pool instance, use get_default_memory_pool and get_default_pinned_memory_pool. you can access the statistics and free all unused memory blocks cached in the memory pool.",dropping support of cuda 9.0,python 3.5 is no longer supported in cupy v9.,"for performance reasons, cupy.count_nonzero has been changed to return zero-dimensional ndarray instead of int when axis=none. see the discussion in #154 for more details.",scipy and optuna are now pre-installed.,cuda 9.0 is no longer supported. use cuda 9.2 or later.,"cupy.scatter_add, which was deprecated in cupy v4, has been removed. use cupyx.scatter_add instead.","# for performance, the size of actual allocation may become larger than the requested array size.","to use these images, you may need to upgrade the nvidia driver on your host. see requirements of nvidia-docker for details.","to use these images, you may need to upgrade the nvidia driver on your host. see requirements of nvidia-docker for details.",cupy.allclose now returns the result as 0-dim gpu array instead of python bool to avoid device synchronization.,dropping support of numpy 1.16 and scipy 1.3,update of docker images,update of docker images,update of docker images,update of docker images,"cuda 8.0 and 9.1 are no longer supported. use cuda 9.0, 9.2, 10.0, or later.",api changes,you can even disable the default memory pool by the code below. be sure to do this before any other cupy operations.,binary packages ignore ld_library_path,created using sphinx 3.5.4.,changed behavior of count_nonzero function
Changelog â€” Jedi 0.18.0 documentation,features and limitations,the line and column parameters of jedi.script are now deprecated,"the import logic has been rewritten to look more like python s. there is now an inferstate.modules import cache, which resembles sys.modules.",a new and better parser for parsing diffs of python code.,project attributes are now read accessible,stubs are used now for type inference,python 2 support deprecated. for this release it is best effort. python 2 has reached the end of its life and now it s just about a smooth transition. bugs for python 2 will not be fixed anymore and a third of the tests are already skipped.,memory consumption for compiled modules has been reduced drastically. loading times are down as well .,"fixed an issue with embedded python, see link",typeshed is used for better type inference,removed settings.no_completion_duplicates. it wasn t tested and nobody was probably using it anyway.,started using annotations,add fuzzy completions with script.completions,better usages - a lot of internal code was ripped out and improved.,this is likely going to be the last minor version that supports python 2 and python3.5. bugfixes will be provided in 0.17.1+. the next minor/major version will probably be jedi 1.0.0.,prepared the parser to be factored out of jedi.,functions with @property now return property instead of function in name.type,added get_line_code to name and completion objects.,much faster parser with builtin part caching.,the api documentation is now way more readable and complete. check it out under link a lot of it has been rewritten.,"added support for refactoring. the following refactorings have been implemented: script.rename, script.inline, script.extract_variable and script.extract_function.",small bugfix and removal of a print statement,integrated the parser of 2to3. this will make refactoring possible. it will also be possible to check for error messages in the future.,understand async/await and autocomplete it ,signatures are now detected a lot better,"added code search capabilities both for individual files and projects. the new functions are project.search, project.complete_search, script.search and script.complete_search.",installation and configuration,"tensorflow, numpy and pandas completions should now be about 4-10x faster after the first time they are used.",repl completion is starting to become usable.,"with the new parser, the type inference also completely changed. it s now simpler and more readable.","removed settings.use_filesystem_cache and settings.additional_dynamic_modules, they have no usage anymore. pretty much nobody was probably using them.",this will be the last release that supports python 2 and python 3.5. 0.18.0 will be python 3.6+.,various small api changes. generally this release focuses on stability and refactoring of internal apis.,"reworked name.full_name, should have more correct return values",added autocompletion support for namespace packages.,added script.help to make it easier to display a help window to people. now returns pydoc information as well for python keywords/operators. this means that on the class keyword it will now return the docstring of python s builtin function help.,*args/**kwargs resolving. if possible jedi replaces the parameters with the actual alternatives.,added an interpreter class to the api to make autocompletion in repl possible.,"default environments are now using the same python version as the python process. in 0.12.x, we used to load the latest python version on the system.",this is likely going to be the last minor release before 1.0.,cannot crash with segfaults anymore,parso update - the caching layer was broken,"completions deprecated, use complete instead",files bigger than one mb get cropped to avoid getting stuck completely.,add follow_imports to name.goto. now its signature matches script.goto.,implict namespaces are now a separate types in name.type,split jedi s parser into a separate project called parso.,"bugfix release, the last release forgot to include files that improve autocompletion for builtin libraries. fixed.","introducing operator precedence, which makes calculating correct array indices and __getattr__ strings possible.","this release forces you to upgrade parso. if you don t, nothing will work anymore. otherwise changes should be limited to bug fixes. unfortunately jedi still uses a few internals of parso that make it hard to keep compatibility over multiple releases. parso >=0.3.0 is going to be needed.",goto on a function/attribute in a class now goes to the definition in its super class.,added project support. this allows a user to specify which folders jedi should work with.,dropped python 2 and python 3.5,"usages deprecated, use get_references instead",remove python 3.3 support. python 3.3 support has been dropped by the python foundation.,callsignature.index should now be working a lot better,better support for the walrus operator,python packaging sucks. some files were not included in 0.10.1.,edit on github,cleaned up import logic,fixed a few very annoying bugs.,removed python 3.4 support,switched from lgpl to mit license.,"when using interpreter, properties are now executed, since a lot of people have complained about this. discussion in #1299, #1347.",added script.get_syntax_errors to display syntax errors in the current script.,added an option to pass environment variables to environment
Asyncpg Changelog - pyup.io, * low-level protocol implementation has been tweaked and, * refactor args parsing and config management for `connect` and," there is also the usual assortment of improvements and bugfixes, see the", - ignore system and dropped attributes in composite types , * queries with cached statements now generate fewer tcp packets," this is in alignment with how upstream is interpreting the ""minor"" version", * prefer ssl connections by default , * add codecs for a bunch of new builtin types , * handle and ignore permission errors when attempting to read .pgpass, * allow setting custom codecs on domains and enumerated types, new features,new features, new features,new features,new features, * add `bitstring.to_int` and `bitstring.from_int`, * allow overriding codecs for builtin types on a connection., * channel names in `connection.add_listener` and, * fix for warning_callback not yet defined, * fix tests and enable ci for postgresql 11,pipfiles and docker," postgresql types like `jsonpath`, and last but not least, vastly", * `connect` and `create_pool` no longer accept arbitrary, * do not attempt to connect to unix sockets on windows when host is not set, * guard against incorrect use of resources associated with a connection, * require `command_timeout` argument of `connect` be greater than 0., * warn when there are active listeners on a connection that is released, * add support for reading passwords from .pgpass, - add compatibility with postgresql server versions 9.1-9.3, * fix server version parsing when it contains trailing data, * pool: track connections and prohibit using them after release., * add support for ssl connections.," notable additions include python 3.9 support, support for recently added"," * handle ip values with prefix in ""inet"" type as `ipaddress.ipvxinterface`", * fix issues with inet type i/o, * remove superfluous transaction from a cursor example, * prohibit non-iterable containers to be passed as array input, * decode numeric zeros with correct scale, * add support for specifying multiple host addresses when connecting," * remove the deprecated ""binary"" parameter from `connection.set_type_codec`", * internal asyncpg errors are now consistently raised as, * fix incorrect application of custom codecs in some cases , * add a workaround for bpo-37658, * add support for password functions , - fix setup.py metadata and readme rst issues, * prohibit custom codecs on domains, * support pgbouncer by sending only a single sync message per query, * handle exceptions in generators passed to `connection.executemany`., * raise a consistent exception on input encoding errors, * ignore custom data codec for internal introspection , - make typemap be stable and avoid extra endline at the end of pgtypes.pxi, * fix `set_type_codec` to accept standard sql type names , * use anonymous prepared statements when the cache is off., * add support for copy out., * add support for copy in., * raise an error if connection is used after being closed., * allow aliasing builtin types by name in `set_builtin_type_codec`,a new asyncpg release is here., `connection.remove_listener` are now quoted properly., * fix garbage collection of connections and emit a `resourcewarning`, * add a test for cursors on a standby replica.," this is the last release of asyncpg that supports python 3.5, which has", * allow mappings as composite type input, * make asyncpg work with pyinstaller ," also now _atomic_, which means that either all iterations succeed, or", - various portability and robustness improvements, optimized for slightly better performance in certain scenarios, - add infrastructure for multiformat data codecs, * implement binary format codec for numeric type., * add python 3.9 support , asyncpg now reports the server version as x.0.y for postgresql 10.0 and later., * add support for the text i/o fallback for arrays of unknown types., * fix `record.items` to support duplicate keys. see 28 for details., * fix type introspection being very slow on large databases, - allow any non-trivial container to be passed as an array argument, * allow using custom `record` class, * add support for postgresql 10, * correctly ignore all incoming messages after the terminate message, * support timeouts in `connection.close` and `pool.release`, * fix decoding of fractional timestamps before postgres epoch, * fix issues with timetz type i/o, add windows support ," none at all, whereas previously partial results would have remained in", * invalidate type cache on schema changes affecting statement result., * implement conistent handling of timeouts., * use the general statement cache for type introspection, * drop support for postgresql 9.1, * do not look for a port in a unix socket domain path, * make sure `set_type_codec` overrides core codec for all formats., * include .flake8 in pypi tarball, * use `loop.start_tls` to upgrade connections to ssl, * raise proper error on anonymous composite input , * handle inactive connection closes while stored in the pool,send a mail to and we'll get back to you shortly., complete. it is advisable to use `asyncio.wait_for` to set a timeout.,backwards incompatible changes,backwards incompatible changes,backwards incompatible changes, * initialize statement codecs immediately after prepare, - cluster: fix how settings args are passed to 'init', * implement `as_dict` method for `postgresmessage`.,a changelog finder and parser., * invalidate statement cache on schema changes affecting statement result., * fix `typeerror` on `get_attributes` when result has no columns, asyncpg no longer uses the common statement cache for explicit, * add api for receiving log messages `connection.add_log_listener`., * make `pool.close` wait until all checked out connections are released, - attempt to fix spurious failures of test_auth_reject on windows, * fix possible `attributeerror` exception in `connectionsettings` , * fix intermittent authentication failures against postgresql 10 servers, * guard transaction methods against underlying connection release, - increase pool.acquire timeout in tests to avoid failures on travis,"pyup safety actively tracks 310,197 python packages for vulnerabilities and notifies you when to upgrade.", * factor out generic postgresql protocol helpers into a separate package, fixes, fixes, reported by risicle), * check for .flake8 after importing flake8, * allow passing `datetime.date` instances as timestamp input, * fix compiler warnings, * add support for connection termination listeners , * fix handling of `null`s in copy_records_to_table.," * add support for ""tuple"" exchange format for codec overrides.", * fix dsn parsing regression, * allow specifying the target version when generating the release log, * fixed handling of large type oids., `pool.close` now waits until all acquired connections are released., * vastly speedup executemany by batching protocol messages , * raise an error when a binary `copy from` is attempted w/o appropriate codec., keyword arguments for server settings. use new `server_settings`, * fix erroneous codec cache invalidation on internal codec aliasing., * fix assertion fail on copy_records_to_table, * add rudimentary server capability detection., * add postgresql 12 support, * add amazon redshift detection., - use ssize_t for buffer sizes consistently, * fixed endianness detection on *bsd systems., * added codec for built-in type tid," hence, the below code will now hang indefinitely:", * fix `record.keys` to correctly return duplicate keys. see 28., * properly cleanup connections closed by remote, * allow 'sslmode' in dsns," - add codec tests for ""aclitem"" type", * fix ssl support in connection pool., * avoid unnecessary overhead during connection reset ," - decode arrays as lists, handle arrays of composite types ", * implement support for pool connection rotation, * document that single fetches can return none," - fix handling of cidr input to ""inet"" data type ", - fix pool connection failure when a password is present , * make interval decoding logic match that of psycopg2., - travis: fix documentation deploy on tagged builds , * fix wrong default transaction isolation level ,support, * call notifications listeners using `loop.call_soon`., * allow grabbing the version information programmatically., * clarify the argument/parameter count mismatch exception
Changelog (Version History) â€” Telethon 1.21.1 documentation,"you can now use strike-through in markdown with ~~text~~, and the corresponding html tags for strike-through, quotes and underlined text.",markdown and html parsing now behave correctly with leading whitespace.,"__all__ is now defined, so from telethon import * imports sane defaults . this is however discouraged and should be used only in quick scripts.","other internal changes include a somewhat more readable .to_bytes function and pre-computing the flag instead using bit shifting. the tlobject.constructor_id has been renamed to tlobject.constructor_id, and .subclass_of_id is also uppercase now.",besides this. tlobject.stringify was showing bytes as lists and rpc errors are reported by default:,archiving dialogs with dialog.archive or client.edit_folder is now possible.,"database is now upgraded if the version was lower, not different. from now on, this should help with upgrades and downgrades slightly.",working with chats and channels,files meant to be ran by the user now use shebangs and proper permissions.,"this update prepares the library for catching up with updates with the new telethon.telegram_client.telegramclient.catch_up method. this feature needs more testing, but for now it will let you catch up on some old updates that occurred while the library was offline, and brings some new features and bug fixes.",not using async with when needed is now a proper error.,some ids start with 1000 and these would be wrongly treated as channels.,"the library uses again only a single connection. less updates are be dropped now, and the performance is even better than using temporary connections.","spotted a new place where brokenauthkeyerror would be raised, and it now is raised there.","the above point means reply_message is now .get_reply_message, and fwd_from_entity is now get_fwd_sender. also forward was gone in the previous version, and you should be using fwd_from instead.","reconnection occurs at the mtprotosender level, and receiving responses follows a similar process, but now asyncio.future is used for the results which are no longer part of all tlobject, instead are part of the tlmessage which simplifies things.",pathlib.path is now supported for downloading and uploading media.,"yet again, a lot of work has been put into reworking the low level connection classes. this means asyncio.open_connection is now used correctly and the errors it can produce are handled properly. the separation between packing, encrypting and network is now abstracted away properly, so reasoning about the code is easier, making it more maintainable.","answering inline queries with a photo or document will now send the photo or document used in the resulting message by default. not sending the media was technically a bug, but some people may be relying on this old behaviour. you can use the old behaviour with include_media=false.","hopefully a very ungrateful bug has been removed. when you used to invoke some request through update handlers, it could potentially enter an infinite loop. this has been mitigated and it s now safe to invoke things again! a lot of updates were being dropped , and this has been fixed too.","dialog.delete has existed for a while, and now client.delete_dialog exists too so you can easily leave chats or delete dialogs without fetching all dialogs.","message.from_id is now a peer, not int! if you want the marked sender id , replace all uses of .from_id with .sender_id. this will mostly work, but of course in old and new versions you have to account for the fact that this sender may no longer be a user.",client.disconnect is now asynchronous again. this means you need to await it. you don t need to worry about this if you were using with client or client.run_until_disconnected. this should prevent the pending task was destroyed errors.,"besides the obvious layer change, the loop argument is now ignored. it has been deprecated since python 3.8 and will be removed in python 3.10, and also caused some annoying warning messages when using certain parts of the library. if you were relying on using a different loop from the one that was set, things may break.","if the python-socks library is installed , it will be used instead of pysocks for proxy support. this should fix some issues with proxy timeouts, because the new library natively supports asyncio.",asynchronous file descriptors are now allowed during download and upload.,"however, that doesn t mean calls are not possible with telethon. if you want to help design a python library to perform audio calls, which can then be used with telethon , please refer to @pytgcallschat and join the relevant chat to discuss and help with the implementation!","for proxy users, a pull request was merged that will use the python-socks library when available for proxy support. this library natively supports asyncio, so it should work better than the old pysocks. pysocks will still be used if the new library is not available, and both will be handled transparently by telethon so you don t need to worry about it.",client.send_voice_note is now client.send_file with is_voice=true.,.name property is now properly supported when sending and downloading files.,"the reason to bring this up is that telegram has changed things again, and with the introduction of anonymous administrators and channel comments, the sender of a message may not be a user! to accomodate for this, the field is now a peer and not int. as a reminder, it s always a good idea to use telethon s friendly methods and custom properties, which have a higher stability guarantee than accessing raw api fields.",client.get_dialogs is only called once again when an entity is not found to avoid flood waits.,"of course there was more work to be done regarding updates, and it s here! the library comes with a new events module . this are pretty much all the additions that come with this version change, but they are a nice addition. refer to to get started with events.","two new event handlers to ease creating normal bots with the library, namely events.inlinequery and events.callbackquery for handling @inlinebot queries or reacting to a button click. for this second option, there is an even better way:",this version is again compatible with python 3.x versions below 3.5 .,"on a different order of things, .connect also features a timeout. notice that the timeout= is not passed as a parameter anymore, and is instead specified when creating the telegramclient.",bug fixes and new small features ,bug fixes and new small features ,bug fixes and new small features ,support for inline mentions when sending and editing messages. they work like inline urls ) and also support the bot-api style .,request will be retried up to 5 times by default rather than failing on the first attempt.,"methods with a lot of arguments can no longer be used without specifying their argument. instead you need to use named arguments. this improves readability and not needing to learn the order of the arguments, which can also change.","internally, the .to_bytes function has been replaced with __bytes__ so now you can do bytes.",view new and changed raw api methods.,view new and changed raw api methods.,"for those who aren t able to install cryptg, the support for libssl has been added back. while interfacing libssl is not as fast, the speed when downloading and sending files should really be noticeably faster.","requests larger than 512 bytes will be compressed through gzip, and if the result is smaller, this will be uploaded instead.",the session s have been revisited thanks to the work of @tulir and they now use an abc so you can easily implement your own!,"code is now more pythonic , and other internal improvements , such as using logger instead a bare print too.","there probably are some bugs left, which haven t yet been found. however, the majority of code works and the application is already usable! not only that, but also uses the latest scheme as of now and handles way better the errors. this tag is being used to mark this release as stable enough.","new connections used to be cached and then reused. now only their sessions are saved, as temporary connections are spawned only when needed.","events.chataction now has respond, reply and delete for the message that triggered it.",reworked readme and examples at link,"underscores have been renamed from filenames. this means telethon.errors.rpc_error_list won t work, but you should have been using telethon.errors all this time instead.","inlinebuilder only worked with local files, but files from anywhere are supported.",empty except are no longer used which means sending a keyboard interrupt should now work properly.,"report_errors has been removed since it s currently not used, and flood_sleep_threshold is now part of the client.",msgsack is now sent in a container rather than its own request.,the thumb for download_media now supports both str and videosize.,error descriptions and information about methods is now loaded from a csv file instead of being part of several messy json files.,"hope the new, super simple readme.rst encourages people to use telethon and make it better with either suggestions, or pull request. pull requests are super appreciated, but showing some support by leaving a star also feels nice .","received errors are acknowledged to the server, so they don t happen over and over.","the list of known peers could end corrupted and have users with access_hash=none, resulting in struct error for it not being an integer. you shouldn t encounter this issue anymore.","this version also updates the format of sqlite sessions , so after upgrading and using an old session, the session will be updated, which means trying to use it back in older versions of the library won t work.","the release is primarily intended to test this big change, but also fixes python 3.5.2 compatibility which was broken due to a trailing comma.",.create_new_connection is gone for good. no need to deal with this manually since new connections are now handled on demand by the library itself.,"invite links will now use cache, so using them as entities is cheaper.","this is not considered a breaking change because stderr should only be used for logging purposes, not to emit information others may consume .","now you can use python s pickle module to serialize rpcerror and any other tlobject thanks to @vegeta1k95! a fix that was fairly simple, but still might be useful for many people.","timeouterror is now ignored, since the request will be retried up to 5 times by default.",get_input_* now works with vectors ,get_input_* now works with vectors ,get_input_* now works with vectors ,"this will install any version compatible with the written version . patch releases will never break your code . you can also use that syntax in pip install. your code can t know what new versions will look like, so saying it will work with all versions is a lie and will cause issues.",".reconnect behavior has been changed to also be more consistent by making the assumption that we ll only reconnect if the server has disconnected us, and is now private.","for convenience, a new object.to_json has been added which will by default format both of those problematic types into something sensible.","some bug in python 3.5.2 s asyncio causing 100% cpu load if you forgot to call client.disconnect. the method is called for you on object destruction, but you still should disconnect manually or use a with block.","the last release added support to force_file on any media, including things that were not possible before like .webp files. however, the force_document toggle commonly used for photos was applied twice , which prevented telegram for analyzing the images. long story short, sending files to the stickers bot stopped working, but that s been fixed now, and sending photos as documents include the size attribute again as long as telegram adds it.","the flow for sending a request is as follows: the telegramclient creates a mtprotosender with a connection, and the sender starts send and receive loops. sending a request means enqueueing it in the sender, which will eventually pack and encrypt it with its connectionstate instead of using the entire session instance. when the data is packed, it will be sent over the connection and ultimately over the tcpclient.","internally, the generated code now resides under a lot less files, simply for the sake of avoiding so many unnecessary files. the generated code is not meant to be read by anyone, simply to do its job.",the interactivetelegramclient is not shipped with pip anymore.,type hinting for all the generated request s and tlobjects! ides like pycharm will benefit from this.,different default limit for iter_messages and get_messages.,"server-side changes caused clicking on inline buttons to trigger a different error, which is now handled correctly.","more bug fixes include a correct parsing of certain tlobjects thanks to @stek29, and some wrong calls that would cause the library to crash thanks to @andr-04, and the readthread not re-starting if you were already authorized.","it has been a while since the last release, and a few bug fixes have been made since then. this release includes them and updates the scheme layer.","code generation was using f-strings, which are only supported on python 3.6.",invoking multiple requests at once with ordered=true was deadlocking.,"mostly bug fixes, but now there is a new parameter on client.iter_messages to support reversing the order in which messages are returned.","new formatting_entities parameter in client.send_message, and client.send_file to bypass the parse mode and manually specify the formatting entities.","rpc errors without parent requests caused a crash, and better logging.","signing in required a named code= parameter, but usage without a name was really widespread so it has been reverted.",add_mark= is now back on utils.get_input_peer and also on client.get_input_entity.,the correct amount of random bytes is now used in dh request,"the updatesthread is now a daemon, and should cause less issues.",with client:,"old usernames are evicted from cache, so getting entities by cached username should now be more reliable.",dead connections are now detected instead entering an infinite loop.,setup.py used to fail with wrongly generated code.,"error reporting is done in the background, and has a shorter timeout.","downloading media on different data centers is now up to x2 faster, since there used to be an invaliddcerror for each file part tried to be downloaded.",automatic reconnection with no retries was failing.,"changing the ip to which you connect to is as simple as client.session.server_address = 'ip', since now the server address is always queried from the session.","the tlobject s have now acquired a new .resolve method. while this should be used by the library alone , it means that you can now use peer types or even usernames where a inputpeer is required. the object now has access to the client, so that it can fetch the right type if needed, or access the session database. furthermore, you can reuse requests that need autocast , since .resolve is called when invoking. before, it was only done on object construction.","the telethon_generator/ can now convert .tl files into .json, mostly as a proof of concept, but it might be useful for other people.",duplicated updates should now be ignored.,"with the layer 103, telethon is now able to send and receive animated stickers! these use the 'application/x-tgsticker' mime-type and for now, you can access its raw data, which is a gzipped json.","unused attributes have been removed from the tlobject class too, and .sign_up returns the user that just logged in in a similar way to .sign_in now.",answering inline queries with media no works properly. you can now use the library to create inline bots and send stickers through them!,"the reason for this change is as simple as reading and writing shouldn t be related . even when you re simply ignoring updates, this way, once you send a request you will only need to read the result for the request. whatever telegram sent before has already been read and outside the buffer.",several new examples and updated documentation.,.get_input_photo is now used in the generated code.,"this version handles updates in a different thread . this means that both the low level tcpclient and the not-so-low-level mtprotosender are now multi-thread safe, so you can use them with more than a single thread without worrying!","telegramclient.get_entity is now public, and uses the @lru_cache decorator.",bug fixes and enhancements ,bug fixes and enhancements ,bug fixes and enhancements ,"you may have noticed that the patch versions between v1.7.2 to v1.7.7 have not been documented. this is because patch versions should only contain bug fixes, no new features or breaking changes. this hasn t been the case in the past, but from now on, the library will try to adhere more strictly to the semantic versioning principles.",and even the following will hopefully work:,telethon.tl.custom.dialog.dialog instances can now be casted into inputpeer.,sleeping on the main thread is not done anymore. you will have to except floodwaiterror s.,".get_message_history also returns a single list instead a tuple, with the message instances modified to make them more convenient.",.parse_username would fail with www. or a trailing slash.,"a new, more lightweight class has been added. the telegrambareclient is now the base of the normal telegramclient, and has the most basic features.","bot-api-style file_id can now be used to send files and download media. you can also access telethon.utils.resolve_bot_file_id and telethon.utils.pack_bot_file_id to resolve and create these file ids yourself. note that each user has its own id for each file so you can t use a bot s file_id with your user, except stickers.",the method reference now shows which methods can be used if you sign in with a bot_token.,"telegram is more than an application to send and receive messages. you can also send and receive media. now, this implementation also gives you the power to upload and download media from any message that contains it! nothing can now stop you from filling up all your disk space with all the photos! if you want to, of course.","the library has been around for well over a year. a lot of improvements have been made, a lot of user complaints have been fixed, and a lot of user desires have been implemented. it s time to consider the public api as stable, and remove some of the old methods that were around until now for compatibility reasons. but there s one more surprise!","working with different data centers finally works! on a different order of things, reconnection is now performed automatically every time telegram decides to kick us off their servers, so now telethon can really run forever and ever! in theory.",".sender is the .chat when the message is sent in a broadcast channel. this makes sense, because the sender of the message was the channel itself, but you now must take into consideration that it may be either a user or channel instead of being none.",fix sending albums with client.send_file was not returning the sent messages.,"version v0.14 had started working on the new .to_bytes method to dump the binarywriter and its usage on the .on_send when serializing tlobjects, and this release finally removes it. the speed up when serializing things to bytes should now be over twice as fast wherever it s needed.",crashing when migrating to a new layer and receiving old updates should not happen now.,"the purpose of this release is to denote a big change, now you can connect to telegram through different **connection modes**. also, a second thread will always be started when you connect a telegramclient, despite whether you ll be handling updates or ignoring them, whose sole purpose is to constantly read from the network.",no second thread is spawned unless one or more update handlers are added.,"markdown parsing is not part of telethon itself anymore, although there are plans to support it again through a some external module.",downloading to file=bytes will now return a bytes object with the downloaded media.,utils.resolve_id was misbehaving with some identifiers.,"first things first, sorry for updating the layer in the previous patch version. that should only be done between major versions ideally, but due to how telegram works, it s done between minor versions. however raw api has and will always be considered unsafe , this meaning that you should always use the convenience client methods instead. these methods don t cover the full api yet, so pull requests are welcome.","telethon s focus is being an asyncio-based, pure-python implementation to interact with telegram s api. streaming audio is beyond the current scope of the project and would be a big undertaking.","there is a new preferred way to invoke requests, which you re encouraged to use:","besides this, every telegram object now features a new default .__str__ look, and also a .stringify method to pretty format them, if you ever need to inspect them.","when downloading media, the right sender is directly used without previously triggering migrate errors.",the service message produced by message.pin is now returned.,the documentation has been updated with a brand new asyncio crash course to encourage you use it. you can still use the threaded version if you want though.,fix some cyclic imports and installing dependencies from the git repository.,"downloading files now retries once on timeouterror, which has been happening recently. it is not guaranteed to work, but it should help.",client.pin_message now also works with message objects.,both client.start and client.run_until_disconnected can be ran in both a synchronous way or from an async def where they need to have an await.,telegram decided to update the layer 66 without increasing the number. this has been fixed and now we re up-to-date again.,incoming = outgoing = true was not working properly.,"if you relied on internals like the mtprotosender and the telegrambareclient, both are gone. they are now mtprotosender and telegrambaseclient and they behave differently.",": broken due to a condition which should had been the opposite , fixed 4 commits ahead on link",these bug fixes are available in this release and beyond:,"also, being able to download and upload media implies that you can do the same with the library itself. did i need to mention that? oh, and now, with even less bugs! i hope.","in some cases, a request that failed to be sent would be forgotten, causing the original caller to be locked forever for a response that would never arrive. failing requests should now consistently be automatically re-sent.","telegram has had group calls for some weeks now. this new version contains the raw api methods needed to initiate and manage these group calls, however, the library will likely not offer ways to stream audio directly.","new method to .create_new_connection, which can be ran in parallel with the original connection. this will return the previously mentioned telegrambareclient already connected.","this version doesn t really bring many new features, but rather focuses on updating the code base to support the latest available telegram layer, 91. this layer brings polls, and you can create and manage them through telethon!","photopathsize is now ignored when determining a download size, since this size is not a jpeg thumbnail unlike the rest.",conversations with custom events failed to be cancelled.,the following are also present in v1.10.10:,the following are also present in v1.10.10:,fixed connecting with connectiontcpobfuscated.,brokenpipeerror was still being raised due to an incorrect order on the try/except block.,the fd is removed from the reader upon closing the socket. this should be noticeable in windows.,libssl will also be used if available on your system . this speed boost should also apply to uploading and downloading files.,upload and download methods are no longer part of telegrambareclient.,".sign_up does not take a phone argument anymore. change this or you will be using phone as code, and it will fail! the definition looks like def sign_up.","some other additions are a tiny fix when handling updates, which was ignoring some of them, nicer __str__ and .stringify methods for the tlobject s, and not stopping the readthread if you try invoking something there .",support for higher limits on .get_history and .get_dialogs.,"mtprotosender is not thread-safe, but it doesn t need to be since a new connection will be spawned when needed.",telethon.telegram_client.telegramclient.iter_messages s min_id/max_id was being ignored by telegram. this is now worked around.,"the library is now using mtproto 2.0! this shouldn t really affect you as an end user, but at least it means the library will be ready by the time mtproto 1.0 is deprecated.","the threaded version of the library will no longer be maintained, primarily because it never was properly maintained anyway. if you have old code, stick with old versions of the library, such as 0.19.1.6.","for backwards-compatibility sake, the library has introduced the properties message.reply_to_msg_id and message.to_id that behave like they did before .","the background thread will only be started after you re authorized on telegram , and several other attempts at polishing the experience with this thread.",fixed typos and enhanced some documentation in general.,"the telethon.network.connection.common.connection class is now an abc, and the old connectionmode is now gone. use a specific connection instead.","the connection instance is only created once now, and reused later.",multiple captions are now supported when sending albums.,some errors and methods are documented a bit clearer.,telegram s terms of service are now accepted when creating a new account. this can possibly help avoid bans. this has no effect for accounts that were created before.,".send_file accepts a new optional thumbnail parameter, and returns the message with the sent file.","with that out of the way, let s list the additions and bug fixes in this release:","this update brings a new way to work with updates, and it s begging for your feedback, or better names or ways to do what you can do now.",some people or chats have a lot of profile photos. you can now iterate over all of them with the new client.iter_profile_photos method.,"relative import is now used everywhere, so you can rename telethon to anything else.","the default will still be a sqlitesession, but you might want to use the new alchemysessioncontainer if you need. refer to the section of the documentation on session files for more.","file cache now relies on the hash of the file uploaded instead its path, and is now persistent in the *.session file. report any bugs on this!","if you re one of those who runs telethon for a long time , this update by @strayge will be great for you. it sends periodic pings to the telegram servers so you don t get disconnected and you can still send and receive updates!",more bug fixes and enhancements ,more bug fixes and enhancements ,more bug fixes and enhancements ,using entities with access_hash = 0 will now work in more cases.,"this version is a major overhaul of the library internals. the core has been rewritten, cleaned up and refactored to fix some oddities that have been growing inside the library.",iterating over messages in reverse with a date as offset wouldn t work.,".get_input_entity was failing for ids and other cases, also making more requests than it should.",using proxies and https connection mode may now work properly.,"sending images as photos that are too large will now be resized before uploading, reducing the time it takes to upload them and also avoiding errors when the image was too large . the images will remain unchanged if you send it as a document.","a silly bug which hadn t been spotted has now been fixed. now you can invoke other requests from within your update callbacks. however this is not advised. you should post these updates to some other thread, and let that thread do the job instead. invoking a request from within a callback will mean that, while this request is being invoked, no other things will be read.","the newest telegram update has a new method to also retrieve megagroup statistics, which can now be used with client.get_stats. this way you ll be able to access the raw data about your channel or megagroup statistics.",fixed some issues with client.kick_participant and client.edit_admin.,"client.iter_dialogs will now locally check for the offset date, since telegram ignores it.",fixed sending albums and more within client.conversation.,"servererror s will be ignored, and the request will immediately be retried.","the library already had a way to easily convert the objects the api returned into dictionaries through object.to_dict, but some of the fields are dates or bytes which json can t serialize directly.",date was being represented as a float instead of an int.,"always read the corresponding tlobject from api responses, except for some special cases still.",events.callbackquery with string regex was not working properly.,the custom.message class has been rewritten in a cleaner way and overall feels less hacky in the library. this should perform better than the previous way in which it was patched.,"timedelta is now supported where a date is expected, which means you can e.g. ban someone for timedelta.",auth_key_duplicated is handled automatically on connection.,"mostly fixes, and added some new things that can be done in this new layer.","manually using client.sign_up should now work correctly, instead of claiming code invalid .",errors that couldn t be handled on the background thread will be raised on the next call to .invoke or updates.poll.,"the same applies to .download_msg_media, which has been renamed to .download_media. the method now supports a message itself too, rather than only message.media. the specialized .download_photo, .download_document and .download_contact still exist, but are private.",new way to work with updates ,new way to work with updates ,new way to work with updates ,fixed some errors and cleaned up the generation of code.,chat and channel participants can now be used as peers.,default to markdown parsing when sending and editing messages.,"and yes, you can create more complex button layouts with lists:","this means that the code is easier to understand and reason about, including the code flow such as conditions, exceptions, where to reconnect, how the library should behave, and separating different retry types such as disconnections or call fails, but it also means that some things will necessarily break in this version.","in addition, the library now logs warning or error messages to stderr by default! you no longer should be left wondering why isn t my event handler working if you forgot to configure logging. it took so long for this change to arrive because nobody noticed that telethon was using a logging.nullhandler when it really shouldn t have.","yet another update to fix some bugs and increase the stability of the library, or, at least, that was the attempt!","new client.get_permissions method to query a participant s permissions in a group or channel. this request is slightly expensive in small group chats because it has to fetch the entire chat to check just a user, so use of a cache is advised.",built with sphinx using a theme provided by read the docs.,correctly catch and raise all rpc errors.,"new minor version, new layer change! this time is a good one to remind every consumer of python libraries that you should always specify fixed versions of your dependencies! if you re using a requirements.txt file and you want to stick with the old version for the time being, you can use the following syntax:", user joined event was being treated as user was invited .,interactive sign in now supports signing in with a bot token.,"telegramclient is now only an abstraction over the telegrambareclient, which can only do basic things, such as invoking requests, working with files, etc. if you don t need any of the abstractions the telegramclient, you can now use the telegrambareclient in a much more comfortable way.","message.edit now respects the previous message buttons or link preview being hidden. if you want to toggle them you need to explicitly set them. this is generally the desired behaviour, but may cause some bots to have buttons when they shouldn t.",updated documentation and list of known errors.,updated documentation and list of known errors.,2fa code was updated to work under the latest layer.,updates thread is only started after a successful login.,all requests that touch the network are now methods and need to have their await .,you can no longer assign to message.reply_to_msg_id and message.to_id because these are now properties that offer a view to the real value from a different field.,bug fixes with updates ,bug fixes with updates ,bug fixes with updates ,"the draft class now exposes .text and .raw_text, as well as a new draft.send to send it.","this version also includes the v1.4.1 hot-fix, which was a single quick fix and didn t really deserve an entry in the changelog.",html parsing thanks to @tulir! it can be used similar to markdown: client.send_message.,"client.disconnect is now synchronous, but you can still await it for consistency or compatibility.",raise proxyconnectionerror instead looping forever so you can except it on your own code and behave accordingly.,obj.to_dict now has a '_' key with the type used.,"you can use the telegramclient inside of with blocks, which will client.start and disconnect the client for you:",the default parameters used to initialize a connection now match the format of those used by telegram desktop.,"the session file is saved less often, which could result in a noticeable speed-up when working with a lot of incoming updates.",the correct chat is now always returned from returned messages.,this also implies that you won t need to send a request to receive an update . they will all be received instantly.,trust the server with updates ,trust the server with updates ,trust the server with updates ,updated documentation and list of known rpc errors.,me/self check for .get_entity has been moved up so if someone has me or self as their name they won t be retrieved.,"furthermore, nearly everything has been documented, thus preparing the library for read the docs , and the logging are now better placed.","the auth_key generation has been moved from .connect to .invoke. there were some issues were .connect failed and the auth_key was none so this will ensure to have a valid auth_key when needed, even if brokenauthkeyerror is raised.","in the beginning, session files used to be pickle. this proved to be bad as soon as one wanted to add more fields. for this reason, they were migrated to use json instead. but this proved to be bad as soon as one wanted to save things like entities , so now it properly uses sqlite3, which has been well tested, to save the session files! calling .get_input_entity using a username no longer will need to fetch it first, so it s really 0 calls again. calling .get_entity will always fetch the most up to date version.","the layer changed, and a lot of things did too. if you are using raw api, you should be careful with this. in addition, some attributes weren t of type datetime when they should be, which has been fixed.","if you have worked with flask templates, you will love this update, since it gives you the same features but even more conveniently:","this release has no new major features. however, it contains some small changes that make using telethon a little bit easier. now those who have installed telethon via pip can also take advantage of changes, such as less bugs, creating empty instances of tlobjects, specifying a timeout and more!",working with messages,"new client.set_proxy method which lets you change the proxy without recreating the client. you will need to reconnect for it to take effect, but you won t need to recreate the client. this is also an external contribution.",sending a copy of messages with polls will now work when possible.,without rowid is not used in sqlite anymore.,"in addition, all methods in the client now are fully annotated with type hints! more work needs to be done, but this should already help a lot when using telethon from any ides.",avoid crashing on certain terminals by using known ascii characters where possible.,"date was being serialized as local date, but that was wrong.",a disconnection is made when retries reached 0 . this hasn t been tested but it might fix the bug.,client.send_file now accepts external http:// and https:// urls.,there isn t an entry for v1.5.4 because it contained only one hot-fix regarding loggers. this update is slightly bigger so it deserves mention.,fixed possibly crashes if trying to .invoke a request while .reconnect was being called on the updatesthread.,"new custom func= on all events. these will receive the entire event, and a good usage example is func=lambda e: e.is_private.","once again nothing major, but a few bug fixes and primarily the new layer deserves a new minor release.",the aforementioned issue with force_document.,"the main feature of this release is that telethon now has a custom database for all the entities you encounter, instead depending on @lru_cache on the .get_entity method.","a new sequential_updates parameter when creating the client for updates to be processed sequentially. this is useful when you need to make sure that all updates are processed in order, such as a script that only forwards incoming messages somewhere else.","events now override __str__ and implement .stringify, just like every other tlobject does.",timeouterror was not handled during automatic reconnects.,"however, be careful with spamming!! do not use the program for that!",some enhancements to .find_user_or_chat and .get_input_peer.,new schema and qol improvements ,new schema and qol improvements ,new schema and qol improvements ,new schema and qol improvements ,new schema and qol improvements ,new schema and qol improvements ,"as a user, you shouldn t worry about this, other than being aware that quite a few changes were made in the insides of the library and you should report any issues that you encounter with this version if any.",the pts of incoming updates could be none.,using proper classes for generating authorization keys and to write out tlmessage s.,downloading media from cdns failed due to having forgotten to remove a single line.,"before getting any further, here s a quick fix-up with things that should have been on v0.13.5 but were missed. specifically, the timeout when receiving a request will now work properly.",this release primarly focuses on a few bug fixes and enhancements. although more stuff may have broken along the way.,"you can send albums larger than 10 items , as well as mixing normal files with photos.",sending a file with client.send_file now works fine when you pass an existing dice media .,avoid crashing with certain invalid utf-8 strings.,"the library trusts the server with updates again. the library will not check for duplicates anymore, and when the server kicks us, it will run getstaterequest so the server starts sending updates again . but this update also brings a few more changes!","the telegramclient methods .send_photo_file, .send_document_file and .send_media_file are now a single method called .send_file. it s also important to note that the order of the parameters has been swapped: first to who you want to send it, then the file itself.","new comment_to parameter in client.send_message, and client.send_file to comment on channel posts.",markdown parser s offset uses match.start to allow custom regex.,some filter types were not supported by telethon.telegram_client.telegramclient.iter_participants.,'__' is no longer considered valid in usernames.,"anyone who wants to update the documentation for known errors, or whether some methods can be used as a bot, user or both, can now be easily edited. everyone is encouraged to help document this better!","this update brings a few general enhancements that are enough to deserve a new release, with a new feature: beta markdown-like parsing for .send_message!",the thumb was being ignored when sending files from inputfile.,"in addition to that, you can now easily load and export session files without creating any on-disk file thanks to the stringsession:","hexadecimal invite links are now supported. you didn t need them, but they will now work.","new raise_last_call_error parameter in the client constructor to raise the same error produced by the last failing call, rather than a generic valueerror.","you can filter events.newmessage by sender id, and also whether they are forwards or not.","you can use a phone number or an username for methods like .send_message, .send_file, and all the other quick-access methods provided by the telegramclient.",downloading photos is broken. this is fixed in v1.7.1.,new retry_delay delay for the client to be used on auto-reconnection.,"new way to handle the result of requests. the old valueerror the previously sent request must be resent. however, no request was previously sent . should not happen anymore.",html parsing was failing due to not handling surrogates properly.,invoke other requests from within update callbacks ,invoke other requests from within update callbacks ,invoke other requests from within update callbacks ,"the way photos are downloaded changed during the layer update of the previous version, and fixing that bug as a breaking change in itself. client.download_media now offers a different way to deal with thumbnails.",you can now use client.remove_event_handler and client.list_event_handlers similar how you could with normal updates.,"the old jsonsession finally replaces the original session . if you were overriding any of these, you should only worry about overriding session now.","internally, another important change. the .on_send function on the tlobjects is gone, and now there s a new .to_bytes. from my tests, this has always been over twice as fast serializing objects, although more replacements need to be done, so please report any issues.","updates are expanded, so you don t need to check if the update has .updates or an inner .update anymore.","new cleaned-up method to stream downloads with client.iter_download, which offers a lot of flexibility, such as arbitrary offsets for efficient seeking.","signing in now accounts for authrestarterror itself, and also handles passwordhashinvaliderror.",updated documentation and added more examples.,"not only that, but more improvements have also been made: you re now able to both sign up and logout, watch a pretty uploading/downloading x% progress, and other minor changes which make using telethon easier.","some other cool examples of things that you can do: when someone tells you hello , you can automatically reply with another hello without even needing to type it by yourself :)",the logic for getting entities from their username is now correct.,new layer and qol improvements ,new layer and qol improvements ,new layer and qol improvements ,sending albums of photo urls is now supported.,without rowid will only be used on the *.session if supported.,polls with the latest layer ,polls with the latest layer ,polls with the latest layer ,you can now forward messages from different chats directly with client.forward_messages.,some documentation updates and fixed to clarify certain things.,"you can now search messages with a from_user that s not a user. this is a telegram feature, we know the name isn t great, but backwards-compatibility has to be kept.",fixes for readthedocs to correctly build the documentation.,"you can now annoy everyone with the new message.pin! the client has its own variant too, called client.pin_message.","accessing .sender, .chat and similar may not work in events anymore, since previously they could access the network. the new rule is that properties are not allowed to make api calls. you should use .get_sender, .get_chat instead while using events. you can safely access properties if you get messages through client.get_messages or other methods in the client.","when an entity is not found, it is searched in all dialogs. this might not always be desirable but it s more comfortable for legitimate uses.","the username regex mentioned on usernameinvaliderror was invalid, but it has now been fixed.",use the right peer type when a marked integer id is provided.,"the layer change from 82 to 91 changed a lot of things in the raw api, so be aware that if you rely on raw api calls, you may need to update your code, in particular if you work with files. they have a new file_reference parameter that you must provide.","for some reason, telegram doesn t have enough with the inputpeer. there also exist inputchannel and inputuser! you don t have to worry about those anymore, it s handled internally now.",invalidchecksumerror s are now ignored by the library.,the time offset wasn t being used .,"much faster integer factorization when generating the required auth_key. thanks @delivrance for making me notice this, and for the pull request.",new .get_drafts method with a custom draft class by @josxa.,updates was being dispatched to raw handlers when it shouldn t.,sending a message to a phone number was failing because the type used for a request had changed on layer 71.,fix library was raising a generic connectionerror and not the one that actually occurred.,sockets can now be closed properly.,"join all threads when calling .disconnect, to assert no dangling thread is left alive.","updated some asserts and parallel downloads, as well as some fixes for sync.","telethon used to crash a lot when logging in for the very first time. the reason for this was that the reconnection were not handled properly. now they are, so you should be able to login directly, without needing to delete the *.session file anymore. notice that downloading from a different dc is still a wip.","the maximum file size limit has also been increased to 2gb on the server, so you can send even larger files.",new common way to deal with retries .,"new .get_input_entity method, which makes use of the above feature. you should use this when a request needs a inputpeer, rather than the whole entity .",primarily bug fixing and a few welcomed additions.,you can now delete over 100 messages at once with client.delete_messages.,reconnection used to fail because it tried invoking things from the readthread.,"you can now get comments in a channel post with the reply_to parameter in client.iter_messages. comments are messages that reply to a specific channel message, hence the name .",to_id was not validated when retrieving messages by their ids.,file attributes not being inferred for open ed files.,"there is a new magic telethon.sync module to let you use all the methods in the telegramclient in a synchronous way, while using asyncio behind the scenes! this means you re now able to do both of the following:",client.send_file plays better with streams now.,"objects can no longer be content_related and instead subclass tlrequest, making the separation of concerns easier.",.to_dict will now work even on invalid tlobject s.,fixes to bugs introduced while making this release.,message search was broken when using a certain combination of parameters.,potentially fix alternative session storages that had issues with dates.,calling getconfigrequest is now made less often.,"that s pretty much it, although there s more work to be done to make the overall experience of working with updates even better. stay tuned!","another big thing, you can get entities by just their positive id. this may cause some collisions , and you can still be explicit about the type you want. however, it s a lot more convenient and less confusing.","this update is overall an attempt to make telethon a bit more user friendly, along with some other stability enhancements, although it brings quite a few changes.",added some missing cases on .get_input_entity and peer functions.,"you can now schedule messages to be sent at a later time, which can also work as reminders for yourself when used in your own chat!",some improvements to the search in the full api and generated examples.,"a bit late to the party, but telethon now offers a convenient way to comment on channel posts. it works very similar to reply_to:",improvements to the way marked ids are parsed.,add auto-cast for inputmessage and inputlocation.,fix client.send_file with the result of client.upload_file.,"it actually is a usable-enough client for your day by day. you could even add libnotify and pop, you re done! a great cli-client with desktop notifications.","this version is primarily for people to migrate their .session files, which are pickled, to the new json format. although slightly slower, and a bit more vulnerable since it s plain text, it s a lot more resistant to upgrades.",videos can now be included when sending albums.,"the library was accidentally using a deprecated argument in one of its friendly methods, producing a warning.","you can prevent the entitydatabase from saving users by setting client.session.entities.enabled = false, and prevent the session from saving input entities at all by setting client.session.save_entities = false. you can also clear the cache for a certain user through client.session.entities.clear_cache, which will clear all if no entity is given.","this is fine for small bots but it will add the callback every time you send a message, so you probably should do this instead once you are done testing:",more checks to ensure that the connection is flagged correctly as either connected or not.,"libssl is no longer an optional dependency. use cryptg instead, which you can find on link","thumbnails are sorted, so -1 is always the largest.","exif metadata is respected when automatically resizing photos, so the orientation information should no longer be lost.","large dates now wrap around a 32-bit integer, which is the only way we can represent them to telegram. even if wrong , it makes things not crash, and it s the best we can do with 32-bit dates.",now you re able to send photo and document as files.,the library now distinguishes between mtproto and api schemas.,client.start was completely broken due to a last-time change requiring named arguments everywhere.,the warning for added update handler but no workers set wasn t actually working.,"getting an entity by its positive id should be enough, regardless of their type . although wrapping them inside a peer is still recommended, it s not necessary.",some important internal changes are that the old way to deal with rsa public keys now uses a different module instead the old strange hand-crafted version.,"even if you don t update, your code will still need to account for the fact that the sender of a message might be one of the accounts telegram introduced to preserve backwards compatibility, because this is a server-side change, so it s better to update and not lag behind. as it s mostly just a single person driving the project on their free time, bug-fixes are not backported.",this code will leave a comment to the channel post with id 1134 in channel.,"you can invoke requests from update handlers. and any other thread. a new temporary will be made, so that you can be sending even several requests at the same time!",.process_entities was being called from more places than only __call__.,telethon.telegram_client.telegramclient.forward_messages now returns a single item instead of a list if the input was also a single item.,fixed incredibly slow imports under some systems due to expensive path resolution when searching for libssl.,"the documentation has been completely reworked from the ground up, with awesome new quick references such as client reference to help you quickly find what you need!",fixed unicodedecodeerror when accessing the text of messages with malformed offsets in their entities.,"this update brings some big changes to the update system, so please read it if you work with them!",sending a message with file= would ignore some of the parameters.,now you should be able to sign in even if you have process_updates=true and no previous session.,"in some cases, there were issues when using events.album together with events.raw.","code reusing for getting the chat and the sender, which easily enables this feature for new types.",successful automatic reconnections now ask telegram to send updates to us once again as soon as the library is ready to listen for them.,"all inputpeer entities are saved in the session file, but you can disable this by setting save_entities=false.",the library should more reliably handle certain updates with empty data.,initial authorization on a new data center will retry up to 5 times by default.,"new telethon.utils.encode_waveform and telethon.utils.decode_waveform methods as implemented by telegram desktop, which lets you customize how voice notes will render.",fix library was not expecting ioerror from pysocks.,iterate messages in reverse ,iterate messages in reverse ,iterate messages in reverse ,incoming messages from bots weren t working with whitelists.,"message.click now supports a password parameter, needed when doing things like changing the owner of a bot via @botfather.","that s it, any new idea or suggestion about how to make the project even more friendly is highly appreciated.",".get_entity now supports lists too, and it will make as little api calls as possible if you feed it inputpeer types. usernames will always be resolved, since they may have changed.","with that out of the way, let s look at the full change set:","you can also easily use this for sending files, playing games, etc.","several updates and improvements to the documentation, such as optional dependencies now being properly listed.",fixed a keyerror on certain cases with conversation.,"please refer to the wiki/usage modes for an in-depth description on how to work with updates now. notice that you cannot invoke requests from within handlers anymore, only the v.0.13.1 patch allowed you to do so.","add missing .to_dict, __str__ and .stringify for tlmessage and messagecontainer.","if you have been using telethon for a while, you probably know how annoying the could not find the input entity for error can be. in this new version, the library will try harder to find the input entity for you!",new full api examples in the generated documentation.,markdown parsing is done right.,custom commands on setup.py are nicer to use.,"the entitydatabase will, by default, cache all the users, chats and channels you find in memory for as long as the program is running. the session will, by default, save all key-value pairs of the entity identifiers and their hashes .",events.messagechanged would fail with updatedeletemessages.,"in an attempt to help everyone who works with the telegram api, telethon will by default report all remote procedure call errors to pwrtelegram, a public database anyone can query, made by daniil. all the information sent is a get request with the error code, error message and method used.","if hachoir is available, the file metadata can now be extracted from streams and in-memory bytes.",async with client.action:,path-like files are now supported for thumbnails.,"tlobject.__repr__ doesn t show the original tl definition anymore, it was a lot of clutter. if you have any complaints open an issue and we can discuss it.","phone code hash is associated with phone, so you can change your mind when calling .sign_in.",compatibility and convenience,utc timezone information is properly set for read datetime.,urls like t.me/@username are now valid.,"cherry-picked a commit to use asyncio.open_connection in the lowest level of the library. do open issues if this causes trouble, but it should otherwise improve performance and reliability.",state is now persisted to the session file.,"while those are the biggest things, there are still more things to be excited about.",the library only offers the default sqlitesession again. see session files for more on how to use a different storage from now on.,new client.edit_admin and client.edit_permissions methods to more easily manage your groups.,some fixes regarding disconnecting on client deletion and properly saving the authorization key.,"tlobject s override __eq__ and __ne__, so you can compare them.","internally, the '+' from the phone number is now stripped, since it shouldn t be included.","since the content distributed network is not handled by telegram itself, the owners may tamper these files. telegram sends their sha256 sum for clients to implement this additional verification step, which now the library has. if any cdn has altered the file you re trying to download, cdnfiletamperederror will be raised to let you know.",empty peers are excluded from the list of dialogs.,"you can also use the magic sync module in your own classes, and call sync.syncify to convert all their async def into magic variants.",keyerror is now handled properly when forwarding messages.,"if you re one of those who love security the most, these are good news. you can now use two factor authentication with telethon too! as internal changes, the coding style has been improved, and you can easily use custom session objects, and various little bugs have been fixed.","retry automatically on rpccallfailerror. this error happened a lot when iterating over many messages, and retrying often fixes it.","phone numbers can have dashes, spaces, or parenthesis. they ll be removed before making the request.","if you still would like to opt out, simply set client.session.report_errors = false to disable this feature. however daniil would really thank you if you helped him by keeping it on!","client.inline_query now lets you specify the chat where the query is being made from, which some bots need to provide certain functionality.","return as early as possible from .get_input_entity and similar, to avoid penalizing you for doing this right.",the request that caused a rpc error is now shown in the error message.,"not many changes in this release, mostly the layer change. lately quite a few people have been reporting typenotfounderror, which occurs when the server sends types that it shouldn t. this can happen when telegram decides to add a new, incomplete layer, and then they change the layer without bumping the layer number . this layer change should fix it.",the progress_callback for client.upload_file can now be an async def.,using caption=none would raise an error instead of setting no caption.,"the telegramclient has been split into several mixin classes to avoid having a 3,000-lines-long file with all the methods.",add missing caption when sending message with media.,mtprotosender now relies more on the generated code to read responses.,"existing code will continue working, since the old .invoke has not been deprecated.","the library now has a friendly method to perform qr-login, as detailed in link it won t generate qr images, but it provides a way for you to easily do so with any other library of your choice.","important, related to the serialization. every object or request that had to serialize a true/false type was always being serialized as false!",dealing with mimetypes should cause less issues in systems like windows.,"yes, really cool! i promise. even though this is meant to be a library, that doesn t mean it can t have a good interactive client for you to try the library out. this is why now you can do many, many things with the interactivetelegramclient:","some nice things that were missing, along with the usual bug-fixes.",fixed the return value when forwarding messages if some were missing and also the return value of albums.,the update_workers and spawn_read_thread arguments are gone. simply remove them from your code when you create the client.,sqlite s cursor should not be closed properly after usage.,you can get messages by their id with telethon.telegram_client.telegramclient.get_messages s ids parameter:,"less flood waits when downloading media from different data centers, and the library will now detect them even before sending requests.",fix disconnection without being logged in.,"outgoing tlmessage are now pre-packed so if there s an error when serializing the raw requests, the library will no longer swallow it. this also means re-sending packets doesn t need to re-pack their bytes.",utils.resolve_bot_file_id now works again for photos.,"more special cases in the mtprotosender have been cleaned up, and also some attributes from the session which didn t really belong there since they weren t being saved.",some issues with events when accessing the input chat or their media.,fix method calls on the objects returned by client.iter_dialogs.,the message object returned when sending a message with buttons wouldn t always contain the replymarkup.,tgcrypto will now be used for encryption when installed.,"this update brings a lot of changes, so it would be nice if you could read the whole change log!",telethon.telegram_client.telegramclient.download_file now supports a none path to return the file in memory and return its bytes.,proxy connection is now blocking which should help avoid some errors.,count was always none for message.button_count.,use memorysession if sqlite3 is not installed by default.,less rpc are made when accessing the .sender and .chat of some events .,implemented .get_input_media helper methods. now you can even use another message as input media!,"more attempts at reducing cpu usage after automatically fetching missing entities on events. this isn t a big deal, even if it sounds like one.",".set_proxy method, to avoid having to create a new telegramclient.","events resolution is postponed until you are successfully connected, so you can attach them before starting the client.",client.idle is now client.run_until_disconnected,"avoid joining the background thread on disconnect, as it would be none due to a race condition.",the func= parameter of events can now be an async function.,"this will register the handler callback to handle new message events. note that you didn t add this to any client yet, and this is the key point: you don t need a client to define handlers! you can add it later:",some internal improvements and updating.,"the callback parameter from telethon.tl.custom.button.button.inline was removed, since it had always been a bad idea. adding the callback there meant a lot of extra work for every message sent, and only registering it after the first message was sent! instead, use telethon.events.callbackquery.callbackquery.", # this line adds the handler we defined before for new messages,"under some systems, libssl would fail to load earlier than expected, causing the library to fail when being imported.",bug with certain input parameters when iterating messages.,fixed draft not being aware of the entity.,"vales like random_id are now automatically inferred, so you can save yourself from the hassle of writing generate_random_long everywhere. same applies to .get_input_peer, unless you really need the extra performance provided by skipping one if if called manually.",fix forward had its client as none.,you can reuse message buttons to send new messages with those buttons.,channel comments and anonymous admins ,channel comments and anonymous admins ,channel comments and anonymous admins ,"the no_webpage parameter from .send_message has been renamed to link_preview for clarity, so now it does the opposite .",flood waits of zero seconds are handled better.,sending large files in albums would fail because it tried to cache them.,removed named length argument in to_bytes for pypy.,"cdn downloads weren t working properly, and now a few patches have been applied to ensure more reliability, although i couldn t personally test this, so again, report any feedback.","it s here, it has come! the library now supports ipv6! just pass use_ipv6=true when creating a telegramclient. note that i could not test this feature because my machine doesn t have ipv6 setup. if you know ipv6 works in your machine but the library doesn t, please refer to #425.",downloading a thumbnail by index should now use the correct size ordering.,"new message.file property! now you can trivially access message.file.id to get the file id of some media, or even print.","as a side note, the documentation at link now lists known rpcerror for all requests, so you know what to expect. this required a major rewrite, but it was well worth it!","you can no longer pass a batch_size when iterating over messages. no other method exposed this parameter, and it was only meant for testing purposes. instead, it s now a private constant.","when trying to client.start to another account if you were previously logged in, the library will now warn you because this is probably not intended. to avoid the warning, make sure you re logging in to the right account or logout from the other first.","a lot of people use ids thinking this is the right way of doing it. ideally, you would always use input_*, not sender or sender_id . but, with this change, ids will work just the same as input_* inside events.",fix markdown/html parser from failing with leading/trailing whitespace.,some new things and patches that already deserved their own release.,the session would fail to load if the auth_key had been removed manually.,"stability regarding transport-level errors should be improved. in particular, you should no longer be getting unnecessarily logged out.","new client.forward_messages, with its own wrapper on events, called event.forward_to.",py:obj is the default sphinx s role which simplifies .rst files.,accessing the .text of the newmessage event was failing due to a bug with the markdown unparser.,.get_input_peer was ignoring a case for inputpeerself.,"this brings telethon a whole step closer to v1.0, though more things should preferably be changed.",you can now configure the reply markup when using button as a bot.,fix client.action not returning itself when used in a context manager .,you can now send multiple requests at once while preserving the order:,force_document=true was being ignored for albums.,"messages you send to yourself are now considered outgoing, unless they are forwarded.",there used to be an exception when logging exceptions on update handlers.,the method used to download documents crashed because two lines were swapped.,methods to send message and media now support a ``reply_to`` parameter.,"receiving new updates shouldn t miss any anymore, also, periodic pings are back again so it should work on the long run.",.send_message supports parse_mode='md' for markdown! it works in a similar fashion to the official clients . please report any issues with emojies or enhancements for the parser!,message.get_fwd_sender is now in message.forward.,fixed some issues regarding markdown and html parsing.,"when editing inline messages, the text parameter is preferred if provided.","all the .get_ methods in the telegramclient now have a .iter_ counterpart, so you can do operations while retrieving items from them. for instance, you can client.iter_dialogs and break once you find what you re looking for instead fetching them all at once.",lost messages are now properly skipped.,"client.kick_participant now returns the service message about the user being kicked, so you can delete it.",the library should now be able to reliably download very large files.,updated pip version ,updated pip version ,updated pip version ,.get_dialogs(count= was renamed to .get_dialogs(limit=.,"client.connect no longer returns true on success. instead, you should except the possible connectionerror and act accordingly. this makes it easier to not ignore the error.","this release implements the http connection mode to the library, which means certain proxies that only allow http connections should now work properly. you can use it doing the following, like any other mode:","better file cache. all files under 10mb, once uploaded, should never be needed to be re-uploaded again, as the sent media is cached to the session.",you will be warned if you call .add_update_handler with no update_workers.,the sqlite is now closed properly on disconnection.,"due to the layer change, you can no longer download photos with just their photosize. version 1.7.1 introduces a new way to download thumbnails to work around this issue.",.is_user_authorized is now more reliable.,"additional senders are unconditionally disconnected when disconnecting the main client, which should reduce the amount of asyncio warnings.",errors are now un-pickle-able once again.,"support for python 3.4 in the sync version, and fix media download.",running code with python3 -o would remove critical code from asserts.,"this page lists all the available versions of the library, in chronological order. you should read this when upgrading the library to know where your code can break, and where it can take advantage of new goodies!","new properties on events.newmessage, like .video_note and .gif to access only specific types of documents.", -404 errors are now detected when first connecting to a new data center.,client.add_update_handler is now client.add_event_handler,.get_message_history was failing when retrieving items that had messages forwarded from a channel.,sending documents in inline queries should now work fine.,assert that either all or none dependent-flag parameters are set before sending the request.,the parse_mode for messages now accepts a callable.,fix forwarding albums with client.forward_messages.,any file object can now be used to download a file instead a file name).,prevent double auto-reconnect.,completely overhauled asynchronous generators.,"this release should really improve the experience with the background thread that the library starts to read things from the network as soon as it can, but i can t spot every use case, so please report any bug .","all the methods in the telethon.telegram_client.telegramclient that used to return a message will now return this object instead, which means you can do things like the following:",some short usernames like @vote were being ignored.,"events are only built once and reused many times, which should save quite a few cpu cycles if you have a lot of the same type.","this is a big release! quite a few things have been added to the library, such as the new conversation. this makes it trivial to get tokens from @botfather:",more date types supported to represent a date parameter.,special mention to some of the other changes in the 1.16.x series:,.send_message was failing with channels.,invite links of the form tg://join?invite= now work.,"raw methods also warn you when a friendly variant is available, so that you don t accidentally make your life harder than it has to be.","you must upgrade to this version before any higher one if you ve used telethon v0.10. if you happen to upgrade to an higher version, that s okay, but you will have to manually delete the *.session file, and logout from that session from an official client.",downloading files from cdn s will not work yet .,documentation fixes and some missing await.,did you know that you can pretty print any result telegram returns by using their .stringify function? great for debugging!,fixed some errors when installing telethon via pip .,"there were some @property async def left, and some await property.",improved documentation and the online method reference at link,video files are sent as a video by default unless force_document.,client.send_file now accepts message s and messagemedia s as the file parameter.,full support for different dcs and ++stable ,full support for different dcs and ++stable ,full support for different dcs and ++stable ,bug fixes and layer bump.,.get_dialogs now returns a single list instead a tuple consisting of a custom class that should make everything easier to work with.,temporary fix for abusive duplicated updates.,"the mentioned different connection modes, and a new thread.",markdown s url regex was not accepting newlines.,"you can now pass phone and phone_code_hash in client.sign_up, although you probably don t need that.",several requests at once and upload compression ,several requests at once and upload compression ,several requests at once and upload compression ,fix callbackquery was being ignored.,fix invalid assertion regarding flag parameters as well.,list dialogs and pick any you wish.,getting the display name for forbidden chats now works.,the mentioned method to start a new client.conversation.,"thanks to the overhaul of all client.iter_* methods, you can now do:",catching up on updates ,catching up on updates ,catching up on updates ,if you come from telethon pre-1.0 you really want to read compatibility and convenience to port your scripts to the new version.,.stringify and string representation for custom dialog/draft.,fix forcibly getting the sender or chat from events would not always return all their information.,better default behaviour for client.send_read_acknowledge.,fixed a rare infinite loop bug in client.iter_dialogs for some people.,the mentioned reverse parameter when iterating over messages.,use signed integers consistently .,better and more powerful setup.py gen command.,client.delete_dialog now handles deactivated chats more gracefully.,"accessing the buttons of a custom message wouldn t work in channels, which lead to fix a completely different bug regarding starting bots.",getting updates after reconnect should be more reliable.,both lists have a .total attribute so you can still know how many dialogs/messages are in total.,"a bug under some session files where the sender would export authorization for the same data center, which is unsupported.",fixed some issues with events.album.,you can now easily start takeout sessions through client.takeout. some of the requests will have lower flood limits when done through the takeout session.,getting the pinned message in a chat was failing.,more bug fixes and a few others addition to make events easier to use.,setup.py now makes use of python_requires.,fixed incorrect formatting of some errors.,new in-memory cache for input entities. this should mean a lot less of disk look-ups.,you can now .get_entity through exact name match instead username.,improved conversation.cancel behaviour. now you can use it from anywhere.,tcpclient.is_connected is now more reliable.,"the low-level socket doesn t use a handcrafted timeout anymore, which should benefit by avoiding the arbitrary sleep that there used to be.",some non-persisting properties from the session have been moved out.,"new telethon.utils.get_peer, useful when you expect a peer.","add search, filter and from_user parameters to telethon.telegram_client.telegramclient.iter_messages.","improved image detection. now you can easily send bytes and streams of images as photos, unless you force document.",fix unhandled error when sending requests that were too big.,with telegramclient as client:,with telegramclient as client:,"a very quick follow-up release to fix a tiny bug with .send_message, no new features.",proxyconnectionerror should properly be passed to the main thread for you to handle.,wrong access to a member on chat forbidden error for .get_participants. an empty list is returned instead.,fixed memory cycle in forward which let you do things like the following:,new addition to the interactive client example to show peer information.,messageempty is now handled when searching messages.,bot login and proxy support ,bot login and proxy support ,bot login and proxy support ,events.album should now handle albums from different data centers more gracefully.,"determining the right path when downloading any file was very weird, now it s been enhanced.",chats vs channels
Changelog â€” librosa 0.8.0 documentation,onset_strength parameter centering has been deprecated and renamed to center ,removed features and api changes,"the following features have been deprecated, and will be removed in 0.7.0:",interactive plotting is now supported via ticker and formatter objects,logamplitude is deprecated in favor of amplitude_to_db or power_to_db. the ref_power parameter has been renamed to ref.,"cqt now uses tuning=0.0 by default, rather than estimating the tuning from the signal. tuning estimation is still supported, and enabled by default for chroma analysis .","#917 the output module is now deprecated, and will be removed in version 0.8.",librosa.util.example_audio_file is now deprecated in favor of librosa.util.example.,removed features ,resampling is now handled by the resampy library,"spectrogram frames are now centered, rather than left-aligned. this removes the need for window correction in librosa.frames_to_time","removed deprecated a440 parameter from hz_to_octs, octs_to_hz, and chroma features",beat and tempo,fixed alignment errors with offset and duration in load,#627 the following functions and features have been removed:,deprecated functions,removed deprecated util.roll_sparse function,#621 dtw is now symmetric with respect to input arguments. stefan balke,"librosa.logamplitude now supports functional reference power, in addition to scalar values",#735 added librosa.times_like and librosa.samples_like to generate time and sample indices corresponding to an existing feature matrix or shape specification. steve tjoa,librosa.feature.chromagram and logfsgram now use power instead of energy,#755 forward support and future-proofing for fancy indexing with numpy>1.15. brian mcfee,features,features,features,features,#802 librosa.icqt inverse constant-q transform has been completely rewritten and is more numerically stable. brian mcfee,"chroma now starts at c by default, instead of a",new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,api changes and compatibility,api changes and compatibility,api changes and compatibility,"librosa.decompose.hpss with mask=true now returns soft masks, rather than binary masks.",core io and dsp,librosa.load supports offset and duration parameters,deprecations to be removed in 0.9,"#1031 fixed errors in dynamic time warping with nan inputs and detection of invalid warping paths. frank zalkow, brian mcfee","librosa.display.specshow now plots using pcolormesh, and supports non-uniform time and frequency axes.",magma is now the default sequential colormap.,librosa.get_duration can now operate directly on filenames as well as audio buffers and feature matrices.,removed the deprecated output module.,added a warning if scikits.samplerate is not detected,added optional trimming to librosa.segment.stack_memory,input validation and better exception reporting for most functions,added demo notebooks for the librosa.effects and librosa.util.featureextractor,built with sphinx using a theme provided by read the docs.,pad_center supports multi-dimensional input and axis parameter,#1171 automatic precision inference for spectral transforms and explicit control for librosa.cqt. brian mcfee,librosa.cqt and librosa.feature.logfsgram now use the same parameter formats .,#308 librosa.cqt default filter_scale parameter is now 1 instead of 2.,"added time-series or spectrogram input options to chromagram, logfsgram, melspectrogram, and mfcc",removed deprecated amin parameter from icqt,all plots can be rendered in natural coordinates ,fixed issue #102: segment.agglomerative no longer depends on the deprecated ward module of sklearn; it now depends on the newer agglomerative module.,fixed bugs in find_files with negative slicing,advanced examples,"#616 write_wav no longer supports integer-typed waveforms. this is due to enforcing consistency with librosa.util.valid_audio checks elsewhere in the codebase. if you have existing code that requires integer-valued output, consider using soundfile.write instead.",#1054 fixed the length of signals produced by librosa.tone. brian mcfee,"#818 thanks to np.fft.rfft, functions stft, istft, ifgram, and fmt are faster and have a reduced memory footprint. brian mcfee",librosa.autocorrelate now persists type for complex input,changed default beat tracker settings,major rewrite and reformatting of documentation,added librosa.features.delta for computing temporal difference features,new function librosa.get_duration computes the duration of an audio signal or spectrogram-like input matrix,accelerated librosa.stft and ifgram,"fixed stability issues with ifgram, added options to suppress negative frequencies.",optimized default parameters for librosa.onset.onset_detect,fixed an edge-padding issue with decompose.hpss which resulted in percussive noise leaking into the harmonic component.,#620 updated requirements to prevent installation with sklearn 0.19.0. brian mcfee,librosa.magphase to separate magnitude and phase from a complex matrix,"#845 librosa.load: replaced the default audio decoder with pysoundfile, and only use audioread as backup. brian mcfee",#295 librosa.display.frequency_ticks: like time_ticks. ticks can now dynamically adapt to scale and use automatic precision formatting . brian mcfee,fixed a bug in tempo estimation with short windows,removed all mutable object default parameters,root mean square error has been renamed to rms.,removed deprecated ifgram function.,librosa.decompose.hpss can now return masking matrices,librosa.feature.sync now supports 1d arrays,iirt now uses sos mode by default.,deprecation and moved-function warnings,"seaborn integration has been removed, and the display submodule now requires matplotlib >= 1.5.","#416 librosa.output.write_wav only normalizes floating point, and normalization is disabled by default. brian mcfee",#971 beat and tempo estimation now support prior distributions. brian mcfee,moved feature.sync to librosa.util.sync and expanded its functionality,cqt now returns properly scaled outputs that are continuous across octave boundaries. this breaks backwards compatibility with the 0.4 series.,librosa.autocorrelate can now operate along any axis of multi-dimensional input,#279 librosa.cqt now provides complex-valued output with argument real=false. this will become the default behavior in subsequent releases.,#857 librosa.cqt and librosa.icqt forward and inverse constant-q transform now support custom resampling modes. brian mcfee,#1125 updates to librosa.util.frame to remove default parameters and relax contiguity restrictions. brian mcfee,"standardized n_fft=2048 for piptrack, ifptrack , and logfsgram ",added option centering to librosa.onset.onset_strength to resolve frame-centering issues with sliding window stft,"the following functions, classes, and constants have been removed:",#966 librosa.util.frame now supports multidimensional data. includes a new helper function librosa.util.stack for contiguous concatenation. brian mcfee,fixed a context scoping error in librosa.load with some audioread backends,"changed default parameters in onset detection, beat tracking",added boolean input support for librosa.display.cmap,#337 librosa.segment.recurrence_matrix can now produce weighted affinities and distances. brian mcfee,internal refactoring and restructuring of submodules,changed default librosa.decompose.hpss window to 31,librosa.onset.onset_strength now takes generic spectrogram function feature,"#776 librosa.piptrack now supports a keyword argument, ref=none, allowing users to override the reference thresholding behavior for determining which bins correspond to pitches. brian mcfee",broke compatibilty with ifgram.m; librosa.ifgram now matches stft,fixed a bug in beat trimming,#1165 removed deprecated optional_jit decorator
Release History â€” virtualenv 20.4.6.dev2+g7bfd444 documentation,"while discovering a python executables interpreters that cannot be queried are now displayed with info level rather than warning, so now they re no longer shown by default - by @gaborbernat. ",also generate pipx.y console script beside pip-x.y to be compatible with how pip installs itself - by @gaborbernat. ,"fix pypy 2 builtin modules are imported from standard library, rather than from builtin - by @gaborbernat. ","periodically upgrade the embedded wheels in a background process, and use them if they have been released for more than 28 days ",built in discovery class is always preferred over plugin supplied classes. ,"fixes typos, repeated words and inconsistent heading spacing. rephrase parts of the development documentation and cli documentation. expands shorthands like env var and config to their full forms. uses descriptions from respective documentation, for projects listed in related links - by @pradyunsg. ",fix download is true by default - by @gaborbernat. ,add --read-only-app-data option to allow for creation based on an existing app data cache which is non-writable. this may be useful to produce a docker image where the app-data is pre-populated.,"check if the application data path passed in does not exist or is read-only, and fallback to a temporary directory,",bump embedded pip and setuptools packages to latest upstream supported - by @gaborbernat. ,on python 2 with apple framework builds the global site package is no longer added when the system-site-packages is not specified - by @gaborbernat. ,align with venv module when creating virtual environments with builtin creator on windows 3.7 and later - by @gaborbernat. ,"fail with better error message if trying to install source with unsupported setuptools, allow setuptools-scm >= 2 and move to legacy setuptools-scm format to support better older platforms - by @gaborbernat. ",disable distutils fixup for python 3 until pypa/pip #7778 is fixed and released - by @gaborbernat. ,"the python specification can now take one or more values, first found is used to create the virtual environment - by @gaborbernat. ",first public release of the rewrite. everything is brand new and just added.,fix prompt not displayed correctly with upcoming fish 3.10 due to us not preserving $pipestatus - by @krobelus. ,upgrade embedded setuptools to 50.2.0 and pip to 20.2.3 - by @gaborbernat. ,"the application data folder is now controllable via app-data,",project readme is now of type markdown instead of restructuredtext - by @gaborbernat. ,"fix virtualenv fails sometimes when run concurrently, --clear-app-data conflicts with clear flag when abbreviation is turned on. to bypass this while allowing abbreviated flags on the command line we had to move it to reset-app-data - by @gaborbernat. ","the app-data seeder no longer symlinks the packages on unix and copies on windows. instead by default always copies, however now has the symlink-app-data flag allowing users to request this less robust but faster method - by @gaborbernat. ",fix circular prefix reference with single elements - by @gaborbernat. ,"better handling of options copies and symlinks. introduce priority of where the option is set to follow the order: cli, env var, file, hardcoded. if both set at same level prefers copy over symlink. - by @gaborbernat. ","fix cpython is not discovered from windows registry, and discover pythons from windows registry in decreasing order by version - by @gaborbernat. ",generate ignore file for version control systems to avoid tracking virtual environments by default. users should remove these files if still want to track. for now we support only git by @gaborbernat. ,"when discovering interpreters on windows, via the pep-514, prefer pythoncore releases over other ones. virtualenv is used via pip mostly by this distribution, so prefer it over other such as conda - by @gaborbernat. ",fix entry points are not populated for editable installs on python 2 due to setuptools working set being calculated before easy_install.pth runs - by @gaborbernat. ,"beside the prefix folder also try with the platform dependent binary folder within that,",passing in the virtual environment name/path is now required - by @gaborbernat. ,fix generated scripts use host version info rather than target - by @gaborbernat. ,allow unfunctioning of pydoc to fail freely so that virtualenvs can be activated under zsh with set -e - by @d125q. ,creating virtual environments in parallel fail with cannot acquire lock within app data - by @gaborbernat. ,stable order within pyenv.cfg and add include-system-site-packages only for creators that reference a global python - by user:gaborbernat. ,fix losing of libpypy-c.so when the pypy executable is a symlink - by @asottile ,"print out a one line message about the created virtual environment when no verbose is set, this can now be silenced to get back the original behaviour via the quiet flag - by @pradyunsg. ","when copying do not copy the permission bits, last access time, last modification time, and flags as access to these might be forbidden and these are not needed for the user to use the virtual environment - by @gaborbernat. ",built with sphinx using a theme provided by read the docs.,fix global site package always being added with bundled macos python framework builds - by @gaborbernat. ,symlink-app-data is always false when the application data is temporary,"always resolve system_executable information during the interpreter discovery, and the discovered environment is the system interpreter instead of the venv/virtualenv ,",fix startup on python 2 is slower for virtualenv - this was due to setuptools calculating it s working set distribution - by @gaborbernat. ,support python 2 implementations that require the landmark files and site.py to be in platform standard library instead of the standard library path of the virtual environment - by @gaborbernat. ,improve error message when the host python does not satisfy invariants needed to create virtual environments - by @gaborbernat. ,generate bash and fish activators on windows too - by @gaborbernat. ,the builtin discovery takes now a --try-first-with argument and is first attempted as valid interpreters. one can use this to force discovery of a given python executable when the discovery order/mechanism raises errors - by @gaborbernat. ,report of the created virtual environment is now split across four short lines rather than one long - by @gaborbernat ,fixed cannot discover a python interpreter that has already been discovered under a different path - by @gaborbernat. ,allow virtualenv s app data cache to be overridden by virtualenv_override_app_data - by @asottile. ,allow the test suite to pass even when called with the system python - to help repackaging of the tool for linux distributions - by @gaborbernat. ,support broken packaging pythons that put the include headers under distutils pattern rather than sysconfig one - by @gaborbernat. ,"temporary directory application data is automatically cleaned up at the end of execution,",fix that when the app-data seeders image creation fails the exception is silently ignored. avoid two virtual environment creations to step on each others toes by using a lock while creating the base images. by @gaborbernat. ,"the current virtualenv is the second iteration of implementation. from version 0.8 all the way to 16.7.9 we numbered the first iteration. version 20.0.0b1 is a complete rewrite of the package, and as such this release history starts from there. the old changelog is still available in the legacy branch documentation.",fix download fails with python 3.4 - by @gaborbernat. ,"bump embed pip to 20.3.3, setuptools to 51.1.1 and wheel to 0.36.2 - by @gaborbernat. ",lower minimal version of six required to 1.9 - by ssbarnea ,add a cli flag that triggers upgrade of embedded wheels under upgrade-embed-wheels,"allow seed wheel files inside the extra-search-dir folders that do not have requires-python metadata specified, these are considered compatible with all python versions - by @gaborbernat. ",virtual environments created via relative path on windows creates bad console executables - by @gaborbernat. ,seeder pip now correctly handles --extra-search-dir - by @frenzymadness. ,allow the use of / as pathname component separator on windows - by vphilippon ,document requirements when installing via pip under the installation section - by @gaborbernat. ,on windows python 3.7+ distributions where the exe shim is missing fallback to the old ways - by @gaborbernat. ,no longer preimport threading to fix support for gpython and gevent - by @navytux. ,extend environment variables checked for configuration to also check aliases - by @gaborbernat. ,relax importlib.resources requirement to also allow version 2 - by @asottile. ,bash activation script should have no extensions instead of .sh - by @gaborbernat. ,provide correct path for bash activator in cygwin or msys2 - by @danyeaw. ,upgrade embedded pip to 20.2.1 and setuptools to 49.4.0 - by @gaborbernat. ,fix discovery of interpreter by name from path that does not match a spec format - by @gaborbernat. ,after importing virtualenv passing cwd to a subprocess calls breaks with invalid directory - by @gaborbernat. ,allow missing .py files if a compiled .pyc version is available - by @tucked. ,"fine tune the documentation layout: default width of theme, allow tables to wrap around, soft corners for code snippets - by @pradyunsg. ",upgrade pip for python 2.7 and 3.5+ from 20.0.2 to 20.1 - by @gaborbernat. ,"seems sometimes venvs created set their base executable to themselves; we accept these without question, so we handle virtual environments as system pythons causing issues - by @gaborbernat. ","upgrade embedded pip to 20.2.1, setuptools to 49.6.0 and wheel to 0.35.1 - by @gaborbernat. ",fix acquiring python information might be altered by distutils configuration files generating incorrect layout virtual environments - by @gaborbernat. ,do not print error message if the application exists with systemexit - by @gaborbernat. ,fix processing of the virtualenv_python environment variable and make it multi-value as well - by @pneff. ,add link to the legacy documentation for the changelog by @jezdez. ,fix pinning seed packages via app-data seeder raised invalid requirement - by @gaborbernat. ,fix activate_this.py throws attributeerror on windows when virtual environment was created via cross python mechanism - by @gaborbernat. ,fix pypy3 stdlib on windows is incorrect - by @gaborbernat. ,"fallback to unverified context when querying the pypi for release date,",show less information when we run with a single verbosity :,support python 3 framework distributed via xcode in macos catalina and before - by @gaborbernat. ,automatically create the application data folder if it does not exists - by @gaborbernat. ,"fix windows store python support, do not allow creation via symlink as that s not going to work by design - by @gaborbernat. ",fix list configuration value parsing from config file or environment variable - by @gaborbernat. ,better logging output while running and enable logging on background process call ,"on the programmatic api allow passing in the environment variable dictionary to use, defaults to os.environ if not specified - by @gaborbernat. ",drop cached python information if the system executable is no longer present - by @gaborbernat. ,for activation scripts always use unix line endings - by @saytosid. ,do not fail when the pyc files is missing for the host python 2 - by @gaborbernat. ,"do not fail if there are executables that fail to query on the path,",also create pythonx.x executables when creating pypy virtualenvs - by @asottile ,supports details now explicitly what python installations we support - by @gaborbernat. ,"no longer shows accepted interpreters information ,","upgrade embedded setuptools to 46.4.0 from 46.1.3 on python 3.5+, and pip from 20.1 to 20.1.1 - by @gaborbernat. ",avoid spawning new windows when doing seed package upgrades in the background on windows - by @gaborbernat. ,fix system python discovery mechanism when prefixes contain relative parts by resolving paths within the python information query - by @gaborbernat. ,fix a bug that reading and writing on the same file may cause race on multiple processes. ,upgrade embedded pip from version 20.1.2 to 20.2 - by @gaborbernat. ,how distributions should handle shipping their own embedded wheels at embed wheels for distributions - by @gaborbernat. ,"when aliasing interpreters, use relative symlinks - by @asottile. ",upgrade pip to 20.2.1 and setuptools to 49.2.1 - by @gaborbernat. ,upgrade embedded setuptools to 44.1.1 for python 2 and 47.1.1 for python3.5+ - by @gaborbernat. ,ship wheels for python 3.9 and 3.10,fix batch activation script shell prompt to display environment name by default - by @spetafree. ,do not stop interpreter discovery if we fail to find the system interpreter for a executable during discovery - by @gaborbernat. ,fix symlink detection for creators - by @asottile ,add a cli flag with-traceback that allows displaying the stacktrace of the virtualenv when a failure occurs - by @gaborbernat. ,features - 20.3.0,fixes older cpython2 versions use _get_makefile_filename instead of get_makefile_filename on sysconfig - by @ianw. ,features - 20.0.14,pth files were not processed under debian cpython2 interpreters - by @gaborbernat. ,relax importlib requirement to allow version<3 - by @usamasadiq ,having distutils configuration files that set prefix and install_scripts cause installation of packages in the wrong location - by @gaborbernat. ,provide setup_logging flag to python api so that users can bypass logging handling if their application already performs this - by @gaborbernat. ,fix creation of entry points when path contains spaces - by @nsoranzo. ,"optionally skip vcs ignore directive for entire virtualenv directory, using option no-vcs-ignore, by default false. ",features - 20.0.11,create the first iteration of the new documentation - by @gaborbernat. ,read the docs: private repos and priority support. try read the docs for business today!,pth files were not processed on cpython2 if $pythonpath was pointing to site-packages/ - by @navytux. ,fail app-data seed operation when wheel download fails and better error message - by @gaborbernat. ,support long path names for generated virtual environment console entry points when using the app-data seeder - by @gaborbernat. ,fix pythonpath being overridden on python 2 by @jd. ,fix site.getsitepackages broken on python2 on debian - by @freundtech. ,edit on github,"remove __pyvenv_launcher__ on macos for python 3.7. and 3.8. on interpreter startup via pth file, this pulls in the upstream patch - by @gaborbernat. ",upgrade embedded setuptools to 46.0.0 from 45.3.0 on python 3.5+ - by @gaborbernat. ,handle legacy loaders for virtualenv import hooks used to patch distutils configuration load - by @gaborbernat. ,document installing latest unreleased version from github - @gaborbernat. ,fix relative paths for the zipapp - by @gaborbernat. ,upgrade embedded setuptools to 45.2.0 from 45.1.0 for python 3.4+ - by @gaborbernat. ,handle the case when the application data folder is read-only:,"bump pip to 20.3.1, setuptools to 51.0.0 and wheel to 0.36.1 - by @gaborbernat. ",features - 20.1.0,document a programmatic api as from virtualenv import cli_run under programmatic api - by @gaborbernat. ,fix relative path discovery of interpreters - by @gaborbernat. ,fix cross interpreter support when the host python sets sys.base_executable based on __pyvenv_launcher__ - by @cjolowicz ,features - 20.0.24,upgrade embedded setuptools from 47.3.1 to 49.1.0 for python 3.5+ - by @gaborbernat. ,features - 20.0.4,"do not display the str_spec attribute for pythonspec as these can be deduced from the other attributes,",on cpython2 posix platforms ensure syconfig.get_makefile_filename exists within the virtual environment - by @gaborbernat. ,features - 20.0.5,upgrade embedded setuptools to 45.3.0 from 45.2.0 for python 3.5+ - by @gaborbernat. ,fix attr: import fails for setuptools - by @gaborbernat. ,fix typo in setup.cfg - by @rowdyhowell. ,features - 20.2.0
Release history â€” Trio 0.18.0+dev documentation,trio.queue's join and task_done methods are deprecated without replacement ,"remove all the apis deprecated in 0.9.0 or earlier , trio.brokenstreamerror, and trio.resourcebusyerror), except for trio.hazmat.unboundedqueue, which stays for now since it is used by the obscure lowlevel functions monitor_completion_queue and monitor_kevent. ",run_sync_in_worker_thread is deprecated in favor of trio.to_thread.run_sync. ,the nursery context manager was rewritten to avoid use of @asynccontextmanager and @async_generator. this reduces extraneous frames in exception traces and addresses bugs regarding stopiteration and stopasynciteration exceptions not propagating correctly. ,"resourcebusyerror is now a deprecated alias for the new busyresourceerror, and brokenstreamerror is a deprecated alias for the new brokenresourceerror. ","trio 0.2.0 contains changes from 14 contributors, and brings major new features and bug fixes, as well as a number of deprecations and a very small number of backwards incompatible changes. we anticipate that these should be easy to adapt to, but make sure to read about them below, and if you re using trio then remember to read and subscribe to issue #1.","deprecate trio.open_cancel_scope in favor of trio.cancelscope, which more clearly reflects that creating a cancel scope is just an ordinary object construction and does not need to be immediately paired with entering it. ","trio 0.1.0 provided a set of built-in mechanisms for waiting for and tracking the result of individual tasks. we haven t yet found any cases where using this actually led to simpler code, though, and this feature is blocking useful improvements, so the following are being deprecated without replacement:",trio no longer crashes when an async function is implemented in c or cython and then passed directly to trio.run or nursery.start_soon. ,trio.open_tcp_stream has a new local_address= keyword argument that can be used on machines with multiple ip addresses to control which ip is used for the outgoing connection. ,the trio.hazmat.parkinglot class was rewritten to be simpler and faster ,introspecting and extending trio with trio.lowlevel,add support for trio.queue with capacity=0. queue s implementation is also faster now. ,"we ve slightly relaxed our definition of which trio operations act as checkpoints. a trio async function that exits by throwing an exception is no longer guaranteed to execute a checkpoint; it might or might not. the rules are unchanged for async functions that don t exit with an exception, async iterators, and async context managers. trio.testing.assert_checkpoints has been updated to reflect the new behavior: if its with block exits with an exception, no assertion is made. ","most of the public classes that trio exports like trio.lock, trio.socketstream, and so on weren t designed with subclassing in mind. and we ve noticed that some users were trying to subclass them anyway, and ending up with fragile code that we re likely to accidentally break in the future, or else be stuck unable to make changes for fear of breaking subclasses.",current_default_worker_thread_limiter is deprecated in favor of trio.to_thread.current_default_thread_limiter. ,"suppose one task is blocked trying to use a resource for example, reading from a socket and while it s doing this, another task closes the resource. previously, this produced undefined behavior. now, closing a resource causes pending operations on that resource to terminate immediately with a closedresourceerror. closedstreamerror and closedlistenererror are now aliases for closedresourceerror, and deprecated. for this to work, trio needs to know when a resource has been closed. to facilitate this, new functions have been added: trio.hazmat.notify_fd_close and trio.hazmat.notify_socket_close. if you re using trio s built-in wrappers like socketstream or trio.socket, then you don t need to worry about this, but if you re using the low-level functions like trio.hazmat.wait_readable, you should make sure to call these functions at appropriate times. ",remove blockingtrioportal: it was deprecated in 0.12.0. ,"add trio.process.stdio, which is a stapledstream of stdin and stdout if both of those are available, and none otherwise. this is intended to make it more ergonomic to speak a back-and-forth protocol with a subprocess. ","on windows, the iocp subsystem is generally the best way to implement async i/o operations but it s historically been weak at providing select-style readiness notifications, like trio.hazmat.wait_readable and wait_writable. we aren t willing to give those up, so previously trio s windows backend used a hybrid of select + iocp. this was complex, slow, and had limited scalability.","we cleaned up the distinction between the abstract channel interface and the memory channel concrete implementation. trio.abc.sendchannel and trio.abc.receivechannel have been slimmed down, trio.memorysendchannel and trio.memoryreceivechannel are now public types that can be used in type hints, and there s a new trio.abc.channel interface for future bidirectional channels. ","trio s default internal clock is now based on time.perf_counter instead of time.monotonic. this makes time-keeping more precise on windows, and has no effect on other platforms. ",control-c handling on windows now uses signal.set_wakeup_fd and should be more reliable ,"fortunately, we found a way to implement wait_* with iocp, so trio s windows backend has been completely rewritten, and now uses iocp exclusively. as a user, the only difference you should notice is that trio should now be faster on windows, and can handle many more sockets. this also simplified the code internally, which should allow for more improvements in the future.","and this would start the server running in the background in the nursery, and then give you back the random port it selected but not until it had finished initializing and was ready to accept requests!",add synchronous .close methods and context manager support for memorysendchannel and memoryreceivechannel. ,"we ve also added comprehensive support for ssl/tls encryption, including sni , starttls, renegotiation during full-duplex usage , and applying encryption to arbitrary streams, which allows for interesting applications like tls-over-tls. see: trio.open_ssl_over_tcp_stream, trio.serve_ssl_over_tcp, trio.open_ssl_over_tcp_listeners, and trio.ssl.",multierror now defines its exceptions attribute in __init__ to better support linters and code autocompletion. ,"for consistency with the new start method, the nursery spawn method is being renamed to start_soon ","if you re currently using trio.socket then you should switch to using our new high-level networking api instead. it takes care of many tiresome details, it s fully integrated with the abstract stream api, and it provides niceties like a state-of-the-art happy eyeballs implementation in open_tcp_stream and server helpers that integrate with nursery.start.",remove all the apis deprecated in 0.3.0 and 0.4.0. ,blockingtrioportal has been deprecated in favor of the new trio.from_thread. ,"fix regression introduced with cancellation changes in 0.12.0, where a trio.cancelscope which isn t cancelled could catch a propagating trio.cancelled exception if shielding were changed while the cancellation was propagating. ","threading interfaces have been reworked: run_sync_in_worker_thread is now trio.to_thread.run_sync, and instead of blockingtrioportal, use trio.from_thread.run and trio.from_thread.run_sync. what s neat about this is that these cooperate, so if you re in a thread created by to_thread.run_sync, it remembers which trio created it, and you can call trio.from_thread.* directly without having to pass around a blockingtrioportal object everywhere. ","add support for contextvars , and add trio.hazmat.runvar as a similar api for run-local variables. deprecate trio.tasklocal and trio.hazmat.runlocal in favor of these new apis. ","trio.current_instruments is deprecated. for adding or removing instrumentation at run-time, see trio.hazmat.add_instrument and trio.hazmat.remove_instrument ","the tiebreaker argument to trio.testing.wait_all_tasks_blocked has been deprecated. this is a highly obscure feature that was probably never used by anyone except trio.testing.mockclock, and mockclock doesn t need it anymore. ","new and improved apis for inter-task communication: trio.abc.sendchannel, trio.abc.receivechannel, and trio.open_memory_channel . this interface uses separate sender and receiver objects, for consistency with other communication interfaces like stream. also, the two objects can now be closed individually, making it much easier to gracefully shut down a channel. also, check out the nifty clone api to make it easy to manage shutdown in multiple-producer/multiple-consumer scenarios. also, the api has been written to allow for future channel implementations that send objects across process boundaries. also, it supports unbounded buffering if you really need it. also, help i can t stop writing also. see using channels to pass values between tasks for more details. ",removed everything that was deprecated in 0.2.0; see the 0.2.0 release notes below for details.,"trio.process on posix systems no longer accepts the error-prone combination of shell=false with a command that s a single string, or shell=true with a command that s a sequence of strings. these forms are accepted by the underlying subprocess.popen constructor but don t do what most users expect. also, added an explanation of quoting to the documentation. ","the submodules trio.ssl and trio.subprocess are now deprecated. their nontrivial contents have been moved to the main trio namespace. for the numerous constants, exceptions, and other helpers that were previously reexported from the standard ssl and subprocess modules, you should now use those modules directly. ","simplified nurseries: in trio, the rule used to be that parenting is a full time job , meaning that after a task opened a nursery and spawned some children into it, it had to immediately block in __aexit__ to supervise the new children, or else exception propagation wouldn t work. also there was some elaborate machinery to let you replace this supervision logic with your own custom supervision logic. thanks to new advances in task-rearing technology, parenting is no longer a full time job! now the supervision happens automatically in the background, and essentially the body of a async with trio.open_nursery block acts just like a task running inside the nursery. this is important: it makes it possible for libraries to abstract over nursery creation. for example, if you have a websocket library that needs to run a background task to handle websocket pings, you can now do that with async with open_websocket as ws: ..., and that can run a task in the background without your users having to worry about parenting it. and don t worry, you can still make custom supervisors; it turned out all that spiffy machinery was actually redundant and didn t provide much value. ","give up on trying to have different low-level waiting apis on unix and windows. all platforms now have trio.hazmat.wait_readable, trio.hazmat.wait_writable, and trio.hazmat.notify_closing. the old platform-specific synonyms wait_socket_*, notify_socket_closing, and notify_fd_closing have been deprecated. ","tasks spawned with nursery.start aren t treated as direct children of their nursery until they call task_status.started. this is visible through the task tree introspection attributes such as task.parent_nursery. sometimes, though, you want to know where the task is going to wind up, even if it hasn t finished initializing yet. to support this, we added a new attribute task.eventual_parent_nursery. for a task spawned with start that hasn t yet called started, this is the nursery that the task was nominally started in, where it will be running once it finishes starting up. in all other cases, it is none. ",trio.testing.wait_all_tasks_blocked now takes a tiebreaker= argument. the main use is to allow mockclock's auto-jump functionality to avoid interfering with direct use of wait_all_tasks_blocked in the same test.,trio socket methods like bind and connect no longer require pre-resolved numeric addresses; you can now pass regular hostnames and trio will implicitly resolve them for you. ,"trio.queue and trio.hazmat.unboundedqueue have been deprecated, in favor of trio.open_memory_channel. ","as was foretold in the v0.2.0 release notes, the bind method on trio sockets is now async. please update your calls or better yet switch to our shiny new high-level networking api, like serve_tcp. ",we no longer use runtime code generation to dispatch core functions like current_time. static analysis tools like mypy and pylint should now be able to recognize and analyze all of trio s top-level functions . ,remove clear method on trio.event: it was deprecated in 0.12.0. ,"new support for tests to cleanly hook hostname lookup and socket operations: see virtual networking for testing. in addition, trio.socket.sockettype is now an empty abstract base class, with the actual socket class made private. this shouldn t effect anyone, since the only thing you could directly use it for in the first place was isinstance checks, and those still work ",remove the apis deprecated in 0.5.0. ,you can now create an unbounded capacitylimiter by initializing with math.inf ,added an internal mechanism for pytest-trio s hypothesis integration to make the task scheduler reproducible and avoid flaky tests. ,"the iteration of the blocking generators produced by pathlib was performed in the trio thread. with this fix, the previous behavior is restored: the blocking generators are converted into lists in a thread dedicated to blocking io calls. ",design and internals,destructor methods are now protected against keyboardinterrupt. ,"if you want to use trio, but are stuck with some other event loop like qt or pygame, then good news: now you can have both. for details, see: using guest mode to run trio on top of other event loops. ",features,features,features,features,features,features,features,features,features,features,features,features,features,features,features,features,features,remove trio.open_cancel_scope which was deprecated in 0.11.0. ,remove the deprecated trio.ssl and trio.subprocess modules. ,"trio.from_thread.run no longer crashes the trio run if it is executed after the system nursery has been closed but before the run has finished. calls made at this time will now raise trio.runfinishederror. this fixes a regression introduced in trio 0.17.0. the window in question is only one scheduler tick long in most cases, but may be longer if async generators need to be cleaned up. ","the test suite now passes with openssl v1.1.1. unfortunately this required temporarily disabling tls v1.3 during tests; see openssl bugs #7948 and #7967. we believe tls v1.3 should work in most real use cases, but will be monitoring the situation. ","trio now uses signal.set_wakeup_fd on all platforms. this is mostly an internal refactoring with no user-visible effect, but in theory it should fix a few extremely-rare race conditions on unix that could have caused signal delivery to be delayed. ","the plumbing of trio s cancellation system has been substantially overhauled to improve performance and ease future planned improvements. notably, there is no longer any internal concept of a cancel stack , and checkpoints now take constant time regardless of the cancel scope nesting depth. ","trio.cancelled exceptions now always propagate until they reach the outermost unshielded cancelled scope, even if more cancellations occur or shielding is changed between when the cancelled is delivered and when it is caught. ","and in case you have some exotic use case where you need to spawn threads manually, but want to take advantage of trio s cache, you can do that using the new trio.lowlevel.start_thread_soon. ","if you want to create a trio.process object, you now have to call trio.open_process; calling trio.process directly was deprecated in v0.12.0 and has now been removed. ","when a trio task makes improper use of a non-trio async library, trio now causes an exception to be raised within the task at the point of the error, rather than abandoning the task and raising an error in its parent. this improves debuggability and resolves the triointernalerror that would sometimes result from the old strategy. ","when a socket sendall call was cancelled, it used to attach some metadata to the exception reporting how much data was actually sent. it no longer does this, because in common configurations like an sslstream wrapped around a socketstream it becomes ambiguous which level the partial metadata applies to, leading to confusion and bugs. there is no longer any way to tell how much data was sent after a sendall is cancelled.","there are also some classes that were explicitly designed to be subclassed, like the ones in trio.abc. subclassing these is still supported. however, for all other classes, attempts to subclass will now raise a deprecation warning, and in the future will raise an error.","entering a cancel scope whose deadline is in the past now immediately cancels it, so cancelled will be raised by the first checkpoint in the cancel scope rather than the second one. this also affects constructs like with trio.move_on_after:. ","if this causes problems for you, feel free to drop by our chat room or file a bug, to discuss alternatives or make a case for why some particular class should be designed to support subclassing. ",the hazmat function current_call_soon_thread_and_signal_safe is being replaced by trio.hazmat.triotoken,"fixed the hash behavior of trio.path to match pathlib.path. previously trio.path s hash was inherited from object instead of from pathlib.purepath. thus, hashing two trio.path's or a trio.path and a pathlib.path with the same underlying path would yield different results. ","trio is a young and ambitious project, but it also aims to become a stable, production-quality foundation for async i/o in python. therefore, our approach for now is to provide deprecation warnings where-ever possible, but on a fairly aggressive cycle as we push towards stability. if you use trio you should read and subscribe to issue #1. we d also welcome feedback on how this approach is working, whether our deprecation warnings could be more helpful, or anything else.","trio now consistently uses run for functions that take and run an async function !), and run_sync for functions that take and run a synchronous function. as part of this:",it is now possible to take weakrefs to lock and many other classes ,"it turns out that everyone got confused by the name trio.hazmat. so that name has been deprecated, and the new name is trio.lowlevel. ",use slots for memory channel state and statistics which should make memory channels slightly smaller and faster. ,trio now gives a reasonable traceback and error message in most cases when its invariants surrounding cancel scope nesting have been violated. the previous behavior was an inscrutable chain of triointernalerrors. ,"trio.catch_signals has been deprecated in favor of open_signal_receiver. the main differences are: it takes *-args now to specify the list of signals instead of catch_signals), and, the async iterator now yields individual signals, instead of batches ",a bug related to the following methods has been introduced in version 0.12.0:,"the trio.process.returncode attribute is now automatically updated as needed, instead of only when you call poll or wait. also, repr now always contains up-to-date information about the process status. ","calling open_signal_receiver with no arguments used to succeed without listening for any signals. this was confusing, so now it raises typeerror instead. ",use slots for task which should make them slightly smaller and faster. ,run_sync_in_worker_thread now has a robust mechanism for applying capacity limits to the number of concurrent threads ,"on linux kernels v5.3 or newer, trio.process.wait now uses the pidfd api to track child processes. this shouldn t have any user-visible change, but it makes working with subprocesses faster and use less memory. ","trio now uses yapf to standardize formatting across the source tree, so we never have to think about whitespace again.","added a new abstract api for byte streams, and trio.testing gained helpers for creating fake streams for testing your protocol implementation and checking that your custom stream implementation follows the stream contract.",contributing to trio and related projects,breaking changes and deprecations,"any attempt to inherit from cancelscope or nursery now raises typeerror. also exposed as public classes for type-checking, etc. ","sendchannel, receivechannel, listener, and open_memory_channel can now be referenced using a generic type parameter using pep 484 syntax: trio.abc.sendchannel, trio.abc.listener, trio.open_memory_channel, etc. the added type information does not change the runtime semantics, but permits better integration with external static type checkers. ",built with sphinx using a theme provided by read the docs.,"if you re using trio.hazmat.wait_task_rescheduled and other low-level routines to implement a new sleeping primitive, you can now use the new trio.hazmat.task.custom_sleep_data attribute to pass arbitrary data between the sleeping task, abort function, and waking task. ",prevent crashes when used with sentry . ,prevent crashes when used with sentry . ,stop allowing subclassing public classes. this behavior was deprecated in 0.15.0. ,"the length of typical exception traces coming from trio has been greatly reduced. this was done by eliminating many of the exception frames related to details of the implementation. for examples, see the blog post. ",trio.socket.sendall is deprecated; use trio.open_tcp_stream and socketstream.send_all instead ,"trio.hazmat.result, trio.hazmat.value and trio.hazmat.error have been replaced by the equivalent classes in the outcome library.",added a helpful error message if an async function is passed to trio.from_thread.run_sync or a sync function to trio.from_thread.run. ,this also lets us move a number of lower-level features out of the main trio namespace and into trio.hazmat:,pycharm can now offer better completions for the trio and trio.hazmat modules ,"tasks created by spawn_system_task now no longer inherit the creator s contextvars context, instead using one created at run. ","we refactored trio.testing.mockclock so that it no longer needs to run an internal task to manage autojumping. this should be mostly invisible to users, but there is one semantic change: the interaction between trio.testing.wait_all_tasks_blocked and the autojump clock was fixed. now, the autojump will always wait until after all wait_all_tasks_blocked calls have finished before firing, instead of it depending on which threshold values you passed. ","the trio.socket.getprotobyname function is now async, like it should have been all along. i doubt anyone will ever use it, but that s no reason not to get the details right.",an exception encapsulated within a multierror doesn t need to be hashable anymore.,added a helpful error message if an async function is passed to trio.to_thread.run_sync. ,"if you re using trio s low-level interfaces like trio.hazmat.wait_readable or similar, and then you close a socket or file descriptor, you re supposed to call trio.hazmat.notify_closing first so trio can clean up properly. but what if you forget? in the past, trio would tend to either deadlock or explode spectacularly. now, it s much more robust to this situation, and should generally survive. ","trio now supports automatic async generator finalization, so more async generators will work even if you don t wrap them in async with async_generator.aclosing: blocks. please see the documentation for important caveats; in particular, yielding within a nursery or cancel scope remains unsupported. ","reworked trio, trio.testing, and trio.socket namespace construction, making them more understandable by static analysis tools. this should improve tab completion in editors, reduce false positives from pylint, and is a first step towards providing type hints. ","change the default timeout in trio.open_tcp_stream to 0.250 seconds, for consistency with rfc 8305. ","it was decided that 0.1.0 s yield point terminology was confusing; we now use checkpoint instead. as part of this, the following functions in trio.hazmat are changing names:",upcoming breaking changes with warnings :,"remove wait_socket_*, notify_socket_closing, notify_fd_closing, run_sync_in_worker_thread and current_default_worker_thread_limiter. they were deprecated in 0.12.0. ",fix a crash that could happen when using mockclock with autojump enabled and a non-zero rate. ,"updates the formatting of exception messages raised by trio.open_tcp_stream to correctly handle a hostname passed in as bytes, by converting the hostname to a string. ","make event more lightweight by using less objects and simpler structures . this may benefit applications that create a large number of event instances, such as with the replace event object on every set idiom. ","fix a memory leak in trio.capacitylimiter, that could occur when acquire or acquire_on_behalf_of was cancelled. ","however, this is somewhat experimental, so if you use windows then please keep an eye out and let us know if you run into any problems! ",remove the deprecated tiebreaker argument to trio.testing.wait_all_tasks_blocked. ,we ve added freebsd to the list of platforms we support and test on. ,some version of macos have a buggy getaddrinfo that was causing spurious test failures; we now detect those systems and skip the relevant test when found. ,"there are a number of methods on trio.ssl.sslstream that report information about the negotiated tls connection, like selected_alpn_protocol, and thus cannot succeed until after the handshake has been performed. previously, we returned none from these methods, like the stdlib ssl module does, but this is confusing, because that can also be a valid return value. now we raise trio.ssl.needhandshakeerror instead. ",fixed some corner cases in trio socket method implicit name resolution to better match stdlib behavior. example: sock.bind) now binds to the wildcard address instead of raising an error. ,"fixed a race condition on macos, where trio s tcp listener would crash if an incoming tcp connection was closed before the listener had a chance to accept it. ","previously, when trio.run_process was cancelled, it always killed the subprocess immediately. now, on unix, it first gives the process a chance to clean up by sending sigterm, and only escalates to sigkill if the process is still running after 5 seconds. but if you prefer the old behavior, or want to adjust the timeout, then don t worry: you can now pass a custom deliver_cancel= argument to define your own process killing policy. ","on windows, trio now works around the buggy behavior of certain layered service providers that are built on top of a commercially available library called komodia redirector. this benefits users of products such as astrill vpn and qustodio parental controls. previously, trio would crash on startup when run on a system where such a product was installed. ","initial subprocess support. add trio.subprocess.process, an async wrapper around the stdlib subprocess.popen class, which permits spawning subprocesses and communicating with them over standard trio streams. trio.subprocess also reexports all the stdlib subprocess exceptions and constants for convenience. ","on ubuntu systems, the system python includes a custom unhandled-exception hook to perform crash reporting. unfortunately, trio wants to use the same hook to print nice multierror tracebacks, causing a conflict. previously, trio would detect the conflict, print a warning, and you just wouldn t get nice multierror tracebacks. now, trio has gotten clever enough to integrate its hook with ubuntu s, so the two systems should just work together. ",new and improved signal catching api: open_signal_receiver. ,"simplified the windows subprocess pipe send_all code, and in the process fixed a theoretical bug where closing a pipe at just the wrong time could produce errors or cause data to be redirected to the wrong pipe. ",deprecations and removals,deprecations and removals,deprecations and removals,deprecations and removals,deprecations and removals,deprecations and removals,deprecations and removals,deprecations and removals,deprecations and removals,deprecations and removals,deprecations and removals,deprecations and removals,deprecations and removals,deprecations and removals,it turns out that creating a subprocess can block the parent process for a surprisingly long time. so trio.open_process now uses a worker thread to avoid blocking the event loop. ,"trio now reliably detects if you accidentally do something like this, and gives a helpful error message.","add support for unbound cancel scopes : you can now construct a trio.cancelscope without entering its context, e.g., so you can pass it to another task which will use it to wrap some work that you want to be able to cancel from afar. ","the low level trio.hazmat.wait_socket_readable, wait_socket_writable, and notify_socket_close now work on bare socket descriptors, instead of requiring a socket.socket object. ",calling str on a trio.cancelled exception object returns cancelled instead of an empty string. ,the event loop now holds on to references of coroutine frames for only the minimum necessary period of time. ,the resolve_local_address and resolve_remote_address methods on trio sockets have been deprecated; these are unnecessary now that you can just pass your hostnames directly to the socket methods you want to use. ,we took the opportunity to refactor run_in_trio_thread and await_in_trio_thread into the new class trio.blockingtrioportal,"the trio.path classmethods, home and cwd, are now async functions. previously, a bug in the forwarding logic meant cwd was synchronous and home didn t work at all. ",simplify implementation of primitive traps like wait_task_rescheduled ,trio sockets have a new method is_readable that allows you to check whether a socket is readable. this is useful for http/1.1 clients. ,"on macos and bsds, explicitly close our wakeup socketpair when we re done with it. ","fixed several bugs in the new unix subprocess pipe support, where operations on a closed pipe could accidentally affect another unrelated pipe due to internal file-descriptor reuse, in very rare circumstances, two tasks calling send_all on the same pipe at the same time could end up with intermingled data instead of a busyresourceerror. ","trio can now be imported when sys.excepthook is a functools.partial instance, which might occur in a pytest-qt test function. ","multierror.catch now correctly preserves __context__, despite python s best attempts to stop us ",remove the deprecated trio.hazmat module. ,added a comprehensive api for async filesystem i/o: see asynchronous filesystem i/o ,"openssl has a bug in its handling of tls 1.3 session tickets that can cause deadlocks or data loss in some rare edge cases. these edge cases most frequently happen during tests. trio.sslstream now works around this issue, so you don t have to worry about it. ",this is only supported if you are running python >= 3.6.4. you can refer to this github pr for details. ,the triotoken class can now be used as a target of a weak reference. ,"it turns out that it s better to treat subprocess spawning as an async operation. therefore, direct construction of process objects has been deprecated. use trio.open_process instead. ",trio.socket now handles non-ascii domain names using the modern idna 2008 standard instead of the obsolete idna 2003 standard ,remove deprecated max_refill_bytes from sslstream. ,"previously, on windows, trio programs using thousands of sockets at the same time could trigger extreme slowdowns in the windows kernel. now, trio works around this issue, so you should be able to use as many sockets as you want. ","trio.socket no longer attempts to normalize or modernize socket options across different platforms. the high-level networking api now handles that, freeing trio.socket to focus on giving you raw, unadulterated bsd sockets.","it s generally true that if you re using trio you have to use trio functions, if you re using asyncio you have to use asyncio functions, and so forth. so for example, this isn t going to work:","trio now avoids creating cyclic garbage as often. this should have a minimal impact on most programs, but can slightly reduce how often the cycle collector gc runs on cpython, which can reduce latency spikes. ","if you have a receivestream object, you can now use async for data in stream: ... instead of calling receive_some. each iteration gives an arbitrary sized chunk of bytes. and the best part is, the loop automatically exits when you reach eof, so you don t have to check for it yourself anymore. relatedly, you no longer need to pick a magic buffer size value before calling receive_some; you can await stream.receive_some with no arguments, and the stream will automatically pick a reasonable size for you. ",attempting to explicitly raise trio.cancelled will cause a runtimeerror. cancel_scope.cancel should be used instead. 
Changelog - isort,safety_excludes and unsafe have been deprecated,replaced the --enforce-whitespace option with --ignore-whitespace to restore original behavior of strict whitespace by default,for consistency with other tools -v now is shorthand for verbose and -v is shorthand for version. see issue: #1067.,"potentially interface breaking: - the -r option for removing imports has been renamed -rm to avoid accidental deletions and confusion with the -rc recursive option. - __init__.py has been removed from the default ignore list. the default ignore list is now empty - with all items needing to be explicitly ignored. - isort will now by default ignore .tox / venv folders in an effort to be ""safe"". you can disable this behaviour by setting the ""--unsafe"" flag, this is separate from any skip or not skip rules you may have in place. - isort now allows for files missing closing newlines in whitespace check - distutils support has been removed to simplify setup.py",added warning for deprecated cli flags and linked to upgrade guide.,fixed imports with a tailing '\' and no space in-between getting removed ,fixed issue #496: import* imports now get successfully identified and reformatted instead of deleted,fixed #1469: --diff option is ignored when input is from stdin.,implemented #1684: added support for extending skips with --extend-skip and --extend-skip-glob.,new module placement logic and module fully replaces old finders. old approach is still available via --old-finders.,"removed always showing isort banner, keeping it for when the version is requested, verbose is used, or show_logo setting is set.","completely new python api, old version is removed and no longer accessible.","implemented #960: support for respecting git ignore via ""--gitignore"" or ""skip_gitignore=true"".",since there is no longer composition negative form settings are no longer required and have been removed.,fixed issue #484 & #472: consistent output with imports of same spelling but different case,fixed #1339: extra indent is not preserved when isort:skip is used in nested imports.,fixed #557: force_alphabetical_sort and force_sort_within_sections can now be utilized together without extra new lines,fixed issue #1333: use of wrap_length raises an exception about it not being lower or equal to line_length.,fixed #1192: -k or --keep-direct-and-as-imports option has been deprecated as it is now always on.,"this is the final python 2.x release of isort, and includes the following major changes:",fixed an issue with parsing files that contain unicode characters in python 2,fixed an issue that caused python files with 2 top comments not to be sorted,fixed #1612: in rare circumstances an extra comma is added after import and before comment.,"isort now does nothing, beyond giving instructions and exiting status code 0, when ran with no arguments.",improved handling of deprecated single line variables for usage with visual studio code ,implemented #1604: allow toggling section comments on and off for indented import sections.,fixed issue #651: add imports option is broken,implemented #1596: provide ways for extension formatting and file paths to be specified when using streaming input from cli.,fixed issue #284: sticky comments above first import are now supported,fixed #1523: in rare cases isort can ignore direct from import if as import is also on same line.,"fixed issue #511: all command line options with an underscore, have had the underscore replaced with a dash for consistency. this effects: multi-line, add-import, remove-import, force-adds, --force-single-line-imports, and length-sort.",added experimental support for sorting and deduping groupings of assignments.,fixed #1525: some warnings can't be disabled with --quiet.,config now includes as default full set of safety directories defined by safety excludes.,improve upgrade warnings to be less noisy and point to error codes for easy interoperability with visual studio code .,fixed a bug that led to an incompatibility with black: #831,"allow imports to be sorted by module, independent of import_type, when force_sort_within_sections option is set",config files are no longer composed on-top of each-other. instead the first config file found is used.,fixed #1548: on rare occasions an unecessary empty line can be added when an import is marked as skipped.,fixed the inability to accurately determine import section when a mix of conda and virtual environments are used.,fixed #1383: known other does not work anymore with .editorconfig.,isort now requires python 3.6+ to run but continues to support formatting on all versions of python including python 2 code.,fixed issue #433: no longer incorrectly add an extra new-line when comment between imports and function definition,fixed #1427: noqa comment is moved from star import to constant import.,setting not_skip will no longer immediately fail but instead give user a warning and direct to upgrade docs.,--apply option has been removed as it is the default behaviour.,fixed #1366: spurious errors when combining skip with --gitignore.,fixed #1488: in rare cases isort can mangle yield from or raise from statements.,fixes: - improved black compatibility. - isort will now detect files in the cwd as first-party. - fixed several cases where '-ns' or 'not_skip' was being incorrectly ignored. - fixed sorting of relative path imports . - fixed bugs caused by a failure to maintain order when loading iterables from config files. - correctly handle cpython compiled imports and others that need ext_suffix to correctly identify. - fixed handling of symbolic links to follow them when walking the path. - fixed handling of relative known_paths. - fixed lack of access to all wrap modes from the cli. - fixed handling of fifo files. - fixed a bug that could result in multiple imports being inserted on the same line.,"added support for running isort recursively, simply with a standalone isort command",isort now throws an exception if an invalid settings path is given .,fixed #1356: return status when arguments are passed in without files or a content stream.,fixed #1315: extra newline before comment with -n + --fss.,implemented #1688: auto identification and skipping of some invalid import statements.,isort now utilizes mypy and typing to filter out typing related issues before deployment.,implemented support for automatic redundant alias removal .,"fixed an issue that caused modules to inccorectly be matched as thirdparty when they simply had src in the leading path, even if they weren't withing $virtualenv/src #414",implemented #1511: support for easily seeing all files isort will be ran against using isort . --show-files.,a new --interactive flag has been added to enable the old style behaviour.,"fixed ""pycharm"" profile to always add 2 lines to be consistent with what pycharm ""optimize imports"" does.",fixed issue #260: # encoding lines at the top of the file are now correctly supported,fixed a regression with handling streaming input from pipes ,"fixed #1396: comments in imports with "";"" can keep isort from recognizing import line.","implemented issue #301: readme is now natively in rst format, making it easier for python tooling to pick up","improved api consistency, returning a boolean value for all modification api calls to indicate if changes were made.",added example usage gif to readme,implemented ability to treat all or select comments as code ,fixed some output being printed even when --quiet mode is enabled.,new: - official python 3.7 compatibility. - support for using requirements files to auto determine third-paty section if pipreqs & requirementslib are installed. - added support for using pyproject.toml if toml is installed. - added support for xdg_home if appdirs is installed. - an option has been added to enable ignoring trailing comments defaulting to false. - added support to enable line length sorting for only specific sections - added a correctly_sorted property on the sortsimport to enable more intuitive programmatic checking.,# isort: split can now be used at the end of an import line.,length_sort_{section_name} config usage has been deprecated. instead length_sort_sections list can be used to specify a list of sections that need to be length sorted.,fixed issue #909 - skip and skip-glob are not enforced when using settings-path.,fixed #1264: a regression with comment handling and force_sort_within_sections config option,implemented #1669: parallel now defaults to number of cpu cores if no value is provided.,implemented #1583: ability to output and diff within a single api call to isort.file.,implemented ability to use different configs for different file extensions ,"~~isort now formats all nested ""as"" imports in the ""from"" form. import x.y as a becomes from x import y as a.~~ note: this was undone in version 5.1.0 due to feedback it caused issues with some project conventions.","fixed #1499: isort gets confused by single line, multi-line style comments when using float-to-top.",fixed issue #1322: occasionally two extra newlines before comment with -n & --fss.,initial hypothesmith powered test to help catch unexpected syntax parsing and output errors ,fixed #1447: isort5 throws error when stdin used on windows with deprecated args.,added experimental support for sorting literals ,powered by portray. you too can portray your python project well using automatic documentation.,"fixed ""no_lines_before"" to also be respected from previous empty sections.",implemented experimental support for floating all imports to the top of a file ,implemented #1433: provide helpful feedback in case a custom config file is specified without a configuration.,implemented #1504: added ability to push star imports to the top to avoid overriding explicitly defined imports.,implemented #1638 / #1644: provide a flag --overwrite-in-place to ensure same file handle is used after sorting.,fixed #1380: as imports removed when combine_star is set.,fixed #1456 and #1415: noqa comment moved to where flake8 cant see it.,much much more. there is some difficulty in fully capturing the extent of changes in this release - just because of how all encompassing the release is. see: github issues for more.,fixed (link added imports being added to doc string in some cases.,fixed a bug that led to the recursive option not always been available from the command line.,fixed performance issue when running on project with lots of skipped directories,fixed #590: import as mucks with alphabetical sorting,fixed #1302: comments and --trailing-comma can generate invalid code.,fixed #1454: ensure indented import sections with import heading and a preceding comment don't cause import sorting loops.,fixed issue #471: imports that wrap the maximum line length and contain comments on the last line are no longer rendered incorrectly,fixed issue #1156: bug related to isort:skip usage followed by a multiline comment block,"important note: this will be the last release with python 2.6 support, subsequent releases will be 2.7+ only - fixed certain one line imports not being successfully wrapped",implemented #1353: added support for output formatting plugins.,fixed #553: check only and --diff now work together again,"fixed an issue that caused module that contained functions before doc strings, to incorrectly place imports",fixed #1429: --check doesn't print to stderr as the documentation says. this means if you were looking for error: messages for files that contain incorrect imports within stdout you will now need to look in stderr.,added option for forcing imports into a single bucket: no_sections,implemented #1397: added support for specifying config file when using git hook .,"implemented #1261: by popular demand, filter_files can now be set in the config option.",fixed #1290: unecessary blank lines above nested imports when import comments turned on.,implemented #1668: added a safeguard against accidental usage against /.,added --enforce-whitespace option to go along with --check-only for more exact checks ,give an error message when isort is unable to determine where to place a module,fixed #1298: cli help out of date with isort 5.,fixed a regression with /directory/.py style patterns,fixed #1389: ensure_newline_before_comments doesn't work if comment is at top of section and sections don't have lines between them.,added support for partial file match skips ,fixed #1359: --skip-gitignore does not honor ignored symlink,fixed issue #316: isort added new lines incorrectly when a top-of line comment is present,fixed issue #890 interoperability with pycharm by allowing case sensitive non type grouped sorting.,fixed #1539: in extremely rare cases isort 5.5.4 introduces syntax error by removing closing paren.,implemented ability to specify the types of imports ,implemented ability to dedup import headings ,fixed issue #957 - long aliases and use_parentheses generates invalid syntax,fixed issue #876: confused by symlinks pointing to virtualenv gives firstparty not thirdparty,update precommit to default to filtering files that are defined in skip.,implemented #1502: improved float-to-top behavior when there is an existing import section present at top-of-file.,"toml is now installed as a vendorized module, meaning pyproject.toml based config is always supported.","fixed #1667: extra newline added with float-to-top, after skip, in some cases.","fixed #1293: extra new line in indented imports, when immediately followed by a comment.",implemented issue #292: skip setting now supports glob patterns,added support for --quiet option to only show errors when running isort,improved interoperability with toml configuration files,isort now utilizes black internally to ensure more consistent formatting.,implemented #1487: improved handling of encoding errors.,fixed #559 & #565: added missing standard library imports,skip files even when file_contents is provided if they are explicitly in skip list,fixed issue #665: tabs turned into single spaces,fixed issue #1329: fix comments duplicated when --fass option is set.,implemented #1575: support for automatically fixing mixed indentation of import sections.,implemented #1434: new multi-line grid mode without parentheses.,added option for new lines between import types : lines_between_sections,started keeping a log of all changes between releases,fixed #1631: as import comments can in some cases be duplicated.
Release Notes â€” MechanicalSoup 1.0.0 documentation,"browser and statefulbrowser can now be configured to raise a linknotfound exception when encountering a 404 not found error. this is activated by passing raise_on_404=true to the constructor. it is disabled by default for backward compatibility, but is highly recommended.","the form class was restructured and has a new api. the behavior of existing code is unchanged, but a new collection of methods has been added for clarity and consistency with the set method:","constructing a form instance from a bs4.element.tag whose tag name is not form will now emit a warning, and may be deprecated in the future. ",private methods browser._build_request and browser._prepare_request have been replaced by a single method browser._request. ,"when a form containing a file input field is submitted without choosing a file, an empty filename & content will be sent just like in a real browser. ","improve handling of button submit elements. will now correctly ignore buttons of type button and reset during form submission, since they are not considered to be submit elements. ","statefulbrowser.select_form can now be called without argument, and defaults to ""form"" in this case. it also has a new argument, nr , which can be used to specify the index of the form to select if multiple forms match the selection criteria.",the user agent can now be customized. the default includes mechanicalsoup and its version.,the params and data kwargs passed to submit will now properly be forwarded to the underlying request for get methods . ,"form controls with the disabled attribute will no longer be submitted to improve compliance with the html standard. if you were relying on this bug to submit disabled elements, you can still achieve this by deleting the disabled attribute from the element in the form object directly. ",the optional url_regex argument to follow_link and download_link was fixed so that it is no longer ignored. ,"improve consistency of query string construction between mechanicalsoup and web browsers in edge cases where form elements have duplicate name attributes. this prevents errors in valid use cases, and also makes mechanicalsoup more tolerant of invalid html. ","tests are now run against the local version of mechanicalsoup, not against the installed version.",browser.submit and statefulbrowser.submit_selected accept a larger number of keyword arguments. arguments are forwarded to requests.session.request. ,"the choose_submit method has been fixed, and the btnname argument of statefulbrowser.submit_selected is now a shortcut for using choose_submit.","statefulbrowser has new properties page, form, and url, which can be used in place of the methods get_current_page, get_current_form and get_url respectively ). these methods may be deprecated in a future release. ",set_select is new,the testsuite has been further improved and reached 100% coverage.,improve handling of form enctype to behave like a real browser. ,"browser.add_soup will now always attach a soup-attribute. if the response is not text/html, then soup is set to none.",decompose <select> elements with the same name when adding a new input element to a form. ,built with sphinx using a theme provided by read the docs.,the coverage of the testsuite is now measured with codecov.io. the results can be viewed on: link,html type attributes are no longer required to be lowercase. ,statefulbrowser.choose_submit will now ignore input elements that are missing a name-attribute instead of raising a keyerror. ,checking checkboxes with browser = now unchecks all checkbox except the ones explicitly specified.,"breaking change: linknotfounderror now derives from exception instead of baseexception. while this will bring the behavior in line with most people s expectations, it may affect the behavior of your code if you were heavily relying on this implementation detail in your exception handling. ","the github url moved from link to link @moy and @hemberger are now officially administrators of the project in addition to @hickford, the original author.","added ability to submit a form without updating statefulbrowser internal state: submit_selected. this means you get a response from the form submission, but your browser stays on the same page. useful for handling forms that result in a file download or open a new tab.",<option> tags without a value attribute will now use their text as the value. ,we now use requirement files. you can install the dependencies of mechanicalsoup with e.g.:,allow duplicate submit elements instead of raising a linknotfounderror. ,this release focuses on fixing bugs related to uncommon http/html scenarios and on improving the documentation.,added support for python 3.8 and 3.9.,statefulbrowser.submit_selected and statefulbrowser.open now reset __current_page to none when the result is not an html page. this fixes a bug where __current_page was still the previous page.,this is the last mechanicalsoup version supporting python 2.6 and 3.3.,the selector argument of browser.select_form can now be a bs4.element.tag in addition to a css selector. ,added statefulbrowser.refresh to reload the current page with the same request. ,changes in official python version support: added 3.7 and dropped 3.4.,we now have a requires.io badge to help us tracking issues with dependencies. the report can be viewed on: link,form.new_control now correctly overrides existing elements.,"we now have a documentation site: link the api is now fully documented, and we have included a tutorial, several more code examples, and a faq.",a link object can now be passed to follow_link.,set_checkbox and set_radio together deprecate check ,"added method statefulbrowser.download_link, which will download the contents of a link to a file without changing the state of the browser. ",statefulbrowser.form will raise an attributeerror instead of returning none if no form has been selected yet. note that statefulbrowser.get_current_form still returns none for backward compatibility.,"we do not rely on beautifulsoup s default choice of html parser. instead, we now specify lxml as default. as a consequence, the default setting requires lxml as a dependency.",the version number now appears in a single place in the source code.,"statefulbrowser.follow_link, statefulbrowser.submit_selected and the new statefulbrowser.download_link now sets the referer: http header to the page from which the link is followed. ",python 2.6 and 3.3 are no longer supported.
Release Notes - mlxtend,the onehottransactions has been deprecated and replaced by the transactionencoder. (#332,"a refit parameter was added to stacking classes , to support classifiers and regressors that follow the scikit-learn api but are not compatible with scikit-learn's clone function. ",parallel execution in mlxtend.feature_selection.sequentialfeatureselector and mlxtend.feature_selection.exhaustivefeatureselector is now performed over different feature subsets instead of the different cross-validation folds to better utilize machines with multiple processors if the number of features is large .,"the same change mentioned above is now applied to other stacking estimators, including stackingclassifier, stackingcvclassifier and stackingregressor. ",added support for merging the meta features with the original input features in stackingregressor like it is already supported in the other stacking classes. ,replaced old neuralnetmlp by more streamlined multilayerperceptron ; now also with softmax in the output layer and categorical cross-entropy loss.,sequential feature selection algorithms were unified into a single sequentialfeatureselector class with parameters to enable floating selection and toggle between forward and backward selection.,a meaningful error message is now raised when a cross-validation generator is used with sequentialfeatureselector. ,the sequentialfeatureselector is now also compatible with pandas dataframes and uses dataframe column-names for more interpretable feature subset reports. ,"the stackingclassifier has a new parameter average_probas that is set to true by default to maintain the current behavior. a deprecation warning was added though, and it will default to false in future releases ; average_probas=false will result in stacking of the level-1 predicted probabilities rather than averaging these.",the plot_confusion_matrix function now has the ability to show normalized confusion matrix coefficients in addition to or instead of absolute confusion matrix coefficients with or without a colorbar. the text display method has been changed so that the full range of the colormap is used. the default size is also now set based on the number of classes.,improved mlxtend.text.generalize_duplcheck to remove duplicates and prevent endless looping issue.,the previously deprecated onehottransactions has been removed in favor of the transactionencoder.,"the sequentialfeatureselector estimator in mlxtend.feature_selection now is safely stoppable mid-process by control+c, and deprecated print_progress in favor of a more tunable verbose parameter ","the n_folds parameter of the stackingcvclassifier was changed to cv and can now accept any kind of cross validation technique that is available from scikit-learn. for example, stackingcvclassifier) or stackingcvclassifier) .",replaced .rstrip in mlxtend.file_io.find_filegroups with more robust regex.,fixed an issue with learning curves that caused the performance metrics to be reversed ,"the 'support' column returned by frequent_patterns.association_rules was changed to compute the support of ""antecedant union consequent"", and new antecedant support' and 'consequent support' column were added to avoid ambiguity. ","improve the runtime performance for the apriori frequent itemset generating function when low_memory=true. setting low_memory=false is still faster for small itemsets, but low_memory=true can be much faster for large itemsets and requires less memory. also, input validation for apriori, fpgrowthandfpmaxtakes a significant amount of time when input pandas dataframe is large; this is now dramatically reduced when input contains boolean values , which is the case when usingtransactionencoder`. ","allow the onehottransactions to be cloned via scikit-learn's clone function, which is required by e.g., scikit-learn's featureunion or gridsearchcv . ","mean_centering function is now a class that creates meancenterer objects that can be used to fit data via the fit method, and center data at the column means via the transform and fit_transform method.","the tensorflow estimator have been removed from mlxtend, since tensorflow has now very convenient ways to build on estimators, which render those implementations obsolete.",all plotting functions have been moved to mlxtend.plotting for compatibility reasons with continuous integration services and to make the installation of matplotlib optional for users of mlxtend's core functionality,"because of complications in pr , python 2.7 was now dropped; since official support for python 2.7 by the python software foundation is ending in approx. 12 months anyways, this re-focussing will hopefully free up some developer time with regard to not having to worry about backward compatibility","sequentialfeatureselecor's k_features now accepts a string argument ""best"" or ""parsimonious"" for more ""automated"" feature selection. for instance, if ""best"" is provided, the feature selector will return the feature subset with the best cross-validation performance. if ""parsimonious"" is provided as an argument, the smallest feature subset that is within one standard error of the cross-validation performance will be selected. #238",itemsets generated with apriori are now frozensets ,"two new functions, vectorspace_orthonormalization and vectorspace_dimensionality were added to mlxtend.math to use the gram-schmidt process to convert a set of linearly independent vectors into a set of orthonormal basis vectors, and to compute the dimensionality of a vectorspace, respectively. ",apriori code is faster due to optimization in onehot transformation and the amount of candidates generated by the apriori algorithm. ,"the onehottransactions class is now more memory efficient as it uses boolean arrays instead of integer arrays. in addition, the onehottransactions class can be now be provided with sparse argument to generate sparse representations of the onehot matrix to further improve memory efficiency. ",correct handling of input arguments markers and colors,raises a more informative error if a sparsedataframe is passed to apriori and the dataframe has integer column names that don't start with 0 due to current limitations of the sparsedataframe implementation in pandas. ,the eigenvectors maybe have not been sorted in certain edge cases if solver was 'eigen' in principalcomponentanalysis and lineardiscriminantanalysis. ,the skip_if_stuck parameter was removed from sequentialfeatureselector in favor of a more efficient implementation comparing the conditional inclusion/exclusion results to the performances of previously sampled feature sets that were cached #237,fixed a bug in classifier.softmaxregression where the mean values of the offsets were used to update the bias units rather than their sum,changes to stackingcvclassifier and stackingcvregressor such that first-level models are allowed to generate output of non-numeric type. ,"mlxtend.pandas.standardizing became mlxtend.preprocessing.standardizing and now supports both numpy arrays and pandas dataframes; also, now ddof parameters to set the degrees of freedom when calculating the standard deviation",raises an informative error message if predict or predict_meta_features is called prior to calling the fit method in stackingregressor and stackingcvregressor. ,renamed the refit parameter of both the stackingclassifier and stackingcvclassifier to use_clones to be more explicit and less misleading. ,an association_rules function is implemented that allows to generate rules based on a list of frequent itemsets .,the fit method of the exhaustivefeatureselector now optionally accepts **fit_params for the estimator that is used for the feature selection. ,densetransformer now doesn't raise and error if the input array is not sparse,the plot_decision_regions function now automatically determines the optimal setting based on the feature dimensions and supports anti-aliasing. the old res parameter has been deprecated. ,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,dataset are now saved as compressed .txt or .csv files rather than being imported as python objects,"utils.counter now accepts a name variable to help distinguish between multiple counters, time precision can be set with the 'precision' kwarg and the new attribute end_time holds the time the last iteration completed. ","stackingclassifier and stackingcvclassifiernow have a decision_function method, which serves as a preferred choice over predict_proba in calculating roc_auc and average_precision scores when the meta estimator is a linear model or support vector classifier. ",nose is not required to use the library ,the fit method of the sequentialfeatureselector now optionally accepts **fit_params for the estimator that is used for the feature selection. ,replaced plot_decision_regions colors by a colorblind-friendly palette and adds contour lines for decision regions. ,added new tensorflow variable initialization syntax to guarantee compatibility with tensorflow 1.0,allow stackingcvclassifier to work with sparse matrices when use_features_in_secondary=true ,the sequentialfeatureselector now accepts custom feature names via the fit method for more interpretable feature subset reports. ,fixed an issue with a missing import in mlxtend.plotting.plot_confusion_matrix. ,mlxtend.pandas.minmax_scaling became mlxtend.preprocessing.minmax_scaling and also supports numpy arrays now,fixes bug to allow the correct use of refit=false in stackingregressor and stackingcvregressor by selay01),fixed a bug where the sequentialfeatureselector selected a feature subset larger than then specified via the k_features tuple max-value #213,made math.num_combinations and math.num_permutations numerically stable for large numbers of combinations and permutations .,"fixes and issue in mlxtend.plotting.plot_confusion_matrix, where the font-color choice for medium-dark cells was not ideal and hard to read. #588 via sohrabtowfighi)",fixed a problem when a tuple-range was provided as argument to the sequentialfeatureselector's k_features parameter and the scoring metric was more negative than -1 (wahutch](link,"added a support_only to the association_rules function, which allow constructing association rules for cropped input dataframes that don't contain a complete set of antecedent and consequent support values. ","added preprocessing.copytransformer, a mock class that returns copies of imput arrays via transform and fit_transform","stackingcvclassifier and stackingcvregressor now have a new drop_last_proba parameter. it drops the last ""probability"" column in the feature set since if true, because it is redundant: p = 1 - p + p + ... + p. this can be useful for meta-classifiers that are sensitive to perfectly collinear features. ",default parameter to ignore invisible files for mlxtend.file_io.find.,the plot_confusion_matrix.py now also accepts a matplotlib figure and axis as input to which the confusion matrix plot can be added. ,overall performance improvements of estimators due to code clean-up and refactoring,"raise a attributeerror with ""not fitted"" message in sequentialfeatureselector if transform or get_metric_dict are called prior to fit","the parameters for stackingclassifier, stackingcvclassifier, stackingregressor, stackingcvregressor, and ensemblevoteclassifier can now be tuned using scikit-learn's gridsearchcv ",cast selected feature subsets in the sequentialfeautureselector as sets to prevent the iterator from getting stuck if the k_idx are different permutations of the same combination .,added shuffle and random seed parameter to stochastic gradient descent classifier.,implemented both use_clones and fit_base_estimators for ensemblevoteclassifier and stackingclassifier. ,"new function for creating multiple 2x2 contigency from model predictions arrays that can be used in multiple mcnemar tests or cochran's q or f tests, etc. ",gradient descent and stochastic gradient descent perceptron was changed to adaline ,"fixes a bug in mlxtend.plotting.plot_pca_correlation_graph that caused the explaind variances not summing up to 1. also, improves the runtime performance of the correlation computation and adds a missing function argument for the explained variances if users provide their own principal components. ",raise meaningful error messages if pandas dataframes or python lists of lists are fed into the stackingcvclassifer as a fit arguments .,now uses the latest joblib library under the hood for multiprocessing instead of sklearn.externals.joblib. ,"make sure that if the 'svd' mode is used in pca, the number of eigenvalues is the same as when using 'eigen' ","the new store_train_meta_features attribute and pred_meta_features method for the stackingcvregressor were also added to the stackingregressor, stackingclassifier, and stackingcvclassifier ","new print_progress parameter for all generalized models and multi-layer neural networks for printing time elapsed, eta, and the current cost of the current epoch",sequentialfeatureselector now correctly accepts a none argument for the scoring parameter to infer the default scoring metric from scikit-learn classifiers and regressors .,allow stackingclassifier to work with sparse matrices when use_features_in_secondary=true ,"plot_decision_regions now supports plotting decision regions for more than 2 training features #189, via james bourbeau).",the bias_variance_decomp function now supports optional fit_params for the estimators that are fit on bootstrap samples. ,"due to refactoring of the estimator classes, the init_weights parameter of the fit methods was globally renamed to init_params",accept an existing axes via the ax argument,"feature_selection.sequentialfeatureselector now supports the selection of k_features using a tuple to specify a ""min-max"" k_features range",a new feature_importance_permuation function to compute the feature importance in classifiers and regressors via the permutation importance method ,added parameters linestyles and markers to mlxtend.matplotlib.enrichment_plot,added an optional decay parameter to the tf_classifier.tfmultilayerperceptron classifier for adaptive learning via an exponential decay of the learning rate eta,"adds new mlxtend.classifier.onerclassifier class, a simple rule-based classifier that is often used as a performance baseline or simple interpretable model. (#726",fixed documentation of iris_data under iris.py by adding a note about differences in the iris data in r and uci machine learning repo.,added confusion matrix functions to create and plot confusion matrices,the columnselector now has a drop_axis argument to use it in pipelines with countvectorizers. ,the changelog for the current development version is available at link,fixed issue when class labels were provided to the ensemblevoteclassifier when refit was set to false. ,changed the default solver in principalcomponentanalysis to 'svd' instead of 'eigen' to improve numerical stability. ,allow stackingcvregressor to work with sparse matrices when use_features_in_secondary=true ,fixed typos in autompg and wine datasets .,"due to new features, restructuring, and better scikit-learn support the stackingcvregressor's meta regressor is now being accessed via 'meta_regressor__* in the parameter grid. e.g., if a randomforestregressor as meta- egressor was previously tuned via 'randomforestregressor__n_estimators', this has now changed to 'meta_regressor__n_estimators'. ",added ignore_substring parameter to mlxtend.file_io.find_filegroups and find_files.,mlxtend.evaluate.feature_importance_permutation now correctly accepts scoring functions with proper function signature as metric argument. #528,the feature_selection.columnselector now also supports column names of type int if the input is a pandas dataframe. (#500 via tetrar124,adds a pca.e_vals_normalized_ attribute to pca for storing the eigenvalues also in normalized form; this is commonly referred to as variance explained ratios. #545,unified init_params parameter for fit functions to continue training where the algorithm left off ,new style parameter and improved axis scaling in mlxtend.evaluate.plot_learning_curves,added a new mlxtend.evaluate.ftest function to perform an f-test for comparing the accuracies of two or more classification models. ,automatically performs mean centering for pca solver 'svd' such that using svd is always equal to using the covariance matrix approach #545,"the mlxtend.preprocessing.standardize function now optionally returns the parameters, which are estimated from the array, for re-use. a further improvement makes the standardize function smarter in order to avoid zero-division errors","adds a new function, mlxtend.evaluate.bias_variance_decomp that decomposes the loss of a regressor or classifier into bias and variance terms. ",added text utilities with name generalization function.,added combinations and permutations estimators.,all feature index tuples in sequentialfeatureselector or now in sorted order. ,adds new create_counterfactual method for creating counterfactuals to explain model predictions. ,added option for random weight initialization to logistic regression classifier and updated l2 regularization,"the loss in logisticregression for logging purposes didn't include the l2 penalty for the first weight in the weight vector . however, since this loss function was only used for logging purposes, and the gradient remains correct, this does not have an effect on the main code. ",added numerically stable ols methods which uses qr decomposition and singular value decomposition methods to linearregression in mlxtend.regressor.linear_regression. ,added optional groups parameter to sequentialfeatureselector and exhaustivefeatureselector fit methods for forwarding to sklearn cv ,fixes a bug where the stackingcvclassifier's meta features were not stored in the original order when shuffle=true ,new tfsoftmaxregression classifier using tensorflow ,the dataframe index of apriori results are now unique and ordered.,the vectors from svd in principalcomponentanalysis are now being scaled so that the eigenvalues via solver='eigen' and solver='svd' now store eigenvalues that have the same magnitudes. ,mlxtend.regression.lin_regplot automatically adds np.newaxis and works w. python lists,"adds a whitening parameter to principalcomponentanalysis, to optionally whiten the transformed data such that the features have unit variance. ",added a function to score predicted vs. target class labels evaluate.scoring,all stacking estimators now raise nonfittederrors if any method for inference is called prior to fitting the estimator. ,added several additional checks for correct array types and more meaningful exception messages,adds multiprocessing support to stackingcvregressor. ,new low_memory option for the apriori frequent itemset generating function. setting low_memory=false uses a substantially optimized version of the algorithm that is 3-6x faster than the original implementation . ,function now handles class y-class labels correctly if array is of type float,exhaustivefeatureselector was modified to consume substantially less memory #195 ,improvements to mlxtend.text.generalize_names to handle certain dutch last name prefixes .,documentation built with mkdocs.,added optional dropout to the tf_classifier.tfmultilayerperceptron classifier for regularization,fix unreadable labels in plot_confusion_matrix for imbalanced datasets if show_absolute=true and show_normed=true. ,added transform and fit_transform to the ensembleclassifier.,the sequentialfeatureselector now supports using pre-specified feature sets via the fixed_features parameter. ,"other stacking estimators, including stackingclassifier, stackingcvclassifier and stackingregressor, support grid search over the regressors and even a single base regressor. ",permutation_test s corrected to give the proportion of permutations whose statistic is at least as extreme as the one observed. ,added a loadings_ attribute to principalcomponentanalysis to compute the factor loadings of the features on the principal components. ,added a new lift_score function in evaluate to compute lift score .,the svd mode of mlxtend.feature_extraction.principalcomponentanalysis now also n-1 degrees of freedom instead of n d.o.f. when computing the eigenvalues to match the behavior of eigen. #595,"minibatch learning for classifier.logisticregression, classifier.adaline, and regressor.linearregression plus streamlined api",new tensorflow estimator for linear regression ,added a zoom_factor parameter to the mlxten.plotting.plot_decision_region function that allows users to zoom in and out of the decision region plots. ,fixes an issue with using meshgrid in no_information_rate function used by the bootstrap_point632_score function for the .632+ estimate. ,fixes an issue in fpmax that could lead to incorrect support values. ,"the plot_decision_regions function now has three new parameters, scatter_kwargs, contourf_kwargs, and scatter_highlight_kwargs, that can be used to modify the plotting style. ",new exhaustivefeatureselector estimator in mlxtend.feature_selection for evaluating all feature combinations in a specified range,fixed ensembleclassifier to return correct class labels if class labels are not integers from 0 to n.,new sfs features such as the generation of pandas dataframe results tables and plotting functions ,the ensemblevoteclassifier has a new refit attribute that prevents refitting classifiers if refit=false to save computational time.,changed regularization & lambda parameters in logisticregression to single parameter l2_lambda,sequentialfeatureselector now uses np.nanmean over normal mean to support scorers that may return np.nan #211 ,the sequentialfeatureselector now runs the continuation of the floating inclusion/exclusion as described in novovicova & kittler . note that this didn't cause any difference in performance on any of the test scenarios but could lead to better performance in certain edge cases. ,"adds a new transformer class to mlxtend.image, eyepadalign, that aligns face images based on the location of the eyes. ","let fpgrowth and fpmax directly work on sparse dataframe, they were previously converted into dense numpy arrays. ",fpmax returns an empty data frame now instead of raising an error if the frequent itemset set is empty. ,added rstrip parameter to mlxtend.file_io.find_filegroups to allow trimming of base names.,disable input validation for stackingcvclassifier because it causes issues if pipelines are used as input. #606,added sequential backward selection ,new mcnemar_table and mcnemar functions in evaluate to compute 2x2 contingency tables and mcnemar's test,"stackingcvclassifier and stackingcvregressor now support random_state parameter, which, together with shuffle, controls the randomness in the cv splitting. ",new onehottransactions encoder class added to the preprocessing submodule for transforming transaction data into a one-hot encoded array,new function for performing cochran's q test to compare the accuracy of multiple classifiers. ,"added an optional clone_estimator parameter to the sequentialfeatureselector that defaults to true, avoiding the modification of the original estimator objects","now, the stackingcvregressor also enables grid search over the regressors and even a single base regressor. when there are level-mixed parameters, gridsearchcv will try to replace hyperparameters in a top-down order . ",about,stackingclassifier has a new use_features_in_secondary attribute like stackingcvclassifier.,added mlxtend.text.generalize_name_duplcheck function to apply mlxtend.text.generalize_names function to a pandas dataframe without creating duplicates.,"improved random weight initialization in perceptron, adaline, linearregression, and logisticregression",switched to using raw strings for regex in mlxtend.text to prevent deprecation warning in python 3.8 ,adds an optional class_name parameter to the confusion matrix function to display class names on the axis as tick marks. ,adds multiprocessing support to stackingcvclassifier. ,stackingclassifier and stackingregressor support multivariate targets if the underlying models do .,"slice data in sequential forward selection before sending to parallel backend, reducing memory consumption.","use small, positive bias units in tfmultilayerperceptron's hidden layer if the activations are relus in order to avoid dead neurons","added an enhancement to the existing iris_data such that both the uci repository version of the iris dataset as well as the corrected, original version of the dataset can be loaded, which has a slight difference in two data points . ",added a new mlxtend.evaluate.combined_ftest_5x2cv function to perform an combined 5x2cv f-test for comparing the performance of two models. ,"fixes the mcnemar confusion matrix layout to match the convention , swapping the upper left and lower right cells. ",allow mlxtend estimators to be cloned via scikit-learn's clone function. ,fixed setup.py bug caused by the missing readme.html file,new make_multiplexer_dataset function that creates a dataset generated by a n-bit boolean multiplexer for evaluating supervised learning algorithms. ,"changed learning parameter of mlxtend.classifier.adaline to solver and added ""normal equation"" as closed-form solution solver",new stackingcvclassifier estimator in 'mlxtend.classifier' for implementing a stacking ensemble that uses cross-validation techniques for training the meta-estimator to avoid overfitting ,added densetransformer for pipelines and grid search.,mlxtend.frequent_patterns.apriori now supports pandas sparsedataframes to generate frequent itemsets. ,mlxtend.plotting.plot_decision_regions now draws decision regions correctly if more than 4 class labels are present,fixed rare bug in mlp _layer_mapping functions that caused a swap between the random number generation seed when initializing weights and biases,added ordinary least square regression using different solvers ,fixed a bug that could occur in the sequentialfeatureselector if there are similarly-well performing subsets in the floating variants .,various changes in the documentation and documentation tools to fix formatting issues ,added support for regression estimators in sfs,new function for one-hot encoding of class labels ,"fixes a bug in bias_variance_decomp where when the mse loss was used, downcasting to integers caused imprecise results for small numbers. ",added adaptive learning rate to mlxtend.classifier.neuralnetmlp.,the mlxtend.image.extract_face_landmarks now returns none if no facial landmarks were detected instead of an array of all zeros. ,added a new convenience function extract_face_landmarks based on dlib to mlxtend.image. ,new max_len parameter for the frequent itemset generation via the apriori function to allow for early stopping. ,"added evaluate.permutation_test, a permutation test for hypothesis testing to test if two samples come from the same distribution. or in other words, a procedure to test the null hypothesis that that two groups are not significantly different . ",added a mlxtend.evaluate.bootstrap that implements the ordinary nonparametric bootstrap to bootstrap a single statistic #232,fixed bug that raised an indexing error if the number of items was <= 1 when computing association rules using the conviction metric. ,added preprocessing module and mean_centering function.,added a new mlxtend.evaluate.difference_proportions test for comparing two proportions ,allow arrays with 16-bit and 32-bit precision in plot_decision_regions function. ,"added a randomholdoutsplit class to perform a random train/valid split without rotation in sequentialfeatureselector, scikit-learn gridsearchcv etc. ",adds a black edgecolor to plots via plotting.plot_decision_regions to make markers more distinguishable from the background in matplotlib>=2.0.,fixed an deprecation error that occured with mcnemar test when using scipy 1.0. ,the ensemblevoteclassifier now raises a notfittederror if the estimator wasn't fit before calling predict. ,added a compatibility layer for scikit-learn 0.18 using the new model_selection module while maintaining backwards compatibility to scikit-learn 0.17.,more rigorous type and shape checks in the evaluate.plot_decision_regions function,added recursive search parameter to mlxtend.file_io.find_files.,simplified code for columnselector.,added mlxtend.evaluate.bootstrap_point632_score to evaluate the performance of estimators using the .632 bootstrap. ,adds a verbose parameter to apriori to show the current iteration number as well as the itemset size currently being sampled. (#519,"added rosenblatt, gradient descent, and stochastic gradient descent perceptrons.",fixed an attributeerror issue when verbose > 1 in stackingclassifier,new function implementing the resampled paired t-test procedure to compare the performance of two models. ,new function implementing the 5x2cv paired t-test procedure proposed by dieterrich to compare the performance of two models. ,raise attributeerror in plot_decision_regions when the x_higlight argument is a 1d array ,added a function fpgrowth that implements the fp-growth algorithm for mining frequent itemsets as a drop-in replacement for the existing apriori algorithm. 
Version history â€” APScheduler 3.7.0 documentation,fixed regression introduced in 3.5.2: class methods were mistaken for instance methods and thus were broken during serialization,added a workaround for the importerror when used with pyinstaller and the likes ,adding jobs is now done exclusively through add_job the shortcuts to triggers were removed,fixed a problem where bound methods added as jobs via textual references were called with an unwanted extra self argument ,ensured that jitter is always non-negative to prevent triggers from firing more often than intended,dropped the max_runs option and run counting of jobs since it could not be implemented reliably,"it is now possible to add a job directly to an executor without scheduling, by omitting the trigger argument","split the old scheduler class into blockingscheduler and backgroundscheduler and added integration for asyncio , gevent, tornado, twisted and qt event loops",fixed regression: add_cron_job in scheduler was creating a crontrigger with the wrong parameters ,added better validation for the steps and ranges of different expressions in crontrigger,fixed methods inherited from base class could not be executed by processpool executor ,fixed iso 8601 utc offset information being silently discarded from string formatted datetimes by adding support for parsing them,raise a typeerror when fields with invalid names are passed to crontrigger ,"positional weekdays are now used with the day field, not weekday.",dropped official support for cpython 2.6 and 3.2 and pypy3,fixed blockingscheduler and backgroundscheduler shutdown hanging after the user has erroneously tried to start it twice,added the jitter options to intervaltrigger and crontrigger ,fixed inability to schedule wrapped functions with extra arguments when the wrapped function cannot accept them but the wrapper can ,added the end_date parameter to cron and interval triggers,fixed _run_job_error being called with the incorrect number of arguments in most executors,added the ability to pause and unpause the scheduler,replaced the thread pool with a pluggable executor system,added combining triggers ,fixed endless loop with crontrigger that may occur when the computer s clock resolution is too,"added __repr__ implementations to expressions, fields, triggers, and jobs to help with debugging",changed defaults for cron-style jobs to be more intuitive it will now default to all minimum values for fields lower than the least significant explicitly defined field,fixed a bug in cron expression lists that could cause valid firing times to be missed,fixed brokenpoolerror in processpoolexecutor so that it will automatically replace the broken pool with a fresh instance,"the scheduler now closes the job store that is being removed, and all job stores on shutdown by default",allowed jobs to be explicitly named,fixed crontrigger sometimes producing fire times beyond end_date when jitter is enabled ,built with sphinx using a theme provided by read the docs.,added optional job execution coalescing for situations where several executions of the job are due,fixed a v1.x design flaw that caused jobs to be executed twice when the scheduler thread was woken up while still within the allowable range of their previous execution time ,"fixed: if the scheduler is restarted, clear the stopped flag to allow jobs to be scheduled again","changed asyncioscheduler to obtain the event loop in start instead of __init__, to prevent situations where the scheduler won t run because it s using a different event loop than then one currently running",pinned tzlocal to a version compatible with pytz,improved import logic in ref_to_obj to avoid errors in cases where traversing the path with getattr would not work ,fixed positional weekday expressions not working except in some edge cases ,added the event_job_max_instances event that indicates a job s execution was skipped due to its maximum number of concurrently running instances being reached,made basescheduler.start raise a runtimeerror if running under uwsgi with threads disabled,fixed @scheduled_job not working when serialization is required ,migrated to setuptools_scm for versioning,added configurable job stores with several persistent back-ends ,added the time zone to the repr output of crontrigger and intervaltrigger,added support for timezones ,fixed infinite loop in the cron trigger when an out-of-bounds value was given in an expression,fixed handling of partial wrapped coroutine functions in asyncioexecutor and tornadoexecutor ,added an option to limit the maximum number of concurrently executing instances of the job,added setuptools as an explicit requirement in install requirements,made it possible to create weak references to job instances,made the schedulers explicitly raise a descriptive typeerror when serialization is attempted,fixed deprecation warnings on the mongodb job store and increased the minimum pymongo version to 3.0,fixed builtin id erroneously used in mongodbjobstore s joblookuperror,fixed zookeeper job store using backslashes instead of forward slashes for paths on windows ,fixed a corner case where the combination of hour and day_of_week parameters would cause incorrect timing for a cron trigger,added support for creating a crontrigger from a crontab expression,fixed pickling problems with persistent jobs when upgrading from 3.0.x,fixed valueerror when the target callable has a default keyword argument that wasn t overridden,added the event_job_submitted event that indicates a job has been submitted to its executor.,fixed time difference calculation to take into account shifts to and from daylight saving time,fixed crontrigger s range expressions sometimes allowing values outside the given range,dropped the shelve job store because it could not work with the new job store system,all triggers now accept dates in string form ,allowed unicode function references in python 2,added the possibility to listen for job events on a scheduler,a wider variety of target callables can now be scheduled so that the jobs are still serializable ,fixed cron trigger always coalescing missed run times into a single run time ,"removed autogenerated api documentation for modules which are not part of the public api, as it might confuse some users",fixed start date getting set too far in the future with a timezone different from the local one,fixed debug logging displaying the next wakeup time in the utc timezone instead of the scheduler s configured timezone,fixed overflowerror on qt scheduler when the wait time is very long,fixed compatibility with pymongo 3.0,dropped support for python 3.4,fixed overflowerror on windows when the wait time is too long,added support for named months in crontrigger month expressions,"to find out how to migrate your application from a previous version of apscheduler, see the migration section.",added a standalone mode that runs the scheduler in the calling thread,fixed memory leak due to a cyclic reference when jobs raise exceptions ,dropped support for python 3.3,cancel all pending futures when asyncioexecutor is shut down,switched to pypy 1.9 for pypy compatibility testing,fixed callable name detection for methods in old style classes,updated setup.cfg for compatibility with distutils2/packaging,added an optional start time for cron-style jobs,fixed table creation with sqlalchemyjobstore on mysql/innodb,fixed output from scheduler.print_jobs which did not previously output a line ending at the end,changed crontrigger constructor argument names to match those in scheduler,the tornado scheduler now uses tornadoexecutor as its default executor ,fixed potential where clause error in the sqlalchemy job store when a subclass uses more than one search condition,"added the ability to modify, reschedule, pause and resume jobs",fixed wrong run time being set for date trigger when the timezone isn t the same as the local one,the asyncio and tornado schedulers can now run jobs targeting coroutine functions are supported),attempting to serialize a non-serializable job now raises a helpful exception during serialization. thanks to jeremy morgan for pointing this out.,allowed configuration of misfire grace times on a per-job basis,"examples, documentation sources and unit tests are now packaged in the source distribution",fixed some events missing from apscheduler.events.__all__ and apscheduler.events.events_all,fixed scheduling of bound methods on persistent job stores ,"maximum run count can be configured for all jobs, not just those using interval-based scheduling",fixed cron style jobs getting wrong default values,deprecated the various version related variables in the apscheduler module ,fixed the persistent.py example by shutting down the scheduler on ctrl+c,added the ability to specify the table schema for sqlalchemyjobstore ,edit on github,resume_job methods in basescheduler and the corresponding methods in the job class,added the week option for cron schedules
Changelog â€” websockets 9.0 documentation,reorganized and extended documentation.,"for backwards compatibility, functions are still mostly supported, but mixing functions and coroutines won t work in some inheritance scenarios.","renamed serve and connect s klass argument to create_protocol to reflect that it can also be a callable. for backwards compatibility, klass is still supported.",rewrote http handling for simplicity and performance.,"in order to avoid stranding projects built upon an earlier version, the previous behavior can be restored by passing legacy_recv=true to serve, connect, websocketserverprotocol, or websocketclientprotocol. legacy_recv isn t documented in their signatures but isn t scheduled for deprecation either.",connect supports overriding host and port.,"in august 2017, firefox and chrome support it, but not safari and ie.",added support for customizing handling of incoming connections with process_request.,updated documentation with await and async syntax from python 3.5.,fixed creating a client or a server with an existing unix socket.,added process_request and select_subprotocol arguments to serve and websocketserverprotocol to customize process_request and select_subprotocol without subclassing websocketserverprotocol.,use local_address in servers and remote_address in clients instead of host and port.,"convenience imports from the websockets module are performed lazily. while this is supported by python, static code analysis tools such as mypy are unable to understand the behavior.",changed the origins argument to represent the lack of an origin with none rather than ''.,"the ping as in ping = await websocket.ping used to be canceled when the connection is closed, so that await ping raised cancellederror. now await ping raises connectionclosed like other public apis.",serve can be used as an asynchronous context manager on python 3.5.1.,fixed a regression in 5.0 that broke some invocations of serve and connect.,version 6.0 introduces the headers class for managing http headers and changes several public apis:,added support for providing and checking origin.,"added host, port and secure attributes on protocols.","when a release contains backwards-incompatible api changes, the major version is increased, else the minor version is increased. patch versions are only for fixing regressions shortly after a release.","version 8.0 deprecates the host , port , and secure attributes of websocketcommonprotocol.",improved support for sending fragmented messages by accepting asynchronous iterators in send.,"if you re passing a process_request argument to serve or websocketserverprotocol, or if you re overriding process_request in a subclass, define it with async def instead of def.","when implementing a server, which is the more popular use case, there s no strong reason to handle such exceptions. let them bubble up, terminate the handler coroutine, and the server will simply ignore them.","since headers and http.client.httpmessage provide similar apis, this change won t affect most of the code dealing with http headers.",updated documentation with new features from python 3.6.,version 8.0 drops compatibility with python 3.4 and 3.5.,a library for building websocket servers and clients in python with a focus on correctness and simplicity.,"headers and multiplevalueserror were moved from websockets.http to websockets.datastructures. if you re using them, you should adjust the import path.",added connectionclosedok and connectionclosederror subclasses of connectionclosed to tell apart normal connection termination from errors.,stopped leaking pending tasks when cancel is called on a connection while it s being closed.,connect can be used as an asynchronous context manager on python 3.5.1.,improved handling of multiple http headers with the same name.,compression should improve performance but it increases ram and cpu use.,"the client, server, protocol, and auth modules were moved from the websockets package to websockets.legacy sub-package, as part of an upcoming refactoring. despite the name, they re still fully supported. the refactoring should be a transparent upgrade for most uses when it s available. the legacy implementation will be preserved according to the backwards-compatibility policy.",added loop argument to connect and serve.,"added timeout, max_size, and max_queue arguments to connect and serve.",ping and pong support data passed as str in addition to bytes.,"if you want to disable compression, add compression=none when calling serve or connect.",this prevents confusion with ping_timeout.,a plain http request now receives a 426 upgrade required response and doesn t log a stack trace.,only documented apis are public. undocumented apis are considered private. they may change at any time.,the request_headers and response_headers attributes of websocketcommonprotocol are headers instead of http.client.httpmessage.,added compatibility with python 3.5.,functions defined in the http module now return http headers as headers instead of lists of pairs.,added compatibility with python 3.9.,added new examples in the documentation.,"websockets is intended for production use. therefore, stability is a goal.",allowed customizing handshake request and response http headers.,unix_serve can be used as an asynchronous context manager on python 3.5.1.,added compatibility with python 3.7.,iterating on incoming messages no longer raises an exception when the connection terminates with close code 1001 .,"if you depend on such tools, use the real import path, which can be found in the api documentation:",version 7.0 renames the timeout argument of serve and connect to close_timeout .,version 7.0 changes how a server terminates connections when it s closed with websocketserver.close .,"for backwards compatibility, timeout is still supported.",added support for iris in addition to uris.,functions defined in the handshake module now receive headers in argument instead of get_header or set_header functions. this affects libraries that rely on low-level apis.,"if you re upgrading from 2.x or earlier, please read this carefully.",allowed extra_headers to override server and user-agent headers.,now it raises a connectionclosed exception instead. this is more pythonic. the previous code can be simplified to:,an invalid response status code during connect now raises invalidstatuscode with a code attribute.,restored compatibility with mypy.,improved error messages when a required http header is missing.,version 9.0 moves or deprecates several apis.,added compatibility with python 3.8.,added support for sending fragmented messages.,"if you re upgrading from 1.x or earlier, please read this carefully.",changed websocketserver.close to perform a proper closing handshake instead of failing the connection.,websockets now sends ping frames at regular intervals and closes the connection if it doesn t receive a matching pong frame.,added the sockets attribute to the return value of serve.,added an optional c extension to speed up low-level operations.,restored the ability to pass a socket with the sock parameter of serve.,made read and write buffer sizes configurable.,prevented processing of incoming frames after failing the connection.,"when possible with reasonable effort, we preserve backwards-compatibility for five years after the release that introduced the change.",concurrent calls lead to non-deterministic behavior because there are no guarantees about which coroutine will receive which message.,"previously, it could be a function or a coroutine.",added local_address and remote_address attributes on protocols.,clarified that the closing handshake can be initiated by the client.,closed open connections with code 1001 when a server shuts down.,"added close codes 1012, 1013, and 1014.","previously, connections handlers were canceled. now, connections are closed with close code 1001 . from the perspective of the connection handler, this is the same as if the remote endpoint was disconnecting. this removes the need to prepare for cancellederror in connection handlers.",provided access to handshake request and response http headers.,version 4.0 was vulnerable to denial of service by memory exhaustion because it didn t enforce max_size when decompressing compressed messages .,ensured compatibility with python 3.6.,these apis used to be functions. now they re coroutines.,fixed issues with the packaging of the 9.0 release.,version 4.0 enables compression with the permessage-deflate extension.,added support for limiting message size.,"the framing, handshake, headers, http, and uri modules in the websockets package are deprecated. these modules provided low-level apis for reuse by other websocket implementations, but that never happened. keeping these apis public makes it more difficult to improve websockets for no actual benefit.",professionally-supported websockets is available with the tidelift subscription.,websocketcommonprotocol instances can be used as asynchronous iterators on python 3.6. they yield incoming messages.,use protocol.state.name instead of protocol.state_name.,"while we value stability, we value progress more. when an improvement requires changing a public api, we make the change and document it in this changelog.",connect performs http basic auth when the uri contains credentials.,avoided crashing on concurrent writes on slow connections.,"prevented spurious log messages about connectionclosed exceptions in keepalive ping task. if you were using ping_timeout=none as a workaround, you can remove it.",getting started,aligned maximum cookie size with popular web browsers.,version 8.0 adds the reason phrase to the return type of the low-level api read_response .,version 4.0 drops compatibility with python 3.3.,added unix_connect for connecting to unix sockets.,version 7.0 changes how a ping that hasn t received a pong yet behaves when the connection is closed.,fixed host header sent when connecting to an ipv6 address.,improved api documentation.,restored the ability to import websocketprotocolerror from websockets.,"send, ping, and pong support bytes-like types bytearray and memoryview in addition to bytes.",for enterprise,"version 2.0 introduces a backwards-incompatible change in the send, ping, and pong apis.",fixed issues with the packaging of the 4.0 release.,you can restore the previous behavior by adding the following line at the beginning of connection handlers:,aliases provide backwards compatibility for all previously public apis.,added support for subprotocols.,added basic_auth_protocol_factory to enforce http basic auth on the server side.,added unix_serve for listening on unix sockets.,connect handles redirects from the server during the handshake.,added a faq to the documentation.,reduced noise in logs caused by connection resets.,added flow control for outgoing data.,set the close code and reason more consistently.,process_request now receives a headers instead of a http.client.httpmessage in the request_headers argument.,improved documentation.,improved documentation.,version 5.0 fixes a security issue introduced in version 4.0.,version 9.0 may require changes if you use static code analysis tools.,added the closed property to protocols.,version 8.0 expects process_request to be a coroutine.,strengthened connection termination by simplifying the implementation.,documented how to optimize memory usage.,the raw_request_headers and raw_response_headers attributes of websocketcommonprotocol are removed. use raw_items instead.
Changelog - LSP Mode - LSP support for Emacs,lsp-define-stdio-client and lsp-define-tcp-client are replaced with lsp-register-client,imenu support is now handled asynchronously .,breaking change: bindings for commands under s were moved under w for better compatibility with spacemacs,performed several fixes to make sure lsp-mode is working fine with emacs 28 native compilation.,"lsp automatically enables and configures company-lsp, lsp-ui, yasnippet, or flymake if they are present so no additional configuration is needed except installing the packages. that behavior could be disabled by setting lsp-auto-configure to nil.",perform willsavewaituntil synchronously and with shorter timeout,lsp rely on projectile or project.el now only for suggesting project root. once you open new file in a project and start lsp it will provide several options. once you select a root it will be persisted and used for the next sessions.,language servers can now be disabled with the variable lsp-disabled-clients.,"support for theia-based semantic highlighting has been removed in favor of the semantictokens protocol specified by lsp 3.16. to enable it, set lsp-enable-semantic-highlighting to t.",introduced new command lsp-describe-session which replaces the existing one lsp-capabilities. the command lists the folders that are part of the workspace and the servers that are associated with the corresponding folder.,"dropped support for company-lsp, the suggested provider is company-capf.",add default keybindings and which-key integration,"add support for textdocument/preparerename. if supported by the language server, all renaming operations will be tested for validity.","lsp-mode ships with several predefined servers located in lsp-clients.el which does not require additional package. for the more complex language servers like eclipse jdt, ccls, cquery and haskell we still require separate package due to relatively high code base.","lsp-mode now logs to buffer *lsp-log*, instead of *messages*. this can be controlled with the variable lsp-log-max .",added lsp-modeline-workspace-status-mode and option to disable it via lsp-modeline-workspace-status-enable.,lsp-mode now have single entry point lsp for all language and based on the major mode starts the corresponding language servers.,lsp autoconfiguration adds company-lsp to the list of company backends instead of overriding it.,implement unified way to handle recurring lsp features,"add variable lsp-enabled-clients, which lets users set which defined clients are allowed to be used.",add lsp-dired-mode - integration between dired and lsp-mode,implement deferred semantic highlighting,started new set of integration tests without using ecukes,accommodate the new :end-column and :end-column from flycheck,"the variable lsp-print-io, when non-nil will cause lsp-mode to log all messages to and from the server to a unique *lsp-io* buffer for every project root. these logs can be saved to a file and viewed using the lsp inspector.","implement automatic downloading facilities and implemented auto-download for typescript-language-server, javascript-typescript-stdio and json-language-server.",add api level support for folding ranges. folding support for origami.el support is implemented by package lsp-origami.,made with material for mkdocs,breaking change: use alist instead of hast-tables for lsp-gopls-env and lsp-yaml-schemas.,add basic support for style semantic highlighting,"add breadcrumb on headerline . disabled by default, can be enabled via lsp-headerline-breadcrumb-enable",tramp implementation now uses tramp process instead of tcp sockets .,support for multiple language servers per single file and workspace.,"add variable lsp-symbol-highlighting-skip-current, which lets the user skip the current symbol when a given symbol is being highlighted.","if lsp-print-performance is non-nil, lsp-mode will log a corresponding performance trace to *lsp-log* for every message to and from the server.",reimplemented textdocument/signaturehelp - now the signature is displayed in lv buffer.,added lsp-find-definition-mouse and bound to c-<down-mouse-1>,moved completion features to lsp-completion.el,removed support for theia semantic highlighting protocol,"add hook lsp-after-uninitialized-hook, which stores the list of functions called after a language server has been uninitialized.",lsp-mode displays information about the running server and it's status in the modeline.,lsp-mode handles automatically server failures by asking the user whether he/she wants to restart the server.,added support for r language server ,implemented client side bindings for the protocol.,implemented special handling of clangd echo area.,add lsp-headerline-breadcrumb-mode which shows a breadcrumb with the document symbols on headerline when enabled.,support document links. this can be controlled using the variable lsp-enable-links.,added support for hdl checker server to lsp-vhdl,add lsp-headerline-breadcrumb-icons-enable to disable breadcrumb icons.,add new function lsp-disconnect.,"add modeline code actions support . enabled by default, use lsp-modeline-code-actions-enable to disable it.",fixed xref support for emacs 27+,add support for insert/replace when performing completion. when using company pressing c-u ret will perform the alternative action .,improve lsp-mode completion performance by suppressing non completion related features when completion is active.,added support for powershell language server.,enable headerline breadcrumb by default,added setting to disable additional text edits .,removed all synchronous calls from the server startup.,"support multiple signatures while displaying eldoc text. add variable lsp-signature-render-all, which when non-nil forces lsp-mode to only show the current active signature.",used view mode for metals doctor buffer,added emacs 26.x to ci,add support for workspace/configuration.,"add lua language server, lua-lsp and improve emmylua.",add support for crystal via scry .,added support for passing environment variables to language servers ,"if available, using the native json api introduced in emacs 27.1.",implemented debug adapter protocol support for metals,changed flymake to report the errors immediately after they arrive instead of waiting flymake to call lsp-mode.,migrated lsp-mode to use plists.,introduced lsp-diagnostics-mode.,add debounce when server does not support incremental updates.,add lsp-auto-save-changed-buffers which save the changed buffers after any text edit operation by lsp-mode.,implemented inlay hints for rust analyzer .,implemented support for running the language server in docker container over local files.,created an integration test suite for lsp-mode .,added erlang support via erlangls,changed lsp-mode settings to more sensible defaults.
What's New, config_msys.py and config.py os.popen is replaced with the newer, try again with os x and base_test.py.," close issue #237, memory overrun when text without descenders is rendered with underlining", lines with width>2 are now correct , of translating between py_buffer and the array interface are now found, new and upgraded importing , test runner that works with subprocess and threads to isolate tests.," added output example from lenard, and moved input example out of midi", and the addition of ffmpeg has been completed. this update leaves," image module is now builtin, but formats are optional"," about bdist_mpkg in setup, and also fixed an exception message", reworked locking code. locks are now more strict and can only be, small svn prop tweak with run_tests.py and ignore font_test.py for python, added surface.set_masks and .set_shifts useful for using data in, type operates simple and fast. thanks marcus!!, fixed some bugs in surface with srcalpha and input validation.," shows the performance of sprites, and is a good test.", and updating them every time that a new os is released would be a burden., pygame.surfarray now can change between numeric and numpy using the, fix midi channels changed default channel to 0 added to note_on and, replaced objective c with pyobjc code for macos x, fix bug where pybuffer_release is called after a python error is raised, os x now passes tests. see if the problem in base_test.py is with scrap., refactored midi.py example and added comments., numpy now takes priority over numeric in sndarry and surfarray., draw.lines was broken with sections outside clip, use filesystem encoding rather to decode paths rather than unicode_escape codec," fixed some warnings for font, and rotozoom with gcc4.", code compiles with macos now, all standard pygame extension modules compile and run with python 3.," added argv arguments to main too, and used pygame.quit.", run_tests.py improved with --help and running stuff in subprocesses., add keyword arguments to mixer.sound and improve unicode strings/, for a line with width > 1 and the end point y value less than the, replace ambiguous switch statement default clauses with specific comments, also using meth_noargs for functions with no arguments., the changes makes the module's ffmpeg includes consistent with ffmpeg itself., cd.play can now take an option start and end time," the modules coding style, include appropriate comments, and are", and exporting the new buffer interface at the python level. it is built, added polygon and ellipse to pygame.draw, mac builds fail: maybe using older versions of sdl_ttf or, updated examples so that they all have a main and use pygame.quit., rects now stored with ints , font and mixer now properly auto quit, which was making surface.fill with surfaces with no alpha go green, move locals.doc and remove redundant constant descriptions. instead refer, an example of using pygame with no windowing system. useful for webserver, fixed up test which was failing on ubuntu with python2.x.," internally, pygame has been rewritten to use the c py_buffer to represent", add svn properties to track which files are converted to python 3.x.," fixed up pygame.mask.from_surface, got color key, and perpixel alpha", new methods pygame.sndarray.use_arraytype and, so can work with other array like objects., because the libavformat and libswscale header subdirectories are in ffmpeg., yet more os x testing with base_test.py., chimp example and full tutorial added, correct faulty assertions added to the c code in changeset 67f1c85 and later, add _tags.py modules to pygame.tests. this is an alternative, enable freetype.font.get_rect to reuse layouts with render methods , uses mingw gcc 4.5.0 and msys 1.0.11. dependencies can now be built with python 3.1., extend buftools.exporter to allow an arbitrary format when an itemsize is given, replaces sdl's parachute with smarter python version, added pygame.mixer_music fake import in function to maybe help with py2app.," allows a 2d view for 24 bitsized arrays, even though not accepted", is more consistent with what people think clock.tick will do., pygame dependency build now replaces the configure, test module and running possibly problematic code. it also means, build newer versions of libogg and libvorbis into linux base images, draw.aaline now works with pixel alphas, new methods pygame.surfarray.use_arraytype and," pgdict_asbuffer, and pgexc_buffererror. these api additions also reduce"," psuedo ""configure"" and ""makefile"" for foolproof installs"," default font ""finding"" is smarter", added a little tool to help with creating whatsnew from svn logs.," besides creating views describing pixel2d, pixels3d, and pixels_alpha", display and surfaces protected from resolution <=0, fixed bug with transform.threshold not honoring third surface, remove an accidental colordict import introduced into __init__.py., pygame.surface is smarter with srcalpha flag, to be nicer about requiring pyobjc., created time.wait to work like old delay, current music is free'd when mixer is quit," thanks marcus, and thanks campbell barton for spotting them.", fixed to work with new test file layout. also imports modules if not, a work around for 8 bit samples being stereo reversed with sdl_mixer., with mingw., themselves. the __tags__ global is placed in the corresponding," close issue #243, for a string with trailing spaces, freetype ignores the last space in boundary calculations"," stopped releasing gil on png, and jpeg saving functions because"," updated portmidi config for unix and darwin. tested on ubuntu, not osx.", event may be called with keyword args and/or a dict, ensure local directories are specified last for precedence for unix," rectstyle now includes any object with a ""rect"" attrib", system to be built for python 3. it also improves error checking, added an example for fastevents., additions to font_test.py and sysfont.py., exception type and message when a font file was not found., replace or extract a certain color., added code from pyportmidi to be used from pygame.midi., os x problem with base_test.py isolated to scrap module. try a temporary, examples can be run from outside the examples directory.," also check the return value of mix_setpanning, and raise an", the freetype dll was not being copied into the site-packages/pygame dir on, undo accidental changes to setup.in and __init__.py., added pygame.key.get_repeat to see how holding keys down repeats. this is,"# svn revision numbers, and cvs tag names are placed before the date", changed the behaviour of clock.tick to use sdl_delay instead of a busy, - fix a bug with base.register_quit import that kept freetype, added a -warnings flag to setup.py for extra warnings with gcc., there's a unittest with some problems checked in., let surface methods accept and return color instances., coded dll file paths have been removed from setup.py. it now, add rect.copy method as per bugzilla feature request 25., ellipses and circles drawn inside given area, merge with avoid-internal-unittest, os x later. scrap not properly supported on os x anyway, some config changes to make scrap compile correctly on freebsd and debian., new pixelarray.replace and pixelarray.extract methods to quickly, new surfarray example and tutorial, newstyle fonts crashing with bad filenames , updated the configuration and build process under windows. in, refactor the casting between the c and types, added -x on lib files... should this be moved into the setup.py ?.," made it so we can use ctypes, instead of requiring win32 modules for the", add deprecation warning for numeric in surfarray and sndarray., automatically generate the version module with setup.py, added a runtime check for old unneeded files., fix for config_unix.py with wrong paths for /usr/local, added some notes about color instead of tuple for some surface functions., an array struct interface or the new buffer protocol. exports, undo bug introduced into setup.in for ffmpeg, was added to a new _arraysurfarray extension module., was added to a new _arraysurfarray extension module., bayer to rgb function. removes yuyv to rgb and yuv420 to yuv and rgb, new default buffer size is 4096. this was the implicit size anyway as, added start of midi module which uses portmidi., allow font.render with empty string, surfaces won't crash after display module is quit , and make_surface)., add argb support to fromstring and tostring, remove sharing between rwobject c module and external libraries, of many surfaces and also threshold an image by color., fixed odd case with locking subsurfaces, has to be drawn.," functionality into c code. pixelcopy is also independent of numpy,", font.render won't render underlines while smoothing , remove svn:executable tags and add setmods script to set executable, but can be console. the build progams will run from either the, allow switching the byte order of a python int to big or little endian, fixed locking and reference count leaks in numeric surfarray, added get_time and get_rawtime to clock, fix immediate returns for first time.delay and time.wait, surface raises a valueerror if the mask argument is rejected by sdl.," for completeness, and perhaps most importantly, fixes a bug in", use utf-8 filenames on linux systems claiming that the filesystem encoding is, a rewritten scrap module. hasn't been tested on osx/windows., add gfxdraw unit tests and fix uncovered bugs., color slicing works with python3 now too.," added a default font, used by passing none as font file"," allow all python modules to install with python 3.1, though some may not", adapt joystick and cdrom modules for python 3.1., remove test for font object state after re-initing with nonexistant path.," layeredupdates, and layereddirty groups. for using layers when"," updates for overlay. detect hardware accel and allow ""redisplay"".", fixed surface.set_colorkey with no args , making mac build with portmidi lib linked in., add get default device functions for midi module., started to add basic slice support to color type., removed smooth underline font render protection," allowed holding down the mouse, or key to scroll.", sprite groups are now iterators, added smart class to handle missing modules, bug in clock.tick was delaying double, merge with bob's inital macosx changes, the play functions of mixer.channel and mixer.sound both now take keyword, added subscript support to pixelarray and pixelarray.make_surface, imported as modules and run by their main functions. the package," close issue #242, freetype.font.get_rect ignores style defaults when the style argument is not given"," changed initializations, to allow easier embedding", horizontal transform.flip was reading pixels off by one , mixer.sound: fix spelling error in an error message and add no-arguments, update pygame event type to have mutable attributes as per feature request, pygame unit test framework now works with python 3.1. this includes the, calling set_mode will change all references to the display surface, removed color.py warning from symbian. it is used as wrapper for the, release the python global interpreter lock on delays and io, allowed passing in the destination surface to the transform.scale and, replace try...except blocks with if...else blocks in lib/compat.py because they execute slightly more quickly., fix bugzilla bug 24 where surfarray.blit_array fails with a, fix bugzilla bug 24 where surfarray.blit_array fails with a, added event.get_blocked function to query blocked types, for bitmap files freetype.font uses first available size as default , fixed a bug where dlls were not installed in the package directory., made the test code more compatible with python2.3., fixes bug in pygame.draw.line where the wrong rectangle was returned," marked camera, gfxdraw, and scrap as experimental in the docs."," added the draw module, with clipped line function"," font loading from file object patch, and test. thanks janosch graf"," fixed png saving, and saving jpeg with capital letter extensions", custom events work with event.peek and event.get, sysfont now accepts none like regular font, fixed test to not fail on osx which doesn't have midi devices by default.," added looping, scaling, and audio to for movies", for mingw/msys the build process now finds the msys and mingw, add automatic skip of unimplemented modules to run_tests.py framework., initial support for compiling on mac, house_lo.mp3 crashes smpeg on debian linux. remove from unit tests and add, added \#!/usr/bin/env python to the top of examples that didn't have it.,pip install, sprite.spritecollideany now works as described, - improve unicode handling so can handle all utf-32 characters, recompile pymp.pyx with cython. enable python 3.x support of midi module., documentation updated to include python modules too, add array_alpha and array_colorkey tests to surfarray_test.py., fixed another color regression... colors are now tasty again when pickled.," require locking, but have third-party locks attached.", rendering the sprites. layereddirty is an alternative to, fixed to work on pys60 1.9.4 the pygame python files are compiled into, fixes for windows music.get_pos and windows config, changed default chunk size for pygame.mixer to 1024*3. which is," array_colorkey, and map_surface to use new pixelcopy methods.", fixed mask settings for 8-bit surfaces created by, extension modules failed to raise an error when required modules," updated pygame.display.update to release the gil whilst doing things,"," and function. this changeset marks the end of a series of commits,", add bo jangeborg's cursor compile with added 'xor', made the error message nicer... and added checks for old py files too., update midi example to add animated keyboard keys., replace another ambiguous switch statement default clause, and why., missing readme.html in manifest.in causes install to fail, 64bit issues with surface.get_masks and uintfromobj., provided the file system encoding can handle it. it is also one more step, tests and fixes for midi. better validation input/output to avoid crashes., added in an extra debugging line... for testing with py2app., bufferproxy - which is a buffer interface only class. thanks marcus!, by the pygame.tests.go test framework without actually loading the, added another possible registry key where there might be fonts on win.," added pygame.vernum, a tuple of python version values", new surface.subsurface for shared surfaces, pygame.sndarray noew can change between numeric and numpy using the, correctly handle unicode filenames, - the pygame library is now zipped as well for better performance., only disable optimisations for msvc14, functions taking rgba colors can also accept mapped ints, add a music player example that used pygame.mixer.music," along with surface views, it moves almost all of the _numpysurfarray.py", for 16 bit surfaces make surfarray.array_alpha values consistent with those, updated msys config to use a fake porttime variable... so it builds again, use correct import name of test runner module when installed, color objects now support equality/inequality comparison with other, the sprite module has had some big changes from dr0id. it now has a," arguments, and accept a fade_ms argument that makes the sound fade in", can work with software surfaces before pygame.init, display surface protected from pygame.quit, add array tags to tests requiring numpy or numeric., smarter locking with subsurfaces, added scancode attribute to keyboard events. thanks quentin smith., added output class and atexit stuff similar to lenards code., adapt overlay for python 3.1; untested though importing doesn't crash, sdl_mixer. restore version conditional code in font and music modules.," add some comments, and a doc string to warn_unwanted_files.", fix reference counting problems with array interface, fixed up create_doc_from_py and updated a few documentation items., removing gfxdraw from compiling by default until get a chance to fix..., fixed bug with mixer.get_init thanks frankie robertson!, makeref.py with '--no-code-docs' feature to set empty module docstrings., that gets selected has volume set to full, added opengl support , cd.play fixed for tracks above 0, fix a new buffer format bug involving an item count of 1, added channel argument to note_on and note_off methods., all new_xx functions were added to pygame.locals, note that there is a similar bug remaining in the camera module., yuv420 reimplemented with formulas from libv4l., - removed unneeded buffer to save memory, added circle and rect convenciences to pygame.draw, also added better test to the mask test., minor fixes for glcube example, so other threads can do things whilst it's updating the screen.," failed to import, as can happen with an incomplete py2exe/py2app", added transform module , added pygame.movie module with mpeg video playback, the amount of conditional compilation code required to support python," added get_buffer methods to surface, and sound - which return a new", for the width or height set to 0 as supported by sdl >= 1.2.10.," a tool for finding out what is documented, and what isn't."," fixed in _numpysurfarray.py, ignored in deprecated _numericsurfarray.c.", written to setup are now windows paths for distutils. the hard," for issue #165, on quit tell it that the icon has not been set."," pygame.examples.chimp.main finishes, and for when run from idle.", merge in mac specific fixes, locking problem with 90 degree rotate ," external array objects. for python 2.5 and earlier, which do not support", 3 issues with executable packages., bug fix: red and green channels inversion on amd 64 ., subsurfaces inherit colorkey and alpha settings, documentation infers that mixer.init and mixer.pre_init have keyword, font module: improve unicode text handling: can now render unicode, - removed fade from slide animations to improve performance, line drawing functions now use an optional width,about, fix bug in pypixelarray tp_new function where weakrefs c field is clobbered, channels can send finished event for sounds, process lib/__init__.py with autopep8.," added transform.rotozoom, which uses builtin sdl_rotozoom", removed numeric compile time dependency., can free software surfaces without video initialized, mixer now uses the requested sample format/size, pixelarray from marcus. it's going to be a replacement for surfarray., arguments. added as per bugzilla issue 6., 1) extend pygame.mixer.sound to load samples from an object with," macosx, and windows binaries now use latest sdl 1.2.13", enhanced save function in image , pygame now builds for python 3.2. capsule objects are used in preference, set_icon overrides default icon, add gl_multisamplebuffers and gl_multisamplesamples, open files using unicode paths on windows, changed default font to helmet bold," added some new blend modes to blit. add,sub,mult,max,min.", clean up meth_noarg functions which were accidently given a second c, add color module for simple color manipulations, clean up some code we're no longer using, windows image copy/paste is working for scrap., started implementing basic unit tests, fix unicode bugs in font , added many extra empty test stubs for untested things. thanks nicholas!, pull out ffmpeg and smpeg dependencies, enable midi_test.py for python 3.x., buffer size values were rounded up the the nearest power of 2., added surface.get_flags and surface.get_pitch," fix segmentation fault with register_quit, bugzilla bug 20.", transform.scale2x. this is faster if reusing the surface., blit keeps sdl from crashing with alpha onto 8bit, rect unionall and unionall_ip fixed, mixer can queue sounds and music, fix crash with subsubsurface blits , make surfarray_test skip tests known to fail with numeric.," still need to get unittest, documentation and some more methods added.", array_alpha values incompatible with unmap_rgb for 16 bit surfaces -, update docs to reflect changes in r2855, added surfarray.make_surface, sdl_gfx used win32 macro instead of _win32 to detected windows.," remove distracting ""'pygame_c_api' defined but not used"" gcc warnings", fix a _movie module bug where the module fails to build under debian linux, appveyor.yml edited online with bitbucket, removed debug print from warn_unwanted_files., fix recursive subsurfaces and subsurface blit returns, fix issue 227. test_array_keyword in mixer_test.py fails when using disk as audio driver, fixes to always compile scrap on macosx., modules now forward import errors in the init function., added a fix for rotate on multiples of 90.0000001-90.99999 degrees., python level array interface support is added to several pygame objects, started adding test for pygame.sprite.spritecollide.
Release Notes :: NVIDIA Deep Learning DALI Documentation,the ascpu method is no longer available and has been replaced with as_cpu.,support operators were removed and their usage replaced with cpu operators. old support operators were converted to cpu operators.,"replaced hostdecoder and nvjpegdecoder with generic imagedecoder. imagedecoder is the recommended function for the image decoding, and the replaced apis hostdecoder and nvjpegdecoder will be removed in the future.",deprecated features,deprecated features,deprecated features,deprecated features,deprecated features,deprecated features,deprecated features,deprecated features,deprecated features,deprecated features,deprecated features,deprecated features,deprecated features,deprecated features,deprecated features,deprecated features,deprecated features,deprecated features,deprecated features,deprecated features,deprecated features,deprecated features,deprecated features,deprecated features,deprecated features,deprecated features,multiple input sets handling was removed from backend and is only python level syntactic sugar.,colortwist operator was deprecated and replaced by brightnesscontrast and hsv operators cleanup ,"dali comes with built-in plugins for key frameworks such as mxnet, tensorflow, and pytorch. this enables automatic integration with frameworks so that researchers and developers can get up and running with dali easily and quickly.","due to some known issues with meltdown/spectra mitigations and dali, dali shows best performance when run in docker with escalated privileges, for example:","due to some known issues with meltdown/spectra mitigations and dali, dali shows the best performance when running in docker with escalated privileges, for example:","due to some known issues with meltdown/spectra mitigations and dali, dali shows the best performance when running in docker with escalated privileges, for example:","due to some known issues with meltdown/spectra mitigations and dali, dali shows the best performance when running in docker with escalated privileges, for example:","due to some known issues with meltdown/spectra mitigations and dali, dali shows the best performance when running in docker with escalated privileges, for example:","due to some known issues with meltdown/spectra mitigations and dali, dali shows the best performance when running in docker with escalated privileges, for example:","due to some known issues with meltdown/spectra mitigations and dali, dali shows the best performance when running in docker with escalated privileges, for example:","due to some known issues with meltdown/spectra mitigations and dali, dali shows the best performance when running in docker with escalated privileges, for example:","due to some known issues with meltdown/spectra mitigations and dali, dali shows the best performance when running in docker with escalated privileges, for example:","due to some known issues with meltdown/spectra mitigations and dali, dali shows the best performance when running in docker with escalated privileges, for example:","due to some known issues with meltdown/spectra mitigations and dali, dali shows the best performance when running in docker with escalated privileges, for example:","due to some known issues with meltdown/spectra mitigations and dali, dali shows the best performance when running in docker with escalated privileges, for example:","due to some known issues with meltdown/spectra mitigations and dali, dali shows best performance when running in docker with escalated privileges, for example:","due to some known issues with meltdown/spectra mitigations and dali, dali shows best performance when running in docker with escalated privileges, for example:","due to some known issues with meltdown/spectra mitigations and dali, dali shows best performance when running in docker with escalated privileges, for example:","due to some known issues with meltdown/spectra mitigations and dali, dali shows best performance when running in docker with escalated privileges, for example:","due to some known issues with meltdown/spectra mitigations and dali, dali shows best performance when running in docker with escalated privileges, for example:","due to some known issues with meltdown/spectra mitigations and dali, dali shows best performance when running in docker with escalated privileges, for example:","due to some known issues with meltdown/spectra mitigations and dali, dali shows best performance when running in docker with escalated privileges, for example:",supportops are removed and cpu operators can now be used in their place ,"this is a beta release, therefore, not all functionality is fully supported and working. this beta release is meant for testing and research.","this is a beta release, therefore, not all functionality is fully supported and working. this beta release is meant for testing and research.","this is a beta release, therefore, not all functionality is fully supported and working. this beta release is meant for testing and research.",access to tensors of tensorlistcpu and tensorlistgpu with at was replaced by array subscript operator. ,the dali wheels for cuda 11 are built with cuda 11.1 and use enhanced compatibility to work with cuda 11.0 .,new operators with accompanying kernels for audio and signal processing:,added an example for using dali with multiple gpus.,key features and enhancements,key features and enhancements,key features and enhancements,key features and enhancements,key features and enhancements,key features and enhancements,key features and enhancements,key features and enhancements,key features and enhancements,key features and enhancements,key features and enhancements,key features and enhancements,key features and enhancements,key features and enhancements,key features and enhancements,key features and enhancements,key features and enhancements,key features and enhancements,key features and enhancements,key features and enhancements,key features and enhancements,key features and enhancements,key features and enhancements,key features and enhancements,key features and enhancements,key features and enhancements,key features and enhancements,key features and enhancements,key features and enhancements,key features and enhancements,key features and enhancements,key features and enhancements,key features and enhancements,key features and enhancements,key features and enhancements,key features and enhancements,key features and enhancements,key features and enhancements,"added checks to see if python api is not mixed between simple, scheduled and iterator apis.",added experimental support for aarch64 platform. note that this support is added only for the native part python is not supported yet.,the following features have been deprecated in this dali release:,here are the features that were deprecated in this release:,improved overlap support when using dali with multi-gpu in mxnet and pytorch.,this dali release includes the following key features and enhancements:,this dali release includes the following key features and enhancements:,this dali release includes the following key features and enhancements:,"to use dali with the tensorflow version that does not have a prebuilt plugin binary that is shipped with dali, make sure that the compiler that is used to build tensorflow exists on the system during the plugin installation. ","to use dali with the tensorflow version that does not have a prebuilt plugin binary that is shipped with dali, make sure that the compiler that is used to build tensorflow exists on the system during the plugin installation. ","to use dali with the tensorflow version that does not have a prebuilt plugin binary that is shipped with dali, make sure that the compiler that is used to build tensorflow exists on the system during the plugin installation. ","to use dali with the tensorflow version that does not have a prebuilt plugin binary that is shipped with dali, make sure that the compiler that is used to build tensorflow exists on the system during the plugin installation. ","to use dali with the tensorflow version that does not have a prebuilt plugin binary that is shipped with dali, make sure that the compiler that is used to build tensorflow exists on the system during the plugin installation. ","to use dali with the tensorflow version that does not have a prebuilt plugin binary that is shipped with dali, make sure that the compiler that is used to build tensorflow exists on the system during the plugin installation. ","to use dali with the tensorflow version that does not have a prebuilt plugin binary that is shipped with dali, make sure that the compiler that is used to build tensorflow exists on the system during the plugin installation. ","to use dali with the tensorflow version that does not have a prebuilt plugin binary that is shipped with dali, make sure that the compiler that is used to build tensorflow exists on the system during the plugin installation. ","to use dali with the tensorflow version that does not have a prebuilt plugin binary that is shipped with dali, make sure that the compiler that is used to build tensorflow exists on the system during the plugin installation. ","to use dali with the tensorflow version that does not have a prebuilt plugin binary that is shipped with dali, make sure that the compiler that is used to build tensorflow exists on the system during the plugin installation. ","to use dali with the tensorflow version that does not have a prebuilt plugin binary that is shipped with dali, make sure that the compiler that is used to build tensorflow exists on the system during the plugin installation. ",the dali tensorflow plugin might not be compatible with tensorflow versions 1.15.0 and later.,the dali tensorflow plugin might not be compatible with tensorflow versions 1.15.0 and later.,the dali tensorflow plugin might not be compatible with tensorflow versions 1.15.0 and later.,the dali tensorflow plugin might not be compatible with tensorflow versions 1.15.0 and later.,the dali tensorflow plugin might not be compatible with tensorflow versions 1.15.0 and later.,the dali tensorflow plugin might not be compatible with tensorflow versions 1.15.0 and later.,the dali tensorflow plugin might not be compatible with tensorflow versions 1.15.0 and later.,the dali tensorflow plugin might not be compatible with tensorflow versions 1.15.0 and later.,the dali tensorflow plugin might not be compatible with tensorflow versions 1.15.0 and later.,the dali tensorflow plugin might not be compatible with tensorflow versions 1.15.0 and later.,the dali tensorflow plugin might not be compatible with tensorflow versions 1.15.0 and later.,allowed dali to be compiled with clang .,pytorch and mxnet examples with various readers,added the customizable and decoupled executor stages. the cpu and gpu prefetch queues can now have different depths.,"the type of labels produced by the tensorflow plugin have changed. in dali version 0.1.2, it was always tf.float32. in this release, a new optional parameter called label_type is introduced to the tensorflow plugin to control the type of label. the default value for label_type is tf.int64 to better align with the label type in tfrecord.",dali tensorflow plugin may not be compatible with tensorflow versions 1.15.0 and/or later. if the user wants to use dali with tensorflow version which doesn t have prebuilt plugin binary shipped with dali it requires the gcc compiler that matches the one used to build tensorflow is present on the system.,dali tensorflow plugin may not be compatible with tensorflow versions 1.15.0 and/or later. if the user wants to use dali with tensorflow version which doesn t have prebuilt plugin binary shipped with dali it requires the gcc compiler that matches the one used to build tensorflow is present on the system.,"this is a beta release. all features are expected to be available, however, some aspects of functionality and performance will likely be limited compared to a non-beta release.","this is a beta release. all features are expected to be available, however, some aspects of functionality and performance will likely be limited compared to a non-beta release.","this is a beta release. all features are expected to be available, however, some aspects of functionality and performance will likely be limited compared to a non-beta release.","this is a beta release. all features are expected to be available, however, some aspects of functionality and performance will likely be limited compared to a non-beta release.","this is a beta release. all features are expected to be available, however, some aspects of functionality and performance will likely be limited compared to a non-beta release.","this is a beta release. all features are expected to be available, however, some aspects of functionality and performance will likely be limited compared to a non-beta release.",this dali release includes the following key features and enhancements.,this dali release includes the following key features and enhancements.,this dali release includes the following key features and enhancements.,this dali release includes the following key features and enhancements.,this dali release includes the following key features and enhancements.,this dali release includes the following key features and enhancements.,this dali release includes the following key features and enhancements.,this dali release includes the following key features and enhancements.,this dali release includes the following key features and enhancements.,this dali release includes the following key features and enhancements.,this dali release includes the following key features and enhancements.,this dali release includes the following key features and enhancements.,this dali release includes the following key features and enhancements.,this dali release includes the following key features and enhancements.,this dali release includes the following key features and enhancements.,this dali release includes the following key features and enhancements.,this dali release includes the following key features and enhancements.,this dali release includes the following key features and enhancements.,this dali release includes the following key features and enhancements.,this dali release includes the following key features and enhancements.,this dali release includes the following key features and enhancements.,this dali release includes the following key features and enhancements.,this dali release includes the following key features and enhancements.,this dali release includes the following key features and enhancements.,this dali release includes the following key features and enhancements.,this dali release includes the following key features and enhancements.,this dali release includes the following key features and enhancements.,this dali release includes the following key features and enhancements.,this dali release includes the following key features and enhancements.,this dali release includes the following key features and enhancements.,this dali release includes the following key features and enhancements.,this dali release includes the following key features and enhancements.,this dali release includes the following key features and enhancements.,this dali release includes the following key features and enhancements.,this dali release includes the following key features and enhancements.,"the api for the tensorflow plugin changed to allow specifying the whole shape of the tensor instead of n, h, and w separately; which enables handling both nchw and nhwc outputs.",updated examples with coco data set and fix reader behavior for padding ,enhanced the video reader to link dynamically with the cuda driver api and nvcuvid.,new and updated examples:,"operators can be used directly with a single call, no need to create an instance with a constructor.",the dali tensorflow plugin may not be compatible with tensorflow versions 1.15.0 and/or later. if the user wants to use dali with the tensorflow version which doesn t have prebuilt plugin binary shipped with dali it requires the gcc compiler that matches the one used to build tensorflow is present on the system.,the dali tensorflow plugin may not be compatible with tensorflow versions 1.15.0 and/or later. if the user wants to use dali with the tensorflow version which doesn t have prebuilt plugin binary shipped with dali it requires the gcc compiler that matches the one used to build tensorflow is present on the system.,the dali tensorflow plugin may not be compatible with tensorflow versions 1.15.0 and/or later. if the user wants to use dali with the tensorflow version which doesn t have prebuilt plugin binary shipped with dali it requires the gcc compiler that matches the one used to build tensorflow is present on the system.,the dali tensorflow plugin may not be compatible with tensorflow versions 1.15.0 and/or later. if the user wants to use dali with the tensorflow version which doesn t have prebuilt plugin binary shipped with dali it requires the gcc compiler that matches the one used to build tensorflow is present on the system.,the dali tensorflow plugin may not be compatible with tensorflow versions 1.15.0 and/or later. if the user wants to use dali with the tensorflow version which doesn t have prebuilt plugin binary shipped with dali it requires the gcc compiler that matches the one used to build tensorflow is present on the system.,the dali tensorflow plugin may not be compatible with tensorflow versions 1.15.0 and/or later. if the user wants to use dali with the tensorflow version which doesn t have prebuilt plugin binary shipped with dali it requires the gcc compiler that matches the one used to build tensorflow is present on the system.,the dali tensorflow plugin may not be compatible with tensorflow versions 1.15.0 and/or later. if the user wants to use dali with the tensorflow version which doesn t have prebuilt plugin binary shipped with dali it requires the gcc compiler that matches the one used to build tensorflow is present on the system.,fixed an interoperability issue with pycuda. now dali will not interfere with pycuda s cuda context management.,"extended the slice and crop family of operators with out-of-bounds policies, which provides support for padding and trimming to existing shape .",normalizepermute is replaced by the new cropmirrornormalize.,improve how iterators count padded samples based on the reader - the provided iterators can now query reader for the epoch size and sharding and handle the shard size changing from epoch-to-epoch when it's not evenly divisible by number of shards and batch size. refer to advanced topics for more information.,"cropmirrornormalize, and",these apis allow you to use the copy kernel and reduce the amount of copied memory and to use the copy kernel in shareuserdata .,new operators and extended functionality of the following:,"the split implementation of decoders.image was removed, and the split_stages and use_chunk_allocator arguments have been deprecated.",added the tensorflow operator api to allow defining an arbitrary number of outputs and their types.,dali 0.4 is not compatible with tensorflow 1.11. this will be addressed in the next release.,introduced cpu variant of resize operator and added stand-alone flip operator.,"the dali 0.7 can be used with the 19.03 nvidia gpu cloud optimized container for mxnet, pytorch, and tensorflow.",changed outputs and sharedouputs return type to tuple ,the dali package name now adds -cuda110 and -cuda100 suffixes to indicate the cuda version and allows the hosting of all packages under one pip index.,the dali package name now adds -cuda110 and -cuda100 suffixes to indicate the cuda version and allows the hosting of all packages under one pip index.,the dali package name now adds -cuda110 and -cuda100 suffixes to indicate the cuda version and allows the hosting of all packages under one pip index.,removed the need to have gpu available when dali is just imported. ,there are no deprecated features in this release.,there are no deprecated features in this release.,"the dali 0.12.0 can be used with the 19.08 nvidia gpu cloud optimized container for mxnet, pytorch, and tensorflow. also, the 19.08 container will be shipped with dali 0.12.0.",python operators for gpu with examples ,tiffimage::peekshapeimpl parse and return number of channels ,"readers can be set to read files directly instead of using mmap, which improves network filesystem performance .","the dali 0.8 can be used with the 19.03 nvidia gpu cloud optimized container for mxnet, pytorch, and tensorflow. also, the 19.04 container will be shipped with dali 0.8.",added support surfaces with strides over 2g .,added integration with paddlepaddle.,the dali integrated resnet-50 samples in the 18.08 ngc tensorflow and pytorch containers have lower than expected accuracy and performance results. we are working to address the issue in the next release.,"note: the internal dali c++ api used for operator s implementation, and the c++ api that enables using dali as a library from native code, is not yet officially supported. hence these apis may change in the next release without advance notice.","note: the internal dali c++ api used for operator s implementation, and the c++ api that enables using dali as a library from native code, is not yet officially supported. hence these apis may change in the next release without advance notice.","note: the internal dali c++ api used for operator s implementation, and the c++ api that enables using dali as a library from native code, is not yet officially supported. hence these apis may change in the next release without advance notice.","note: the internal dali c++ api used for operator s implementation, and the c++ api that enables using dali as a library from native code, is not yet officially supported. hence these apis may change in the next release without advance notice.","note: the internal dali c++ api used for operator s implementation, and the c++ api that enables using dali as a library from native code, is not yet officially supported. hence these apis may change in the next release without advance notice.","note: the internal dali c++ api used for operator s implementation, and the c++ api that enables using dali as a library from native code, is not yet officially supported. hence these apis may change in the next release without advance notice.","note: the internal dali c++ api used for operator s implementation, and the c++ api that enables using dali as a library from native code, is not yet officially supported. hence these apis may change in the next release without advance notice.","note: the internal dali c++ api used for operator s implementation, and the c++ api that enables using dali as a library from native code, is not yet officially supported. hence these apis may change in the next release without advance notice.","note: the internal dali c++ api used for operator s implementation, and the c++ api that enables using dali as a library from native code, is not yet officially supported. hence these apis may change in the next release without advance notice.","note: the internal dali c++ api used for operator s implementation, and the c++ api that enables using dali as a library from native code, is not yet officially supported. hence these apis may change in the next release without advance notice.","note: the internal dali c++ api used for operator s implementation, and the c++ api that enables using dali as a library from native code, is not yet officially supported. hence these apis may change in the next release without advance notice.","note: the internal dali c++ api used for operator s implementation, and the c++ api that enables using dali as a library from native code, is not yet officially supported. hence these apis may change in the next release without advance notice.","note: the internal dali c++ api used for operator s implementation, and the c++ api that enables using dali as a library from native code, is not yet officially supported. hence these apis may change in the next release without advance notice.","note: the internal dali c++ api used for operator s implementation, and the c++ api that enables using dali as a library from native code, is not yet officially supported. hence these apis may change in the next release without advance notice.","note: the internal dali c++ api used for operator s implementation, and the c++ api that enables using dali as a library from native code, is not yet officially supported. hence these apis may change in the next release without advance notice.","note: the internal dali c++ api used for operator s implementation, and the c++ api that enables using dali as a library from native code, is not yet officially supported. hence these apis may change in the next release without advance notice.","note: the internal dali c++ api used for operator s implementation, and the c++ api that enables using dali as a library from native code, is not yet officially supported. hence these apis may change in the next release without advance notice.","note: the internal dali c++ api used for operator s implementation, and the c++ api that enables using dali as a library from native code, is not yet officially supported. hence these apis may change in the next release without advance notice.",removed the prebuilt version of tensorflow plugin for dali. now it is always necessary to install a separate nvidia-dali-tf-plugin package. see binary installation.,"started publishing dali nightly builds for cuda 9 and cuda 10, and weekly for cuda 10.","tensor layout and layout refactor - new, domain agnostic, flexible description of a tensor layout that is compatible with string representation.",extended the following c apis to copy output and input samples:,"the dali 0.8.1 can be used with the 19.04 nvidia gpu cloud optimized container for mxnet, pytorch, and tensorflow. also, the 19.05 container will be shipped with dali 0.9.",enabled additional codecs and demuxers in ffmpeg .,"dali offers both performance and flexibility of accelerating different data pipelines , as a single library, that can be easily integrated into different deep learning training and inference applications.",improved support for labels in videoreader - now the user can provide labels for selected frame ranges as well as obtain frame numbers and timestamps. ,"dali supports multiple input data formats that are commonly used in computer vision deep learning applications, for example, jpeg images, raw formats, lightning memory-mapped database , recordio and tfrecord. the flexibility of input data formats allows portability of training workflows across different frameworks and models, and helps to avoid intermediate data conversion steps. dali enables better code reuse and maintainability with optimized building blocks and support for different data formats.",removed the deprecated use of ltrb in bboxrandomcrop .,python 3.5 is no longer supported by the official dali wheels.,python 3.5 is no longer supported by the official dali wheels.,removed the following deprecated operators:,added a new optimized implementation for cropmirrornormalize for cpu and gpu.,refer to loading data fast with dali and the new hardware jpeg decoder in nvidia a100 gpus for more information.,"random seed type changed from int to int64, therefore, serialized pipelines from versions prior to 0.5 are not compatible with the current dali version.",the nvjpeg decoder now has split variants. the cpu and gpu part can be concurrently executed and independently prefetched.,audio decoder extended with resampling and downmixing ,fixed the length that was reported by dali firmware iterators when the drop policy is used .,cat and stack operators to concatenate and stack tensors for the cpu and the gpu .,"the 19.01 nvidia gpu cloud optimized container for mxnet, pytorch, and tensorflow includes an older version of dali.",added the ability to read video files together with labels.,"the dali 0.10.0 can be used with the 19.06 nvidia gpu cloud optimized container for mxnet, pytorch, and tensorflow. also, the 19.06 container will be shipped with dali 0.10.0.","the dali 0.13.0 can be used with the 19.08 nvidia gpu cloud optimized container for mxnet, pytorch, and tensorflow. also, the 19.08 container will be shipped with dali 0.13.0.",randomresizedcrop: enabled channel-first and video support + add tests ,added clear mapping between operators and the supported device types in the api documentation.,"added an argument deprecation mechanism and deprecated ""image_type"" in crop, slice, and cropmirrornormalize .",fixed problems with seeking when stream start_time is != 0. ,ensure you are familiar with the following notes when using this release.,"one dali wheel can be used with all supported python versions, including 3.5, 3.6, 3.7 and 3.8.",added support for unary ops: + and - ,"note: the internal dali c++ api used for operators implementation, and the c++ api that enables using dali as a library from native code, are not yet officially supported. hence these apis may change in the next release without advance notice.","note: the internal dali c++ api used for operators implementation, and the c++ api that enables using dali as a library from native code, are not yet officially supported. hence these apis may change in the next release without advance notice.","note: the internal dali c++ api used for operators implementation, and the c++ api that enables using dali as a library from native code, are not yet officially supported. hence these apis may change in the next release without advance notice.","note: the internal dali c++ api used for operators implementation, and the c++ api that enables using dali as a library from native code, are not yet officially supported. hence these apis may change in the next release without advance notice.","note: the internal dali c++ api used for operators implementation, and the c++ api that enables using dali as a library from native code, are not yet officially supported. hence these apis may change in the next release without advance notice.","note: the internal dali c++ api used for operators implementation, and the c++ api that enables using dali as a library from native code, are not yet officially supported. hence these apis may change in the next release without advance notice.","note: the internal dali c++ api used for operators implementation, and the c++ api that enables using dali as a library from native code, are not yet officially supported. hence these apis may change in the next release without advance notice.","note: the internal dali c++ api used for operators implementation, and the c++ api that enables using dali as a library from native code, are not yet officially supported. hence these apis may change in the next release without advance notice.","note: the internal dali c++ api used for operators implementation, and the c++ api that enables using dali as a library from native code, are not yet officially supported. hence these apis may change in the next release without advance notice.","note: the internal dali c++ api used for operators implementation, and the c++ api that enables using dali as a library from native code, are not yet officially supported. hence these apis may change in the next release without advance notice.","note: the internal dali c++ api used for operators implementation, and the c++ api that enables using dali as a library from native code, are not yet officially supported. hence these apis may change in the next release without advance notice.",support for epsilon and delta degrees of freedom arguments for the normalize operator ,added a new json parser now coco reader start up time is significantly faster .,there are no deprecated features in this dali release.,added more verbose error messages to hostdecoder and nvjpegdecoder.,"the dali 0.14.0 can be used with the 19.09 nvidia gpu cloud optimized container for mxnet, pytorch, and tensorflow.",dali tensorflow plugin may be not compatible with tensorflow 1.14.0 release. the dali tensorflow plugin requires that the gcc compiler that matches the one used to build tensorflow be present on the system.,dali tensorflow plugin may be not compatible with tensorflow 1.14.0 release. the dali tensorflow plugin requires that the gcc compiler that matches the one used to build tensorflow be present on the system.,dali tensorflow plugin may be not compatible with tensorflow 1.14.0 release. the dali tensorflow plugin requires that the gcc compiler that matches the one used to build tensorflow be present on the system.,dali tensorflow plugin may be not compatible with tensorflow 1.14.0 release. the dali tensorflow plugin requires that the gcc compiler that matches the one used to build tensorflow be present on the system.,pytorch and mxnet python iterators api have changed - check the examples for the reference.,"note: if you are using the 18.07 ngc optimized container for mxnet, pytorch, or tensorflow, you do not need to reinstall dali. dali now comes included in the container. instead, start with the getting started tutorial.",new and improved operators:,added resnet50 example with tensorflow.,updated to nvjpeg v0.1.2 to fix batched decoding when a batch contains both gray-scale and color images.,"added fallback to host decoder when image is not jpeg but png instead. for example, n02105855_2933.jpeg from imagenet.",allows for more generic shapes to be provided as argument inputs,added support for reading video files with labels using file_list argument.,"internal python pipeline api has changed. if any function _* was used, then that function should be updated to reflect the new semantic.","reworked the resize operator family, including video, channel-first, roi, and multiple-type support with the new resize tutorial .",fixed the global state problems when there is more than one transpose gpu operator .,improved error messages and added information about the operator of origin .,deprecated the following as noted below:,fixed transpose bugs - degenerate dims and non-uniform batch on gpu ,the dali integrated resnet-50 samples in the 18.10 ngc tensorflow and pytorch containers may result in lower than expected performance results. we are working to address the issue in the next release.,the dali integrated resnet-50 samples in the 18.10 ngc tensorflow and pytorch containers may result in lower than expected performance results. we are working to address the issue in the next release.,rewrote all examples to use the functional api .,allowed seed to be set for serialized pipeline ,"to upgrade to dali 0.31 from an older version of dali, follow the installation and usage information in the dali user guide.","the dali 0.9.1 can be used with the 19.05 nvidia gpu cloud optimized container for mxnet, pytorch, and tensorflow. also, the 19.05 container will be shipped with dali 0.9.1.","the dali 0.11.0 can be used with the 19.07 nvidia gpu cloud optimized container for mxnet, pytorch, and tensorflow. also, the 19.07 container will be shipped with dali 0.11.0.","the 19.01 nvidia gpu cloud optimized container for mxnet, pytorch, and tensorflow includes an older version of dali. to upgrade to dali 0.6 beta, follow the installation instructions in the dali quick start guide.",added the ability to automatically reset mxnet and pytorch python iterators.,an example of random_mask_pixel was updated to perform biased random crop .,"added pipeline_def decorator, which is an easier way to define a pipeline with the functional api .","to upgrade to dali 0.25.0 from an older version of dali, follow the installation and usage information in the dali user guide.","numpyreader: to fix abi incompatibility issues, replaced the std::regex with custom implementation .",added mask processing to the coco reader with an augmentations example .,support is now available for the ampere hardware jpeg decoder.,this is a patch release that contains only fixes.,"to upgrade to dali 1.1.0 from an older version of dali, follow the installation and usage information in the dali user guide.",the following new operators are now available:,used a different stream base for different videos so it is possible to decode videos with a different time base at the same time. ,"to upgrade to dali 0.27.0 from an older version of dali, follow the installation and usage information in the dali user guide.",the pipeline constructor signature has changed; an additional argument was added to allow defining depth of the prefetch queue at runtime.,the dali integrated resnet-50 samples in the 18.09 ngc tensorflow and pytorch containers may result in lower than expected performance results. we are working to address the issue in the next release.,"to upgrade to dali 0.30.0 from an older version of dali, follow the installation and usage information in the dali user guide.","nvidia data loading library accelerates the preprocessing of input data for deep learning applications. by offloading augmentations onto gpus, dali addresses performance bottlenecks in today s computer vision deep learning applications that include complex, multi-stage data augmentation steps. with dali beta release, deep learning researchers can scale training performance on image classification models such as resnet-50 with mxnet, tensorflow, and pytorch across amazon web services p3 8 gpu instances or dgx-1 systems with volta architecture. framework developers will have less duplication due to better code reuse and maintainability.",added a new package nvidia-dali-tf-plugin that allows user to compile dali tensorflow plugin using the locally installed version.,"dali 0.17 is the last official release for python 2.7, which reaches the end of life on january 1st, 2020. to stay up to date with dali, upgrade to python 3.5 or later.","dali 0.17 is the last official release for python 2.7, which reaches the end of life on january 1st, 2020. to stay up to date with dali, upgrade to python 3.5 or later.","this is important only for installation, and the dali module in python is still `nvidia.dali` regardless of the cuda version. refer to the installation section in the dali user guide for more information.","this is important only for installation, and the dali module in python is still `nvidia.dali` regardless of the cuda version. refer to the installation section in the dali user guide for more information.",fixed compatibility with tensorflow 1.9.,sequence and 3d support in flip operator ,added python function operator. now the user can create a python-based operator that accepts one input and produces one output.,add parsing of number of channels in jpegimage::peekshapeimpl ,applied layout and editorial changes .,"on file systems where the directory entries are not stored in any order, the file reader may assign different labels to the training and validation folders with the same name. this will be fixed in the next release.",python .cpu function for edgereference was removed to reduce confusion. ,added the ability to return sparse tensor on cpu for tf dali op.,added support for dali to work with float16 data passed from python.,"to upgrade to dali 0.22.0 beta from an older version of dali, follow the installation and usage information in the dali user guide.",refactored and unified the following rng operators:,added cuda api checks in utility functions and tests .,"to upgrade to dali 1.0.0 from an older version of dali, follow the installation and usage information in the dali user guide.",python 3.9 is now enabled .,"to upgrade to dali 0.23.0 beta from an older version of dali, follow the installation and usage information in the dali user guide.",the following reductions for the cpu and the gpu :,fn.audio_decoder/ops.audiodecoder has been renamed to fn.decoders.audio/ops.decoders.audio.,"to upgrade to dali 0.25.1 from an older version of dali, follow the installation and usage information in the dali user guide.",added new variants of the below existing operators:,"to interact with the code via github, see the getting started tutorial.",deprecate the squeeze_labels option from mxnet iterator and enhanced the .squeeze function to match the numpy-style interface ,"to upgrade to dali 0.28.0 from an older version of dali, follow the installation and usage information in the dali user guide.","expanded examples of tensorflow working with different readers, such as, mxnetreader, filereader, and tfrecordreader.",extended external source operator capacity - it now requires input to be set for every iteration.,deprecated `output_dtype` and use `dtype` .,improved error checking with external libraries .,"to upgrade to dali 0.29.0 from an older version of dali, follow the installation and usage information in the dali user guide.",implemented several fixes in the documentation and build system.,simplified usage of externalsource - it accepts callbacks or generators as a parameter.,"to upgrade to dali 0.26.0 from an older version of dali, follow the installation and usage information in the dali user guide.","on dense gpu systems, deep learning applications can be significantly bottlenecked on the cpu, limiting the overall performance and scalability of training and inference tasks. dali enables offloading key deep learning augmentation steps on to gpus, alleviating cpu bottleneck on the deep learning preprocessing pipelines. this results in out-of-box performance of overall training workflow and efficient utilization of multi-gpu resources on the system.","to upgrade to dali 0.24.0 from an older version of dali, follow the installation and usage information in the dali user guide.",improved the resize operator to support bilinear and triangular resampling. this improves the quality during aggressive down-scaling.,introduced the following named slice operator arguments :,fn.file_reader/ops.filereader has been renamed to fn.readers.file/ops.readers.file.,introduced experimental functional api ,fixed tocontiguousxxx for more than 2 inputs. ,"the 18.10 nvidia gpu cloud optimized container for mxnet, pytorch, and tensorflow, includes an older version of dali. to upgrade to dali 0.4.1 beta, follow the installation instructions in the dali quick start guide.","added step, stride and shuffling in sequencereader.",fn.video_reader_resize/ops.videoreaderresize has been renamed to fn.readers.video_resize/ops.readers.videoresize.,gpu and initial multi-gpu support,"added basic operators for detection , such as coco dataset reader , random crop operator with bounding boxes , and flip operator for bounding boxes .",improved the performance of nvjpeg decoder with new internal api to match the previous implementation. see nvidia.dali.ops.nvjpegdecoder.,"added the images argument for the cocoreader, which allows for the custom ordering of images and fixed a bug in the segmentation data parsing .",gpu and cpu spectrogram ,ops.uniform was moved to ops.random.uniform.,"added sphinx based documentation that is in sync with the code on github. for more information, see dali master branch user guide.",pad: added support for the per-sample shape and alignment requirements ,reduced the size of the underlying allocation for non-pinned host buffers when the new size is less than 90% of current allocation size. added several options for memory usage configuration - up to 50% reduction in some cases.,extended shape support in dali dataset for tensorflow ,added comparison operators and bool handling in arithmetic ops ,added jupyter notebooks with example usage of arithmetic ops ,added the segmentation.randommaskpixel operator to create random masks that contain foreground pixels .,"pytorch iterator returns the exact number of samples per epoch, so the final batch could be smaller if epoch size is not divisible by the batch size. to keep the old behaviour when data is wrapped up, use stop_at_epoch argument.","the 18.09 nvidia gpu cloud optimized container for mxnet, pytorch, and tensorflow, includes an older version of dali. to upgrade to dali 0.4 beta, follow the installation instructions in the dali quick start guide.",these transformations can be applied to the data by using the coordtransform operator .,"resumed shipping the prebuilt version of the tensorflow plugin as a part of nvidia-dali-tf-plugin . with this fix, the user must first install nvidia-dali-tf-plugin package. when this package is installed, one of the prebuilt binaries of the tensorflow plugin is selected. see binary installation.",hsv manipulation operator for gpu and cpu ,cuda 11 build scripts for dali were added ,"to upgrade to dali 0.20.0 beta from an older version of dali, follow the installation instructions in the dali quick start guide.","to upgrade to dali 0.12.0 beta from an older version of dali, follow the installation instructions in the dali quick start guide.","the 18.08 nvidia gpu cloud optimized container for mxnet, pytorch, and tensorflow, includes an older version of dali. to upgrade to dali 0.2 beta, follow the installation instructions in the dali quick start guide.","the 18.08 nvidia gpu cloud optimized container for mxnet, pytorch, and tensorflow, includes an older version of dali. to upgrade to dali 0.2 beta, follow the installation instructions in the dali quick start guide.","to upgrade to dali 0.10.0 beta from an older version of dali, follow the installation instructions in the dali quick start guide.","if the key frames occur at a frequency that is less than 10-15 frames, the returned frames might be out of sync.","if the key frames occur at a frequency that is less than 10-15 frames, the returned frames might be out of sync.","if the key frames occur at a frequency that is less than 10-15 frames, the returned frames might be out of sync.","if the key frames occur at a frequency that is less than 10-15 frames, the returned frames might be out of sync.","if the key frames occur at a frequency that is less than 10-15 frames, the returned frames might be out of sync.","if the key frames occur at a frequency that is less than 10-15 frames, the returned frames might be out of sync.","if the key frames occur at a frequency that is less than 10-15 frames, the returned frames might be out of sync.","if the key frames occur at a frequency that is less than 10-15 frames, the returned frames might be out of sync.","if the key frames occur at a frequency that is less than 10-15 frames, the returned frames might be out of sync.","if the key frames occur at a frequency that is less than 10-15 frames, the returned frames might be out of sync.","if the key frames occur at a frequency that is less than 10-15 frames, the returned frames might be out of sync.",there is no clear distinction in the documentation between the operators supporting video sequences and the operators supporting images.,"to upgrade to dali 0.18.0 beta from an older version of dali, follow the installation instructions in the dali quick start guide.",reader sampling from shuffling buffer was adjusted. now samples are not mixed between epochs.,adjusted operator::run to take reference instead of pointer .,added a supported matrix to the documentation .,"to upgrade to dali 0.13.0 beta from an older version of dali, follow the installation instructions in the dali quick start guide.",this dali release includes the following known issues:,this dali release includes the following known issues:,coordtransform operator for applying a linear transformation to points or vectors .,"to upgrade to dali 0.7 beta from an older version of dali, follow the installation instructions in the dali quick start guide.","to upgrade to dali 0.16.0 beta from an older version of dali, follow the installation instructions in the dali quick start guide.","roirandomcrop cpu, where an operator is required to perform the biased random crop in segmentation applications .","to upgrade to dali 0.17.0 beta from an older version of dali, follow the installation instructions in the dali quick start guide.",improved transforms.rotation to accept scalar inputs .,"the 18.07 optimized container for mxnet, pytorch, and tensorflow, includes an older version of dali. to upgrade to dali 0.2 beta, follow the installation instructions in the dali quick start guide.",the api for the resize operator changed to match other similar operators like resizecropmirror.,"to upgrade to dali 0.15.0 beta from an older version of dali, follow the installation instructions in the dali quick start guide.","affine transform generators, which are operators that generate scale, rotate, shear, translate, and crop transform matrices and crop transform matrices.",the cocoreader api now outputs relative mask polygon coordinates when the option ratio is set to true .,"added the ability to provide more than one input to, and return more than one output from, a python-based operator.","python 2.7 is no longer available. to stay up-to-date with dali, upgrade to python 3.5 or later.","this is a beta release. hence, for all the features, the functionality and performance will likely be limited.",fixed conversions to int64 and uint64. ,the automatic constant-to-input promotion and generalized handling of operator arguments .,allows to return the data previously generated by support op from pipeline,"reduced peak memory consumption. dali tends to do new allocation before releasing the old memory during buffer resize. as it does not copy the old memory content, the old memory can be freed before allocating the new memory.",added improvements for tensorflow plugin .,"to upgrade to dali 0.19.0 beta from an older version of dali, follow the installation instructions in the dali quick start guide.","to upgrade to dali 0.9.1 beta from an older version of dali, follow the installation instructions in the dali quick start guide.",added the below examples:,fixed training accuracy with tfrecord reader,fn.image_decoder/ops.imagedecoder has been renamed to fn.decoders.image/ops.decoders.image.,"various fixes and improvements to colortwist, brightnesscontrast and hsv operators",build system improvements for architectures other than x86,"to upgrade to dali 0.8 beta from an older version of dali, follow the installation instructions in the dali quick start guide.",cropcastpermute is removed. cropmirrornormalize should be used instead .,fixed python operator with side effects., there is no need to subclass pipeline.,"the 18.11 nvidia gpu cloud optimized container for mxnet, pytorch, and tensorflow, includes an older version of dali. to upgrade to dali 0.5 beta, follow the installation instructions in the dali quick start guide.",fn.tfrecord_reader/ops.tfrecordreader has been renamed to fn.readers.tfrecord/ops.readers.tfrecord.,added the ability to build dali by mounting the source code to the docker so consecutive rebuilds are much faster.,dali operators were moved into a separate library to detach them from the pipeline. it is linked into the target dali library.,moved all nvtx infrastructure into core and create the dali domain .,added fine grained control over output buffers in the pipeline,"added the ability to do the lazy initialization of dali. it is now possible to separate touching the data during the actual run, and at the time of all the necessary allocations during the build of the pipeline.",rotate operator using a new warp kernel ,fixed transpose operator when data shape with dimension of size 1 ,"to upgrade to dali 0.11.0 beta from an older version of dali, follow the installation instructions in the dali quick start guide.","added the no_copy option, which allows dali to borrow a user's memory instead of copying it .","to upgrade to dali 0.8.1 beta from an older version of dali, follow the installation instructions in the dali quick start guide.",fn.mxnet_reader/ops.mxnetreader has been renamed to fn.readers.mxnet/ops.readers.mxnet.,added the ability to run dali without a gpu .,fixed buffer linkage and reshape bug ,dali tensorflow operator has a new api - check the examples for the reference.,parse number of channels in pngimage::peekshape ,"to upgrade to dali 0.21.0 beta from an older version of dali, follow the installation instructions in the dali quick start guide.",source code build now requires the compiler be at least c++14 capable.,fn.image_decoder_slice/ops.imagedecoderslice has been renamed to fn.decoders.image_slice/ops.decoders.imageslice.,created initial support for the video-based pipeline - nvvl functionality is available as videoreader.,"the dali 0.7 is a beta release. hence, for all the features, the functionality and performance will likely be limited.",fixed the lack of input type checking in a gpu variant of the spectrogram operator .,extended the externalsource operator so it can hold more than one batch of inputs at a time.,"the dali 0.12.0 is a beta release. hence, for all the features, the functionality and performance will likely be limited.",fixed an issue wherein loading a plugin could break other operators that were already registered.,"the new video reader operator requires nvidia video codec sdk support in the platform. the nvidia gpu cloud optimized containers lack this functionality in the default configuration prior to the 19.01 version, resulting in problem with loading libnvcuvid.so. to enable it, run the container with the video capability enabled, as below:","the new video reader operator requires nvidia video codec sdk support in the platform. the nvidia gpu cloud optimized containers lack this functionality in the default configuration prior to the 19.01 version, resulting in problem with loading libnvcuvid.so. to enable it, run the container with the video capability enabled, as below:","the dali 0.10.0 is a beta release. hence, for all the features, the functionality and performance will likely be limited.","the dali 0.13.0 is a beta release. hence, for all the features, the functionality and performance will likely be limited.","build system has been refined, common errors have meaningful messages, improved localization and version detection of key dependency packages, such as, nvjpeg, libturbo-jpeg, and lmdb.",added gluon iterator plugin ,"to upgrade to dali 0.14.0 beta from an older version of dali, follow the installation instructions in the dali quick start guide.",added the cpu variant of dali tensorflow operator. now the dali pipeline can be scheduled on the cpu also.,fn.numpy_reader/ops.numpyreader has been renamed to fn.readers.numpy/ops.readers.numpy.,fixed a race condition in readers.nemo_asr when pad_last_batch is set to true .,"a multipaste operator, which is required to implement mosaic augmentation .",coordflip for cpu and gpu .,fn.video_reader/ops.videoreader has been renamed to fn.readers.video/ops.readers.video.,"the dali 0.15.0 is a beta release. hence, for all the features, the functionality and performance will likely be limited.","the dali 0.6 is a beta release. hence, for all the features, the functionality and performance will likely be limited.","the new video reader operator requires nvidia video codec sdk support in the platform. prior to 19.01, the nvidia gpu cloud optimized containers lack this functionality in the default configuration. to enable the functionality, run the container with the video capability enabled, as shown below:",fixed formatting of the example in the fw iterators docs ,"the dali 0.9.1 is a beta release. hence, for all the features, the functionality and performance will likely be limited.",added the exp and log math functions .,fixed the performance regression for a heterogeneous batch in the transpose gpu.,deprecated normalizepermute in favor of cropmirrornormalize,"the dali 0.27.0 is not yet a major release, so the features, functionality, and performance might be limited."
Changelog â€” Dramatiq 1.10.0 documentation,deprecated,deprecated,actor message received and completed in x ms log messages are now logged with the debug level instead of info level. this improves throughput and makes logging much less verbose.,windows is now supported ! ,pending interrupt messages are now removed from pika s queue before cancel is called. this fixes an issue where an atrributeerror was sometimes raised on worker shutdown.,rabbitmq and watch extra dependencies are only installed when they are explicitly required now. ,"sys.std{err,out} are now redirected to stderr and line-buffered.","pika is now pinned to >=0.10,<0.12.",logging statements before and after an actor is called.,urlrabbitmqbroker is now a factory function that creates instances of rabbitmqbroker.,exec is now used to reload the main process on source code changes when the --watch flag is enabled.,support for forking and running arbitrary functions . ,pip install dramatiq now installs rabbitmq and watch deps.,dramatiq is now licensed under the lgpl.,"changed the default max retries value from none to 20, meaning tasks are now retried for up to about 30 days before they re dead-lettered by default.",module import path is now prepended to search path rather than appended. this fixes an issue where importing modules with the same name as modules from site-packages would end up importing the modules from site-packages. ,lua files are now properly distributed with the package.,"bumped pika to version 0.12. because of this change, the interrupt method on broker and its usages within worker have been dropped.",uncaught exceptions within workers are now logged as errors rather than warnings. ,urlrabbitmqbroker is deprecated. the rabbitmqbroker takes a url parameter so use that instead. urlrabbitmqbroker will be removed in version 2.0.,a race condition with calls to cas in the memcached rate limiter backend.,support for expected exceptions via the throws actor option. ,join now takes optional min_successes and idle_time parameters.,stubbroker.join and worker.join are now more reliable.,support for changing the consumer class in the rabbitmq and redis brokers. ,an issue with delaying pipelines. ,an issue where the redisbroker could sometimes prefetch more messages than it was configured to. ,support for eagerly raising actor exceptions in the joining thread with the stubbroker. ,the cli now supports referencing a callable to set up the broker on worker startup. ,dot characters are now allowed in queue names. ,updated allowed version range for prometheus-client. ,an issue where the max_age parameter to callbacks was being ignored. ,the cli now returns code 1 when one of the workers is killed by an unhandled signal. ,an issue where an indexerror would be raised when multiple middlewre containing fork functions were defined. ,removed,before and after arguments to add_middleware.,the redisbroker now takes the max lua stack size into account. this should fix certain heisenbugs that folks have encountered with that broker. ,consumer reconnect backoff factor has been lowered from 10s to 100ms.,messages are no longer assigned new ids when they are re-enqueued. this makes tracking messages using middleware significantly easier.,cli.main now takes an optional argument namespace so that users may define their own entrypoints. ,"changed license classifier to the correct license. this is why you shouldn t publish changed before you ve had coffee, folks!",an issue where workers would fail and never recover after the connection to redis was severed. ,brokers can now be passed an empty list of middleware. ,pipelines no longer continue when a message is failed. ,message priority can now be changed in before_enqueue hooks. ,"consumers now wait exactly 3 seconds between retries after a connection error, rather than using exponential backoff.",support for accessing the current message from an actor via currentmessage. ,added,added,added,added,added,added,added,added,added,added,added,added,added,added,added,added,added,added,added,added,added,added,added,added,added,added,all notable changes to this project will be documented in this file.,the cli raises an error when the --watch flag is set on unsupported platforms. ,an issue with potentially drifting keys in the windowratelimiter. ,support for accessing nested broker instances from the cli. ,the timelimit middleware no longer uses signals to trigger time limit handling. instead it uses a background thread per worker process.,reloading now uses sys.executable when exec ing workers that were started with python -m dramatiq.,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,fileno has been added to streamablepipe. ,the rabbitmq broker dead message ttl can now be configured via the dramatiq_dead_message_ttl environment variable. ,tests are now run on windows. ,"the prometheus middleware no longer depends on file locking to start its exposition server. instead, it uses the new fork functions functionality to start the server in a separate, unique process. the middleware no longer takes any parameters. while this would normally be a breaking change, it appears those parameters were previously ignored anyway. ",consumers are now stopped after workers finish running their tasks. ,a race condition between worker processes and fork processes during boot. ,timelimit middleware now uses a monotonic clock.,allow pipe_ignore option to be set at the actor level. ,an issue that caused logging to fail when non-utf-8 characters were printed to stdout/err. ,timelimitexceeded is now a subclass of interrupt.,autoreload now works under gevent.,pipe_ignore has been fixed to apply to the next message in line within a pipeline. ,prometheus middleware no longer wipes the prometheus data directory on startup. this fixes an issue with exporting application metrics along with worker metrics.,generic actors can now be passed custom actor registires. ,pinned pika version 0.11 to avoid an issue where passing heartbeat to rabbitmqbroker in get_broker would raise a typeerror. ,reworked scheduled messages to improve fairness. messages are now re-enqueued on the broker once they hit their eta.,prometheus-client has been pinned to version 0.0.20.,messages now support pluggable encoders.,consumers now use the same idle timeout as workers.,stubbroker stubbroker.flush and stubbroker.flush_all.,rabbitmq enqueue is now resilient to disconnects.,rabbitmqbroker now supports multiple connection uris to be passed in via its url parameter. ,support for specifying the actor class to actor. ,redis result backend is now considerably more resource-efficient .,result encoder now defaults to the global encoder. ,signal handling from the master process on freebsd 10.3. ,a custom redis connection can now be passed to the redis broker via the new client keyword argument. ,support for redis-py 3.x. ,the stubbroker now flushes its dead letter queue when its flush_all method is called. ,implementation of the window rate limiter has been streamlined.,connection and import errors that occur during process boot now log stack traces .,pip install dramatiq installs all deps.,unhandled errors within workers now print the full stack trace. ,a memory bloat issue with tasks that raise exceptions. ,an assertionerror after starting the consumer if rabbitmq is not running .,fixed,fixed,fixed,fixed,fixed,fixed,fixed,fixed,fixed,fixed,fixed,fixed,fixed,fixed,fixed,fixed,fixed,fixed,fixed,fixed,fixed,fixed,fixed,fixed,fixed,fixed,fixed
Cerberus Changelog â€” Cerberus is a lightweight and extensible data validation library for Python, validate_update is deprecated and will be removed with next release. use validate with update=true instead. closes #21.,the rules keyschema and valueschema are renamed to keysrules and valuesrules; the old names are deprecated and will not be available in the next major release of cerbers ,the validator rule is renamed to check_with. the old name is deprecated and will not be available in the next major release of cerberus ,instead a runtimeerror is thrown when python is running with optimization level 2 ,replaced deprecated rule name validator with check_with in the docs ,update readme with elaborations on versioning and testing," nullable rule added to allow for null field values to be accepted in validations. this is different than required in that you can actively change a value to none instead of omitting or ignoring it. it is essentially the ignore_none_values, allowing for more fine grained control down to the field level .","change: custom validator methods: replace calls to self._error with return true , or false, or none. ",add feature freeze note to contributing and note on python support in readme,validation schemas are now validated up-front. when you pass a schema to the validator it will be validated against the supported ruleset . closes #39.,validator options like allow_unknown and ignore_none_values are now taken into consideration when validating sub-dictionaries. closes #40.,change allowed rule to use containers instead of lists ,change: custom validator methods: invert the logic of the conditional clauses where is tested what a value is not / has not. ,python 2.6 and 3.3 are no longer supported,convert self.assert method calls to plain assert calls supported by pytest. addresses #213 .,new: support arbitrary types with max and min .,"fix: required is always evaluated, independent of eventual missing dependencies. this changes the previous behaviour whereas a required field with dependencies would only be reported as missing if all dependencies were met. a missing required field will always be reported. also see the discussion in link",cerberus is a lightweight and extensible data validation library for python,validator instances are now callable. instead of validated = validator.validate you can now choose to do validated = validator .,"several relevant breaking changes have been introduced with this release. for the inside scoop, please see the upgrade notes.","if dependencies are precised for a required field, then the presence of the field is only validated if all dependencies are present .", validator.errors now returns a dictionary where keys are document fields and values are lists of validation errors for the field.,fixed the expansion of the deprecated rule names keyschema and valueschema ,"fix: when items is applied to a list, field name is used as key for validator.errors , and offending field indexes are used as keys for field errors type can be a list of valid types.","when a list item fails, its offset is now returned along with the list name.",various micro optimizations and safety belts that were inspired by adding type annotations to a branch of the code base,"this is a major release which breaks backward compatibility in several ways. don t worry, these changes are for the better. however, if you are upgrading, then you should really take the time to read the list of breaking changes and consider their impact on your codebase. for your convenience, some upgrade notes have been included.",change: removed context -argument from validate -method as this is set upon the creation of a child-validator. ,use the unconcernedvalidator when the python interpreter is executed with an optimization flag ,added support for running tests with py.test,defaults are applied to undefined fields from an allow_unknown definition ,fix: validate with update=true does not work when required fields are in a list of subdicts. ,fix misspellings and missing pronouns,"fields with empty definitions in schema were reported as non-existent. now they are considered as valid, whatever their value is .",remove redundant hint from *of-rules.,added support for addition and validation of custom data types.,docs: explain that normalization and coercion are performed on a copy of the original document , items is now deprecated. use the upgraded schema rule instead.,the changes.rst document is properly included in the package ,docs: examples were added for the min- and maxlength rules. ,fix: raise schemaerror when an unallowed type is used in conjunction with schema rule .," allow_unknown can also be set to a validation schema, in which case unknown fields will be validated against it. closes pyeve/eve:issue:405.", min and max now apply to floats and numbers too. closes #30.,add maintainer and maintainer_email to setup.py ,all fields that are defined as readonly are removed from a document when a validator has the purge_readonly flag set to true ,docs: clarifications concerning dependencies and unique rules. ,omit warning when no schema for meta rule constraint is available ,new: allow applying of empty rule to sequences and mappings. closes #270. ,"added number data type, which validates against both float and integer values .",add require_all rule and validator argument ,several fixes and refinements of the docs,adds a benchmark to observe overall performance between code changes ,change: use str.format in error messages so if someone wants to override them does not get an exception if arguments are not passed. closes #105. , add travis_retry to pip install in case of network issues ,fixed schema validation for rules specifications with space ,use allowed field for integer just like for string .,fix: correctly handle nested logic and group errors. closes #278 and #299. , minlenght and maxlength now apply to lists as well .,new: validator.document_path and validator.schema_path properties can be used to determine the relation of the currently validating document to the root_document / root_schema . ,fix bug when _error is calld twice for a field .,new: custom rule s method docstrings can contain an expression to validate constraints for that rule when a schema is validated. .,fix: simplify the tests with docker by using a volume for tox environments. ,the continuous integration now runs on github actions,change: replace validate_update method with update keywork argument. ,fix: a dependency is not considered satisfied if it has a null value. closes #305. ,the contains rule 
Changelog â€” Authlib 1.0.0.dev documentation,sqlalchemy integrations has been removed from authlib. developers should define the database by themselves.,bug fixes and enhancements in this release:,"1. the parameter algorithms in jsonwebsignature and jsonwebencryption are changed. usually you don t have to care about it since you won t use it directly. 2. whole json web key is refactored, please check json web key .",fix oauthtoken when expires_at or expires_in is 0 via pr#227.,jwe has been renamed to jsonwebencryption,quick fix for legacy imports of flask and django clients,allow leeway option in client parse id token via pr#228.,jwk has been renamed to jsonwebkey,allow user given nonce via issue#180.,rfc8037: cfrg elliptic curve diffie-hellman and signatures in json object signing and encryption ,we also fixed bugs for integrations:,get started,"the whole framework client integrations have been restructured, if you are using the client properly, e.g. oauth.register, it would work as before.",professionally-supported authlib is available with the tidelift subscription.,"this is the last release before v1.0. in this release, we added more rfcs implementations and did some refactors for jose:","in this release, authlib has introduced a new way to write framework integrations for clients.",fixed support for httpx>=0.14.3,breaking changes: find how to solve the deprecate issues via link,old versions,old versions,find old changelog at link,"in flask oauth 2.0 provider, we have removed the deprecated oauth2_jwt_xxx configuration, instead, developers should define .get_jwt_config on openid extensions and grant types.",we have dropped support for python 2 in this release. we have removed built-in sqlalchemy integration.,jws and jwe don t validate private headers by default.,added es256k algorithm for jws and jwt.,jwt has been renamed to jsonwebtoken,raise oautherror when callback contains errors via issue#275,jws has been renamed to jsonwebsignature,follow on twitter,"backward compitable fix for using jwks in jwt, via issue#280.",star on github,jose changes,fixed parallel token refreshes for httpx async oauth 2 client,fix httpx integration via pr#232 and pr#233.,changelog,changelog,add bearer as default token type for oauth 2 client.,allow usage of user provided code_verifier via issue#216.,"this is the documentation of the development version, check the stable version documentation."
Changelog â€” pygal 2.0.0 documentation,"there is now a formatter config option to format values as specified. the formatter callable may or may not take chart, serie and index as argument. the default value formatting is now chart dependent and is value_formatter for most graph but could be a combination of value_formatter and x_value_formatter for dual charts.",css can now be inline with the inline: prefix,"maps are now plugins, they are removed from pygal core and moved to packages ",fix crash with no values when the print_values_position param is set ,add support for n separated multiline titles ,add new box plot modes and outliers and set extremes as default ,_this is a micro release and i have very little time on my hands right now sorry_,add show_x_labels option to remove them and the x axis.,add defs config option to allow adding gradients and patterns.,add value_label_font_family and value_label_font_size style options for print_labels.,new call api: chart = line; chart.add; chart.render can now be replaced with line.render,adds an extra class to horizontal guides if the label is 0 ,add french maps by department and region ,dot now supports negative values,add tooltip_fancy_mode to revert to old tooltips,remove stroke style in style and set it as a global / serie configuration.,refactor label processing in a _compute_x_labels and _compute_y_labels method. handle both string and numbers for all charts. create a dual base chart for dual axis charts. ,built with sphinx using a theme provided by read the docs.,finally allow call chains on add,avoid x label formatting when label is a string,mode option has been renamed to a less generic name: box_mode,transform min_scale and max_scale as options,"remove datey and replace it by real xy datetime, date, time and timedelta support. ",add xlink in desc to show on tooltip,"bar print value positioning with print_values_position. can be top, center or bottom ci doc",support colors in rgb / rgba for parametric styles,use custom xml_declaration avoiding conflict with processing instructions,add options to customize major labels ,add tooltip support in metadata to add a title .,fix wrong label colors when there are more series than colors ,fix no data for graphs with only zeroes ,fix x_labels and y_labels behaviour for xy like,fix the missing title on x_labels with labels.,auto cast to str x labels in non dual charts ,fixing to checks breaking rendering of datetimeline and timedeltaline ,allow a color and a style parameter to value metadata.,add guide_stroke_dasharray and guide_stroke_dasharray in style to customize guides ,add legend_at_bottom_columns option to specify number of columns in legend when at bottom. ,add per serie configuration,handle ellipsis in list type configs to auto-extend parent. ,installing,fix transposable_node in case all attributes are not there. .,"rework the ghost mechanism to come back to a more object oriented behavior, storing all state in a state object which is created on every render. ",the human_readable option has been removed. now you have to use the pygal.formatters.human_readable formatter ,avoid http 301 moved permanently ,add secondary_range option to set range for secondary values. ,add inverse_y_axis options to reverse graph ,show y guides in horizontal chart ,read the docs: private repos and priority support. try read the docs for business today!,don t forget secondary series in table rendering ,fix nomenclature of taiwan 
Changelog â€” ELI5 0.11.0 documentation,"eli5.explain_weights uses gain for xgbclassifier and xgbregressor feature importances by default; this method is a better indication of what s going, and it makes results more compatible with feature importances displayed for scikit-learn gradient boosting methods.",doc and vec arguments are swapped in explain_prediction function; vec can now be omitted if an example is already vectorized;,fix for permutation importance with sample_weight and cross-validation.,fixed eli5.explain_weights for lasso regression with a single feature and no intercept.,fixed an issue with eli5.explain_prediction for xgboost models trained on pandas.dataframe when feature names contain dots;,"eli5.explain_weights and eli5.explain_prediction works with xgboost.booster, not only with sklearn-like apis;",eli5.explain_weights allows to customize the way feature importances are computed for xgbclassifier and xgbregressor using importance_type argument ;,lightgbm support: eli5.explain_prediction and eli5.explain_weights are now supported for lgbmclassifier and lgbmregressor .,a number of remaining feature importances is shown when the feature importance table is truncated;,"candidate features in eli5.sklearn.invertablehashingvectorizer are ordered by their frequency, first candidate is always positive.",add an option to pass coefficient scaling array; it is useful if you want to compare coefficients for features which scale or sign is different in the input;,"backwards incompatible: dataframe objects with explanations no longer use indexes and pivot tables, they are now just plain dataframes;","better scikit-learn pipeline support in eli5.explain_weights: it is now possible to pass a pipeline object directly. curently only selectormixin-based transformers, featureunion and transformers with get_feature_names are supported, but users can register other transformers; built-in list of supported transformers will be expanded in future. see transformation pipelines for more.",eli5.sklearn.invertablehashingvectorizer and eli5.sklearn.featureunhasher allow to recover feature names for pipelines which use hashingvectorizer or featurehasher;,eli5.explain_prediction: new top_targets argument allows to display only predictions with highest or lowest scores;,inverting of hashingvectorizer is now supported inside featureunion via eli5.sklearn.unhashing.invert_hashing_and_fit. see reversing hashing trick.,fixed issue with dense feature vectors;,feature name guessing is fixed for scikit-learn ensemble estimators;,zero and negative feature importances are no longer hidden;,"eli5.explain_weights supports feature_filter in addition to feature_re for filtering features, and eli5.explain_prediction now also supports both of these arguments;",targets argument allows to show a subset of targets/classes and change their display order;,styling of feature importances tables is fixed;,new method for inspection black-box models is added ;,"it is now possible to customize formatting output - show/hide sections, change layout;",built with sphinx using a theme provided by read the docs., vectorized argument for sklearn.explain_prediction; it allows to pass example which is already vectorized;,"text-based formatting of decision trees is changed: for binary classification trees only a probability of true class is printed, not both probabilities as it was before.","bug fix: eli5 should remain importable if xgboost is available, but not installed correctly.",fixed compatibility with lightgbm master ;,std deviation of feature importances is no longer printed as zero if it is not available.,hashingvectorizer is supported for regression tasks;,eli5.explain_prediction now shows predicted class for binary classifiers ;,fixed tests with recent numpy;,fixed eli5.explain_weights for lightgbm estimators in python 2 when importance_type is split or weight ;,fixed an issue with analyzer= char_wb highlighting at the start of the text., weight column is renamed to contribution in the output of eli5.explain_prediction;,classifier name is no longer printed by default;,rendering performance is improved;,catch exceptions from improperly installed lightgbm,tutorial is updated to use xgboost 0.81;,"eli5.explain_prediction supports targets= now for binary classifiers; e.g. to show result as seen for negative class, you can use eli5.explain_prediction;",new show_feature_values=true formatter argument allows to display input feature values;,support any black-box classifier using lime (link algorithm; text data support is built-in;,supported libraries,support classifiers without get_feature_names method using auto-generated feature names.,added support for scikit-learn linear regression models ;,don t use deprecated getargspec function.,eli5.formatters.as_dict.format_as_dict is now available as eli5.format_as_dict;,feature_re argument allows to show only a subset of features;,fixed compatibility with scikit-learn 0.19;,new textexplainer class allows to explain predictions of black-box text classification pipelines using lime algorithm; many improvements in eli5.lime.,tests moved to github actions.,target_names argument allows to change display names of targets/classes;,"better pandas support in eli5.explain_prediction for xgboost, sklearn, lightgbm and lightning.",performance improvements - feature names are lazy;,"support eli5.explain_prediction and eli5.explain_weights for libsvm-based linear estimators from sklearn.svm: svc , nusvc , svr, nusvr, oneclasssvm;",feature contribution calculation fixed for eli5.xgboost.explain_prediction_xgboost, top argument of explain_prediction can be a tuple ;,bug fix: classifier weights are no longer changed by eli5 functions.,"packaging fixes: require attrs > 16.0.0, fixed readme rendering",documentation and testing improvements.,added conda install instructions ;,read the docs: private repos and priority support. try read the docs for business today!,eli5.explain_weights and eli5.explain_prediction functions;,packaging fix: scikit-learn is added to install_requires in setup.py.,dropped support for scikit-learn < 0.18;,edit on github,"python 3.8 and 3.9 tested on gi, python 3.4 not tested any more.",fixed eli5.explain_prediction for recent lightgbm versions;,type checks now use latest mypy;,"transfor_feature_names is implemented for sklearn s minmaxscaler, standardscaler, maxabsscaler and robustscaler;"
Changelog â€” LIEF Documentation,"lief 0.9 comes with new formats related to android: oat, dex, vdex and art. it also fixes bugs and thanks to yd0b0n, elf parser now supports big and little endian binaries. we also completed the json serialization of lief objects.",lief 0.8.0 mainly improves the macho parser and the elf builder. it comes with dockerfiles for centos and android.,there are issues with executables statically linked with libraries that use tls,"lc_source_version, lc_version_min_macosx and lc_version_min_iphoneos are parsed into sourceversion and versionmin ",pie and nx are abstracted through the is_pie and has_nx properties,01 - parse and manipulate formats,dt_flags and dt_flags_1 are now parsed into dynamicentryflags - 754b8af,installation and integration,libfuzzer has also been integrated in the project to enhance the parsers,parse and rebuilt dos stub - 3f06397,"api to show export-trie, rebase and binding opcodes: 5d56141",the log functions now output on stderr instead of stdout,add api to access either lc_code_signature or dylib_code_sign_drs ,lief.pe.binary.section_from_virtual_address has been renamed to lief.pe.binary.section_from_rva.,enable to bind a relocation with a symbol ,see also,"thanks to lkollar, linux ci now produces manylinux1-compliant wheels",expose api to list functions found in a binary ,global update and enable to build the documentation out-of-tree,add support for adding lc_unixthread commands in a macho ,lief.pe.x509.is_trusted_by and lief.pe.x509.verify now return a better lief.pe.x509.verification_flags instead of just lief.pe.x509.verification_flags.badcert_not_trusted ,items now returns a dictionary whose values are bytes . this change is related to utf-16 support.,lc_function_starts is parsed into functionstarts ,lief.pe.binary.get_content_from_virtual_address takes either an absolute virtual address or a relative virtual address,add build support for elf notes,add the lief.section.search and lief.section.search_all methods to look for patterns in the section s content.,my collegues for the feedbacks and suggestions ,add a resources manager to provide an enhanced api over the resources - 8473c8e,segment.flag has been renamed into flags - 20a5f66,one can now add multiple section or segment into an elf:,header.sizeof_section_header has been renamed into section_header_size - d96971b,lief.elf.segment.data has been renamed to lief.elf.segment.content,relocation are now abstracted from the 3 formats - 9503f2f,aguinet updated the bin2lib tutorial with the support of the new glibc versions ,we also moved from an class-interface based to functions.,add an api to configure the logger - 4600c2b,add support to parse pogo debug entries ,add partial support for android 9 ,add sanity check on the signature s length that could lead to a std::bad_alloc exception,about,add load commands,add support for static relocation writing ,add has_symbol and get_symbol to lief.binary - f121af5,fix reconstruction issue when the binary is prelinked ,replace easyloggingpp with spdlog 1.8.1,lc_thread and lc_unixthread are now parsed into threadcommand - 2325783,enable to remove mach-o symbols ,enable to add unlimited number of dynamic entries: a40da3e,one can now add multiple entries in the dynamic table:,b2d3694 enables modification of the elf interpreter without length restriction,add lief.elf.binary.symbols which return an iterator over all symbols - af6ab65,section relocations are now parsed into lief.macho.section.relocations - 29c8157,add constructors ,parser now returns a std::unique_ptr instead of a raw pointer: cd1cc45,add coredump support ,enhance mach-o modifications by exposing an api to:,getting started,get_imphash can now generate the same value as pefile and virus total ,introduce mach-o build version command ,fix parsing issue of the .eh_frame section when the base address is not 0.,03 - play with elf symbols,use min for the section s size and truncate the size to the file size - 61bf14b,"in the c++ api get_xxx getters have been renamed into xxx becomes header) - a4c69f7, e805669",enhance python install ,"add get_imphash and resolve_ordinals functions - a89bc6d, dfa8e98",example,add sections,the dyld structure is parsed into dyldinfo. it includes:,handle encoding issues in the python api - 8c7ceaf,fix memory leaks and some performance issues: #94,add python 3.9 support,lief.pe.imphash_mode and lief.pe.get_imphash,expose function to get strings located in the .rodata section , enhance the access to the abstract layer through the abstract attribute - 0713854,add segments,from lief import logger,add more out-of-bounds checks on relocations and exports - 9364f64,"to check if a given flag is set, one can do:",lief.parse can now takes a list of integers - f330fa8,enable to configure the mach-o parser for quick parsing: 880b99a,handle pe forwarded exports ,enhancement of the dynamic symbols counting - 985d124,fix regression in parsing python bytes,enhancement for dynamicentryrpath and dynamicentryrunpath: c375a47,lief.macho.parse now returns a fatbinary instead of a list of binary. fatbinary has a similar api as a list - 3602643,lief.parse now support io streams as input,expose write in the abstract layer ,januszl enhanced the algorithm that computes the string table. it moves from a n^2 algorithm to a nlog .,fix issue when parsing twice a mach-o file ,yd0b0n for #162 and #166 ,changelog,changelog,02 - create a pe from scratch
Thinc Changelog - pyup.io, new features and improvements, new features and improvements, new features and improvements, new features and improvements, new features and improvements, new features and improvements, new features and improvements, new features and improvements, new features and improvements, new features and improvements, new features and improvements, new features and improvements, new features and improvements, * fix issue 466: avoid initializing with y if x is set," * new `.gemm` method on numpyops and cupyops classes, allowing matrix and vector multiplication to be handled with a simple function. example usage:"," * use (link for serialization. we now provide a single package with forks of our preferred serialisation libraries specifically, `msgpack`, `ujson` and `cloudpickle`. this allows us to provide a single binary wheel for these dependencies, and to maintain better control of our dependency tree, preventing breakages."," - **super lightweight:** small and easy to install with very few required dependencies, available on pip and conda for linux, macos and windows. simple source with a consistent api."," * allow support for (link v3.0.0, which includes some bug fixes when items are deleted from the table, and also features bloom filters."," * update versions of `cymem`, `preshed` and `murmurhash`. thinc is compiled against our memory pool and hash table libraries, `cymem` and `preshed`. changing these build-time dependencies requires thinc to be recompiled. this is one reason the major version number needed to be incremented for this release."," previous versions of thinc have relied on numpy for matrix multiplications. when numpy is installed via wheel using pip , numpy will usually be linked against a suboptimal matrix multiplication kernel. this made it difficult to ensure that thinc was well optimized for the target machine.", * add = mish`. cuda and cython kernels are included to make the activation efficient., * fix installation with cuda 9.," * add experimental support for (link to the optimizer. enable it by setting the keyword argument `lookahead_k` to a positive integer. in preliminary testing, it helps if you're not using parameter averaging, but with averaging it's a bit worse."," * add experimental support for lars to the optimizer. enable it by setting `use_lars` to `true`. in preliminary testing, this hasn't worked well at all possibly our implementation is broken.", * fix issue with creating `model` instances in child threads with operator overloading., * fix bug that caused incorrect data types to be produced by `featureextracter`.,"> this version of thinc has been rewritten from the ground up and will be used to power the upcoming (link the new thinc v8.0 is a **lightweight deep learning library** that offers an elegant, type-checked, functional-programming api for **composing models**, with support for layers defined in other frameworks such as **pytorch**, **tensorflow** or **mxnet**. you can use thinc as an interface layer, a standalone toolkit or a flexible way to develop new models. **for more details, see the (link"," - **config system:** configuration is a major pain for ml. thinc lets you describe trees of objects with references to your own functions, so you can stop passing around blobs of settings. it's simple, clean, and it works for both research and production."," thanks to dvsrepo, justindujardin, alephmelo and darkdreamingdan for the pull requests and contributions.",pipfiles and docker," * thinc v7.0 drops support for python 2.7 on windows. python 2.7 remains supported on linux and osx. support could be restored in future. we're currently unable to build our new dependency, (link for windows on python 2.7. if you can assist with this, please let us know.", * update dependencies to be able to provide binary wheels.," you can now require gpu capability using the pip ""extras"" syntax. thinc also now expects cuda to be installed at `/usr/local/cuda` by default. if you've installed it elsewhere, you can specify the location with the cuda_home environment variable. once thinc is able to find cuda, you can tell pip to install thinc with cupy, as follows:", thanks to rupsaijna and koichiyasuoka for the pull requests!," * add experimental support for (link to the optimizer. enable it with the keyword argument `use_radam` to `true`. in preliminary testing, it's a small change that's worth enabling.", * fix import errors introduced when dropping dependencies in v7.0.0., documentation and examples," thanks to giannisdaras, simonhkswan, chssch and svlandeg for the pull requests and contributions."," * fix incorrect calculation of `min_density` in `thinc.search.beam` class. previously the beam was pruned based on the raw logit scores, instead of normalized probabilities.", * improve gpu support and pytorch wrapper., * fix issue 487: require `catalogue>=2.0.3` due to performance regressions related to `importlib-metadata`, * use `collections.abc` when possible and avoid deprecation warning.," * use (link for matrix multiplication. previous versions delegated matrix multiplication to platform-specific libraries via numpy. this led to inconsistent results, especially around multi-threading. we now provide a standalone package, with the blis linear algebra routines. importantly, we've built blis to be **single-threaded**. this makes it much easier to do efficient inference, as the library will no longer spawn threads underneath you.", * dynamically include `numpy` headers and add `numpy` build constraints.," * `thinc.neural.util.get_ops` now understands device integers, e.g. `0` for gpu 0, as well as strings like `""cpu""` and `""cupy""`."," big thanks to digantamisra98 for the (link activation, especially the extensive experiments and simple gradient calculation. we expect to be using the activation in the next round of spacy models."," if you're installing thinc from a local wheel file, the syntax for adding an ""extras"" specifier is a bit unintuitive. the trick is to make the file path into a url, so you can use an `egg` clause, as follows:"," if you want to link against the intel mkl instead of openblas, the easiest way is to install miniconda. for instance, if you installed miniconda to `/opt/miniconda', the command to install thinc linked against mkl would be:"," * models now reliably distinguish predict vs. train modes, using the convention `drop=none`. previously, layers such as `batchnorm` relied on having their `predict` method called, which didn't work they were called by layers which didn't implement a `predict` method. we now set `drop=none` to make this more reliable."," * thinc now vendorizes openblas's `cblas_sgemm` function, and delegates matrix multiplications to it by default. the provided function is single-threaded, making it easy to call thinc from multiple processes. the default sgemm function can be overridden using the `thinc_blas` environment variable --- see below.", * fix murmurhash on platforms where long type was not 64 bit," - **use any framework:** switch between pytorch, tensorflow and mxnet models without changing your application, or even create mutant hybrids using zero-copy array interchange."," * fix issue explosion/spacy2995: pin `msgpack` to version `<0.6.0`, to avoid the low message-length limit introduced in v0.6.0, which breaks spacy. we will relax the pin once spacy is updated to set the `max_xx_len` argument to `msgpack.dumps`", * remove detailed `numpy` build constraints from `pyproject.toml`., * fix issue 488: fix config override & interpolate interaction," gratitude to the (link community for their crowd-sourced experiments, and especially to users lessw2020, mgrankin and others for their optimizer implementations, which we referenced heavily when implementing the optimizers for thinc. more importantly, it's super helpful to have a community filtering the deluge of papers for techniques that work on a few different datasets. (link on optimization research was particularly helpful.", * fix regression in `linearmodel` class introduced in v7.0.5., - concise functional-programming approach to model definition using composition rather than inheritance., - **type checking:** develop faster and catch bugs sooner with sophisticated type checking. trying to pass a 1-dimensional array into a model that expects two dimensions? that s a type error. your editor can pick it up as the code leaves your fingers., * update `murmurhash` pin to accept newer version., * ditch `thinc_gpu_ops` for simpler gpu install.,send a mail to and we'll get back to you shortly., * only install old `pathlib` backport on python 2 ., - first-class support for variable-length sequences: multiple built-in sequence representations and your layers can use any object.,a changelog finder and parser., * restrict compatible `cupy` versions to `<8.0.0`., * update for compatibility with `cupy` v8.," if the library file ends in a .a extension, it is linked statically; if it ends in .so, it's linked dynamically. make sure you have the directory on your `ld_library_path` at runtime if you use the dynamic linking.", * use `msgpack` instead of `msgpack-python`., * avoid allocating a negative shape for ngrams.,"pyup safety actively tracks 310,197 python packages for vulnerabilities and notifies you when to upgrade."," to fix this, thinc now provides its own matrix multiplications, by bundling the source code for openblas's sgemm kernel within the library. to change the default blas library, you can specify an environment variable, giving the location of the shared library you want to link against:", * use 0-vector for oov in `staticvectors` to fix similarity bug in spacy, * relax version range of `plac` to match spacy., * add `map_list` layer , * fix issue 484: ensure consistency of no dim for bilstm, * fix issue 465: fix saving models to pathy paths, backwards incompatibilities, * fix pickle support for `featureextracter` class.," * fix batch normalization bugs. now supports batch ""renormalization"" correctly.", * fix issue 51: ditch `thinc_gpu_ops` for simpler gpu install., * update `cytoolz` version pin to make thinc compatible with python 3.7., * fix dataset readers., * improve gpu utilisation for attention layer.," * update `staticvectors` model, to make use of spacy v2.0's (link class.", * fix issue 104: fix unflatten padding when last element is empty., * fix version number for pypi.
pyserial/CHANGES.rst at master Â· pyserial/pyserial Â· GitHub,"improved xreadlines, it is now a generator function that yields lines as they are received . however xreadlines is deprecated and not available when the io module is used. use for line in serial: instead.",win32: setrts and setdtr can be called before the port is opened and it will set the initial state on port open.,miniterm.py has a new feature to send a file and configurable special characters for exit and upload. refactored internals to class based structure ,"poll based implementation for read is in a separate class posixpollserial, as it is not supported well on all platforms .",url handlers for serial_for_url are now imported dynamically. this allows to add protocols w/o editing files. the list serial.protocol_handler_packages can be used to add or remove user packages with protocol handlers .,add cancel_read and cancel_write to win32 and posix implementations,removed dgux entry which actually had a wrong comment and is probably not in use anywhere.,moved some of the examples to serial.tools so that they can be used with python -m,url handlers now require the proper format for arguments instead of / ,"starting from this release, only python 2.7 and 3.2 are supported. the source code is compatible to the 2.x and 3.x series without any changes. the support for earlier python versions than 2.7 is removed, please refer to the pyserial-legacy series if older python versions are a requirement).", file descriptor not closed when exception is thrown, posix: fix posixpollserial with timeout=none and add cancel support,added implementation of ri and corrected rts/cts on win32,crlf handling of miniterm.py should be more consistent on win32 and others. added lf only command line option,"name for com10 was not built correctly, found by norm davis.",jython support is currently broken as jython does not have a python 2.2 compatible release out yet," dsrdtr should default to false dsrdtr parameter default value changed from none to false. this means rtscts=true enables hardware flow control on rts/cts but no longer also on dtr/dsr. this change mostly affects win32 as on other platforms, that setting was ignored anyway.","new implementation only supports python 2.2+, backwards compatibility should be maintained almost everywhere. the os handles were prefixed with an underscore. the different names stay, as anyone that uses one of these has to write platform specific code anyway.",support for win32 is now written on the top of ctypes instead of pywin32 .,bugfix of timeouts brought up by markus hoffrogge,ensure working with bytes in write calls,"each serial class and instance has a list of supported values: baudrates, bytesizes, parities, stopbits``ggg these values can be used to fill in value sin gui dialogs etc.", miniterm: fix double use of ctrl-t + s use z for suspend instead,changed error handling in read so that disconnected devices are detected., spurious write fails with error_success,list_ports and device for bsd updated ,"readline, readlines, writelines and flush are now supported see readme.txt for deatils.",iterator interface. for line in serial: ... is now possible suggested by bernhard bender, serial scan as a module with mac support,"instances of serial.serial have baudrate, bytesize, timeout etc. attributes implemented as properties, all can be set while the port is opened. it will then be reconfigured.","creating a serial object without port spec returns an unconfigured, closed port. useful if a gui dialog should take a port and configure it.",same as 1.1 but added missing files.,a port can be opened and closed as many times as desired., _update_dtr_state throws inappropriate ioctl for virtual serial port created by socat on os x,freebsd now uses cuadx instead of cuaax , add bytesize and stopbits argument parser to tcp_serial_redirect,fix bad super call and duplicate old-style __init__ call,added recursive search for device usb serial number to support composite devices,dynamically lookup baudrates and some cleanups,"posix: remove ""number_to_device"" which is not called anymore", mac and bsd fix _update_break_state,"added alternate way for enabling rtscts if port opening fails, a serialexception is raised on all platforms", serial port cannot be specified by number on windows, refactor: raise new instances for portnotopenerror and serialtimeoutexception, on windows in tools global name 'getlasterror' is not defined,add client mode to example tcp_serial_redirect.py,/, remove python 3.2 and 3.3 from test," posix: ignore more blocking errors and eintr, timeout only applies to blocking i/o", calling open on an already open port now raises an exception,see above for what's all new in this release," cannot configure port, some setting was wrong. can leave port handle open but port not accessible","miniterm.py is now installed as ""script""", miniterm: use exclusive access for native serial ports by default, protocol_socket: sync error handling with posix version,"use a poll based implementation on posix, instead of a select based, provides better error handling .", use unicode api for list_ports, list_ports: option to include symlinked devices, test.py produces exception with python 3.1,add getsettingsdict and applysettingsdict serial object methods,"style: use .format in various places instead of ""%"" formatting",added serial.parity_names . this dictionary can be used to convert parity constants to meaningful strings., bug in serial.threaded.packetizer with easy fix,"check for string in write function. using unicode causes errors, this helps catching errors early ",small bugfix on posix with get* methods .,"deprecate nonblocking method on posix, the port is already in this mode.", list_ports: use hardcoded path to library on osx,allow calling cancel functions w/o error if port is closed, improve support for freebsd ,added examples to archive added non-blocking mode for timeout=0 ,"parity_none, parity_even, parity_odd constants changed and all these constants moved to serialutil.py ",added terminal application for wxpython with wxglade design file to the examples., serial number support for composite usb devices,remove the mapping of flush to the destructive flushoutput as this is not the expected behaviour.,readline: eol character for lines can be chosen idea by john florian.,"documentation update, now written with sphinx/rest", add support to xr-usb-serial ports, patch: native rs485 is never enabled,new url handler alt:// to select alternative implementations, list_ports_windows: support devices with only vid,compatible with python io library ,"use of monotonic clock for timeouts, when available ", don't open port if self.port is not set while entering context manager," examples: refactor wx example, use bind to avoid deprecated warnings, ischecked, unichr", applysettingsdict throws an error if the settings dictionary is not complete,added jython support,: device strings cannot be unicode, fix disregard read timeout if there is more data,about, rfc2217: fix auto-open use case when port is given as parameter, process hang forever under xp, option for low latency mode on linux, reading from socket with timeout=none causes typeerror," check for write timeout, even if eagain was raised", serial.write without a timeout uses 100% cpu on posix, exception while cancel in miniterm ,don't use dos device names for ports > 9., outwaiting implemented, move linux specific constants to not break other platforms, use absolute import everywhere," in read, count length of converted data", ignore exception raised by setcommtimeout in close.,don't recreate overlapped structures and events on each read/write.,"the serialposix module does not throw an exception on unsupported platforms, the message is still printed. the idea that it may still work even if the platform itself s not known, it simply tries to do the posix stuff anyway .","list_ports: return name if product is none, fix for #54", fix for , fixes for rts/dtr handling on open,initial state of rts/dtr: ignore error when setting on open posix ,silly mix of two versions in win32 code corrected, hcomport doesn't get initialized for serial,"test each and every constant for it's existence in termios module, use default if not existent ","see 3.2.1, this one missed a merge request related to removing aio."," setrts/setdtr reference to non existing local ""on""",added serialutil which provides a base class for the serial objects.,remove obsolete examples.,removed debug messages,add scanlinux.py example, support bluetooth serial port discovery on linux,linux: module list_ports for linux should include the product information as description.,socket: use non-blocking socket and new timeout class, improvements to port_publisher.py example,updated miniterm.py example, posix: fix custom baud rate to not temporarily set 38400 baud rates on linux,update wxserialconfigdialog.py and wxterminal.py compatibility with wxpython 2.8 , aio: catch errors and close connection, list_ports: set default name attribute, class serial in protocol_loop.py references variable before assigning to it,added serial.device for all platforms,serial port enumeration now included as serial.tools.list_ports,improve and fix tcp_serial_redirector example.,fixed flush_input_buffer for situations where the remote end has closed the socket.,threaded: added new module implementing a reader thread,the jython backend tries javax.comm and gnu.io , propagate exceptions raised in serialposix _reconfigure, posixserial.open raises oserror rather than serialexception when port open fails, arbitrary baud rate support for bsd family,update version variable,wrong exception on nonexistent ports with /dev file. bug report by louis cordier,rs485 support changed , setting non standard baud rates on darwin , fix: nameerror: global name 'base' is not defined, miniterm.py fails to exit on failed serial port, win32: fix exception for composite serial number search on windows,implement write timeouts ,win32 does now return the remaining characters on timeout,"minor fixes to setup.py , inter_byte_timeout , rfc2217 , list_ports , loop://, renamed readerthread",multithreading fixes to wxterminal.py , context manager automatically opens port on __enter__,tests live in their own directory now ,: keep rts/cts state on port setting changes, fixed issue with 0 timeout on windows 10, serial.serial should not raise ioerror., reset_input_buffer can hang on sockets," list_ports_linux: correct ""interface"" property on linux hosts",win32 handles \.comx format automatically for com ports of higher number , the serial class in the .net/mono backend does not implement the _reconfigure_port method,compatibility to win9x improved, fix return value of write, list_ports: workaround for special characters in port names, nonblocking error - unix platform,new url type: hwgrep://<regexp> uses list_ports module to search for ports by their description
Pychromecast Changelog - pyup.io,pipfiles and docker, * run black and flake8 on examples emontnemery," * add support for lists, playqueues, and playlists on plex controller. maykar", * remove host and port from chromecast object emontnemery, * add support for lovelace dashboards bramkragten, * correct version, * **breaking change** add support to castlistener for service updates emontnemery, * ensure data parsed as json is a dict emontnemery, * add support for bubbleupnp eerovil, * use urllib.request instead of requests emontnemery, * add support for queue_insert bjesus, - improve examples and docstrings emontnemery," - bump linters, run flake and black on examples emontnemery",send a mail to and we'll get back to you shortly., * allow passing an already existing zeroconf object to additional functions emontnemery,a changelog finder and parser., * add debug prints emontnemery, * fix some strings mangled by black formatting emontnemery, * refactor listeners and controllers as abcs emontnemery, * don't throw if socket is already closed when cleaning up emontnemery,"pyup safety actively tracks 310,197 python packages for vulnerabilities and notifies you when to upgrade."," * update ""add support to your favorite app"" in the readme eerovil", * breaking change track services based on uuid instead of mdns service name emontnemery, * add discovery example emontnemery, * add zeroconf debug option to example scripts emontnemery, * remove unintended 'async' from listener interfaces emontnemery, * bump version,what's changed,what's changed,what's changed,what's changed,what's changed,what's changed,what's changed,what's changed,what's changed,what's changed,what's changed,what's changed,what's changed,what's changed,what's changed,what's changed,what's changed,what's changed,what's changed,what's changed,what's changed,what's changed,what's changed,what's changed, * remove reboot function emontnemery,breaking change track services based on uuid instead of mdns service name emontnemery, - fix bugs in chromecast.is_idle and receivercontroller.launch_app emontnemery, * keep previously known chromecast in service listener emontnemery,support, * add ability to pass in a zeroconf instance to discovery bdraco, * bump flake8 from 3.8.3 to 3.8.4 dependabot,sign up," * docs: fix simple typo, neeeded -> needed timgates42", * create dependabot config file dependabot-preview, * **breaking change** refactor start_discovery to fix race emontnemery, * add more google devices to consts theychx, * ignore browser updates for *._sub._googlecast._tcp.local. emontnemery, * bump flake8 from 3.7.9 to 3.8.3 dependabot-preview, * update bubbleupnp example emontnemery, * allow passing additional media information through to play_media hunterjm, - **breaking change** remove blocking option from chromecast emontnemery,don't trust user input,releases, * make current_time optional when loading or queing media emontnemery, * move receivercontroller to its own module emontnemery,latest posts,analyzing django requirement files on github, * misc spelling changes clach04, * correct `metadata_type` in media.py jparthum, * get ipaddress the same way as code examples in zeroconf fondberg, * fix return type of get_listed_chromecasts emontnemery, * fix get_chromecasts non blocking mode emontnemery, * report host+port for discovered casts emontnemery,a database of insecure python packages.
Changelog â€” Urwid 2.1.2,bargraph and progressbar can now display data more accurately by using the utf-8 vertical and horizontal eighth characters. this behavior will be enabled when the utf-8 encoding is detected and smoothed attributes are passed to the bargraph or progressbar constructors.,some new shift+arrow and numpad input sequences from rxvt and xterm are now recognized,use comparison with a string instead of is test with a literal ,use reactor.stop in twistedeventloop and document that twisted s reactor is not designed to be stopped then restarted,"replaced all tabs with 4 spaces, code is now more aerodynamic ",external event loops may now be used with the raw_display module. the new methods get_input_descriptors and get_input_nonblocking should be used instead of get_input to allow input processing without blocking.,shared command_map instance is now stored as widget._command_map class attribute and may be overridden in subclasses or individual widgets for more control over special keystrokes,register_palette and register_palette_entry now accept default as foreground and/or background. if the terminal s default attributes cannot be detected black on light gray will be used to accommodate terminals with always-black cursors.,new support for 256 and 88 color terminals with raw_display and html_fragment display modules,some unicode characters are now converted to use the g1 alternate character set with dec special and line drawing characters. these unicode characters should now just work in almost all terminals and encodings.,"new support for python 3.2 from the same 2.x code base, requires distribute instead of setuptools everything except twistedeventloop and glibeventloop is supported",new support for utf-8 encoding. unicode strings may be used and will be converted to the current encoding when output. regular strings in the current encoding may still be used.,"new support for utf-8 encoding including input, display and editing of narrow and wide characters.",pile and columns now accept given instead of fixed for cases where the number of rows or columns are specified by the container options,padding widget now defaults to instead of pack so that left and right parameters are more useful and more child widgets are supported,"new lcd_display module with support for cf635 usb lcd panel and lcd_cf635.py example program with menus, slider controls and a custom font",new bigtext class that draws text with fonts made of grids of character cells. bigtext is a fixed widget and doesn t do any alignment or wrapping. it is intended for banners and number readouts that need to stand out on the screen.,removed util.register_align_mode and util.register_wrap_mode. their functionality has been replaced by the new layout classes.,added saving of stdin and stdout in raw_display module allowing the originals to be redirected,fixed unicode conversion and locale issues when using urwid with python < 2.4. the graph.py example program should now work properly with older versions of python.,fix for suspend and resume applications with ^z,curses_display.screen.get_input may now return double width characters. text and edit classes will work with a mix of regular and double width characters.,new supports_unicode function to query if unicode strings with characters outside the ascii range may be used with the current encoding.,"edit widget now supports a mask , has an insert_text_result method for full-field validation and normalizes input text to unicode or bytes based on the caption type used",fix tutorial examples use of textcanvas and switch to using unicode literals,fixed a bug in the handling of invalid utf-8 data. all invalid characters are now replaced with ? characters when displayed.,all display modules now have start and stop methods that may be used instead of calling run_wrapper.,new left and right values may be specified in padding widgets,don t use deprecated inspect.getargspec with python3 ,curses_display now supports attrspec and external event loops just like raw_display,updated tutorial with mainloop usage and improved examples,fixed a canvascache with render used in both a widget and its superclass bug ,fix for widgetwrap and attrmap not working with fixed widgets,new twisted_serve_ssh.py example that serves multiple displays over ssh from the same application using twisted and the twistedeventloop,replaced the custom align and wrap modes in example program calc.py with a new layout class.,fix for final output not appearing on exit with some terminals now that extra newline was removed ,fix for pile and graphvscale when rendered with no contents,when urwid is run with the utf-8 encoding the characters are left as utf-8 and not converted.,preliminary mouse support was added to the raw_display and curses_display modules. a new screen.set_mouse_tracking method was added to enable mouse tracking. mouse events are returned alongside keystrokes from the screen.get_input method.,filler now has top and bottom parameters like padding s left and right parameters and accepts pack instead of none as a height value for widgets that calculate their own number of rows, default is now the default for text with no attributes. this means that areas with no attributes will change from light grey on black to black on light gray or the terminal s default.,widget now has a default focus_position property that raises an indexerror when read to be consistent with new common container api,signals now support using weakly referenced arguments to help avoid leaking objects when a signal consumer is no longer referenced ,right-to-left input and display are not implemented.,new glibeventloop allows running urwid applications with glib ,new pollinglistwalker class is now the default list walker that is used when passing a simple list to the listbox constructor. this class is intended for backwards compatibility only. when this class is used the listbox object is unable to cache its render method.,new list walker simplefocuslistwalker like simplelistwalker but updates focus position as items are inserted or removed,"pile widgets now support selectable items, focus changing with up and down keys and setting the cursor position.",fix for systems with gpm_mev installed but not running gpm,new tty_signal_keys method of raw_display.screen and curses_display.screen allows changing or disabling the keys used to send signals to the application,avoids use of bold text in xterm and gnome-terminal for improved text legibility.,new experimental terminal widget with xterm emulation and terminal.py example program ,"preliminary combining character support is included, but full support will require terminal behavior detection.","canvas classes have been reorganized: canvas has been renamed to textcanvas and canvas is now the base class for all canvases. new canvas classes include blankcanvas, solidcanvas and compositecanvas.",fix for listbox snapping to selectable widgets taller than the listbox itself,simplelistwalker now behaves as a list and supports all list operations. this class now detects when changes are made to the list and notifies the listbox object. new code should use this class to wrap lists of widgets before passing them to the listbox constructor.,"boxwidget, flowwidget and fixedwidget are deprecated, instead use the sizing function or _sizing attribute to specify the supported sizing modes for your custom widgets",avoid hogging cpu on gradual window resize and fix for slow resize with cygwin s broken curses implementation.,"fixed a text layout bug affecting clipped text with blank lines, and another related to wrapped text starting with a space character.",new widget base class for all widgets. it includes automatic caching of rows and render methods. it also adds a new __super attribute for accessing methods in superclasses.,new textlayout and standardtextlayout classes to perform text wrapping and alignment. text widgets now have a layout parameter to allow use of custom textlayout objects.,"new widgetdecoration base class for attrmap, boxadapter, padding, filler and linebox widgets creates a common method for accessing and updating their contained widgets",fixed a newly introduced incompatibility with python < 2.3.,pile class may now be used as a box widget and contain a mix of box and flow widgets.,progressbar text content and alignment may now be overridden,"new popuplauncher and popuptarget widgets and mainloop option for creating pop-ups and drop-downs, and new pop_up.py example program",new attrspec class for specifying specific colors instead of using attributes defined in the screen s palette,extended numerical editing: integers and floats ,the raw_display module now uses an alternate buffer so that the original screen can be restored on exit. the old behaviour is available by setting the alternate_buffer parameter of start or run_wrapper to false.,new twistedeventloop allows running urwid with a twisted reactor,make columns and pile selectable when any child widget is ,fixed a missing symbol in curses_display when python is linked against libcurses.,deprecated classes,raw_display switching to alternate buffer now works properly with terminal.app,"supports font/window resizing, keepalive for long-lived connections, limiting maximum concurrent connections, polling and connected update methods. tested with mozilla firefox and internet explorer.",overlay widget parameters may now be adjusted after creation with set_overlay_parameters method,fix for padding.align and width change not invalidating,"new mainloop.watch_pipe method for subprocess or threaded communication with the process/thread updating the ui, and new subproc.py example demonstrating its use","columns widgets now support fixed width and relative width columns, a minimum width for all columns, selectable items within columns containing flow widgets , focus changing with left and right keys and setting the cursor position.",pile and columns now accepts pack instead of flow for widgets that calculate their own number of rows or columns,new raw_display module that handles console display without relying on external libraries. this module was written as a work around for the lack of utf-8 support in the standard version of ncurses.,new signals class that will be used to improve the existing event callbacks. currently it is used for listwalker objects to notify their listbox when their content has changed.,selectableicon selectable text widget used by button widgets is now documented ,support for home and end keys in listbox ,selectableicon using cursor_position=0 by default instead of 1.,new list walker api version 2 that is simpler for many list walker uses; api version 1 will still continue to be supported,replaced hashbangs to use proper python binary ,please note: there are issues related to displaying utf-8 characters with the curses_display module that have not yet been resolved.,fixes for examples compatibility with python 3 ,prevent listboxes from selecting 0-height selectable widgets when moving up or down,fixed a bug in text.pack that caused an infinite loop when the text contained a newline. this function is not currently used by urwid.,columns.set_focus will now accept an integer or a widget as its parameter.,"listbox now includes a get_cursor_coords method, allowing nested listbox widgets",fix for a listbox contents too long error with very large edit widgets,fix support for negative indexes with monitoredfocuslist ,improved support for cyrillic and other simple 8-bit encodings.,"the edit and intedit classes now use their set_edit_text and set_edit_pos functions when handling keypresses, so those functions may be overridden to catch text modification.",new function get_all_fonts may be used to get a list of the available fonts.,fixed bugs in padding and overlay widgets introduced in 0.9.7.,fix input of utf-8 in tour.py example by converting captions to unicode,"new overlay class for drawing widgets that obscure parts of other widgets. may be used for drop down menus, combo boxes, overlapping windows , caption text etc.",allow disabling and re-enabling of mouse tracking ,fix for a bug with large flow widgets used in an overlay,fixed graph example cpu usage when animation is stopped,new curses_display input handling with better esc key detection and broader escape code support.,fix terminal select not retrying when interrupted by signal,added widgetwrap class for extending existing widgets without inheriting their complete namespace.,fix for raw_display clear-right escape not working with standout attribute on some terminals,frame widgets now support selectable items in the header and footer.,add support for double and triple click mouse events ,modified examples to not use black as background of edit widgets.,disable curses_display external event loop support: screen resizing and gpm events are not properly supported,use new method edit.set_edit_text instead of edit.update_text.,"fix use of ignore_focus, for widgets inheriting from text ",attrspec objects are now comparable ,fixed a bug preventing use of utf-8 characters with divider widgets.,columns widget contents may now be marked to always be treated as flow widgets for mixing flow and box widgets more easily,added initial support for fixed widgets - widgets that have a fixed size on screen. fixed widgets expect a size parameter equal to . fixed widgets must implement the pack function to return their size.,new raw_display.signal_init and raw_display.signal_restore methods that may be overridden by threaded applications that need to call signal.signal from their main thread.,fix for registering high palette entries in the form hx where x > 15 so that basic colors are applied in 88-color mode,fixes for incorrect handling of box columns in a number of columns methods when that column is selectable,fixed incompatibilities with python 2.6 ,"new treewidget, treenode, parentnode, treewalker and treelistbox classes for lazy expanding/collapsing tree views factored out of browse.py example program, with new treesample.py example program ",fix crash with ellipsis clipping for py2 tour.py works with py2 now typo in tour.py ,fixed incompatibilities with python 2.3,add support for bright backgrounds on linux console ,improved performance in utf-8 mode when ascii text is used.,fix for a padding rows bug when used with width=pack,improved the smoothness of resizing with raw_display module. the module will now try to stop updating the screen when a resize event occurs during the update.,fixed minor cjk problem and curs_set crash under macosx and cygwin.,pile and columns widgets now accept any iterable to their __init__ methods,add support for input encoding in terminal widget ,new decoration widget widgetdisable to disable interaction with the widgets it wraps,overlay class can now accept a fixed widget as the widget to display on top .,fixed mouse handling bugs in the frame and overlay classes.,a new convenience function is_mouse_event was added to help in separating mouse events from keystrokes.,"renamed widgetwrap.w to _w, indicating its intended use as a way to implement a widget with other widgets, not necessarily as a container for other widgets","new layout structure replaces line translation structure. layout structure now allows arbitrary reordering/positioning of text segments, inclusion of utf-8 characters and insertion of text not found in the original text string.",add installation instruction to readme ,"new sphinx-based documentation now included in source: tutorial rewritten, manual revised and new reference based on updated docstrings ",fix for alarms when used with a screen event loop ,fix for alarms when used with a screen event loop ,mouse drag events are now reported by raw_display in terminals that provide button event tracking and on the console with gpm. note that gpm may report coordinates off the screen if the user drags the mouse off the edge.,the widget interface does not yet include mouse handling. this will be addressed in the next release.,fix for tmux and screen missing colors on right bug,updated tour.py example program to show new widget types and features.,proper handling & customization of os signals by glib event loop ,added new docstrings and doctests to many widget classes,new method for configuring keyboard input timeouts and delays: curses_display.screen.set_input_timeouts.,word wrapping mode space will wrap on edges of double width characters. wrapping and clipping will not split double width characters.,test coverage is now collected,"added a new example program input_test.py. this program displays the keyboard and mouse input it receives. it may be run as a cgi script or from the command line. on the command line it defaults to using the curses_display module, use input_test.py raw to use the raw_display module instead.",fix for terminal widget input handling with python 3,add workaround for #386 ,rendering is now significantly faster.,improved widget and list walker interface documentation.,"expanded tutorial to cover advanced listbox usage, custom widget classes and the pile, boxadapter, columns, gridflow and overlay classes.",raw_display and curses_display now support the ibmpc character set ,fix for screen not getting reset on exception regression ,"button release events now report which button was released if that information is available, currently only on the console with gpm.",fix for a doctest failure under powerpc,"the columns, pile and listbox widgets now choose their first selectable child widget as the focus widget by default.",fix underlining for padded text ,do not call wait_readable with a closed fd in trioeventloop ,list walkers may now allow iteration from the absolute top or bottom of the list if they provide a positions method,"automate testing with python 2.6, 2.7, 3.2, 3.3 and pypy using travis-ci","fix the asyncio example, and make the raw screen work without real files ",#261: fix issues with unicode characters in progressbar ,the set_state functions in the checkbox and radiobutton classes now have a do_callback parameter that determines if the callback function registered will be called.,fix for bug when entering unicode text into edit widget with bytes caption,fix for page up and page down in listbox when having focusable children ,added new functions to simplify taking screenshots: html_fragment.screenshot_init and html_fragment.screenshot_collect,to disable caching in a widget set the class variable no_cache to a list that includes the string render .,fix a number of bugs caused by 0-height widgets in a listbox,added support for monochrome terminals. see curses_display.screen.register_palette_entry and example programs. set term=xterm-mono to test programs in monochrome mode.,fix for a lock up when attempting to wrap text containing wide characters into a single character column,fix frame mouse_event when footer is trimmed ,"new bargraph, graphvscale and progressbar classes for graphical display of data in urwid applications.",raw_display now erases to the end of the line with el escape sequence to improve copy+paste behavior for some terminals,"mainloop now calls draw_screen just before going idle, so extra calls to draw_screen in user code may now be removed",#221: fix for raw display should release file descriptors ,overlay.calculate_padding_filler and padding.padding_values now include focus parameters.,"add support for python 3.7 and 3.8, drop support for python 3.3",example fixes ,linebox widgets may now include title text,"new example program graph.py demonstrates use of bargraph, linebox, progressbar and solidfill.",new command_map for specifying which keys cause actions such as clicking button widgets and scrolling listbox widgets,fixed a simplelistwalker with emptied list bug ,ignore resetting to invalid locale ,added detection for rxvt s home and end escape sequences.,simplelistwalker is now default when setting listbox.body ,padding class now has a clipping mode that pads or clips fixed widgets to make them behave as flow widgets.,fix for boxadapter backwards incompatibility introduced in 0.9.9,removed some forgotten asserts that broke 8-bit and cjk input.,"move to urwid.org and use sphinx docs for generating whole site, move changelog to docs/changelog.rst",fixed an edit.render bug that caused it to render the cursor in a different location than that reported by edit.get_cursor_coords in some circumstances.,"columns widget now tries to keep column in focus visible, hiding columns on the left when necessary","new asyncioeventloop for python 3.4, python 3.x with asyncio package or python 2 with trollius package ",instance of terminal has no __super attr thanks pylint! ,fixes for a number of string encoding issues under python 3,many internal string processing functions have been rewritten in c to improve their performance.,"new attrmap widget supports mapping any attribute to any other attribute, replaces attrwrap widget",new example program bigtext.py demonstrates use of bigtext.,add popular ides folders to .gitignore ,create section in docs for example program screenshots generated as images like the tutorial examples,added a clear function to the display modules to force the screen to be repainted on the next draw_screen call.,add suggested basic color combination images to manual,italics support ,fix encoding exceptions when unicode used on non-utf-8 terminal,new linebox class for wrapping widgets in a box made of line- drawing characters. may be used as a box widget or a flow widget.,small changes to enable windows support ,fixes for a columns.get_cursor_coords regression and a selectableicon.get_cursor_coords bug,"fixed a filler render bug, a raw_display start/stop bug and a number of problems triggered by very small terminal window sizes.",new widgetplaceholder widget useful for swapping widgets without having to manipulate a container widget s contents,fixed a padding bug when the left or right has no padding.,fix for terminal widget crash with python 3 ,new set_encoding function replaces util.set_double_byte_encoding.,fix for raw_display when terminal width is 1 column,new web_display module that emulates a console display within a web browser window. application must be run as a cgi script under apache.,fix for missing modified signal in simplefocuslistwalker ,fix python 3.8 syntaxwarning: str object is not callable ,fixed curses_display bug affecting text with no attributes.,columns class may now contain a mix of box and flow widgets. the box widgets will take their height from the maximum height of the flow widgets.,add ability to specify linebox title attribute ,gridflow now supports multiple cell widths within the same widget,new get_encoding_mode function to determine how urwid will treat raw string data.,shortened resize timeout on gradual resize to improve responsiveness.,break rather than raising exception on shard calculation bug. ,fixed a bug that prevented the use of utf-8 strings in text markup.,#275: late fix for proper exception reraising from within main loop ,can now run urwid/curses_display.py to test your terminal s input and colour rendering.,fixed a memory leak related to objects listening for signals,remove extra newline generated on exit of raw_display,add a test to check the linebox.pack is good. ,fixed cursor in screenshots of cjk text. fixed end key in edit boxes with cjk text.,filler widgets may now wrap box widgets and have more alignment options.
Change history â€” Kombu 5.0.2 documentation,this change is backwards incompatible and must be enabled with the fanout_patterns transport option:,this was previously required by the simple classes and is now also required by consumer and producer.,refactor the producer consumer test cases to be based on original mocks and be passing,"tests no longer depends on distribute, which was deprecated and merged back into setuptools.","kombu can now be used with pydev, pycharm and other static analysis tools.",if the accept whitelist is set and a message is received with a content type that is not in the whitelist then a contentdisallowed exception is raised. note that this error can be handled by the already existing on_decode_error callback,"transport defaults to amqp, and is not required. user, password, port and virtual_host is also not mandatory and will default to the corresponding transports default.","consumer/producer can now be instantiated without a channel, and only later bound using .revive.","it was possible to enable this mode previously using the fanout_prefix, and fanout_patterns transport options, but now these are enabled by default.",amqp: transport options are now merged with arguments supplied to the connection.,"when using celery and the pickle serializer with binary data as part of the payload, unicodedecodeerror would be raised as the content was not utf-8. we now replace on errors.","the dead-letter queue was enabled by default to help application authors, but now that kombu is stable it should be removed. there are after all many cases where messages should just be dropped when there are no queues to buffer them, and keeping them without supporting automatic cleanup is rather considered a resource leak than a feature.","still, it is possible that using priorities in combination with routing can be more beneficial than using routing or priorities alone. experimentation and monitoring should be used to prove this.",and amqp.connectionerror and amqp.channelerror is used instead.,"auto delete has been described as a misfeature, and therefore we have disabled it.","message compatibility is handled by adding a body_encoding property, so messages sent by older versions is compatible with this release. however if you are accessing the messages directly not using kombu, then you have to respect the body_encoding property.",auto delete support for virtual transports were incomplete and could lead to problems so it was removed.,now comes with default global connection and producer pools.,removed deprecated use of stopiteration in generators and invalid regex escape sequence.,"exchange.delivery_mode now defaults to none, and the default is instead set by producer.publish.",the transport is implemented on top of azure service bus and offers paas support for more demanding celery workloads in azure. the transport is intended to be used in conjunction with the azure cosmosdb backend.,"kombu 3 consumers will no longer accept pickle/yaml or msgpack by default, and you will have to explicitly enable untrusted deserializers either globally using kombu.enable_insecure_serializers, or using the accept argument to consumer.",compression can now be used with binary message payloads.,"the accept argument was first supported for consumers in version 2.5.10, and first supported by queue.get in version 2.5.15 so to stay compatible with previous versions you can enable the previous behavior:",this fixes an issue when using gevent/eventlet and a message is handled after the consumer is canceled resulting in a message for queue without consumers error.,the transport is implemented on top of azure storage queues. this offers a simple but scalable and low-cost paas transport for celery users in azure. the transport is intended to be used in conjunction with the azure block blob storage backend.,for example the default broker is expressed as:,redis: now works with linux ,"in addition, an undeliverablewarning is now emitted when the dead-letter queue is enabled and a message ends up there.","this used to be the case before, but the behavior was accidentally changed while switching to using blocking pop.","the polling interval default has been changed to 0 and a new transport option has been added. this parameter specifies how long to wait for a message from sqs, and defaults to 20 seconds, which is the maximum value currently allowed by amazon sqs.","it was introduced as an experimental transport in kombu 3.0, but is now mature enough to be fully supported.",fixed infinite loop when entity.channel is replaced by revive on connection drop.,"the latest version drastically changed api, and it is not compatible yet.",api compatible with librabbitmq so that it can be used as a pure-python replacement in environments where rabbitmq-c cannot be compiled. librabbitmq will be updated to support all the same features as py-amqp.,"sqs: long polling is now disabled by default as it was not implemented correctly, resulting in long delays between receiving messages .","kombu now requires version 2.10.4 or greater of the redis library, in line with celery",connection.autoretry: now works with functions missing wrapped attributes,acks are now implemented by storing a copy of the message when the message is consumed. the copy is not removed until the consumer acknowledges or rejects it.,"note that the path component always starts with a forward-slash. this is necessary to distinguish between the virtual host and / , which are both acceptable virtual host names.","other callbacks specified using the callbacks argument, and the receive method will be not be called when a on message callback is present.","the connection alias has been available since version 1.1.3, and brokerconnection will still work and is not deprecated.",use sismember instead of smembers command to check if queue exists in a set. time complexity is increased from o to o where n is the set cardinality.,compression errors are now handled as decode errors and will trigger the consumer.on_decode_error callback if specified.,"pickle is known to be a security concern as it will happily load any object that is embedded in a pickle payload, and payloads can be crafted to do almost anything you want. the default serializer in kombu is json but it also supports a number of other serialization formats that it will evaluate if received: including pickle.",virtual: message.reject is now supported by virtual transports .,qpid: messages are now durable by default,or it can be a single string argument with several urls separated by semicolon:,"the pyamqp:// transport will be the default fallback transport in kombu version 3.0, when librabbitmq is not installed, and librabbitmq will also be updated to support the same features.",queues that are declared with a ttl are now also be excluded from the in-memory cache in case they expire between publishes on the same channel.,pinned pycurl to 7.43.0.2 as it is the latest build with wheels provided,"if you have previously used django-kombu, then there is no need to recreate the tables, as the old tables will be fully compatible with the new version.",this improvement will create a new compund index for queue and _id in order to be able to use both indexed fields for getting a new message and sorting by _id. it ll be necessary to manually delete the old index from the collection.,this was caused by the use of __hash__ to distinguish them.,now uses pickle protocol 2 by default to be cross-compatible with python 3.,this change is not backwards incompatible and you are encouraged to update all your system using a previous version as soon as possible.,"py-amqp is now the new default transport, replacing amqplib.","the pyyaml library has a yaml.load function with some of the same security implications as pickle, but kombu uses the yaml.safe_load function which is not known to be affected.","the interface is very manual, and only consuming messages is non-blocking so far.","where each sentinel is separated by a ;. multiple sentinels are handled by kombu.connection constructor, and placed in the alternative list of servers to connect to in case of connection failure.",api compatible with librabbitmq so that it can be used as a pure-python replacement in environments where rabbitmq-c cannot be compiled.,is called before every call to poll. the poller must support register and unregister methods.,adds support for fifo queues and ,"connectionpool/channelpool/resource: setting limit=none now disables pool semantics, and will establish and close the resource whenever acquired or released.",revert incompatible changes in #1193 and additional improvements ,new and better repr for queue and exchange objects.,"however, enabling this means that you cannot send or receive messages from older kombu versions so make sure all of your participants are upgraded and have the transport option enabled.",custom serializers can now be registered using setuptools entry-points.,amqplib: fixed bug with timeouts when ssl is used in non-blocking mode.,created and maintained by brian bouterse.,"the delivery_mode aliases were not automatically converted to integer, and would cause a crash if using the amqplib transport.","a callback to be called when the queue is declared, with signature .",transports may now distinguish between recoverable and irrecoverable connection and channel errors.,connectionpool/channelpool/resource: is now using a lifo queue instead of the previous fifo behavior.,amqplib: now uses localhost as default hostname instead of raising an error.,"it uses polling, with a default polling interval of 5 seconds. the polling interval can be increased or decreased by configuring the kombu_polling_interval django setting, which is the polling interval in seconds as an int or a float. note that shorter polling intervals can cause extreme strain on the database: if responsiveness is needed you shall consider switching to a non-polling transport.",redis transport: now supports using local unix sockets to communicate with the,stdconnectionerror and stdchannelerror is removed,now uses fuzzy matching to suggest alternatives to typos in transport names.,replaced async with asynchronous in preparation for python 3.7,zookeeper: added support for delaying task with python 3.,amqplib: now detects broken connections by using msg_peek.,virtual transports now comes with a default default_connection_params attribute.,"amqplib has not been updated in a long while, so maintaining our own fork ensures that we can quickly roll out new features and fixes without resorting to monkey patching.",redis: auto delete queues that are bound to fanout exchanges is now deleted at channel.close.,the librabbitmq falls back to the older pylibrabbitmq name for compatibility reasons and would therefore show no module named pylibrabbitmq instead of librabbitmq.,"retry is enabled by the reply argument, and retry options set by the retry_policy argument:","the timeout is set to one hour by default, but can be changed by configuring a transport option:",on_decode_error is now called for exceptions in message_to_python .,avoid caching queues which are declared with a ttl.,to keep using kombu.transport.django with south migrations you now need to configure a new location for the kombu migrations:,the attribute connection.supports_heartbeats has been added for the ability to inspect if a transport supports heartbeats or not.,durable and auto_delete queues/exchanges can be be cached using maybe_declare.,empty messages would not raise an exception not able to be handled by on_decode_error ,"when using the sqs broker, fifo queues with names that ended with the f letter were incorrectly parsed. this is now fixed.",connection.autoretry is a version of ensure that works with arbitrary functions (i.e. it does not need an associated object that implements the revive method.,"pidbox: now makes sure message encoding errors are handled by default, so that a custom error handler does not need to be specified.",eventio: kqueue breaks in subtle ways so select is now used instead.,kombu will now only choose between simplejson and the built-in json.,queue_bind is no longer called for queues bound to the default exchange .,the api should not be regarded as stable or final in any way. it is used by celery which has very limited needs at this point. hopefully we can introduce a proper callback-based api later.,fixed bug where return value of queue.as_dict could not be serialized with json .,"this is a non-blocking alternative to drain_events, but only supported by amqplib/librabbitmq.",connection.ensure now supports an on_revive callback that is applied whenever the connection is re-established.,to have your consumer accept formats other than json you have to explicitly add the wanted formats to a white-list of accepted content types:,"the new py-amqp version have been refactored for better performance, using modern python socket conventions, and api consistency.",the message s priority field is now respected by the redis transport by having multiple lists for each named queue. the queues are then consumed by in order of priority.,if you want to use a different encoder you can do so by adding a key to channel.codecs. default encoding is specified by the channel.body_encoding attribute.,this is to support eventloops where other things must be handled between draining events.,"this is possible because the list of cached declarations are now kept with the connection, so that the entities will be redeclared if the connection is lost.",revert revert use simembers instead of smembers to check for queue ,any message with a content type that is disabled will be refused. one example would be to disable the pickle serializer:,this transport option is recommended for all users as it ensures that broadcast messages sent is only seen by the current virtual host:,fixed problem with connection clone and multiple urls .,"pidbox: can now be configured to use a serializer other than json, but specifying a serializer argument to mailbox.","the api is meant to match the tulip api which will be included in python 3.4 as the asyncio module. it s not a complete implementation obviously, but the goal is that it will be easy to change to it once that is possible.",redis: now supports ssl using the ssl argument to connection.,a new connection property has been added that can be used to detect whether the remote server is using this new qos behavior:,using the latest version of simplejson is recommended:,"this is unlikey to affect you, as the kombu api does not have users instantiate messages manually.",this code was previously in celery but was moved here to make it easier for async transport implementations.,pyamqp/librabbitmq now uses 5671 as default port when ssl is enabled .,"pidbox: fixes problem where expires header was none, which is a value not supported by the amq protocol.","priorities implemented in this way is not as reliable as priorities on the server side, which is why nickname the feature quasi-priorities ; using routing is still the suggested way of ensuring quality of service, as client implemented priorities fall short in a number of ways, e.g. if the worker is busy with long running tasks, has prefetched many messages, or the queues are congested.",added support for broadcasting using a regular expression pattern or a glob pattern to multiple pidboxes.,things that can be retried are now reraised as kombu.exceptions.operationalerror.,virtual: routing keys can now consist of characters also used in regular expressions .,the max_retries setting for retries was not respected correctly .,sqs: added support for long-polling on all supported queries. fixed bug causing error on parsing responses with no retrieved messages from sqs.,ghettoq backend names are now automatically translated to the new names.,the new py-amqp library is a fork of amqplib started with the following goals:,the new py-amqp library is a fork of amqplib started with the following goals:,beanstalk: now uses localhost by default if the url does not contain a host.,"the mutex expires after 5 minutes by default, but can be configured using the unacked_mutex_expire transport option.",new queue.consumer_arguments can be used for the ability to set consumer priority via x-priority.,"it was always assumed that users were educated about the security implications of pickle, but in hindsight we don t think users should be expected to secure their services if we have the ability to be secure by default.",this means that kombu will by default refuse to handle any content type other than json.,"the other built-in serializers are also disabled even though they aren t considered insecure 1 at this point. instead they re disabled so that if a security flaw is found in one of these libraries in the future, you will only be affected if you have explicitly enabled them.",functional tests added for py-amqp and librabbitmq transports.,fixed importerror in some environments with outdated simplejson,it will not be used if the process is monkey patched by eventlet/gevent.,this will prevent celery from raising an error and hanging.,see examples and consumers.,"using the consumermixin, default channels and the global connection pool to demonstrate new kombu features.",consumer: accept can now be used to specify a whitelist of content types to accept.,virtual: allow channel objects to be closed multiple times without error.,"the 1.x series has entered bugfix-only maintenance mode, and will stay that way as long as there is demand, and a willingness to maintain it.",this is a list of entities that should be declared before the message is published.,removed transports that are no longer supported in this version:,this allows :class:kombu.simple.simplequeue to connect to rabbitmq queues with custom arguments like x-queue-mode = lazy .,tests were added to avoid further regressions.,mongodb: fixed problem with using readpreference option at pymongo 3.x.,consumer now supports a on_message callback that can be used to process raw messages .,new kombu.common.qos class used as a thread-safe way to manage changes to a consumer or channels prefetch_count.,since we have ack emulation the visibility timeout is only in effect if the consumer is abrubtly terminated.,revert celery/kombu#906 and introduce unique broadcast queue names as an optional keyword argument.,the connections default channel will then be used.,codebase improvements and fixes by:,codebase improvements and fixes by:,codebase improvements and fixes by:,codebase improvements and fixes by:,in addition shortcut methods has been added to connection:,exchange & queue can now be bound to connections :,this is planned to be default behavior in the future.,"but note that this has global effect, so be very careful should you use it.",the kombu extra has been updated to depend on this version.,serailization: renamed functions encode/decode to dumps and loads.,"for rabbitmq users old exchanges used by pidbox must be removed, these are named mailbox_name.pidbox, and reply.mailbox_name.pidbox.",as documented in kombu/#741 and eventlet/eventlet#415 there is a mismatch between the monkey-patched eventlet queue and the interface kombu is expecting. this causes celery to crash when the broker_pool_limit configuration option is set eventlet/eventlet#415 suggests that the mutex can be a noop. this is now the case.,dual codebase supporting both python 2 and 3.,"if you have been affected by this, the error would show itself as an exception raised by the ordereddict implementation. .","virtual transports now stores priority as a property, not in delivery_info, to be compatible with amqp.",also fixes celery#971 and celery/#898.,"the priority range is collapsed into four steps by default, since it is unlikely that nine steps will yield more benefit than using four steps. the number of steps can be configured by setting the priority_steps transport option, which must be a list of numbers in sorted order:",connection.ensure_connection now takes a callback argument which is called for every loop while the connection is down.,"and then add kombu.transport.django to installed_apps, and run manage.py syncdb to create the necessary database tables.","cjson is no longer a recommended json implementation, and anyjson will now emit a deprecation warning if used.","the value of disable_tracebacks environment variable is now respected on debug, info and warning logger level.",amqps:// can now be specified to require ssl .,mongodb: version sniffing broke with development versions of,1.1.0 started using queue.lifoqueue which is only available in python 2.6+ . we now ship with our own lifoqueue.,this was previously an internal class used in celery now moved to the kombu.common module.,new arguments have been added to kombu.queue that lets you directly and conveniently configure the rabbitmq queue extensions.,mongodb: removed cause of a database name in uri is being ignored warning.,fixed error with resource.force_close_all when resources were not yet properly initialized .,adds kombu.messaging.entry_to_queue for compat with previous versions.,pools.set_limit now raises an exception if the limit is lower than the previous limit.,fxrange now counts forever if the stop argument is set to none. .,serialization.unregister added so it is possible to remove unwanted seralizers.,now compatible with django 1.9.,fixed bug in itermessages where message is received after the with statement exits the block.,message decompression now works with python 3.,the separator is now configurable using the sep transport option:,sqs: a bug caused simpledb to be used even if sdb persistence was not enabled .,the previous release contained code from master. it is now deleted from pypi. please use this release instead.,please note that the pika backend only works with version 0.5.2.,revert _lookup_direct and related changes of redis.,detect_environment has been moved to kombu.utils.compat,serialization registry has new attribute type_to_name so it is possible to lookup serializater name by content type.,no longer compatible with south by default.,virtual transports: message body is now base64 encoded by default .,amqplib: fixed bug where more bytes were requested from the socket than necessary.,contributed by jason held,producer can now be used as a context manager.,ack emulation adds quite a lot of overhead to ensure data is safe even in the event of an unclean shutdown. if data loss do not worry you there is now an ack_emulation transport option you can use to disable it:,"you don t have to change anything in your custom transports, as this is handled automatically by the base class.",redis: consuming from multiple connections now works with eventlet.,compat.entry_to_queue has been moved to new module kombu.common.,redis: basic cancel for fanout based queues now sends a corresponding unsubscribe command to the server.,fix sbugs and regressions,sqs: now supports fanout messaging by using simpledb to store routing tables.,"if you have previously used django-kombu, then the entry in installed_apps must be changed from djkombu to kombu.transport.django:","the delivery tags were accidentally set to be an incremental number local to the channel, but the delivery tags need to be globally unique so that a message can not overwrite an older message in the backup store.",the 4.2.0 release contained remains of the async module by accident. this is now fixed.,last version broke installtion on pypy and jython due to test requirements clean-up.,"mailbox now supports new arguments for controlling message ttls and queue expiry, both for the mailbox queue and for reply queues.",default login_method is amqplain.,kombu_log_debug both enables channel logging and configures the root logger to emit messages to standard error.,# or by mime-type.,redis: restore at shutdown now works when ack emulation is disabled.,kombu.five.monotonic: can now be imported even if ctypes is not available for some reason ,connection.info now gives the current hostname and not the list of available hostnames.,"previously, named broadcast queues did not create multiple queues per worker. they incorrectly declared the named queue which resulted in one queue per fanout exchange, thus missing the entire point of a fanout exchange. the behavior is now matched to unnamed broadcast queues.",this means that the userid and password arguments to connection is no longer guest/guest by default.,"this means that unacknowledged messages will be redelivered either when the connection is closed, or when the visibility timeout is exceeded.","async: event loop now selectively removes file descriptors for the mode it failed in, and keeps others .",zookeeper: transport now uses the built-in suport in kazoo to handle failover when using a list of server names.,support both redis client version 2.x and version 3.x.,used by django-kombu to increase the time to sleep between selects when there are no messages in the queue.,"this fixes an issue with pidbox where reply messages could be received after the consumer was canceled, giving the ""message to queue without consumers"" error.","cached declarations ) are now bound to the underlying connection, so that entities are redeclared if the connection is lost.","the name connection has been an alias for a very long time, but now the rename is official in the documentation as well.",this means you can now define a __json__ method for custom types that can be reduced down to a built-in json type.,add peek lock settings to be changed using transport options .,"librabbitmq: would crash when using an older version of librabbitmq, now emits warning instead.",producer and consumer now accepts a connection instance as the first argument.,users of librabbitmq is encouraged to upgrade to librabbitmq 1.5.0.,"utils.reprcall: fixed typo where kwargs argument was an empty tuple by default, and not an empty dict.",ensures cyclic references are destroyed when the connection is closed.,mongodb: now supports pymongo 3.x.,"added integration tests for direct, topic and fanout exchange types",this means connection.ensure_connection works properly with redis.,sqlalchemy: can now specify url using + separator,amqplib: fixed a bug with asynchronously reading large messages.,contributed by stevan milic and asif saif uddin,redis: fixed race condition when using gevent and the channel is closed.,the default limit of 100 connections per connection instance can be changed by doing:,"librabbitmq, amqplib and redis transports can now be used non-blocking.",fix mongodb backend to work properly with ttl ,"sqs transport: persistence using simpledb is now disabled by default, after reports of unstable simpledb connections leading to errors.",this is currently only supported by the pyamqp transport.,sqs: consumers can now read json messages not sent by kombu.,new environment variable kombu_log_connection will now emit debug,"pickle, yaml and msgpack deserialization is now disabled by default.",zeromq: now compatible with libzmq 3.2.x.,fixed typo in error when yaml is not installed .,kombu now depends on librabbitmq 1.5.1.,redis: unix socket urls can now specify a virtual host by including it as a query parameter.,the following command can be used to clean up these exchanges:,use simembers instead of smembers to check for queue ,this change requires no code changes given that the sqlalchemy transport alias is used.,exchange/queue declarations can now be cached even if the entity is non-durable.,revert celery/kombu#954. instead bump the required redis-py dependency to 3.2.0 to include this fix andymccurdy/redis-py@4e1e748.,fixes issue with kombu.compat introduced in 1.5.0 .,the amqplib and pika transports will still have the default credentials.,the protocol can also now be changed using the pickle_protocol environment variable.,"setting this flag means that the exchange will not be declared by kombu, but that it must exist already .","this ensures that a very busy queue won t block messages from other queues, and ensures that all queues have an equal chance of being consumed from.",use importlib-metadata instead of pkg_resources for better performance,sqs: fixed bug where the prefetch count limit was not respected.,qpid: now uses monotonic time for timeouts.,"adds new connection.collect method, that can be used to clean up after connections without i/o.","the default reconnection strategy is round-robin, which will simply cycle through the list forever, and there s also a shuffle strategy that will select random hosts from the list. custom strategies can also be used, in that case the argument must be a generator yielding the url to connect to.",serializer: loads and dumps now wraps exceptions raised into decodeerror and kombu.exceptions.encodeerror respectively.,for backward compatibility the old names are still available as aliases.,"sqs transport: now has a lowercase sqs alias, so that it can be used with broker urls .",utility function kombu.common.isend_reply has been removed,queue.__repr__ now makes sure return value is not unicode .,"the rediss scheme defaults to the least secure form, as there is no suitable default location for ca_certs. the recommendation would still be to follow the documentation and specify broker_use_ssl if coming from celery.",mongodb: now supports authentication using the userid and password arguments to connection .,pika: channel now supports the connection.client attribute as required by the simple interface.,if you want to mix and match producers/consumers running different versions you need to configure your kombu 3.x clients to also enable these options:,"the amqp alias is now resolved at runtime, so that eventlet detection works even if patching was done later.",support for the following environment variables have been added:,when the sqs server returns a timeout we ignore it and keep trying instead of raising an error.,redis: restoring messages will now use a single connection.,previous attempt to fix the problem did not consider an edge case. it is now fixed.,removed dangerous default mutable arguments from function definitions where appropriate.,or when using synchronous access:,"now silences all exceptions from import ctypes to match behaviour of the standard python uuid module, and avoid passing on memoryerror exceptions on selinux-enabled systems ",when enabled the exchange will work like an amqp topic exchange if the binding key is a pattern.,sqs: fixed bug with invalid characters in queue names.,"if when publishing a message, the exchange argument is set to , the routing_key will be regarded as the destination queue.",the old pika transport is now available as alias oldpika.,if you need to disable base64 encoding then you can do so via the transport options:,"note: messages that have not been acked will be redelivered if the visibility timeout is exceeded, for celery users this means that eta/countdown tasks that are scheduled to execute with a time that exceeds the visibility timeout will be executed twice . if you plan on using long eta/countdowns you should tweak the visibility timeout accordingly:",contrib/requirements is now located in the top directory of the distribution.,fixes problem with deserialization in python 3.,contributed by chris duryee.,amqplib: attributeerror has been added to the list of known connection related errors .,async: now uses poll instead of select where available.,connectionpool.acquire_channel now returns the connections default channel rather than establising a new channel that must be manually handled.,broker connection info can be now be specified using urls,redis: fixed problem with auxilliary connections causing the main consumer connection to be closed .,"mongodb transport requires the findandmodify command only available in mongodb 1.3+, so now raises an exception if connected to an incompatible server version.","redis: fanout exchanges are no longer visible between vhosts, and fanout messages can be filtered by patterns. ",must only be used for cleanup actions at shutdown or on connection loss.,connection: there s now a new method connection.supports_exchange_type that can be used to check if the current transport supports a specific exchange type.,kombu.mixins.consumermixin is a mixin class that lets you easily write consumer programs and threads.,is a map of fd -> callback to register in an eventloop.,nonblocking consume support,we do not provide migrations for this model yet. you will need to add the index manually if you are already using the sqlalchemy transport.,"if multiple is set to true, then all messages received before the message being acked will also be acknowledged.",consumer.cancel_by_queue is now constant time.,simplequeue and simplebuffer can now be used as contexts.,deprecations and removals,make sure that max_retries=0 is treated differently than none ,"1.4.0 broke the producer pool, resulting in new connections being established for every acquire.",so the leading slash in the path component is always required.,"connection pool: connections are no long instantiated when the pool is created, but instantiated as needed instead.",connection has aquired a connected attribute that can be used to check if the connection instance has established a connection.,now depends on amqp version 1.3.1.,heartbeats can now be specified in urls.,now always trusts messages of type application/data and application/text or which have an unspecified content type .,added new kombu.mixins.consumerproducermixin for consumers that will also publish messages on a separate connection.,redis: messages are now restored at the end of the list.,"eventio: now ignores enoent raised by epoll.register, and eexist from epoll.unregister.",virtual: the compression header is now removed before restoring messages.,connection.manager.get_bindings now works for librabbitmq and pika.,"retry argument to producer.publish now works properly, when the declare argument is specified.",pyamqp: fixed small issue when publishing the message and the property dictionary was set to none.,this should solve problems sending binary data with virtual transports.,etcd: added handling for etcdexception exception rather than etcderror.,virtual: now supports passive argument to exchange_declare.,"the minimum python version supported is now python 2.6.0 for python 2, and python 3.3 for python 3.",consumer: adds tag_prefix option to modify how consumer tags are generated .,"the default interval is transport specific, but usually 1.0s .",if the server has not sent heartbeats at a suitable rate then the heartbeat check method must raise an error that is listed in connection.connection_errors.,the qpid broker is supported for python 2.x environments. the qpid transport includes full ssl support within kombu. see the kombu.transport.qpid docs for more info.,"the priority field is a number in the range of 0 - 9, where 0 is the default and highest priority.",the canonical source code repository has been moved to,"acquiring a producer will in turn also acquire a connection from the associated pool in connections, so you the number of producers is bound the same limit as number of connections.","kombu.common.oid_for no longer uses the mac address of the host, but","the checks were removed in celery/kombu#938 due to assumption that it only affected jython. however, bz2 support can be missing in pythons built without bz2 support.",kombu now depends on pycurl.,this module contains a consumermixin class that can be used to easily implement a message consumer thread that consumes messages from one or more kombu.consumer instances.,major overhaul of redis test cases by adding more full featured fakeredis module.,allow users to switch urls while omitting the resource identifier ,django: now sets custom app label for kombu.transport.django to work with recent changes in django 1.7.,now depends on amqp 1.0.11,documentation: improved example to use the declare argument to producer .,the deprecated function kombu.serialization.encode has been removed.,"it used to be message, but now it s message.","the latest msgpack version no longer supports python 2.5, so if you re still using that you need to depend on an earlier msgpack-python version.",fix contributed by stephan jaekel.,this means that the last resource released will be the one acquired next. i.e. if only a single thread is using the pool this means only a single connection will ever be used.,redis: now uses a mutex to ensure only one consumer restores messages at a time.,"json serializer: now passes buffer objects directly, since this is supported in the latest anyjson version.",connection.default_channel is now closed when connection is revived after connection failures.,fix contributed by dongweiming.,sqs: allowed endpoint url to be specified in the boto3 connection.,"a value of 0 now means do not retry, which is distinct from none which means retry indefinitely.",redis: now depends on py-redis 2.10.0 or later .,include priority in properties only if it s not none. since we attempt to serialize the priority property if it exists in the dictionary it must be an integer.,a none value is now automatically converted to empty string. an empty string will make the server generate a unique tag.,redis: fixed bug introduced in 3.0.30 where socket was prematurely disconnected.,"redis: each channel is now using a specific connection pool instance, which is disconnected on connection failure.",all kombu exceptions now inherit from a common kombuerror.,see ensure for a list of supported retry policy options.,connection urls now supports encoded characters.,fixes compatiblity with uuid in python 2.7.11 and 3.5.1.,by disabling any content type that the user did not explicitly want enabled we ensure that the user must be conscious when they add pickle as a serialization format to support.,now always makes sure references to sys.exc_info is removed.,new utility kombu.common.ignore_errors ignores connection and channel errors.,there is also a new keyword argument failover_strategy that defines how ensure_connection/ ensure/kombu.connection.autoretry will reconnect in the event of connection failures.,fix 100% cpu usage on linux while using sqs,fix contributed by jasper bryant-greene,queue.get: now supports accept argument.,pidbox: now warns if there are multiple nodes consuming from the same pidbox.,the url parser removed more than the first leading slash .,redis: now raises a channel error if a queue key that is currently being consumed from disappears.,"queue_declare now returns namedtuple with queue, message_count, and consumer_count fields.",>>> with producers.acquire:,connection: default autentication credentials are now delegated to the individual transports.,adjusted the stable documentation s version in sphinx s configuration since that was overlooked in the latest release,added optional support for brotli compression.,update pyamqp to 2.6 with optional cythonization,"to enable this, helper methods have been added:",consumer.consuming_from returns true if the consumer is consuming from queue.,fix contributed by james turk.,kombu.async: min. delay between waiting for timer was always increased to one second.,compat consumerset now accepts optional channel argument.,redis: unacked message restore limit is now unlimited by default.,"also, the limit can now be configured using the unacked_restore_limit transport option:",and a virtual host of becomes:,the pool can also be forcefully closed by doing:,contributed by matt wise.,and change the connection url to use the correct transport:,connection.default_channel is now closed at object revival.,the distribution directory contrib/ is now renamed to extra/,mongodb: removes use of natural sort .,the deprecated function kombu.serialization.decode has been removed.,new module kombu.clocks now contains an implementation of lamports logical clock.,"kombu.common.eventloop, kombu.utils.uuid, and kombu.utils.url.parse_url can now be imported from the kombu module directly.",redis: ack emulation/visibility_timeout can now be disabled using a transport option.,adds support for python 3.4+,contributed by juan carlos ferrer.,this can be used to pass additional arguments to transports.,the pyro transport now works with recent pyro versions. also added a pyro kombu broker that this transport needs for its queues.,fixed compatibility with py-redis versions before 2.10.3 .,adds transport.supports_ev attribute.,add possibility to optimize lookup for queue in direct exchange set.,you can now have multiple bindings in the same queue by having the second argument be a list:,"to use it you must use transport alias ""django"", or as a url:","consumer now supports a new prefetch_count argument, which if provided will force the consumer to set an initial prefetch count just before starting.",pidbox: mailbox now supports the accept argument.,now depends on amqp 2.0.,redis: ioerror and oserror are now treated as recoverable connection errors.,django-kombu is now part of kombu core.,contributed by victor villas,see creating extensions using setuptools entry-points.,sqlalchemy transport: use query.with_for_update instead of deprecated,fix contributed by zach smith.,to connect using a unix socket you have to use the redis+socket url-prefix: redis+socket:///tmp/redis.sock.,mongodb: fixed problem with url parsing when authentication used.,declaration cache: now only keeps hash of declaration so that it does not keep a reference to the channel.,redis: fixed problem with fanout when using python 3 .,note about upcoming changes for kombu 3.0,kombu source code now only uses one-level of explicit relative imports.,kombu.compat.entry_to_queue has been moved to kombu.common,this is a hard limit enforced by amazon so the sqs transport must not exceeed this value.,mongodb: url parsing are now delegated to the pymongo library .,fix contributed by len buckens.,async: fixed bug in lax semaphore implementation where in some usage patterns the limit was not honored correctly.,producer.publish: can now set additional properties using keyword arguments .,mongodb: fixed failure on mongodb versions with an -rc tag,"we now patch amqplib s __del__ method to skip trying to close the socket if it is not connected, as this resulted in an annoying warning.",fixed typo in hack used for static analyzers.,producer.publish now supports a declare keyword argument.,now works with redis < 2.10 again.,an ora-00907: missing right parenthesis error could manifest when using an oracle database with the database transport.,oid_from accidentally called uuid.getnode but did not use the return value.,memory transport now supports the fanout exchange type.,"qpid: no longer uses threads to operate, to ensure compatibility with all environments .",maybe_declare now raises a recoverable connection error if the channel is disconnected instead of a channelerror so that the operation can be retried.,consumermixin now also restarts on channel related errors.,contributed by dust8,redis: the fanout exchange can now use amqp patterns to route and filter messages.,contributed by ryan petrello.,pyamqp/librabbitmq: transport options are now forwarded as keyword arguments,contributed by asif saif uddin and mads jensen,contributed by todd cook,virtual transports: now support anonymous queues and exchanges.,if you start using use py-amqp instead of amqplib you can enjoy many advantages including:,"kombu.syn.detect_environment now returns default , eventlet , or gevent depending on what monkey patches have been installed.","also the async brpop now times out after 1 second, this means that canceling consuming from a queue/starting consuming from additional queues has a latency of up to one second .",simplequeue & simplebuffer can now be bound to connections .,virtual transports: dead-letter queue is now disabled by default.,it can be installed by:,pika: channels now have access to the underlying connection instance using channel.connection.client.,this will be the default behavior in kombu 4.0.,this allows calling celery.bin.celery.main to revive a worker in the same process after rescuing from shutdown .,contributed by asif saif uddin,contributed by asif saif uddin,virtual transports now supports the anon exchange.,virtual: ack/reject/requeue now works while using basic_get.,producer.__exit__ now properly calls release instead of close.,prevent failure if aws creds are not explicitly defined on predefined.,contributed by dmitry malinovsky.,pidbox: exchanges used by pidbox are no longer auto_delete.,pidbox: now uses connection.default_channel.,sqs: fixed bug where hostname would default to localhost if not specified in settings.,new kombu.connection.get_heartbeat_interval method that can be used to access the negotiated heartbeat value.,>>> from kombu import enable_insecure_serializers,fix contributed by stefan eletzhofer.,virtual transports now supports multiple queue bindings.,fixed bug around modifying dictionary size while iterating over it .,"donated by nextdoor, with additional contributions from mdk.",now depends on amqp version 1.3.,contributed by colin jeanne,"attempt at fixing issue with 100% cpu when using the redis transport,","setting a long timeout means that it will take a long time for messages to be redelivered in the event of a power failure, but if so happens you could temporarily set the visibility timeout lower to flush out messages when you start up the systems again.",fix contributed by randy barlow.,adds passive option to exchange.,mongodb: now supports the ssl option.,automatically revives channels on channel errors.,kombu now depends on librabbitmq 1.5.2.,fix contributed by john shuping.,fix contributed by felix yan,fix contributed by adam gaca.,fix contributed by jesse dhillon.,mongodb: now supports priorities,drop remaining mentions of jython support completely.,instead uses a process-wide uuid4 as a node id.,so if your application depends on the old semantics you can use this to set the apply_global flag appropriately:,contributed by ash berlin-taylor and jeppe fihl-pearson,when initializing the redis transport in conjunction with gevent restore all unacknowledged messages to queue.,contributed by brian bouterse and chris duryee through support from red hat.,msgpack: use binary encoding instead of utf-8 .,trying to use the librabbitmq:// transport will now show the right name in the importerror if librabbitmq is not installed.,redis: can now perform channel operations while the channel is in brpop/listen mode .,amqp is now an alias to the amqplib transport.,"fix contributed by tim li, asif saif uddin and omer katz.",pika backend was no longer working since kombu 2.3,compat consumerset: can now specify channel.,sqlalchemy: now supports recovery from connection errors.,bindings is now json serializable .,fix contributed by john watson.,queue now supports multiple bindings.,simplequeue now allows you to override the exchange type used.,fixed problem with amqp transport alias .,redis: fixed problem with unix socket connections.,>>> from kombu import pools,>>> from kombu import pools,contributed by len buckens.,contributed by stephen milner.,contributed by stephen milner.,redis: fixed compatibility with older redis-py versions .,common.qos: decrement_eventually now makes sure the value does not go below 1 if a prefetch count is enabled.,"the vhost variable must be set to the target rabbitmq virtual host, and the url must be the amqp url to the server.",librabbitmq: now raises notimplementederror if ssl is enabled.,contributed by josh morrow,"this is a timeout for acks, so that if the consumer does not ack the message within this time limit, the message is redelivered to another consumer.",the queue prefix can be set using the transport option queue_name_prefix:,new utility function to disable/enable untrusted serializers.,pylibrabbitmq: now supports basic_get .,connection: fixed bug when cloning connection with alternate urls.,now properly reports default values in connection.info/.as_uri,contributed by eavictor.,qpid: adds additional string to check for when connecting to qpid.,the deprecated method consumer.add_queue_from_dict has been removed.,contributed by jian dai,copyright headers updated to include 2011.,maybe_declare declares an entity if it has not previously been declared in the same process.,this can be disabled by setting the supports_fanout transport option:,pidbox: fixed compatibility with python 2.6,contributed by jonathan halcrow.,contributed by :github_user:`tothegump`,publisher confirms,this functionality was merged from the celery-redis-unixsocket project. contributed by maxime rouyrre.,"beanstalk: priority 0 is now lowest, 9 is highest. ",contributed by michael montgomery.,fixes bug in producerpool where too many resources would be acquired.,kombu-sqlalchemy is now part of kombu core.
Changelog â€” django-import-export 2.5.1.dev0 documentation,"try to use ordereddict instead of sorteddict, which is deprecated in django 1.7 ",add ability to install a subset of tablib supported formats and save some automatic dependency installations ,allow injection of context data for template rendered by import_action and export_action ,refactor admin integration to allow better handling of specific formats supported features and better handling of reading text files,allow unchanged rows to be skipped when importing ,add coveralls support and readme badge ,fix for fields with a dyanmic default callable ,fix and add polish translation ,refactors and optimizations ,add before_import_row and after_import_row ,feat: better surfacing of validation errors in ui / optional model instance validation ,add support for django.db.models.timefield ,reset sql sequences when new objects are imported ,built with sphinx using a theme provided by read the docs.,allowing a field to be dehydrated with a custom method,fix 0 is interpreted as none in number widgets ,correctly select widget for smallautofield and bigautofield.,"add floatwidget, use with model fields models.floatfield ",add before_export and after_export hooks ,remove downloads count badge from readme since shields.io no longer supports it for pypi ,process import dataset and result in separate methods ,add xlsx import support,add total # of imports and total # of updates to import success msg,open csv files as text and not binary ,fix: warning u mode is deprecated in python 3 ,append rows to result object via function call to allow overriding ,make the filename and user available to import_data ,add saves_null_values attribute to field to control whether null values are saved on the object ,django 1.4 is not supported ,installation and configuration,add simplearraywidget to support use of django.contrib.postgres.fields.arrayfield ,add possibility to override tmp storage class ,"add row_number parameter to before_import_row, after_import_row and after_import_instance ",custom js for action form also handles grappelli ,hide default value in diff when importing a new instance ,use optimized xlsx reader ,rowresult now stores exception object rather than it s repr,support for deleting objects during import,add translation for korean ,fixes error when a single value is stored in m2m relation field ,make deep copy of fileds from class attr to instance attr ,"initialize decimal with text value, fix #1035 ",update import of reverse for django 2.x ,allow different resourceclass to be used in importexportmodeladmin ,fix import_file_name form field can be use to access the filesystem ,refactor import_row call by using keyword arguments ,add separator and field keyword arguments to manytomanywidget,adds meta flag skip_diff to enable skipping of diff operations ,add get_resource_kwargs to allow passing request to resource ,pin tablib version to not use new major version ,fix: properly handle nullboleanfield - backward incompatible change previously none values were handled as false,added missing portuguese translations ,added exportform to admin integration for choosing export file format,include all available formats in admin integration,fixed readme mistake ,make import form type easier to override ,add attribute inheritance to resource ,added unicode support for tsv for python 2,expose django user to get_export_data and export ,removed support for python < 3.5,add new diff class ,fixed xls import on python 3. optimized loop,paginate queryset if queryset.prefetch_related is used ,using celery to perform imports,add get_export_fields to resource to control what fields are exported ,m2m widget: allow trailing comma ,support default values on fields ,field constructor default argument is not_provided instead of none field clean method checks value against field.empty_values ,added use of get_diff_headers method into import.html template ,fix diff for models using manyrelatedmanager,fix #713: last day isn t included in results qs ,"fix admin integration tests for the new import finished message, update czech translations to 100% coverage. ",use verbose_name in breadcrumbs to match django default ,handle already cleaned objects ,require post method for process_import ,getting started,fix default values in fields ,add support for the django durationfield with durationwidget ,"fix #375: add row to widget.clean, obj to widget.render ",fixed middleware settings in test app for django 2.x ,refactor api,chore: remove outdated workarounds,add exportactionmixin ,use python3 compatible mysql driver in development ,additional hooks for customizing the workflow ,fixed properly skipping row marked as skipped when importing data from the admin interface.,edit on github,allow field.save relation following ,bugfix/fix error in converting exceptions to strings ,discourage installation as a zipped egg ,add django 1.9 support,make import diff view only show headers for user visible fields ,do not convert numeric types to string ,fix deprecated django 3.0 function usage ,fix mediastorage does not respect the read_mode parameter ,restore transactions for data import ,adds resource_class of bookresource in admin docs ,implement export as an admin action ,add missing translation keys for all languages ,changed the default value for import_export_chunk_size to 100. ,"use field_name instead of column_name for field dehydration, fix #36",added test for tsv import,removed support for django < 2.0,testing against django 2.0 should not fail ,db transactions support for importing data,fixed #105 unicode import,resolves #703 fields shadowed ,refactor the import-export templates ,let resource rollback if import throws exception ,chore: update urls to use https:// ,admin integration - add entrylog object for each added/updated/deleted instance,"deal with importing a booleanfield that actually has true, false, and none values. ",make datetime timezone aware if use_tz is true .
Release Notes â€” Catalyst 0.5.21 documentation,solved issue with overriding commission and slippage ,fixed issues with installing catalyst using pip.,terms and conditions were added to the marketplace.,integrated with ccxt,updated catalyst/examples/buy_and_hodl.py and catalyst/examples/buy_low_sell_high.py to work with catalyst version 0.3,implemented and improved unit tests,updated the start and end arguments used on cli in live mode to include time information in addition to the date.,utilized unit tests and added travis ci integration.,added supported for multiple exchanges per algorithm,"the current data bundle takes 40mb compressed for download, and 99mb uncompressed on disk for catalyst to use.",fixed issue with fetching assets with daily frequency,fixed an issue with can_trade,fixed inefficiency with bittrex current prices ,reverted the start date of the trading clock to 2015-03-01. this should be addressed after the entire data is acquired #408,"added method to clean bundle folders, and remove symbols.json",fixed a warning filter issue introduced with the latest release,fixed an issue with live candle values #216 and #199,standardized live and backtesting syntax,built with sphinx using a theme provided by read the docs.,fixed portfolio update issue with restored state ,added functions to marketplace client to get withdraw amount entitled to and to withdraw eng as well.,updated etc/python2.7-environment.yml to work with catalyst version 0.3,enabled the get_orderbook function in live and paper trading.,fix to work with empty data bundles,reduced the commission and slippage values to account for lower volume transactions,added a graceful finish to a live run with a specified end date #302,the parameter of the set_slippage api function was updated from spread to slippage to better describe its purpose in the fixed slippage model.,"added instructions on how to create a conda environment for python 3.6, and updated visual c++ instructions for windows and python 3","fixes bug in data.history function that was formatting volume data as integers, now they are returned as floats with up to 9 decimals of precision. data bundles redone.","added the support for live trading in huobi pro, okex, hitbtc and kucoin.",improved installation notes for windows c++ compiler and conda,added support for csv ingestion ,multiple algorithms can trade simultaneously against a single exchange using the same account.,utilize the trading_state attribute of the tradingpair object - in live and paper trading only #460,handling multiple req errors with tickers more gracefully ,fixed an issue with last candle in backtesting #219,fixed issue with sell orders in backtesting,added a context.state dict to keep arbitrary state values between runs,"several usability improvements of the data marketplace that make the dataset parameter optional. if it is not included in the command line, will list available datasets, and let you choose interactively.","changed handling of empty auth.json, instead of throwing an error for missing file","the current data bundle takes 340mb compressed for download, and 460mb uncompressed on disk for catalyst to use.",fixed an issue with single bar data.history ,fixed an issue preventing trading on gdax with several positions #299,fix an issue with asset date in chunks,always request more data to avoid empty bars and always give the exact bar number #260,fixed an issue with orders that stay open #211,fixed an issue with the order creation procedure for exchanges that do not support fetchmytrades method #404,fixes issue of normalizing timestamps before comparison ,comprehensive trading functionality against exchanges bitfinex and bittrex.,improved error handling for unsupported timeframes ,addition of api reference,upgraded the requests lib,fix issue with daily chunks end date ,added ability to stop live algo at specified end date,docker image file was utilized #366,addition of release notes,added a standardized dictionary of symbols for each exchange,install,"added a retry mechanism to the handling of an order request timeout #350, #356",added a function to reduce open orders amount from calculated target/amount for target orders #243,"utilized cancel_order in paper mode and fixed minor issues in live mode #95, #346",fixes issue in the creation of bundles ,"daily summary performance statistics compatible with pyfolio, a python library for performance and risk analysis of financial portfolios",fix binance requirement of symbol to be included in the cancelled order #204,fixed issue with auto-ingestion of minute data ,fixed issue with market order executing price ,added explanation describing the storing of the algorithm state in live mode #224,fixed an issue where requesting history of multiple assets repeats values,"upgraded data marketplace to web3==4.0.0b11, which was breaking some functionality from prior version 4.0.0b7 #257",fixed a bug preventing ingestion from a csv if specifying an unsupported exchange.,correct the retry of the fetch trades method in case of a timeout #321,using bitfinex instead of poloniex to fetch btc_usdt benchmark ,fixed an issue with the data history in daily frequency #274,fix notenoughcasherror when an open order is filled minutes later #237,fix issue with 1/1000 scaling issue of prices in bundle,improved order execution for exchanges supporting trade lists ,added order creation exception handling according to the ccxt manual #315,raising an error for order amounts smaller than exchange lots,"added progress indicators for publishing data, and made the data publishing synchronous to provide feedback to the publisher.","each algorithm has a persisted state that tracks all open orders, executed transactions and portfolio positions.","retrieval of crypto benchmark from bundle, instead of hitting poloniex exchange directly","data marketplace: ensures compatibility across wallets, now fully supporting ledger, trezor, keystore, private key. partial support for metamask . current support for digital bitbox is unknown, but believed to be supported.",added a repository for historical data,added market orders in live mode ,fix hash method to create sid numbers compatible across platforms,"changed benchmark to be constant, so it doesn t ingest data at all. temporary fix for #271, #285",lowered order size limit to fit all supported exchanges #296,fixed an ssl cert issue ,improved the commissions calculations in live mode - documented at live trading,properly handle of empty candles received from exchanges #236,example algorithms,reading the trade log to get executed order prices on exchanges like binance ,"fixes in storing and loading the state #214, #287",fixed the last candle returned in backtest in minute mode to be partial #266,change of bundle storage provider from dropbox to aws,"minimum trade size of a coin can be configured on a per-coin basis, defaults to 0.00000001 in backtesting ",removed redundant capital_base validation ,fixes issues in empty benchmark ,added the ability to set a future start_date on live mode #318,updated data marketplace to enable submitting several files in a publish command.,added minutely stats in the analyze function ,fix hourly frequency issues #227 and #114,added auto-ingestion of bundle data while backtesting,added capital_base parameter to live mode to limit cash 
viewflow/CHANGELOG.rst at master Â· viewflow/viewflow Â· GitHub,this is the cumulative release with many backward incompatibility changes.,"views are no longer inherits and implement an activation interface. this change makes things much simple internally, and fixes inconsistency, in different scenarios. @flow_view, @flow_start_view decorators are no longer callable.","activation now passed as a request attribute. you need to remove explicit activation parameter from view function signature, and use request.activation instead.",task_loader not is the attribute of a flow task. in makes functions and signal handlers reusable over different flows.,add process.data and task.data generic json field for default models,add process.artifact and task.artifact generic fk fields for default models,fix issue with task assign on default post,"all conditions in if, switch and other nodes receives now a node activation instance instead of process. so you can gen an access to the current task via activation.task variable.",resolve this-referencies for split and switch nodes conditions,"every _cls suffix, ex in flow_cls, activation_cls, was renamed to _class. the reason for that is just to be consistent with django naming theme.", fixes and improvements in the flow chart rendering,/,"django-extra-views integration is removed. this was a pretty creepy way to handle formsets and inlines within django class-based views. instead, django-material introduce a new way to handle form inlines same as a standard form field. see details in the documentation.","to use celery job with django 1.8, django-transaction-hooks need to be enabled.",flow namespace are no longer hard-coded. flow views now can be attached to any namespace in a url config.,"built-in class based views are renamed, to be more consistent. check the documentation to find a new view name.",about,same for callable in the .assign and .permissions definitions.,add italian translation,added portuguese translation,"flow_start_func, flow_start_signal decorators need to be used for the start nodes handlers. decorators would establish a proper locking avoids concurrent flow process modifications in the background tasks.",improved task detail ui in frontend,drop compatibility with django 1.8/1.9/1.10,add additional template blocks for left panel. close #311,fix prefetch_related usage on process and task queryset,allow flow.handler redifinition with inheritance, fix obsolete node url resolve,added agpl licence additional permissions ,support task permission checks on user model subclasses,changelog,allow to overide flow view access by flow.has_view_permission method, new process dashboard view,add custom rollback to update_status migration,make django-rest-swagger requirements optional,sign up,add view.oncreate callback support, rest api support
News â€” pyquery 1.3.x documentation,add root and encoding attribute,python2.5 is no longer supported ,use pep8 name for methods but keep an alias for camel case method. eg: remove_attr and removeattr works fix #57,fixed #22: open by filename fails when file contains invalid xml,add changes.txt and add it to long_description,fixed #98: contains act like jquery,allow to use a custom css translator.,fixed #117: raise http error if http status code is not equal to 200,add cookies arguments as allowed arguments for requests,fixed #23: removeclass adds class attribute to elements which previously lacked one,run tests with python3.6 on ci,use requests to fetch urls ,moved to github. so a few files are renamed from .txt to .rst,fix issue 44: case problem with xml documents,allow to open https urls,added pyquery.outerhtml,added .xhtml_to_html and .remove_namespaces,fixed #112: make_links_absolute does not apply to form actions,.text now return an empty string instead of none if there is no text node. fix #45,pyquery.val is '',pyquery.val is '',do not raise an error when the http response code is 2xx,use restkit s proxy instead of paste ,added pseudo selector :has,readme_fixt.py was not include in the release. fix #54.,remove some unmaintained modules: pyquery.ajax and pyquery.rules,support for keyword arguments in pyquery custom functions,improve .extend by returning self,refactoring of .text to match firefox behavior.,fixed #78: items must take care or the parent,minor release. include test file so you can run tests from the tarball.,note explicit support for python 3.5,code cleanup. no longer use ugly hacks required by python2.6/python3.2.,add a method argument to .outer_html,"fix cssselectpatch to match the newer implementation of cssselect. fixes issue #62, #52 and #59 ","fix val for <textarea> and <select>, to match jquery behavior"
furl v2.0.0 release notes (2018-10-16) | LibHunt,behavior and return a new instance. the original instance is no longer modified.,"your go-to python toolbox. our goal is to help you find the software and libraries you need. made by developers for developers. the collection of libraries and resources is based on the awesome python list and direct contributions here. to add a new package, please, check the contribute section.",about,self hosted,happily hosted on linode,changelog
Whatâ€™s New â€” xlwings dev documentation,an explicit exception is raised when range is called with 0-based indices ,"pandas dataframes and series are now supported for reading and writing, both via range object and udfs",": importing udfs with the add-in was throwing an error if the filename was including characters like spaces or dashes . to fix this, close excel completely and run xlwings addin update.", macos: the regression with book.fullname that was introduced with 0.20.1 has been fixed ., xlwings.view and xlwings.load now use chunking by default .,"upon writing, pandas series are now shown by default with their name and index name, if they exist. this can be changed using the same options as for dataframes :","new documentation about how to use xlwings with other languages like r and julia, see xlwings with r and julia.",sheet.autofit and range.autofit: the integer argument for the axis has been removed . use string arguments rows or r for autofitting rows and columns or c for autofitting columns .,"for array formulas with or without numpy, see the docs: user defined functions ",: this version adds support for the vba module on mac excel 2016 and is now feature equivalent with mac excel 2011 ., pywin32 is now automatically installed when using pip , windows: fix a regression introduced with 0.20.0 that would cause an attributeerror: range.clsid with async and legacy dynamic array udfs .,"optimized connection: set the optimized_connection = true in the vba settings. this will use a com server that will keep the connection to python alive between different calls and is therefore much more efficient. however, changes in the python code are not being picked up until the pythonw.exe process is restarted by killing it manually in the windows task manager. the suggested workflow is hence to set optimized_connection = false for development and only set it to true for production - keep in mind though that this feature is still experimental!",the atleast_2d keyword had no effect on ranges consisting of a single cell and was raising an error when used in combination with the asarray keyword. both have been fixed :,xlwings.view has been enhanced to accept an optional sheet object ,"exciting times! v0.9.0 is a complete rewrite of xlwings with loads of syntax changes . but more importantly, this release adds a ton of new features and bug fixes that would have otherwise been impossible. some of the highlights are listed below, but make sure to check out the full migration guide for the syntax changes in details. note, however, that the syntax for user defined functions did not change. at this point, the api is fairly stable and we re expecting only smaller changes on our way towards a stable v1.0 release.","xlwings can now be used with threading, see the docs: threading and multiprocessing .",": a long-standing bug that caused the excel file to close and reopen under certain circumstances has been fixed : depending on your security settings and in connection with files downloaded from the internet or possibly in connection with some add-ins, excel was either closing the file and reopening it or giving a file already open warning. this has now been fixed which means that the examples downloaded from the homepage should work right away after downloading and unzipping."," the udf server has received a serious upgrade by njwhite, getting rid of the many issues that were around with using a combination of async functions and legacy dynamic arrays. you can now also call functions defined via async def, although for the time being they are still called synchronously from excel .", # x will be returned unchanged as transposed both when reading and writing,note that you will need to update the vba module and that apart from pywin32 there is now a new dependency for the windows version: comtypes. it should be installed automatically though when installing/upgrading xlwings with pip.,"when writing to ranges while excel is busy, xlwings is now retrying until excel is idle again ","converters are accessed via the new options method when dealing with xlwings.range objects or via the @xw.arg and @xw.ret decorators when using udfs. as an introductory sample, let s look at how to read and write pandas dataframes:","this version marks an important first step on our path towards a stable release. it introduces converters, a new and powerful concept that brings a consistent experience for how excel ranges and their values are treated both when reading and writing but also across xlwings.range objects and user defined functions .",: vba settings: udf_path has been replaced with udf_modules. the default behaviour doesn t change though .,"calling python from within excel vba is now also supported on mac, i.e. python functions can be called like this: runpython""). running frozen executables isn t available yet on mac though.", native dynamic array formulas can now be used with async formulas ," the interpreter setting has been deprecated in favor of platform-specific settings: interpreter_win and interpreter_mac, respectively. this allows you to use the sheet config unchanged on both platforms .",": workbook.caller is now also accessible within functions that are decorated with @xlfunc. previously, it was only available with functions that used the @xlsub decorator .", fixed an issue when the new async_mode was used together with numpy arrays ,the syntax to add a new chart has been slightly changed :,log file has been retired and removed from the configuration/add-in.,"the purpose of this document is to enable you a smooth experience when upgrading to xlwings v0.9.0 and above by laying out the concept and syntax changes in detail. if you want to get an overview of the new features and bug fixes, have a look at the release notes. note that the syntax for user defined functions didn t change.", python 3.6 is now supported ,"excel constants have been added under their original excel name, but categorized under their enum , e.g.:","log_file: so far, the log file has been placed next to the excel file per default . this has been changed as it was causing issues for files on sharepoint/onedrive and mac excel 2016: the place where log_file = """" refers to depends on the os and the excel version.","this release adds an often requested & powerful new feature to user defined functions : dynamic expansion for array formulas. while excel offers array formulas, you need to specify their dimensions up front by selecting the result array first, then entering the formula and finally hitting ctrl-shift-enter. while this makes sense from a data integrity point of view, in practice, it often turns out to be a cumbersome limitation, especially when working with dynamic arrays such as time series data."," mac excel 2011 is now supported again with the new add-in. however, since excel 2011 doesn t support the ribbon, the config file has been created/edited manually, see environment variables .",this is a simple example that demonstrates the syntax and effect of udf expansion:," the xlwings dlls are now properly versioned, allowing to use pre 0.11 releases in parallel with >0.11 releases ",advanced features, this release fixes a bug introduced with v0.11.6 that wouldn t allow to open workbooks by name ,: matplotlib figures are now converted to 300 dpi pictures for better quality when using them with pictures.add .,": sometimes, a column was referenced instead of a named range ",unicode book names are again supported .,": user defined functions support now multiple source files, see also under api changes below. for example : udf_modules=""common;myproject""",cross-platform: xlwings is now additionally supporting microsoft excel for mac. the only functionality that is not yet available is the possibility to call the python code from within excel via vba macros.,this version adds two exciting but still experimental features from excelpython :,"expand option: this works the same as the range properties table, vertical and horizontal but is only evaluated when getting the values of a range:","xlwings.book.save now supports relative paths. also, when saving an existing book under a new name without specifying the full path, it ll be saved in python s current working directory instead of in excel s default directory .","settings don t have to be manipulated in vba code anymore, but can be either set globally via ribbon/config file or for the workbook via a special worksheet","objects like books, sheets etc. can now be compared and are properly hashable",": like windows, mac now also only shows errors in a popup. before it was including stdout, too ","if a sheet, range or chart object is instantiated without an existing workbook object, a user-friendly error message is raised .",this release brings further improvements with regards to the add-in:," runfronzenpython now accepts spaces in the path of the executable, but in turn requires to be called with command line arguments as a separate vba argument. example: runfrozenpython ""c:\path\to\frozen_executable.exe"", ""arg1 arg2"" .",: python errors are now also shown in a message box. this makes the mac version feature equivalent with the windows version :, opening a file via xw.book was causing an additional book1 to be opened in case excel was not running yet ," fixed an issue introduced with the previous release that always showed the command prompt when running udfs, not just when using conda envs .","the excelpython project has been fully merged into xlwings. this means that on windows, udf s are now supported via decorator syntax. a simple example:","you can still use a vba module instead of the add-in, but the recommended way is the add-in","pro breaking change: the table.update method has been changed to treat the dataframe s index consistently whether or not it s being written to an excel table: by default, the index is now transferred to excel in both cases.",the most important update with this release was made on windows: the methodology used to make a connection to workbooks has been completely replaced. this finally allows xlwings to reliably connect to multiple instances of excel even if the workbooks are opened from untrusted locations . this gets rid of the dreaded filename is already open... error message that was sometimes shown in this context. it also allows the vba hooks to work correctly if the very same file is opened in various instances of excel.,application as attribute of a workbook has been removed :," windows: with udfs, you can now get easy access to the caller by using caller as a function argument . in that sense, caller is now a reserved argument by xlwings and if you have any existing arguments with this name, you ll need to rename them:", runpython can now be called in parallel from different excel instances .,this release adds new features to user defined functions :,>>> sheet.add # include name and position," added support for the characters object via range or shape objects, see characters.",: excel on windows now handles unicode file paths correctly with untrusted documents. .,it also supports indexing and slicing of range objects:,conda base has been renamed into conda path to reduce the confusion with the conda env called base. please adjust your settings accordingly! ,added support to manipulate named ranges :,installation is now putting all files in the correct place .,"to reference the calling workbook when running code from vba, you now have to use workbook.caller. this means that wb = workbook is now consistently creating a new workbook, whether the code is called interactively or from vba.","the vba error pop-up can now be muted by setting show_log = false in the vba settings. to be used with care, but it can be useful on mac, as the pop-up window is currently showing printed log messages even if no error occurred.",new docs about matplotlib & plotly charts and custom converter,this release adds support for asynchronous functions . making a function asynchronous is as easy as:,new class application with quit method and properties screen_updating und calculation . it can be conveniently accessed from within a workbook . a few examples:," windows: when running app.quit, the application is now properly closed without leaving a zombie process behind .",note that support for python 2.6 has been dropped,support for pandas series has been added :," xlwings addin install is now available on macos. on windows, it has been fixed so it should now work reliably .","xlwings works now also with numpy < 1.7.0. before, doing something like range.value = 'foo' was causing a notimplementederror: not implemented for this type error when numpy < 1.7.0 was installed .", windows: the setting show console now also shows/hides the command prompt properly when using the udf server with conda. there is no more switching between python and pythonw required .,"the workbook class has the following additional methods: current and set_current. they determine the default workbook for sheet, range or chart. on windows, in case there are various excel instances, when creating new or opening existing workbooks, they are being created in the same instance as the current workbook.",xlwings with r and julia," added support for the chunksize option: when you read and write from or to big ranges, you may have to chunk them or you will hit a timeout or a memory error. the ideal chunksize will depend on your system and size of the array, so you will have to try out a few different chunksizes to find one that works well :",: excel 2011 for mac now supports unicode characters in the filename when called via vba s runpython .,threading and multiprocessing,pro running runpython with embedded code was broken in 0.22.0 .,vba settings: python_win and python_mac must now include the interpreter if you are not using the default . e.g.:,": when using udfs, you can now use 'range' for the convert argument where you would use before xw.range. the latter will be removed in a future version .",use of native array formulas instead of having a normal formula in the top left cell and writing around it,the unicode bug on windows/python3 has been fixed ,converters and options,>>> sheet.add # place at end with default name," xlwings.view now becomes the active window, making it easier to work with in interactive workflows .","the workbook qualification changed: it now has to be specified as keyword argument. assume we have instantiated two workbooks like so: wb1 = workbook and wb2 = workbook. sheet, range and chart classes will default to wb2 as it was instantiated last. to target wb1, use the new wkb keyword argument:", runpython was broken with python 2.7 ,active book instead of current book: xw.range goes against the active sheet of the active book like you re used to from vba. instantiating an explicit connection to a book is not necessary anymore:,named ranges: introduction of full object model and proper support for sheet and workbook scope , xw.load now expands to the current_region instead of relying on expand .,note that there is a slight difference in the way that this functionality behaves on windows and mac:,": there is a new option to show/hide the console window. note that with conda path and conda env set, the console always pops up when using the udf server. currently only available on windows ."," restart udf server now actually does what it says: it stops and restarts the server. previously it was only stopping the server and only when the first call to python was made, it was started again ."," added support for the font object via range or shape objects, see font .",: error pop-ups show now the full error message that can also be copied with ctrl-c .,"there s a small breaking change in the unlikely case that you were assigning values with the expand option: myrange.options.value = * 3] * 3. this was previously clearing contiguous cells to the right and bottom , now you have to do that explicitly.","sometimes, a pandas dataframe was not handling nan correctly in excel or numbers were being truncated & .",excel 2016 for mac is finally supported . the vba hooks are currently not yet supported. in more details:, fixed a python 2.7 incompatibility introduced with 0.15.9.,vba subs & functions are now callable from python:, calling subs or udfs from vba was causing an error .,reading pandas dataframes with a simple index was creating a multiindex with pandas > 0.20 ,newly included excel template which includes the xlwings vba module and boilerplate code. this is currently accessible from an interactive interpreter session only:," added support for excel tables, see: table and tables and range.table ",: xlwings was failing with freezers like cx_freeze ,": sometimes, an error was raised when excel was not running ",this version adds support for matplotlib! matplotlib figures can be shown in excel as pictures in just 2 lines of code:, using pictures.add is not distorting the proportions anymore .,correct syntax removed,"note that app_target is only available on mac. on windows, if you want to change the version of excel that xlwings talks to, go to control panel > programs and features and repair the office version that you want as default.",: errors are again shown correctly in a pop up ,it supports both python indexing and excel indexing :,: it now works correctly with psutil>=3.0.0 .,pro properly embed code with unicode characters ., fixed an issue with the config file , the standalone excel file now includes all vba dependencies to make it work on windows and macos .,"the xlwings.workbook.save method has been fixed to show the expected behavior : previously, calling save without a path argument would always create a new file in the current working directory. this is now only happening if the file hasn t been previously saved.",consider the following example using the vba editor s immediate window after importing udfs from a project created using by xlwings quickstart:,"pro : the reports package now supports excel tables in the templates. this is e.g. helpful to style the tables with striped rows, see excel tables .","range now also accepts sheet objects, the following 3 ways are hence all valid :", fixed an issue with multiple arguments in runpython ," # caller will not be exposed in excel, so use it like so:",options are now correctly applied when writing to a sheet ,note: these options currently apply to the whole range and can t be selectively applied to e.g. only certain columns.," # x is a dataframe, do something with it"," udfs now work correctly with conda base and conda env. note, however, that currently there is no way to hide the command prompt in that configuration .","the table property is also delivering a 1d array/list, if the table range is really a column or row."," conda env now works correctly with base for udfs, too .",check where xlwings is currently installed,"better support and docs for deployment, see deployment:","previously, numpy scalar values were returned as np.atleast_1d. to keep the same behaviour, this now has to be set explicitly using ndim=1. otherwise they re returned as numpy scalar values.","pro : this release adds support for markdown-based formatting of text, both in cells as well as in shapes, see markdown formatting for the details. this is also supported for template-based reports.","new powerful object model based on collections and close to excel s original, allowing to fully qualify objects: xw.apps.books.sheets.range.value","this is a bug fix release: as to be expected after a rewrite, there were some rough edges that have now been taken care of:","previously, python functions were always returning 2d arrays when called from vba, no matter whether it was actually a 2d array or not. now you get the proper dimensionality which makes it easier if the return value is e.g. a string or scalar as you don t have to unpack it anymore.",: a certain range of integers were not written to excel .,"xlwings quickstart myproject will produce a folder with the following files, ready to be used ):","note: expanding array formulas will overwrite cells without prompting and leave an empty border around them, i.e. they will clear the row to the bottom and the column to the right of the array.",the range object is now iterable :,"this release adds support to call python functions from vba in all office apps , not just excel. as this uses udfs, it is only available on windows. see the docs: xlwings with other office apps.",fixed an error when adding a new sheet that was already existing ., sheet.names.add was always adding the names on workbook level ,new headless mode: the excel application can be hidden either during workbook instantiation or through the application object:,": after creating two new unsaved workbooks with workbook, any sheet, range or chart object would always just access the latest one, even if the workbook had been specified .","windows: after calling the macro , excel waits until python is done. in case there s an error in the python code, a pop-up message is being shown with the traceback.",transpose option: this works in both directions and finally allows us to e.g. write a list in column orientation to excel :,: async functions sometimes caused an error on older excel versions without dynamic arrays .,missing features,missing features,pro : code can now be embedded by calling the new xlwings code embed cli command .,the len built-in function can now be used on range :, excel files that have single quotes in their paths are now working correctly ,the clear and clear_contents methods of the workbook object now default to the active sheet :,"similar to numpy s logic, 1d ranges in excel, i.e. rows or columns, are now being read in as flat lists or 1d arrays. if you want the same behavior as before, you can use the atleast_2d keyword .",this release allows excel 2011 and excel 2016 to be installed in parallel.,"the int converter works now always as you would expect .options.value). before, it could happen that the number was off by 1 due to floating point issues .","this release makes it easier than ever to connect to excel from python! in addition to the existing ways, you can now connect to the active workbook and if the workbook is already open, it s good enough to refer to it by name . accordingly, this is how you make a connection to :", the add-in can now optionally be installed without the password protection: xlwings addin install --unprotected .,see the full api: xlwings.plot. there s also a new example available both on github and as download on the homepage.,bug fix: permission errors during pip installation should be resolved now , the conda version check was failing with spaces in the installation path .,the installation error on windows has been fixed ,pro : table.update has been fixed so it also works when the table is the data source of a chart .,xlwings is now officially suppported on python 2.6-2.7 and 3.1-3.4,sheet.add was not always acting on the correct workbook ,accessing a not existing pid in the apps collection raises now a keyerror instead of an exception .,enhancement: allow to install xlwings on linux even though it s not a supported platform: export install_on_linux=1; pip install xlwings ,the add-in now shows the version on the ribbon. this makes it easy to check if you are using the correct version :,the runpython calls in vba are not yet available through excel 2016 but excel 2011 doesn t get confused anymore if excel 2016 is installed on the same system - make sure to update your vba module!, fixed a dll load failed issue with pywin32 when installed via pip on python 3.8 .,": this fixes a bug introduced in v0.6.2: when using runpython from vba, errors were not shown in a pop-up window .", the conda version check was erroneously triggered when importing udfs on systems without conda. ., runpython was failing when there was a & in the excel file name .,new docs about debugging and data structures tutorial.,samples of how the new options method replaces the old range keyword arguments:," bug fix: v0.10.3 introduced a bug that imported udfs by default with volatile=true, this has now been fixed. you will need to reimport your functions after upgrading the xlwings package.",the current directory is now inserted in front of everything else on the pythonpath ,and the same for reading:,"pro : in addition to xw.create_report, you can now also work within a workbook by using the new mysheet.render_template method, see also xlwings reports .", xlwings now blocks the call if the conda path/env settings are used with legacy conda installations .,"if you have the old xlwings addin installed, find the location and remove it or overwrite it with the new version . if you installed it via the xlwings command line client, you should be able to do: xlwings addin remove.", improvements with regards to the run main ribbon button .," runpython now works properly with files that have a url as fullname, i.e. onedrive and sharepoint .","this is the same sample as above on screenshot). if you wanted to return a dataframe with the defaults, the @xw.ret decorator can be left away.","the only condition to make that work is that your python script has the same name as your workbook and that it contains a function called main, which will be called when you click the run button. all settings from your config file or config sheet are still respected, so this will work even if you have the source file in a different directory than your workbook .",dataframes with multiheaders were sometimes getting truncated .,": when installing xlwings, it now requires psutil to be at least version 2.0.0 ."," xlwings.book and myapp.books.open now accept parameters like update_links, password etc. .","depending on how it was instantiated, workbook was sometimes missing the fullname attribute .",pro : added support for plotly static charts .,connections to files that are saved on onedrive/sharepoint are now working correctly ., new xlwings config create command that autogenerates the user config file with the python settings from which you run the command. can be used to reset the add-in settings with the --force option .,"# autofit columns and rows, taking into account range","this release adds a small but very powerful feature: there s a new run main button in the add-in. with that, you can run your python scripts from standard xlsx files - no need to save your workbook as macro-enabled anymore!",this is mostly a bug fix release:," added new method book.to_pdf to easily export pdf reports. needless to say, this integrates very nicely with xlwings reports .",slightly enhanced chart support to control the charttype :, new property shape.text to read and write text to the text frame of shapes .,various issues with timezone-aware objects were fixed .,"config files can now additionally be saved in the directory of the workbooks, overriding the global ribbon config, see environment variables ", the sql extension now uses the native dynamic arrays if available ., windows: functions called via runpython with use udf server activated don t require the xw.sub decorator anymore .,a bug introduced in v0.3.0 caused frozen versions to fail .,call a macro in an addin app.macro unsupported,: running debug > compile is not throwing errors anymore ,it continues to overwrite existing cells ,can be accessed like this:,"running this code will give you this nicely formatted text, but you can also define your own style to match your corporate style guide as explained under markdown formatting:","# writing back and changing some of the options, e.g. getting rid of the index:", fixed a bug with wb.names.refers_to_range on macos .,"while we re all waiting for the new native dynamic arrays, it s still going to take another while until the majority can use them .",xw.book and xw.books.open raise now the same error in case the file doesn t exist , conda base and conda env weren t stored correctly in the config file from the ribbon .,": when xlwings was imported without ever instantiating a workbook object, excel would start upon quitting the python interpreter ."," while it s always been possible to somehow create your own xlwings-based add-ins, this release adds a toolchain to make it a lot easier to create your own white-labeled add-in, see custom add-ins .",see gh970 and gh973., macos: prevent excel from showing up when using hidden excel instances via xw.app .,": environment variables from .bash_profile are now available when called from vba, e.g. by using: os.environ ","pytz is no longer a dependency as datetime object are now being read in from excel as time-zone naive . before, datetime objects got the utc timezone attached.",active sheet wb.sheets.active xw.sheet.active or wb.active_sheet, added support for myrange.wrap_text .,"mac: after calling the macro, the call returns instantly but excel s status bar turns into running during the duration of the python call. python errors are currently not shown as a pop-up, but need to be checked in the log file. i.e. if the status bar returns to its default but nothing has happened, check out the log file for the python traceback.",this is a bug fix release:,the xlwings quickstart myproject has been updated accordingly. it still produces an xlsm file at the moment but you can save it as xlsx file if you intend to run it via the new run button., macos: calling wb.save wasn t updating the wb object properly and caused an alert .," # to run from python, not needed when called from excel.",": the vba module finds now automatically the default python installation as per path variable on .bash_profile when python_mac = """" .", new methods xlwings.shape.scale_height and xlwings.shape.scale_width .,"udfs can now also be imported from packages, not just modules ","alternatively, the properties can also be set like this:",empty option: this allows us to override the default behavior for empty cells:,: non-default python interpreters were not found if the path contained a space ,via object oriented interface:,enhancement: the add-in is now password protected to declutter the vba editor ,the import error on python 3 has been fixed .,about,"if you installed xlwings with pip, for once, you should first uninstall xlwings: pip uninstall xlwings", calculate formulas by default in the function wizard .,runfrozenpython now requires the full path to the executable.,bug fix: the sql extension was sometimes not correctly assigning the table aliases ,the new object model allows to specify the excel application instance if needed:,"the new xlwings command line client makes it easy to work with the xlwings template and the developer add-in . e.g. to create a new excel spreadsheet from the template, run:","the pythonpath in the vba settings now accepts multiple directories, separated by ; ",: the command line client has been fixed .,"add a reference to the xlwings addin, see installation","if asarray=true, numpy arrays are now always at least 1d arrays, even in the case of a single cell :", fixed an issue with the xlwings pro license key when there was no xlwings.conf file .,"the new udf debug server allows you to easily debug udfs: just set udf_debug_server = true in the vba settings, at the top of the xlwings vba module . then add the following lines to your python source file and run it:","dynamic arrays are now more robust. before, they often didn t manage to write everything when there was a lot going on in the workbook "," - to autofit rows, use one of the following: 'rows' or 'r'",new method xlwings.workbook.set_mock_caller . this makes calling files from both excel and python much easier:, the onedrive setting has been split up into a windows and macos-specific paths: onedrive_win and onedrive_mac .,new excel instance app = xw.app unsupported, new default converter for ordereddict .,"user defined functions : using excelpython s wrapper syntax in vba, you can expose python functions as udfs, see user defined functions for details.",: user defined functions support now optional/default arguments ,open the file and go to the vba editor ,"this release drops support for python 2.7 in xlwings ce. if you still rely on python 2.7, you will need to stick to v0.16.6.","the add-in can be extended with own code. we throw in an sql function, that allows you to perform sql queries on data in your spreadsheets. it s pretty awesome, get the details here: extensions.", made the import udfs functionality more robust to prevent an automation 440 error that some users would see .,pay attention to the following subtle change:,"pro : added possibility to create deployment keys, see deployment key.", runfrozenpython was not finding the executable .,writing none or np.nan to excel works now ., runpython now properly supports conda environments on windows . conda >=4.6. required. a fix for udfs is still pending ., cli changes with respect to xlwings license .,"quickstart: it s now easier than ever to start a new xlwings project, simply use the command line client :", windows: the retry mechanism has been improved .,new book in specific app wb = app.books.add unsupported,it s up to 2x faster,pandas deprecation warnings have been fixed ,see syntax overview for the details of the new object model.,"autofit works now also on sheet objects, not only on range objects :",jagged arrays now raise an error , the default quickstart setup now also works when you store your workbooks on onedrive ,"bug fix: when using the xlwings.conf sheet, there was a subscript out of range error "," on mac excel 2016, the ribbon now only shows the available functionality :",: udfs were failing if they were returning none or np.nan , added support for xlwings.range.copy .,"this release adds a rest api server to xlwings, allowing you to easily expose your workbook over the internet, see rest api for all the details!",upgrade existing workbooks,the excel template was updated to the latest vba code ., quickstart references the project s name when run from python instead of the active book ,iteration over a range only worked the first time ,the simulation example on the homepage works now also on mac.," - to autofit rows and columns, provide no arguments",pro : new documentation about how to work with excel charts in templates; see xlwings reports.," runpython was broken by the previous release. if you install via conda, make sure to run xlwings runpython install again! ","when you recalculate the sheet, the code will stop at breakpoints or print any statements that you may have. for details, see: debugging.","added migration guide for v0.11, see migrate to v0.11 ",getting started,udf server can be restarted directly from the add-in,the vba module was not accepting lower case drive letters .,"members of the xw.apps collection are now accessed by key instead of index, e.g.: xw.apps instead of xw.apps. the apps collection also has a new xw.apps.keys method. ",user defined functions - currently windows only,see here for details about which bugs have been fixed., the ribbon now shows tooltips on windows ,the xlwings vba module was not finding the python interpreter if python_win or python_mac contained spaces .,"close excel. run xlwings addin install from a command prompt. reopen excel and check if the xlwings ribbon appears. if not, copy xlwings.xlam (from your xlwings installation folder under addin\xlwings.xlam manually into the xlstart folder. you can find the location of this folder under options > trust center > trust center settings > trusted locations, under the description excel default location: user startup. restart excel and you should see the add-in.", added support for xlwings.range.paste .,the single file approach has been dropped. xlwings is now a traditional python package.," xw.view now formats the pandas dataframes as excel table and with the new xw.load function, you can easily load a dataframe from your active workbook into a jupyter notebook. see jupyter notebooks: interact with excel for a full tutorial ."," how to use imported functions in vba, see call udfs from vba.", added support for sheet.visible .,"all these options work the same with decorators for udfs, e.g. for transpose:",this version drops support for python 3.5,"axis : string or integer, default none",bug fix: the sql extension installs now correctly 
instagram_private_api/CHANGELOG.md at master Â· ping/instagram_private_api Â· GitHub,client.standard_ratios and client.reel_ratios is deprecated and replaced with mediaratios.standard and mediaratios.reel respectively.,deprecated and experimental endpoints now warned with clientdeprecationwarning and clientexperimentalwarning.,can be used to largely replace the public instagram api that is now severely restricted,user_feed is now using the graphql endpoint and has compatibility-breaking changes.,detect if re-login is required and raise clientloginrequirederror,important: the new graphql endpoint appears to be replacing the old query endpoint. the graphql endpoint is comparatively more limited and some attributes may no longer be available.,client.settings now includes user_agent which you should persist since rhx_gis is dependent on both the csrftoken and the client's user_agent,fix for new query_hash param and x-instagram-gis signed header requirement,breaking change: tag and location feeds updated to use graphql endpoints.,you should exercise caution when using functions relying on the old query endpoints such as user_info and media_infosince ig no longer uses them.,invalid parameters now consistently raise valueerror. affected endpoints can be found in 146a84b.,support album posting with post_album,this update is recommended especially for those using the web api.,detect if authenticated cookie has expired and raise clientcookieexpirederror,updates for user feed and comments endpoints,fix regression with photo posting and profile image update.,update story configure endpoint and parameters,/
Changelog â€” aeneas 1.7.3 documentation,added invoke parameter to abstractcliprogram constructor and modified tools consequently,"added configurationobject to represent a dictionary with a fixed set of keys, default values, and aliases",fixed a bug with logger and rconf initialization in all classes,moved import statements for lxml and bs4 inside the functions actually using them ,added os_task_file_id_regex parameter to add user-defined id values for plain and subtitles input files,"removed copies of cint. and cwave. in other c extensions, changed include paths",added aeneas.exacttiming.timeinterval class to represent time intervals and act upon them,changed meaning of language.py and added list of supported languages inside tts wrappers,added venvs directory with scripts to automate testing with virtual environments,added cew c module for synthesizing text with espeak much faster than in pure python ,added bash scripts to compile and run c drivers,"fixes issue with gf.relative_path in windows, if executed from a drive different than the install drive","added a flag to disable checking a language code string against listed ones, allowing for testing with custom espeak voices",aeneas.tools.read_text has a different order of arguments and different option names,fixed bug #102 by checking that the audio file produced by the tts engine is mono wave and has correct sample rate: slightly slower but safe,added readme files and documentation to the c extensions subdirectories,"moved code for extracting mfccs into audiofile, and rewritten dtw.py and vad.py accordingly","introduced fixed-size int types in c extensions, with explicit definitions for the ms c compiler",fix an issue in sd with float returned instead of timevalue,fixed bug #168 and added a regression test for it,fix an issue with compiling c extensions on windows,"added aud, audh and audm sync map output format for use with audacity",extension cew compiled for mac os x and windows,other minor fixes and code/documentation improvements,"now running on both python 2.7.x and python 3.4.x or later, including c extensions",all aeneas.tools.* can be run interactively or called from python code by passing a list of arguments,removed pafy from required dependencies,fixed a latent bug in aws polly and nuance wrappers,added to abstractcliprogram support for specifying runtime configuration,added links to installers for mac os x and windows in the documentation,added the offset and rateaggressive boundary adjustment algorithms,added -v option to aeneas.tools.execute_task and aeneas.tools.execute_job to produce verbose output,rewritten the stripe and exact algorithms to compute the accumulated cost matrix in place,moved the original mfcc.py into the thirdparty/ directory for clarity and attribution,added is_text_file_transliterate_map parameter to read a transliteration map from file and apply it to the input text,aeneas.tools.synthesize_text has a different order of arguments and different option names,"converted all malloc calls to calloc calls to avoid dirty allocations, added checks on the returned pointers","unified aeneas.tools.* structure, with better help messages and exit codes","added aeneas.syncmap.fragmentlist.syncmapfragmentlist class to represent a list of sync map fragments, sorted and with positional/timing constraints",aeneas.tools.run_sd has a different order of arguments and different option names,built with sphinx using a theme provided by read the docs.,marked persian and swahili languages as tested,fixed the numpy deprecated api warning for c extensions,fixed a latent bug with arbitrary shifts in aba when using the task_adjust_boundary_no_zero option,"added pafy as a python dependency, and removed scikits.audiolab",added subtitles input text format and the ability of dealing with multiline text fragments,added gc.ppn_task_os_file_no_zero to avoid fragments with zero duration in sync maps,"ported the unit test launcher run_all_unit_tests.py in python, with more options than unittest discover",modified textfile.py with the new tree-like structure,added plotter.py to plot waveforms and sets of labels to image file,updated install.md to brew install from daniel bair s tap instead of official brew repo since they removed the formula for aeneas ,added more tool and long tests,"added makefile files to c/c++ extensions, replacing previous bash scripts",added warning to aeneas.tools.* when running without python c extensions compiled,added timevalue.py containing an arbitrary-precision type to represent time values ,renamed best_audio parameter to largest_audio in downloader.py and in aeneas.tools.execute_task and aeneas.tools.download,fixed a bug in cew.c triggered when passing espeak voices with variants ,added function to output current date and time in eaf output sync maps,added more tests for configuration and runtimeconfiguration,"added comparison functions to syncmapfragment, based on timeinterval",added unit tests for downloader.py and aeneas.tools.download ,added check when synthesizing multiple: at least one fragment should be not empty,added unit tests for executejob.py and executetask.py ,"added ""true"" and ""yes"" as aliases for true value in configuration","added rconf cdtw, cew, and cmfcc parameters to prevent running a single c extension",other minor fixes and code/docs improvements,other minor fixes and code/docs improvements,"for xml-based sync map formats, now using utf-8 encoding instead of ascii",added eaf sync map output format for use with elan,removed unused keys from jobconfiguration and related source files,added compile_c_extensions.bat and directions for windows users ,fix an issue in dtw with numpy.searchsorted returning an invalid index,"added initial support for outputting multilevel json, smil, ttml, and xml sync maps",fixed a bug with empty fragments when using subprocess tts with tts cache enabled,added wavfile.py from scipy.io to replace scikits.audiolab,"changed the constructor of basettswrapper and derived classes, moving call method flags from constructor parameters to class fields",renamed audio_duration into length in syncmapfragment for consistency with timeinterval,"many unit tests have been rewritten, extended, or refactored",added tree.py to support the new tree-like structure of textfile and syncmap,added the pyinstaller.md file documenting how to compile an executable with pyinstaller,"added detect_head_tail to audiofilemfcc, sd is just an algorithm-switcher class now","removed metadata from all source files, except those directly facing the user",fixed a bug in syncmapfragmentlist which caused sync map to contain overlapping fragments,added a new xml format,changed the default value of task_max_audio_length to 0 ,"edited readme.md, stating the optional dependency from pafy","added runtimeconfiguration, extending configurationobject, to keep the runtime settings, tunable by users",added all voice variants supported by espeak v1.48.03,updated copyright strings with 2017,"more uniform documentation: unless byte is specified, string indicates a unicode string ","added retry mechanism to downloader, including downloader_sleep and downloader_retry_attempts in runtimeconfiguration",better and more unit tests,better and more unit tests,added clone method to aeneas.tree.tree,added two new output formats: textgrid and textgrid_short ,now jobconfiguration and taskconfiguration extend configurationobject,added an option to aeneas.tools.convert_syncmap and aeneas.tools.execute_task to output finetuneas html file,added cdtw c module for running the dtw much faster than in pure python ,added smilh and smilm sync map output formats ,"unified unit tests for espeak, espeak-ng, and festival",explicitly requiring lxml v3.6.0 and beautifulsoup4 v4.4.1 due to a change in beautifulsoup4 v4.5.0 api ,added cmfcc c module for extracting the mfccs much faster than in pure python ,added field human-readable descriptions in configuration and its subclasses,"added aeneas.diagnostics to perform setup check, modified aeneas_check_setup.py accordingly","added run_vad to audiofilemfcc, vad is just an algorithm-switcher class now",added aba_nonspeech_tolerance and aba_no_zero_duration parameters to runtimeconfiguration,"added option -f, --full to aeneas.tools.read_audio and tests for it",added to abstractcliprogram support for specifying log file path,added this changelog,added ppn_task_adjust_boundary_nonspeech_min and ppn_task_adjust_boundary_nonspeech_string to taskconfiguration,more efficient append/prepend operations in audiofile thanks to preallocated memory and space doubling,"changed smil, ttml, and xml write functions, now using the lxml library","added map from language code to human-readable name for tts wrappers and for language, usable by aeneas.tools.execute_task",added list of supported language codes to --list-values in aeneas.tools.execute_task,added a new json format,"added runtimeconfiguration parameters to switch mfcc masking on, including per level in multilevel tasks","removed dependency from pafy, using youtube-dl directly ","added exception handling, especially in aeneas.tools.*","added cwave c extension , added a c driver program",added tests for timeinterval,added is_text_file_ignore_regex parameter to ignore text from the input file,"changed json write function, now using the json library",added more examples to aeneas.tools.execute_task,marked czech language as tested,"added loggable to logger.py, now most classes derive from it",added vad algorithm and aeneas.tools.run_vad utility,"added reverse, trim, and write functions to audiofile",added the aeneas.tools.synthesize_text utility to synthesize multiple fragments into a single wave file,"renamed aeneas.ttswrapper to aeneas.ttswrappers.basettswrapper, and ttswrapper to basettswrapper","fixed a few bugs and cleaned the source code of the cmfcc c extension, added a c driver program",added sd.py to automatically detect the head/tail/interval of an audio file,added functions to read sync map files,"renamed aeneas.espeakwrapper to aeneas.ttswrappers.espeakttswrapper, and espeakwrapper to espeakttswrapper",added safety_checks parameter to runtimeconfiguration that can be disabled to trade safety for speed ,"more robust and generic reading of srt-like files, especially webvtt",added unit tests for aeneas.tools.* ,added usage messages to c drivers,added check in executetask on the consistency of the computed sync map,changed parameters=none default value in the constructor of ffmpegwrapper
orjson/CHANGELOG.md at master Â· ijl/orjson Â· GitHub,"orjson.dumps raises an exception if the object to be serialized is not given as a positional argument. orjson.dumps is intended and ok while orjson.dumps is an error. this makes it consistent with the documentation, help annotation, and type annotation.",serialization is 10-20% faster and uses about 50% less memory by writing directly to the returned bytes object.,"manylinux1 wheels for 3.6, 3.7, and 3.8 are now compliant with the spec by not depending on glibc 2.18.",fix repeated serialization of str that are ascii-only and have a legacy layout.,"orjson.dumps does not serialize dataclasses.dataclass attributes that begin with a leading underscore, e.g., _attr. this is because of the python idiom that a leading underscores marks an attribute as ""private.""",orjson.dumps pretty prints with an indentation of two spaces if option=orjson.opt_indent_2 is specified.,numpy support now includes numpy.uint32 and numpy.uint64.,fix dataclasses.dataclass attributes that are dict to be effected by orjson.opt_sort_keys.,the recursion limit of default on orjson.dumps has been increased from 5 to 254.,performance improvements and lower memory usage in deserialization by creating only one str object for repeated map keys.,improve serialization performance marginally by using the fastcall/vectorcall calling convention on python3.7 and above.,orjson.dumps serializes dataclasses.dataclass and uuid.uuid instances by default. the options opt_serialize_dataclass and opt_serialize_uuid can still be specified but have no effect.,"orjson.dumps accepts datetime.datetime, datetime.date, and datetime.time. each is serialized to an rfc 3339 string.",fix compatibility with debug builds of cpython.,orjson.dumps serializes dict keys of type other than str if option=orjson.opt_non_str_keys is specified.,orjson.dumps does not serialize dataclasses.dataclass attributes that are initvar or classvar whether using __slots__ or not.,orjson.opt_passthrough_subclass causes orjson.dumps to pass subclasses of builtin types to default so the caller can customize the output.,"orjson.dumps serializes dict instances sorted by keys, equivalent to sort_keys in other implementations, if option=orjson.opt_sort_keys is specified.",/,performance improvements to serializing a list containing elements of the same type.,aarch64 manylinux2014 wheels are now compatible with glibc 2.17.,improve deserialization performance of floats by about 40%.,added,added,added,added,added,added,added,added,added,added,added,added,added,added,import numpy only on first use of opt_serialize_numpy to reduce interpreter start time when not used.,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,changed,about,"fix documentation on default, in particular documenting the need to raise an exception if the type cannot be handled.",orjson.dumps now serializes datetime.datetime objects without a tzinfo rather than raising jsonencodeerror.,use vectorcall apis for method calls on python3.9 and above.,fix annotation of optional parameters on orjson.dumps for help.,orjson.dumps accepts a default callable to serialize arbitrary types.,orjson.dumps serializes integers up to a 64-bit unsigned integer's maximum. it was previously the maximum of a 64-bit signed integer.,improve serialization and deserialization performance.,"disable unsupported simd features on non-x86, non-arm targets",dict key can only be str.,publish python3.10 wheels for linux on amd64 and aarch64.,orjson.dumps accepts orjson.opt_omit_microseconds to not serialize the microseconds attribute of datetime.datetime and datetime.time instances.,dataclasses.dataclass instances without __slots__ now serialize faster.,fix deserialization raising jsondecodeerror on some valid negative floats with large exponents.,orjson.dumps available to raise an error on integer values outside the 53-bit range of all json implementations.,orjson.dumps serializes dataclasses.dataclass instances if option=orjson.opt_serialize_dataclass is specified.,orjson.dumps serializes numpy.ndarray instances if option=orjson.opt_serialize_numpy is specified.
pex/CHANGES.rst at main Â· pantsbuild/pex Â· GitHub,"pex 2.0.0 is cut on the advent of a large, mostly internal change for typical use cases: it now uses vendored pip to perform resolves and wheel builds. this fixes a large number of compatibility and correctness bugs as well as gaining feature support from pip including handling manylinux2010 and manylinux2014 as well as vcs requirements and support for pep-517 & pep-518 builds.",this release adds support for including sources and resources directly in a produced pex - without the need to use pants.,"with network configuration now wired up, the pex_http_retries and pex_http_timeout env var support in pex 1 that was never wired into pex 2 is now dropped in favor of passing --retries and --timeout via the cli ","bug fix: we did not normalize package names in resolvableset, so it was possible to depend on sphinx and sphinx-1.4a0.tar.gz and get two versions build and included into the pex. #147.","this release restores and improves support for building and running multiplatform pexes. foreign linux* platform builds now include manylinux2014 compatible wheels by default and foreign cpython pexes now resolve abi3 wheels correctly. in addition, error messages at both buildtime and runtime related to resolution of dependencies are more informative.",this release focuses on the resolver api and resolution performance. pex 2 resolving using pip is now at least at performance parity with pex 1 in all studied cases and most often is 5% to 10% faster.,the resolver api removed precedence which is now pip default precedence: wheels when available and not ruled out via the --no-wheel cli option or use_wheel=false api argument.,this release brings official support for python 3.9 and adds a new --tmpdir option to explicitly control the tmpdir used by pex and its subprocesses. the latter is useful when building pexes in space-constrained environments in the face of large distributions.,now supports extras for static urls and installable directories. #65.,"the --cache-dir setting is deprecated in favor of build time control of the cache location with --pex-root and new support for control of the cache's runtime location with --runtime-pex-root is added. as in the past, the pex_root environment variable can still be used to control the cache's runtime location.",add recipe to use pex with requests module and proxies. pr #659,the focus of this release is better support of the --platform cli arg. platforms are now better documented and can optionally be resolved to local interpreters when possible via --resolve-local-platforms to better support creation of multiplatform pexes.,the resolver api replaced fetchers with a list of indexes and a list of find_links repos.,bug fix: scrub sys.path and sys.modules based upon both supplied path and realpath of files and directories. newer versions of virtualenv on linux symlink site-packages which caused those packages to not be removed from sys.path correctly. issue #21,a new suite of pex tools is now available in pex itself and any pexes built with the new --include-tools option. use pex_tools=1 pex --help to find out more about the available tools and their usage.,"this release fixes a regression in handling explicitly requested --index or --find-links http repos. in addition, performance of the pex 2.x resolver is brought in line with the 1.x resolver in all cases and improved in most cases.",this release brings enhanced performance when using the pex cli or api to resolve requirements and improved performance for many pexed applications when specifying the --unzip option. pexes built with --unzip will first unzip themselves into the pex cache if not unzipped there already and then re-execute themselves from there. this can improve startup latency. pex itself now uses this mode in our (link,adds support for pex_path environment variable which allows merging of pex environments at runtime. this can be used to inject plugins or entry_points or modules from one pex into another without explicitly building them together. #30.,bug fix: pex-info values were overridden by environment variables with default values that were not explicitly set in the environment. fixes #135.,adds helper method to dump a package subdirectory onto disk from within a zipped pex file. this can be useful for applications that know they're running within a pex and would prefer some static assets dumped to disk instead of running as an unzipped pex file. #12.,this release upgrades pip to 20.3.3 + a patch to fix pex resolves using the pip-legacy-resolver and --constraints. the pex package is also fixed to install for python 3.9.1+.,this release changes pex requirement resolution behavior. only stable requirements are resolved by default now. the previous behavior that included pre-releases can be retained by passing --pre on the pex command line or passing allow_prereleases=true via the api.,a hotfix that finishes work started in 2.1.37 by #1304 to align pip based resolve results with --pex-repository based resolve results for requirements with '.' in their names as allowed by pep-503.,"this release includes full manylinux support, improvements to wheel resolution and a handful of other improvements and bugfixes. enjoy!",add support for parsing extras and specifiers. pr #1161,breaking change: pex -r now takes requirements.txt filenames and not requirement specs. requirement specs are now passed as arguments to the pex tool. use -- to escape command line arguments passed to interpreters spawned by pex. implements #5.,this is a hotfix release for a regression in setuptools compatibility introduced by #542.,"this release brings support for a --venv execution mode to complement --unzip and standard unadorned pex zip file execution modes. the --venv execution mode will first install the pex file into a virtual environment under ${pex_root}/venvs and then re-execute itself from there. this mode of execution allows you to ship your pexed application as a single zipfile that automatically installs itself in a venv and runs from there to eliminate all pex startup overhead on subsequent runs and work like a ""normal"" application.",this release fixes the hermeticity of pip resolver executions when the resolver is called via the pex api in an environment with pythonpath set.,the release also fixes --cert and --client-cert so that they work with pep-518 builds in addition to fixing bytecode compilation races in highly parallel environments.,change the interpretation of -i to match pip's -i. this is useful for compatibility with devpi.,this is a hotfix release that fixes a bug exposed when pex was asked to use an interpreter with a non-canonical path as well as fixes for 'current' platform handling in the resolver api.,"we now support reproducible builds when creating a pex via pex -o foo.pex, meaning that if you were to run the command again with the same inputs, the two generated pexes would be byte-for-byte identical. to enable reproducible builds when building a pex, use the flags --no-use-system-time --no-compile, which will use a deterministic timestamp and not include .pyc files in the pex.",this release adds the --intransitive option to support pre-resolved requirements lists and allows for python binaries built under gentoo naming conventions.,spruce up pex and pex-tools clis with uniform -v / --version support and default value display in help. pr #1301,"as part of the resolution performance work, pip networking configuration is now exposed via pex cli options and the networkconfiguration api type / new resolver.resolve api parameter.","bug fix: accommodate osx python python binaries. previously the osx python distributions shipped with osx, xcode and available via link could fail to be detected using the pythoninterpreter class. fixes #144.",this release fixes a performance regression in which pip would re-tokenize --find-links pages unnecessarily. the parsed pages are now cached in a pip patch that has also been submitted upstream.,"we recently regained access to the docsite, and link is now up-to-date.",this release adds support for -c and -m pexfile runtime options that emulate the behavior of the same arguments to python as well a fix for handling the non-standard platform reported by setuptools for apple system interpreters in addition to several other bug fixes.,this release fixes a bug in sys.path scrubbing / hermeticity and a bug in the -d / --sources-directory and -r / --resources-directory options whereby pep-420 implicit packages were not respected .,special thanks to dan blanchard for seeding the initial pr for manylinux support and wheel resolution improvements.,"this release changes the behavior of the --interpreter-constraint option. previously, interpreter constraints were anded, which made it impossible to express constraints like '>=2.7,<3' or '>=3.6,<4'; ie: either python 2.7 or else any python 3 release at or above 3.6. now interpreter constraints are ored, which is likely a breaking change if you have scripts that pass multiple interpreter constraints. to transition, use the native , and operator in your constraint expression, as used in the example above.",adds interpreter detection for jython and pypy.,"adds twitter.common.python.resolver resolve method that handles transitive dependency resolution better. this means that if the requirement futures==2.1.2 and an unqualified futures>=2 is pulled in transitively, our resolver will correctly resolve futures 2.1.2 instead of reporting a versionconflict if any version newer than 2.1.2 is available. rb #129","the 1.0.0 release of pex introduces a few breaking changes: pex -r now takes requirements.txt files instead of requirement specs, pex -s has now been removed since source specs are accepted as arguments, and pex -p has been removed in favor of its alias pex -o.",adds console script support via -c/--script/--console-script and pex_script. this allows you to reference the named entry point instead of the exact module:name pair. also supports scripts defined in the scripts section of setup.py. #59.,"new feature: adds an interpreter cache to the pex tool. if the user does not explicitly disable the wheel feature and attempts to build a pex with wheels but does not have the wheel package installed, pex will download it in order to make the feature work. implements #47 in order to fix #48",this is a hotfix release for 1.4.8 that fixes a regression in interpreter setup that could lead to resolved distributions failing to build or install.,"this release significantly improves performance and correctness of interpreter discovery, particularly when pyenv is involved. it also provides a workaround for eperm issues when hard linking across devices, by falling back to copying. resolve error checking also now accounts for environment markers.",use pip for resolving and building distributions. pr #788,"change the setuptools range to >=2.2,<16 by handling entrypoint changes as well as being flexible on whether pkg_resources is a package or a module. fixes #55 and #34.",bug fix: filename should be part of the .pex cache key or else multiple identical versions will incorrectly resolve ,this release fixes bugs in --unzip and --venv mode pex file execution and upgrades to the last release of pip to support python 2.7.,"this release upgrades pex to the latest pip which includes support for the new 2020-resolver (see: link as well as support for macos bigsur. although this release defaults to the legacy resolver behavior, the next release will deprecate the legacy resolver and support for the legacy resolver will later be removed to allow continuing pip upgrades going forward. to switch to the new resolver, use: --resolver-version pip-2020-resolver.",bug fix: urllibcontext used replace as a keyword argument for bytes.decode but this only works on python 3. pull request #46,"this ordinarily should not be a problem but the zipimporter caches metadata by filename instead of stat/sha, so if the underlying contents changed a runtime error would be thrown due to seemingly corrupt zip file offsets. rb #684","this release includes an initial body of work towards windows support, abi tag support for cpython 2.x and a fix for version number normalization.",add readme and supported python versions to pypi description. #258,"this release brings a fix to handle top-level requirements with environment markers, fully completing environment marker support.",this is a hotfix release that fixes requirement parsing when there is a local file in the cwd with the same name as the project name of a remote requirement to be resolved.,"this release brings a consistency fix to requirement resolution and an isolation fix that scrubs all non-stdlib pythonpath entries by default, only pre-pending or appending them to the sys.path if the corresponding --inherit-path= is used.",add interpreter constraints option and use constraints to search for compatible interpreters at exec time #427,this is a bugfix release for a regression that inadvertently went out in 1.3.0.,the resolver api removed context which is now automatically handled.,fixes an issue where sourcetranslator would overwrite .egg/.whl distributions already on disk. instead it should always check to see if a copy already exists and reuse if there.,this is a hotfix release for the bug detailed in #756 that was introduced by #752 in python 3.7 interpreters.,adds -m and --entry-point alias to the existing -e option for entry points in the pex tool to evoke the similarity to python -m.,"add delayed pkg_resources import fix from #713, with an integration test pr #730",slightly demystify the relationship between platforms and interpreters in the library api and cli pr #1047,"refactor http handling in pex to allow for alternate http implementations. adds support for requests, improving both performance and security. for more information, read the commit notes at 91c7f32. rb #778","the release also removes --use-first-matching-interpreter, which was a misfeature. if you want to use fewer interpreters when building a pex, use more precise values for --interpreter-constraint and/or --python-path, or use --python or --platform.",add type hints to util.py and tracer.py pr #1044,"for users of the pex api, it is recommended to add minor version ranges, e.g. pex>=1.0,<1.1. for users of the pex cli, major version ranges such as pex>=1,<2 should be sufficient.","adds a number of flag aliases to be more compatible with pip command lines: --no-index, -f, --find-links, --index-url, --no-use-wheel. removes -p in favor of -o exclusively.",this release brings a fix for building sdists with certain macos interpreters when creating a pex file that would then fail to resolve on pex startup.,"unlike in the past, the (link we release can now also be controlled via the pex_root environment variable. consult the cli help for --no-strip-pex-env to find out more.","beyond bugfixes for a few important edge cases, this release includes new support for @argfiles on the command line from @jjhelmus. these can be useful to overcome command line length limitations. see: link",add manylinux wheel support and fix a few bugs along the way #316,bug fix: executed entry points shouldn't be forced to run in an environment with __future__ imports enabled. ,"without this change, once a distribution aged past the ttl it would never be used again, and builds would re-create the same distributions in tmpdirs over and over again.",pex 2.1.0 should be considered the first pex 2-series release that fully replaces and improves upon pex 1-series functionality.,this release hardens a few aspects of --venv mode pexes. an infinite re-exec loop in venv pex scripts is fixed and the activate family of scripts in the venv is fixed.,api changes to be wary of:,this release introduces the ability to copy requirements from an existing pex into a new one.,this release brings a bugfix for macos interpreters when the macosx_deployment_target sysconfig variable is numeric as well as a fix that improves pip execution environment isolation.,bug fix: allow pex 0.8.x to parse pex files produced by earlier versions of pex and twitter.common.python.,this is another hotfix release to fix incorrect resolve post-processing failing otherwise correct resolves.,update cache dir when bdist_pex.run is called directly. #278 fixes #274,"there is also support for a new resolution mode when building pex files that allows you to use the results of a previous resolve by specifying it as a -pex-repository to resolve from. if you have many applications sharing a requirements.txt / constraints.txt, this can drastically speed up resolves.",bug fix: sys.exit called without arguments would cause none to be printed on stderr since pex 1.0.1. #143.,adds __hash__ to link so that packages are hashed correctly in twitter.common.python.resolver resolve,"this release adds the --use-first-matching-interpreter flag, which can speed up performance when building a pex at the expense of being compatible with fewer interpreters at runtime.","api change: decouple translation from package iteration. this removes the obtainer construct entirely, which likely means if you're using pex as a library, you will need to change your code if you were doing anything nontrivial. this adds a couple new options to resolve but simplifies the story around how to cache packages. rb #785",this release opens up setuptools support for more modern versions that support breaking changes in setup used in the wild.,this release adds support for validating pex entrypoints at build time in addition to several bugfixes.,support for copying requirements from an existing pex. pr #948,bug fix: replace uses of os.unsetenv with del os.environ pull request #11,/,the pex command line interface now adheres to semver insofar as backwards incompatible cli changes will invoke a major version change. any backwards incompatible changes to the pex environment variable semantics will also result in a major version change. the pex api adheres to semver insofar as backwards incompatible api changes will invoke minor version changes.,add support for controlling prerelease resolution. #350 fixes #28,"bug fix: since 69649c1 we have been unpatching the side-effects of sys.modules after pex.execute. this takes all modules imported during the pex lifecycle and sets all their attributes to none. unfortunately, sys.excepthook, atexit and __del__ may still try to operate using these tainted modules, causing exceptions on interpreter teardown. this reverts just the sys unpatching so that the abovementioned teardown hooks behave more predictably. fixes #141.","this can greatly speed up repeatedly creating a pex when no requirements have changed. a build tool can create a ""requirements pex"" that contains just a static set of requirements, and build a final pex on top of that, without having to re-run pip to resolve requirements.",this release is a quick fix for a regression that inadvertently went out in 1.1.3 .,allow pexbuilder to optionally copy files into the pex environment instead of hard-linking them.,refactor tox.ini to increase the number of environment combinations and improve coverage.,"the --platform cli option and platform resolver api argument now must be full platform strings that include platform, implementation, version and abi; e.g.: --platform=macosx-10.13-x86_64-cp-36-m.",fix reproducible build test improperly using the -c flag and add a new test for -c flag pr #725,add a test for the regression in fixedeggmetadata._zipinfo_name and revert the breaking commit. fixes #216,refactor reproducible build tests to assert that the original pex command succeeded pr #724,this release is a quick fix for a regression that inadvertently went out in 1.1.5 .,allow pex to be invoked using runpy . pr #637,this is another hotfix release to fix a regression in pex --sources-directory handling of relative paths.,breaking change: removes the -s option in favor of specifying directories directly as arguments to the pex command line.,"adds support for pex_python environment variable which will cause the pex file to reinvoke itself using the interpreter specified, e.g. pex_python=python3.4 or pex_python=/exact/path/to/interpreter. #27.",this is a hotfix release that fixes --venv mode shebangs being too long for some linux environments.,this release fixes another bug in --venv mode when pex_path is exported in the environment.,fix bug in cached dependency resolution with exact resolvable. #365,guard against modules with a __file__ of none. issue #756 pr #757,fix invalid regex and escape sequences causing deprecationwarning pr #646,remove long deprecated support for _pex module. pr #1135,ensures that .egg/.whl distributions on disk have their mtime updated even though we no longer overwrite them. this gives them a new time lease against their ttl.,avoid reordering of equivalent packages from multiple fetchers pr #762,a patch release to fix an issue with the --use-first-matching-interpreter flag.,adds a new package abstraction by refactoring link into link and package. rb #92,consolidates documentation of pex_ environment variables and adds the --help-variables option to the pex client. partially addresses #13.,about,"the --manylinux cli option and use_manylinux resolver api argument were removed. instead, to resolve manylinux wheels for a foreign platform, specify the manylinux platform to target with an explicit --platform cli flag or platform resolver api argument; e.g.: --platform=manylinux2010-x86_64-cp-36-m.",this is a htofix release that fixes a bug when specifying a custom index via the cli.,"this is the first release including only a single pex pex, which supports execution under all interpreters pex supports.",add new --no-use-system-time flag to use a deterministic timestamp in built pex pr #722,constrain the virtualenv version used by tox. pr #968,twitter.common.python is no longer a namespace package,add dummy flush method for clean interpreter exit with python3.6 #343,fix resolve regressions introduced by the 1.4.8. pr #580,"this release improves interpreter discovery to prefer more recent patch versions, e.g. preferring python 3.6.10 over 3.6.8.",fix pythoninterpreter caching and ergonomics. #518,this release is a quick fix for a bootstrapping bug that inadvertently went out in 1.2.0 .,this release fixes a bug in --resolve-local-platforms handling that made it unusable in 2.1.16 as well as fixing a long standing file handle leak and a bug when running under macos framework builds of python .,adds http retry support for the requestscontext. rb #1303,adds twitter.common.python.pex_bootstrap bootstrap_pex_env function in order to initialize a pex environment from within a python interpreter. ,adds pex_profile_entries to limit the number of entries reported when pex_profile is enabled. ,introduce new --no-compile flag to not include .pyc in built pex due to its non-determinism pr #718,add type hints to variables.py and platforms.py pr #1042,this release fixes a deadlock that could be experienced when building pex files in highly concurrent environments in addition to fixing pex --help-variables output.,"finally, the long deprecated exposure of the pex apis through _pex has been removed. to use the pex apis you must include pex as a dependency in your pex file.",pin pex to setuptools prior to 9.x until we have a chance to make changes related to pep440 and the change of pkg_resources.py to a package.,"this release fixes pexes such that they fully support environment markers, the canonical use case being a python 2/3 pex that needs to conditionally load one or more python 2 backport libs when running under a python 2 interpreter only.",this release brings an exit code fix for pexes run via entrypoint as well as a fix for finding scripts when building pexes from wheels with dashes in their distribution name.,expand the range of supported setuptools. pr #541,fix up inherits_path tests to use new values #450,pythoninterpreter: support python binary names with single letter suffixes pr #769,this finishes off the effort tracked by issue #716,this is the last release before the 1.0.0 development branch is started., fix issue with wheel when using --index-url option pr #865,bug fix: fix handling of fetchers with file:// urls.,this release fixes a bug in which interpreter discovery failed when running from a zipped pex.,"bug fix: adds content method to http contexts that does html content decoding, fixing an encoding issue only experienced when using python 3. issue #10",follow redirects on http requests #361,use open with utf-8 support. #231,honor interpreter constraints even when pex_python and pex_python_path not set pr #668,bug fix: pex_coverage and pex_profile did not function correctly when systemexit was raised. fixes #81.,fix for ambiguous resolvable bug in transitive dependency resolution #367,performance improvement: don't always write packages to disk if they've already been cached. this can significantly speed up launching pex files with a large number of non-zip-safe dependencies. rb #1642,make sure pexinfo is isolated from os.environ. pr #711
PyFunctional/CHANGELOG.md at master Â· EntilZha/PyFunctional Â· GitHub,improved documentation with more examples and mention linq explicitly,fixed sequence.zip_with_index behavior. used to mimic enumerate by zipping on the left size while scala and spark do zip on the right side. this introduces different behavior and more flexible behavior in combination with enumerate a start parameter was also added like in enumerate,dependencies and supported python versions,added support for reading to and from sqlite databases,fold_left and fold_right had incorrect order of arguments for passed function,"improved _html_repr_, show and tabulate by auto detecting named tuples as column names (link",changed all relative imports to absolute imports with __future__.absolute_import,improved _html_repr_ and show to tell the user 10 of n rows are being shown if there are more than 10 rows (link,new features,new features,new features,new features,new features,new features,fixed case where _wrap is changing named tuples to arrays when it should preserve them,adding extend feature ,detect when its possible to pretty print a table and do so,allow variance on versions of certain packages: link and link,product modified to allow linq projected product,"official and tested support for python 3.5. thus scalafunctional is tested on python 2.7, 3.3, 3.4, 3.5, pypy, and pypy3",reaching 1.0 primarily means that api stability has been reached so i don't expect to run into many new breaking changes.,/,drop ci testing and official support for python 3.3,added optional initial value for reduce (link,pinned versions of all dependencies,sum modified to allow linq projected sum,implemented optimized version of reduce_by_key,added data interchange tutorial with pandas (link,added precompute attribute to reverse transformation ,thanks to chuyuhsu for implemented large parts of the compression feature!,select from linq,about,list/to_list have a parameter n to limit number of results,added interface to csv.dictreader via seq.csv_dict_reader (link,thanks to versae for implementing most of the pseq feature!,fix bug with incorrect wrapping of pandas dataframes link,added table of contents to readme (link,remove package installations from default requirements that sometimes break installation on barebones systems in python 2.7,aggregate from linq,fix python 3 build error due to wheel installation of enum34. package no longer depends on enum34,where from linq
javacpp-presets/CHANGELOG.md at master Â· bytedeco/javacpp-presets Â· GitHub,reuse the presets for hdf5 and openblas with caffe and mxnet,"fix mingw-w64 builds with recent versions of gcc 5.x and potential issue with using ""w32threads"" for ffmpeg","remove unneeded @opaque types from gsl and replace them with their definitions whose names end with ""_struct""","in addition to leptonica and tesseract, use only the officially supported gcc compiler for ffmpeg, fftw, and gsl under windows as well, to prevent compatibility issues ",replace requires with requires static in jpms .platform modules ,"rename groupid to ""org.bytedeco"" and use moditect to modularize all presets and comply with jpms ","build ffmpeg with freetype, enabling the drawtext filter , and support for opus ",build opencv with pthreads instead of openmp or gcd due to thread-safety and usability issues ,fix builds for numpy and scipy on linux when using a cross compiler or not,"make sure clone actually returns new pix, fpix, or dpix objects with presets for leptonica",add support for ios and accelerate to presets for openblas ,"bundle the libraries of cuda and cudnn, allowing opencv, caffe, and tensorflow to use gpus with no cuda installation","pick up oldcc, oldcxx, and oldfc environment variables in cppbuild.sh and platform.oldcompiler system property in maven to build with it libraries that can tolerate an older version of the c/c++ compiler on linux",use native threads for ffmpeg on windows to prevent deadlocks with pthreads ,use long instead of int for constants starting with av_ch_layout_ in avutil ,deprecate get*buffer methods in favor of a better named and generic createbuffer method,"add flycapture2video.h and flycapture2videodef.h, and remove avirecorder.h for flycapture ",enable openmp for mkl-dnn also on mac and windows by building with gcc,include the descriptor and message apis in the presets for caffe ,"include ir, optimizer, and version converter for onnx ",remove calls to deprecated functions from sample code for ffmpeg ,add support for mac os x and windows to presets for libfreenect2 ,"include env.h, kernels.h, and ops.h to allow creating custom operations using the c api of tensorflow",link tensorflow statically with cudart to avoid dependency on cuda ,add presets for mxnet and tensorflow 0.8.0 ,fix loading issue with opencv_stitching and opencv_xfeatures2d ,add support for mac os x and windows to presets for librealsense ,switch to clang for android builds with recent versions of the ndk ,fix functions from facemark.hpp and face_alignment.hpp that crash when called with cv::mat objects,include new platform.dependency and platform.dependencies properties to let users depend easily on the artifacts that contain native libraries,replace install_name_tool hack to set @rpath on mac os x with patches to do it properly on install ,add presets for the new intensity_transform and rapid modules of opencv,license default builds of ffmpeg under lgpl v3 and move gpl-enabled builds to -gpl extension ,add android utility classes from the official java api of opencv and tensorflow ,add support for windows to presets for liquidfun and mxnet ,"upgrade all maven dependencies and plugins to latest versions, thus bumping minimum requirements to java se 7, android 4.0, and maven 3.0","force opencv to build with gcc 4.6, as newer versions are known to hang on android 2.2 ","disable iconv, xcb, and sdl for more portables builds of ffmpeg, but enable x11grab and avfoundation to allow screen capture ",introduce platform artifacts that depend on binaries for all available platforms and work with any build system ,"added presets for the c++ api of opencv 2.4.8, which can now be parsed due to the latest changes in javacpp","avoid versioning of leptonica and tesseract libraries, preventing them from working on android ",add support for android-arm and android-x86 platforms to tensorflow presets ,disable assembly optimizations for libx264 with ffmpeg on mac to work around crashes ,"build ffmpeg with libxml2, enabling support for dash demuxing , and libsrt for srt protocol support ",include setlocale in presets for tesseract to work around issues with locale ,fix loading issue with opencv_cudaobjdetect and opencv_cudaoptflow on windows ,define commonly used caffe std::vector types for ease of use and performance reasons,"fix and refine mapping for houghlines, houghlinesp, and houghcircles ",enable mkl-dnn for mxnet and tensorflow,add opencv_python3 module and corresponding loader class with sample code to the presets for opencv ,deprecate slow get and put methods of cvmat in favor of the fast ones from createindexer ,virtualize qobject and its subclasses from qt to allow customization ,include cudagl.h and cuda_gl_interop.h header files in presets for cuda ,propose for ffmpeg in the cppbuild.sh file a minimal configuration to support mpeg-4 streams with h.264 and aac,call pointer.setnull in custom deallocators for the c api of tensorflow to prevent double free from occurring,work around issues with tensorflow on some versions of mac os x ,fix x265 encoding with ffmpeg on android ,fix builds for libpostal on mac and windows ,add samples using llvm modules to deal with bitcode and object files ,include presets for leptonica 1.71 and tesseract 3.03-rc1 on windows too,"add for cvmat, iplimage, and pix, helper create factory methods that prevent premature deallocation ","updated cppbuild.sh scripts with support for the ""android-x86"" platform , thanks to xavier hallade","enhance presets for ale with access to theosystem, etc ","switch to gcc 4.9 by default on android, probably dropping support for android 2.2, because gcc 4.6 has issues with openmp ",fix ffmpeg build of libvpx with linux on arm ,add builds for android-arm64 and android-x86_64 platforms ,call loader.checkversion in all presets to log warnings with potentially incompatible versions of javacpp,fix compatibility of leptonica with javafx by upgrading to libpng 1.6.37 ,"execute the cppbuild.sh scripts within the maven build lifecycle, can be skipped with -djavacpp.cppbuild.skip ",fix libdc1394 not properly linking with libusb-1.0 on mac os x ,enable cudnn support for caffe by default ,let presets pick up include or link paths from cached resources ,"add blas_extra.h to presets for openblas, containing blas_set_num_threads and blas_get_vendor functions",add support for windows to presets for tensorflow ,add linux-armhf and linux-arm64 builds for librealsense and librealsense2 ,define commonly used opencv std::vector types for ease of use and performance reasons,fix build for ffmpeg on android-x86 and android-x86_64 platforms ,add more samples for tensorflow including a complete training example ,"add speex, opencore , and openssl in the cppbuild.sh script for ffmpeg to support common rtmps streams, among other things ",fix missing static keyword on methods annotated with an @adapter ,add build for mac os x to presets for onnx ,"skip functions that are not actually implemented in avdevice, causing load failures on android",add requires org.bytedeco.javacpp.${javacpp.platform.module} to load jnijavacpp with jpms ,include free in presets for fttw as required by fftw_export_wisdom_to_string ,set default options in tensorflow/cppbuild.sh to prevent console reads during build,"add linux-arm64 builds to presets for dnnl, opencl, tensorrt , and onnx runtime","add a readme.md file to each presets with links to original project, java api documentation, and sample usage","avoid versioning of fftw and gsl libraries, preventing them from working on android ",add basic mapping of stdio streams to presets for gsl since it relies on them for serialization,"include new createindexer method in cvmat, iplimage, mat, etc. for easy and efficient multidimensional access of data ","this project was conceived at the okutomi & tanaka laboratory, tokyo institute of technology, where i was supported for my doctoral research program by a generous scholarship from the ministry of education, culture, sports, science and technology of the japanese government. i extend my gratitude further to all who have reported bugs, donated code, or made suggestions for improvements !",virtualize tensorbuffer and make constructor with helper method in tensor public to allow zero-copy,allow mkl-dnn to link with the full version of mkl at runtime ,"add getstring helper methods to cxstring, cxturesourceusagekind, and cxevalresult for clang ",link hdf5 with zlib on windows also ,"add ios builds for opencv, openblas, and skia ","add missing mkl_gnu_thread preload in presets for openblas, mkl-dnn, and tensorflow ",build openblas with a target even for dynamic_arch to avoid sigill ,include operations.hpp and mat.hpp in opencv_core to get a few important functions such as read and write for filestorage,remove the need for empty artifacts of unsupported platforms ,add @membergetter for av_log_default_callback in presets for ffmpeg ,disable unneeded error messages from libtiff in presets for leptonica ,add python-enabled builds for tensorflow via the -python and -python-gpu extensions,fix functions from opencv_stitching not accepting a matvector as apparently intended by the api ,add functions missing from the presets of mxnet ,add build for linux-arm64 to presets for ffmpeg ,add dependency on presets for jnijavacpp and javacpp-platform artifact to fix issues at load time ,set correct default path to javacpp.platform.compiler for android builds on mac os x ,build all presets on centos 6 with developer toolset 6 and move almost all linux builds to centos 6,prevent mkl-dnn from compiling code with -march=native ,"patch libdc1394, libdcfreenect, fftw, gsl, leptonica and tesseract with missing @rpath needed by mac os x ",include sys/sysinfo.h for system api of linux,add cuda-enabled build for onnx runtime via -gpu extension,"disable doclint, which prevents the build from succeeding on java 8 ",prevent creating text relocations for shared libraries on android ,"offer the apache license, version 2.0, as a new choice of license, in addition to the gplv2 with classpath exception",map a few more inherited constructors missing from the presets for mkl-dnn and dnnl,fix -platform artifacts on jpms by commenting out requires to android modules ,update sample code for gsl with a more complex example ,add build for mac os x to presets for ngraph ,fix definitions of fftw_iodim and fftw_iodim64 for fftw ,add support for windows to presets for qt ,keep a reference of tensorflow.sessionoptions in abstractsession to prevent premature deallocation ,emphasize the need to install separately the parent pom.xml file ,define cv__legacy_persistence to get back functions for keypointvector and dmatchvector ,"add windows build for onnx runtime, map the c++ api, and refine support for dnnl ",add bindings for b2dynamictree::query and raycast for liquidfun ,"add helper for pix, fpix, and dpix of leptonica, facilitating access to image data of tesseract ",map more functions of the opencv transparent api with umat and umatvector parameters ,add presets for caffe ,replace the exec-maven-plugin with the javacpp plugin itself to execute the cppbuild.sh script files,include orcbindings.h and other missing header files for llvm ,/,add initial set of cuda bindings for opencv ,add presets for the saliency module of opencv ,fix linux-armhf and linux-ppc64le builds for all presets ,"add presets for librealsense, hdf5, and openblas/mkl ","bundle the official java apis of opencv and tensorflow, via the opencv_java and tensorflow_cc modules",fix ffmpeg builds on arm when not using a cross compiler ,"prepend ""javacpp."" to all properties associated with maven in the pom.xml files to avoid name clashes",add support for motion jpeg to the minimal configuration proposed for ffmpeg in the cppbuild.sh file,"stop using zeranoe ffmpeg builds, often not available for release versions ",make flycapture/cppbuild.sh fail if flycapture is not found installed on the system ,fix presets for openblas failing to load mkl when symbolic links are enabled on windows,disable optimized kernels of openblas on ios as they return incorrect results ,add necessary platform properties to build -gpu extensions on linux-arm64 and linux-ppc64le ,"add quickspinc.h, spinvideoc.h, and transportlayer*c.h for spinnaker ",add callbacks for tesseract according to new functionality in javacpp,ported various helper classes and methods from javacv,enable openmp for onnx runtime on mac once again ,add support for polly optimizer to presets for llvm ,"introduced build scripts, based on the cppjars package of javacv, to install native c/c++ libraries","add builds for linux-mips64el to presets for artoolkitplus, chilitags, flandmark, openblas, and fftw ",add methods overloaded with pointerpointer for mkl-dnn ,add linux-armhf and linux-arm64 builds for hdf5 ,add functions related to threading missing from presets for cpython,add support for n-dimensional arrays to opencv_core.mat.createindexer ,update presets for ffmpeg where avcodec now inherits from swresample ,"bundle programs from clang and llvm, executable via loader.load for convenience ","add profiles to parent pom.xml to detect host and use its artifacts, for example: mvn -djavacpp.platform.custom -djavacpp.platform.host ...",add presets for cuda 7.0 ,"add cuda/opencl-enabled builds for opencv, caffe, and tensorflow via -gpu extension ",fix loading issue with opencv_ximgproc ,bundle configuration files required by aot compilation with graalvm ,add packages missing from tensorflow ,let createbuffer return ubyteindexer and ushortindexer when appropriate for unsigned data types,add support for windows to presets for tensorrt ,append @documented to annotation types to have them picked up by javadoc,add windows build for onnx ,add libmp3lame to ffmpeg builds ,"build the maven artifacts for linux in a centos 6 docker container, for maximum compatibility ",virtualize iint8calibrator plus subclasses from tensorrt to allow customization ,"let gsl link with openblas, mkl, accelerate, etc automatically instead of gsl cblas ",keep globally shared dummy deallocator for tf_tensor out of pointerscope,"enable nvidia cuda, cuvid, and nvenc acceleration for ffmpeg ","add presets for opencl 3.0, tvm 0.7.0 and bundle its official java api via the jnitvm_runtime library",fix cuda build for tensorflow on windows ,"include audio_ops.h, list_ops.h, lookup_ops.h, and manip_ops.h for tensorflow",add build for linux-mips64el to presets for opencv ,let users choose the runtime type of layer_by_name from floatnet or doublenet in caffe ,about,"introduce linux-arm64 build for cuda, cudnn, and nccl ","include feature.pb.h, example.pb.h, record_reader.h, and record_writer.h for tensorflow ",add an rpath to libmkldnn.so.0 to avoid loading issues on linux ,build libtiff after webp to make sure they link correctly in presets for leptonica,add cuda-enabled build for mxnet via -gpu extension ,fix loading issue with opencv_dnn_superres ,fix jpms module names for openblas and tesseract ,"add presets for the nvblas, nvgraph, nvrtc, and nvml modules of cuda ",add build for linux-arm64 to presets for openblas ,virtualize opencv_videostab.iframesource to let us implement it in java ,add missing graphdefbuilder.options.withattr methods from the tensorflow module ,include c_api_internal.h for tensorflow ,provide cppbuild.sh script for caffe that includes all dependencies ,make sure to include only native libraries in platform specific jar files ,include the libavutil/time.h for ffmpeg ,remove the need to set manually the platform.dependency system property for downstream modules without a cppbuild.sh file,add samples for clang ,"add preload for gif, jpeg, png, tiff, and webp libraries in presets for leptonica ","fix android builds of ffmpeg, fftw, gsl, leptonica, and tesseract causing errors under mac os x ",fix loading issue with opencv_face ,"document a bit the create factory methods in the helper package of the opencv module, and their relationship with the release methods",include ucrtbase.dll when bundling the runtime for visual studio 2015 on windows ,add org.bytedeco.tensorflow.stringarray.put method to change character encoding ,work around build issues for tensorflow on some linux distributions ,add mat and mat constructors to opencv for convenience ,"fix the cppbuild.sh script for ffmpeg, failing to build x264 and openh264 properly on windows",add cross-compilation support for linux-ppc64le ,fix presets for cuda on the linux-ppc64le platform,resolve missing dependency for gsl on windows-x86 by linking statically whatever it needs from libgcc_s_dw2-1.dll,use the new build_path environment variable passed by the javacpp plugin to the cppbuild.sh script files,"bundle ffmpeg and ffprobe programs, executable via loader.load for convenience ",fix javadoc links for externally referenced classes,fix presets for openblas on linux-ppc64le not bundling correct libraries ,add missing native_camera modules of opencv_highgui for android,link jnivideoinputlib.dll statically to avoid missing dependencies ,enable openmp for dnnl on mac using same library name as mkl to prevent conflicts ,bundle openssl in the presets for cpython for consistency across platforms ,fix some integer types in hdf5 being mistakenly mapped to smaller integer types,make it possible to set the tf_buffer::data field for c api of tensorflow,enable cuda in cppbuild.sh script for tensorflow ,add support for windows to presets for llvm ,add presets for openpose 1.6.0 ,include nnvm/c_api.h header file in presets for mxnet ,"add presets for libfreenect2 , mkl 2018.1 , libpostal 1.1-alpha , the arcade learning environment 0.6.0, liquidfun , skia , and system apis ",hack together log_callback.h to be able to redirect to java log messages from ffmpeg,bundle libraries from raspberrypi/userland to avoid loading issues on linux-armhf devices other than raspberry pi ,enable mmal and openmax acceleration for ffmpeg on linux-armhf ,lengthen mat size and step getters to support long indexing ,enable mediacodec acceleration for ffmpeg on android ,add missing call to loader.load in helper class for opencv_ml ,add presets for the quality module of opencv,map the c/c++ api supporting eager execution in the presets for tensorflow,add new array constructors to opencv_core.mat that copy data for convenience ,"include timecode.h, among other missing header files, in the avutil module of ffmpeg "
PyLaTeX/changelog.rst at master Â· JelteF/PyLaTeX Â· GitHub,the add add_multicolumn and add_multirow methods on tabular classes are removed in favor of the much more robust and easier to use .multirow and .multicolumn classes.,the non keyword argument for filename is now called path instead of filename to show it can also be used with paths.,"the internal method propegate_packages has been spelled correctly and made ""internal"" by adding an underscore in front of the name, resulting in _propagate_packages",default configuration for certain options can be overwritten with the new pylatex.config module.,added .pagestyle class to support the creation of various page styles. in addition to this class .head and .foot were added for creating unique headers and footers within the page styles. a .simple_page_number function was also added for easy displaying of a simple page number.,the temp directory is only removed in generate_pdf when cleaning is enabled,the container_name attribute has been changed to ~.latexobject.latex_name so it can be used more than containers. by default it is still the lowercase version of the classname. to change the default for a class you should set _latex_name,"this realease brings some great changes. the whole package has been refactored and actual documentation has been added. because of this, things have been moved an renamed. one of the most notable changes is that all normal text is now escaped by default.",compiling is more secure now and it doesn't show output unless an error occurs or explicitly specified.,use known working versions for python 3.5 and lower of ordered-set dependency,"the old table class is renamed to .tabular. a new .table class has been created that represents the table latex environment, which can be used to create a floating table.","see these docs for changes that have not yet been released and are only present in the development version. this version might not be stable, but to install it use:","the default of the filepath argument for the .document.generate_pdf and .document.generate_tex have been changed to none. the response to the default is not changed, so this is a fairly invisible change.","added tikz basic drawing functions for nodes and paths, with minimal coordinate support.","when subclassing a class and special latex packages are needed, you now have to specify the packages class attribute instead of passing packages along with the __init__ method.",added a new type of container .containercommand for supporting commands with data.,installs from git now get installed as a special version based on the commit. this is done by using versioneer.,content of subclasses of .container is now automatically escaped. content of .arguments or .options is not escaped by default.,filenames with a ~ in them now also work as figure paths. this caused issues when using temp directories on windows.,.quantity got a new options keyword argument and learned to handle uncertain quantities.,removed useless list class constructor arguments for list_spec and pos. these were probably copied from the .tabular class.,".tabular.add_row now accepts cells as arguments, so they don't have to be wrapped in a list or tuple anymore.",tables like .tabular now raise an exception when rows with wrong size are added,releases can be done with much less manual work for the maintainer in the future.,"the default allignment of a multicolumn is not c instead of |c|, since vertical lines in tables are ugly most of the time.",fix a bug in plt and one in fix_filename that caused an error when using them with some filenames ,removed base keyword argument of the .package class. .command should be used when changing of the base is needed.,fixed the testall.sh script such that sphinx and nosetests get called with the correct python version.,"add .commandbase, which can be easily subclassed for a command that is used more than once.","for all of the previous changes the old submodules and names should still work during the transition period, but they will be removed before the final release.",filenames should now be specified to the ~.document.generate_pdf/~.document.generate_tex methods of document. if this is not done the default_filename attribute will be used.,with statement support,allow the data keyword argument of containers to be a single item instead of a list. if this is the case it will be wrapped in a list on initialization.,"removed the submodules pylatex.parameters, pylatex.command and pylatex.numpy. the content of the first two was moved to pylatex.base_classes.command and the content of the last one was moved to pylatex.math.",add label and cross reference support.,command and parameter classes,the plt class has been merged with the .figure class. its ~.figure.add_plot method also doesn't take a plt argument anymore. the plt module is now imported when the ~.figure.add_plot method is used. this also allows for adding plots in the .subfigure class.,"add .noescape string class, which can be used to make sure a raw latex string is not escaped.",the table object is going to be deprecated in favor of the better named .tabular object. this will take a couple of releases.,"removed the title, author, date and maketitle arguments from the .document constructor. they were from a time when it was not possible to change the preamble, which is now very easy. they are not so commonly used that they should be part of the main .document object.",for better readability let ~.escape_latex change a newline to \\%\n instead of simply \\.,.tabular.add_row now accepts a list of mappers,allow supplying a mapper function to dumps_list and the add_row method for tabular like objects.,.quantity now correctly splits prefix and unit into seperate commands.,removed,fix bug where the geometry options were not applied in some cases,escape generated \n characters by pylatex by placing a % sign in front of them.,"made ~.latexobject.separate_paragraph, ~.latexobject.begin_paragraph and ~.latexobject.end_paragraph class attributes instead of instance attributes.",latex_name is now fixed for the .document class. this way you can safely subclass it.,replace filename by filepath in the names of the arguments.,"added a new .position package with the following classes: .center , .flushleft , .flushright , .minipage , .textblock , .verticalspace and .horizontalspace ","add support for booktabs tables, which look nicer than normal tables.",/,"pypi installs will not fail anymore for python 2.7, when 3to2 and future were installed.",.document packages now get propagated from the preamble elements as well.,".container now has a ~.container.dumps_content method, which dumps it content instead of a dumps method. this allows to override just that method when subclassing .environment so you can do dump in some special inside the environment, while still keeping the \begin and \end stuff provided by .environment.",made lots of keyword arguments keyword only arguments. this was needed to make it easy to keep the api the same in the future.,all notable changes to this project will be documented on this page. this project adheres to semantic versioning.,fixes filename generation with dots in the final filename on windows.,"matplotlib support now uses the tmpfile module, this fixes permission issues with the badly previously badly located tmp directory.",add fragment class which is a container without any latex code surrounding its content.,an unfinished quantity class that can be used in conjunction with the quantitities package. link,the graphics submodule has been renamed to figure.,added,added,added,added,added,added,added,added,added,added,added,added,added,allow overriding of the default numbering of .section class.,the command and parameters submodules have been merged into one command submodule in the base_classes submodule.,install now works on python 3.6+,fix package delegation with duplicate packages,the old baseclasses have been renamed as well. they now have easier names that better show their purpose.,changed,changed,changed,changed,changed,changed,changed,about,added the ability to add your own column types through the .columntype class.,make width and placement keyword only arguments for the ~.figure.add_plot method.,changed from using $$ ... $$ for displaymath to using \.,added the option to select a color when adding an hline or adding a row to any ~.tabular environment.,"moved ~.latexobject.separate_paragraph, ~.latexobject.begin_paragraph and ~.latexobject.end_paragraph attributes to .latexobject.",added the ability to choose the enumeration symbol in a list using the enumeration_symbol keyword argument of .enumerate.,.tabular can now have a width specified to override the calculated width based on the table_spec argument.,.package instances now actually get deduplicated.,added .standalonegraphic to support the creation of images outside of figure environments.,baselatexnamedcontainer now uses the name of the class as the default container_name,make labels/sections with weird characters work,"add the textcomp package by default. this way some special glyphs, like the euro symbol can be used in the source.",propagate packages recursively add packages of sub containers,"fixed a bug in the .document class, that lead to an error if a filepath without basename was provided.",subfigure class for use with subcaption package,partial experimental support for multicol/multirow,more descriptive error when no compatible latex compiler was found.,_star_latex_name attribute of .latexobject to append a star,.tabu and .longtabu environments learn 'spread' and 'to' syntax to control their width.
essentia/Changelog at master Â· MTG/essentia Â· GitHub, - new and updated features extractors, - some descriptors output by the streaming_extractor have been fixed and now have," differences are significative, and are more significative in lower bands"," bin instead of truncating, hence we're not taking into account the bin n 0,", - external features / examples enhancements:," - new algorithms for onset detection, beat tracking and melody extraction"," - mfcc are slightly different , because the bands limits were not"," network is a directed acyclic graph, the composites have better defined semantics, and the order of execution of the", algorithms is the topological sort of the transitive reduction of the visible network after the composites have been, - cleaned examples and made sure they all work,/, - extractor in windows now prints the message of the exception if any was thrown, - spectral_crest -> changes a lot -> uses the max which is way too sensitive to noise, - most of essentia descriptors are now wrapped as vamp plugins. see src/examples/vamp*, - valuefile can now output string and vector<string>, - poolaggregator also allows kurtosis and skewness as aggregates., - streaming_extractor can now be configured using a yaml configuration file," - new rhythm descriptors, bpm and beat tracking using meinhard mueller's technique described in his paper from ismir 2009."," - added range description for parameters, also does automatic range checking when",about, - refactoring of the core api, - better compatibility with python 2.6, - first release to be publicly available as free software released under agplv3., this difference does not appear on all the files , - fixed all the remaining memory leaks. essentia is now 100% leak-free!, - fix small api annoyances for the standard mode, releases to compensate for the deficiencies of the initial scheduler., due to the framecutter not returning exactly the same number of frames ," expanded). in particular, the scheduler that runs the algorithms in the streaming mode is now a lot more correct,", - have input/output/parameter names which conform better to the guidelines, - did a white-box review of the remaining algorithms, - spline and cubicspline approximants. see src/algorithms/standard/spline and src/algorithms/standard/cubicspline," - streaming mode refactor. it is now much better defined, using sound computer science techniques (the visible", different values. here is the list of changes:, - new gaiatransform algorithm that can use any classification model trained by gaia to classify a given pool. see src/algorithms/highlevel/gaiatransform.*, which permitted to clean all the small hacks that had accumulated in the algorithms themselves during the 1.x, descriptors dependent on barkbands:, - updated vamp plugin, - added new python unit tests and streaming c++ unit tests, - the usual assortment of bugfixes., - fixed a crash in the bpm histogram descriptor, configuring an algorithm
Changelog â€” Apache Libcloud 3.3.2-dev documentation,deprecated lockfile library which is used by the local storage driver has been replaced with fasteners library. ,fix a regression introduced in 0.13.0 and make sure to include content-length 0 with put and post requests. ,introduce godaddy dns driver with examples and documentation. ,existing apis directly on the libcloud.* module have been deprecated and will be removed in version 0.6.0. most methods were moved to the libcloud.compute.* module.,retrying is off by default and can be enabled by setting libcloud_retry_failed_http_requests environment variable. ,replace old enum style provider constants and replace them with a string version. this change allows users to dynamically register new drivers using a new set_driver method. ,improve and add new features to brightbox driver, add new vmware vsphere driver which utilizes pyvmomi library and works under python 3.,"deprecate rackspace_us and rackspace_uk provider constant and replace it with a new rackspace constant. driver referenced by this new constant takes a region keyword argument which can be one of the following: us , uk .",fix a bug with content_type and encoding of object and path names in the atmos driver. , update oneandone driver to accomodate latest changes to the api. this means removing deprecated ex_remove_server_firewall_policy method and replacing port_from and port_to argument on the firewall policy with a single port attribute. ,"storagevolumesnapshot now has an attribute name that has the name of the snapshot if the provider supports it. this used to be .extra, but that is inconsistent with node and storagevolume. the extra dict still holds name for backwards compatibility. ",remove deprecated provider constants with the region in the name and related driver classes .,those attributes contain value of stdout and stderr produced so far. , fix attach_volume method and allow maximum of 64 disks to be added when lun is not specified. previously there was a bug and only a maximum of 63 disks could be added. ,"deprecate cloudfiles_us and cloudfiles_uk provider constant and replace it with a new cloudfiles constant. driver referenced by this new constant takes a region keyword argument which can be one of ord , dfw , iad , syd , lon .", update supported ec2 regions and instance sizes and add support for eu-north-1 region. ,"deprecate rackspace_us and rackspace_uk provider constant and replace it with a new rackspace constant. driver referenced by this new constant takes a region keyword argument which can be one of the following: ord , dfw , iad , syd , lon .", fix a bug with azure storage driver works when used against a storage account that was created using kind=blobstrage. this includes updating the minimum api version used / supported by the storage driver from 2012-02-12 to 2014-02-14. ,"previously path specified in the auth_url was ignored and only protocol, hostname and port were used. now user can provide a full url for the auth_url variable and the path provided in the url is also used. ", fix a bug with chunkstreamreader class and make sure file descriptor is also closed if the iterator isn t fully exhausted or if the iterator is never read from.,"use of lxml is now disabled by defalt, use libcloud.utils.py3.default_lxml = true to reenable. lxml has compatibility issues with a number of drivers and etree is a standard package. ",add new pollingconnection class. this class can work with async apis. it sends and an initial request and then periodically poll the api until the job has completed or a timeout has been reached. , update gce and softlayer drivers to utilize crypto primitives from the cryptography library instead of deprecated and unmaintained pycrypto library.," add support for creating nodes without a service account associated with them. now when an empty list is passed for ex_service_accounts argument, vm will be created without service account attached.",introduce new list_regions` class method on the base driver class. this method is to be used with provider drivers which support multiple regions and region constructor argument. it allows users to enumerate available / supported regions. ,include created and updated attribute in the openstack 1.1 driver. ,fix universal wheel metadata and ensure conditional dependencies are handled correctly.,fix handling of binary data in local storage driver on python 3. now the file which is to be written or read from is opened in the binary mode . ,make sure ttl attribute is correctly parsed and added to the record extra dictionary. ,"add new at_exit_func argument to deploy_node method. with this argument user can specify which function will be called before exiting with the created node in question if the deploy process has been canceled after the node has been created, but before the method has fully finished.", add rebuild and resize commands ,add support for using an http proxy for outgoing http and https requests. ,"fix deploy_node so it correctly propagates an exception is a private key which is used is password protected, but no password is specified.", update deploy_node method so it complies with the base compute api and accepts deploy argument.,"when this variable is set to true, behavior is also consistent with libcloud versions prior to v2.0.0.","only officially supported and recommended approach still is to use provider.foo enum type constant, but since the string notation was unofficially supported in the past, we will still support it until the next major release.",add new stdout and stderr attribute to sshcommandtimeouterror class., allow for use of shared network and subnetwork ," add start, stop instance methods and fix incorrect state terminated to stopped ",update cloudsigma driver so the unavailable and paused node state is correctly mapped to error and paused respectively. ,fix libcloud.utils.py3.urlquote so it works with unicode strings under python 2. ,"refactor the test classes to use the full libcloud.http and libcloud.common.base modules, with connection, response all used with requests_mock. this increases our test coverages and catches bugs in drivers custom parse_body and auth modules ","fix a possible race condition in deploy_node which would occur if node is online and can be accessed via ssh, but the ssh key we want to use hasn t been installed yet.","previously this argument value could only contain a project name, now the value will be checked against project name and id.",fix a regression with hash computation performance and memory usage on object upload inadvertently introduced in 2.0.0 and make it more efficient. ,"add support for abiquo api v3.x, remove support for now obsolete api v2.x. ", fix add an extra check otherwise list_containers breaks with attributeerror when fromimages is specified ,add new driver for windows azure storage with support for block and page blobs. ,"deprecate lazylist method of iteration over large paginated collections and use a new, more efficient generator based approach which doesn t require the iterator to be pre-exhausted and buffering all of the values in memory.",now most of the large imports are lazy and only happen when that data is needed method is called).,add new standard api for image management and initial implementation for the ec2 and rackspace driver. ,fix handling of the containers with a lot of objects. now a lazylist object is returned when user calls list_container_objects method and this object transparently handles pagination. ,support for multipart uploads and other improvements in the s3 driver so it can more easily be re-used with other implementations .,update google compute engine driver to use and work with api v1. ,"previously, that driver followed driver class per region approach. that approach will be deprecated and removed in a future release.",fix a bug with consuming stdout and stderr in the paramiko ssh client which would manifest itself under very rare condition when a consumed chunk only contained a single byte or part of a multi byte utf-8 character. ,and now we simply ignore byte sequences which we can t decode and include rest of the output which can be decoded.,and now we simply ignore byte sequences which we can t decode and include rest of the output which can be decoded.," update openstack identity driver so a custom project can be selected using domain_name keyword argument. previously, that wasn t possible and the first project which was returned by the api was always selected. ",add support for authenticating against keystone and openstack based clouds using openid connect tokens. , detect bad version of requests that leads to errors in parsing azure storage responses. this scenario is known to happen on rhel 7.6 when requests was installed via yum. ,add support for prettifying json or xml response body which is printed to a file like object when using libcloud_debug environment variable. this option can be enabled by setting libcloud_debug_pretty_print_response environment variable. , update list of image projects and add new centos-8 and debian-10 based images. ,modify paramikosshclient to connect to the ssh agent and automatically look for private keys in ~/.ssh if the auth and ssh_key argument is not specified when calling deploy_node. , add methods for getting and creating ports ," added support for managing host anti-affinity rules, added paging support to all supported calls and added support for requesting priority ordering when creating acl rules ",a lot of the existing compute drivers already implemented that functionality via extension methods so it was decided to promote those methods to be part of the standard libcloud compute api and update all the affected drivers.,fix softlayer driver and make sure all the code is up to date and works with the latest version of the actual softlayer deployment . , add new methods for managing network and storage pool capabilities and include other improvements in some of the existing methods. ,"when this value is set to true , libcloud won t try to sanitize the url path and remove any double slashes.", update get_object method and ensure object.size attribute is an integer and not a string. this way it s consistent with list_objects method. , fix cloudsigma driver so it correctly handles subscription objects without the start_time and / or end_time attribute. ,previously all the constants were contained in libcloud/compute/constants.py file. that file was imported when importing ec2 driver which would add unnecessary import time and memory overhead in case this data was not actually used., update driver and add support for the new api v4. ,"change ex_describe_tags, ex_create_tags and ex_delete_tags methods signature in the ec2 driver. argument is now called resource . this methods work with both node and storagevolume objects. ", update driver and make sure request data is sent as part of http request body on post and put operations . ,this regression was introduced in 2.0.0 when we moved to using requests library. ,modify paramikosshclient so that password and key arguments are not mutually exclusive and both can be provided. ,add created and updated attribute to the loadbalancer extra dictionary in the rackspace driver. , increase the maximum size of block blobs that can be created to 100 mb. this includes updating the minimum api version used / supported by the storage driver from 2014-02-14 to 2016-05-31. ,add extension methods for starting and stoping the node to the cloudstack driver. ,working with the object oriented apis,add support for creating volumes based on snapshots to ec2 and os drivers. also modify signature of base nodedriver.create_volume to reflect the fact that all drivers expect a storagesnapshot object as the snapshot argument. ,new gridspot driver with basic list and destroy functionality. ,fix an issue with the ex_list_keypairs and ex_list_security_groups method in the cloudstack driver which caused an exception to be thrown if the api returned no keypairs / security groups. ,"fix openstack drivers not correctly setting urls when used with identity api, would default to 127.0.0.1 and service catalog urls were not adhered to. ",region which is used is controled by the region driver constructor argument.,update contrib/dockerfile which can be used for running tests so it only run tests with python versions we support. this means dropping support for python < 3.5 and adding support for python 3.7 and 3.8.,fix deploy_node so it correctly propagates an exception if invalid or unsupported private key is used.,"map stopped node state in the cloudstack driver to nodestate.stopped instead of nodestate.terminated, stopping to nodestate.pending instead of nodestate.terminated and expunging to nodestate.pending instead of nodestate.terminated. ",introduced error messages for deprecated drivers , update create_node_method and allow users to create nodes from bootable volumes without specifying image argument. , add type annotations / hints for rest of the base compute api classes and methods. ,expose cloudstack provider. this driver can be used with an arbitrary cloudstack installation. ,fix an issue with libcloud_debug not working correctly with the linode driver. ,fix an inconsistency in ibm sbc driver and make sure public_ips and private_ips attributes are a list. ,https proxy can be set up by either setting https_proxy / http_proxy environment variable or by using driver.connection.connection.set_http_proxy method.,google compute now supports paginated lists including filtering. ,"updated support for opennebula.org v1.4, v2.x, and v3.x apis and included additional compute tests validating functionality. ",don t throw an exception if a limit for a particular cloudstack resource is unlimited and not a number. ,fix a regression with timeout argument provided via _ex_connection_class_kwargs method being overriden with none inside the basedriver constructor method.,previously this argument was not exposed to the end user and defaulted to 3 seconds which means it would be quite easy to reach rate limits with some providers when spinning up many instances concurrently using the same credentials. , added support for changed api for describing quotas. ,remove old deprecated paths. ,improvements to google auth for storage and compute and mime bug fix , update digitalocean driver so it supports ttl attribute for record objects. this includes support for specifying a record ttl via extra attribute when creating and updating a record. ,provide functionality to get and set control access for vapps. this way created vapps can be shared between users/groups or everyone.,"as part of this change, also various issues with invalid argument names were identified and fixed. ",refactor rackspace driver classes and make them easier to use. now there are two rackspace provider constants - provider.rackspace which represents new next-gen openstack servers and provider.rackspace_first_gen which represents old first-gen cloud servers., update driver so it works with api v3 and v4. #1328 , fix a bug with driver not working correctly due to a regression which was inadvertently introduced in one of the previous releases. , changes to the profitbricks compute driver to drop support for the old soap api and provide support for v3 of the rest api. ,update libvirt driver to use ip neight command instead of arp to retrieve node mac address if arp command is not available or the current user doesn t have permission to use it. ,add the new error class providererror and modify invalidcredserror to inherit from it. ,add support for https proxies and fix driver.set_http_proxy method., fix a bug when uploading an object would fail and result in 401 invalid signature error when object mime type contained mixed casing and when s3 interoperability authentication method was used.,allow user to pass url argument to the cloudstack driver constructor. this argument can be provided instead of host and path arguments and can contain a full url to the api endpoint. ,fix a bug with not escaping container and object name in the atmos driver. ,"deprecated ibm sce, hp helion, opsource, ninefold and cloudframes drivers, removed driver code and tests. ","request parameters are sent via query parameters and not via request body, as such, only string values are supported. ",fix bug where instantiating a connection from url and then requesting an action with a leading / would lead to a malformed url. ," as reported in the corresponding bug, the docker daemon will respond in an install_image call with all the messages produced during the procedure parsed as json docs. in that case the response headers also contain the value transfer-encoding : chunked . that kind of response can now be parsed properly by the dockerresponse parse_body method. also, another small change is that previously the id of the new image was marked in the json document as id, but now it s marked as sha256, so the regex used to discover the id has been updated. ", allow to define hostname and username ,add cloudstackproject class to the cloudstack driver and add option to select project and disk offering on node creation. , add support for the client certificate and static token based authentication to the driver. ,"update create_volume method in the cloudstack driver and add ex_volume_type argument to it. if this argument is provided, a volume which names matches this argument value will be searched and selected among the available disk offerings. ",modify elasticstack driver class to pass vnc auto instead of vnc:ip auto argument to the api when creating a server. it looks like vnc:ip has been replaced with vnc . ,add new rackspacenovabeta and rackspavenovadfw driver based on the openstack. , update s3 and other drivers which are based on the s3 one to correctly throw containeralreadyexistserror if container creation fails because container with this name already exists.,also default to a multipart upload when using upload_object_via_stream. this methods is more efficient compared to old approach because it only requires buffering a single multipart chunk in memory. ,add force_ipv4 argument to _wait_until_running and default it to true. this will make libcloud ignore ipv6 addresses when using deploy_node. ,add extension methods for the elastic ip management to the ec2 driver. also modify ex_allocate_address and ex_release_address method to take domain argument so it also works with vpc. ,fix a bug with config_drive attribute in the openstack driver. new versions of openstack now return a boolean and not a string. ,add support and update dimension data driver to use api v2.0 by default. ,fix create_node features metadata and update affected drivers. ,"deprecate the following ec2 provider constants: ec2_us_east, ec2_eu, ec2_eu_west, ec2_ap_southeast, ec2_ap_northeast, ec2_us_west_oregon, ec2_sa_east, ec2_sa_east and replace it with a new ec2 constant. driver referenced by this new constant now takes a region argument which dictates to which region to connect.",reduce redundant api calls in cloudstack driver ,allow user to limit a list of subnets which are returned by passing subnet_ids and filters argument to the ex_list_subnets method in the ec2 driver. , add support for nova 2.x and keystone 3 ,"remove various code patterns which were in place for supporting multiple python versions, including 2.5 and 2.6. libcloud hasn t supported python < 2.7 for a while now, so we can remove that code. ",existing list_* methods which previously used lazylist class are preserving the old behavior and new iterate_* methods which use a new generator based approach have been added. ,add new methods for managing storage volumes and other extenstion methods to the ibm sce driver. ,decrease sleep delay inside paramiko client which is used to prevent busy waiting while waiting for data on the channel.,fix a bug with connection code throwing an exception if a port was a unicode type and not a str or int. ,"optimize various code imports , so now importing most of the modules is around ~20-40% faster and in some cases such as ec2 driver even more.",update cloudstack driver to better handle errors and throw providererror instead of a generic exception. ,fix a regression in the azure arm driver which didn t allow custom storage uri suffix to be used with create_node. ,fix a bug with the libcloud ssl verification code. code was too strict and didn t allow - character in the sub-domain when using a wildcard certificate.,"the ec2 instance type updated with correct disk sizes , conversion errors between gib an mb, disk count were the cause. added instance types - g2.8xlarge and t2.large. ",changes with apache libcloud 0.15.1,changes with apache libcloud 0.15.1,include last_modified and content_type attribute in the object extra dictionary when retrieving object using get_object in the s3 driver. also modify meta_data dictionary to include all the headers prefixed with x-amz-meta- . ,add network mode and labels when creating containers within docker driver. , _node_node method now ensures image and size attributes are also set correctly and populated on the node object. ,"this means if you specify host and region argument, host won t be inferred from the region, but host argument will be used for the actual connection host value. ",this method doesn t need to buffer the whole file content in memory and also supports pipelining which makes uploads much faster and more efficient for larger files., fix api version used to list and delete nics , fix error with getting node id in _to_floating_ip method when region is not called nova. ,"drop support for python 2.6 and python 3.3 they re no longer supported, and the python ecosystem is starting to drop support: two of our test dependencies no longer support them. ",fix openstack ip type resolution - make sure ip addresses are correctly categorized and assigned on private_ips and public_ips node attribute. ,minor fixes to get the library and tests working on python 2.7 and pypy. ,allow deploy_node to use non-standard ssh username and port ,this change allows drivers to support libcloud_debug and ssl certificate validation functionality. previously they have bypassed libcloud http layer so this functionality was not available. ,add ex_create_cloud_service and ex_destroy_cloud_service method to the azure driver. , enable the azure storage driver to be used with the azurite storage emulator and azure blob storage on iot edge. ,fixed bug in docker util library for fetching images from the docker hub api. api was returning 301 and redirects were not being followed. ,enable ssl certificate verification by default and throw an exception if ca certificate files cannot be found. this can be overridden by setting libcloud.security.verify_ssl_cert_strict to false. ,fix upload_object_via_stream method so illegal seek errors which can arise when calculating iterator content hash are ignored. those errors likely indicate that the underlying file handle / iterator is a pipe which doesn t support seek and that the error is not fatal and we should still proceed.," various improvements, fixes and additions to the driver. ",add new methods for managing storage volumes and snapshots to the ec2 driver ,fix an issue with double encoding the container name in the cloudfiles driver upload_object method. also properly encode container and object name used in the http request in the get_container and get_object method. ,add volume management methods and other various improvements and fixes in the runabove driver. ," fix create_record and update_record method and pass none instead of string value null for priority, port and weight parameters if they are not provided as method arguments. ",modify values in the record extra dictionary attribute in the zerigo dns driver to be set to none instead of an empty string if a value for the provided key is not set. , allow preemptible instances to be created ,"storagevolume objects now have an attribute state that holds a state variable that is standardized state across drivers. drivers that currently support the state attribute are openstack and ec2. storagevolume objects returned by drivers that do not support the attribute will have a state of none. when a provider returns a state that is unknown to the driver, the state will be unknown. please report such states. a couple of drivers already put state fields in the extra fields of storagevolumes. these fields were kept for backwards-compatibility and for reference. ",don t sent content-length: 0 header with post and put request if raw mode is used. this fixes a regression which could cause broken behavior in some storage driver when uploading a file from disk. ,add extra attribute to the member object and populate it in the rackspace driver. ,fix a regression introduced with recent xmlrpiclib changes which broke all the gandi.net drivers. ,modify create_node method in cloudstack driver to return an instance of cloudstacknode and add a new expunging node state. ,"deprecate the following elastichosts provider constants: elastichosts_uk1, elastichosts_uk2, elastichosts_us1, elastichosts_us2, elastichosts_us3, elastichosts_ca1, elastichosts_au1, elastichosts_cn1 and replace it with a new elastichosts constant. driver referenced by this new constant now takes a region argument which dictates to which region to connect.",add support for digitalocean api v2.0 while maintaining support for the old api v2.0., add change size and restore ,introduced new base api for instantiating drivers. ,fix deploy_node so an exception is not thrown if any of the output produced by the deployment script contains a non-valid utf-8 character.,fix deploy_node so an exception is not thrown if any of the output produced by the deployment script contains a non-valid utf-8 character.,improved debugging and logging of http requests.,fix a bug with not being able to specify meta_data / tags when uploading an object using google storage driver. ,add support for python 3.x. ,fix an issue with installation failing on some operating system and file systems combinations which don t support file names longer than 143 characters. ,storagevolume objects on ec2 and openstack now have a key called snapshot_id in their extra dicts containing the snapshot id the volume was based on. ,"note: when this variable is specified, the specified path is the only ca file which is used to verifying the server certificate. ",note 1: key_files and key_material arguments are mutually exclusive. note 2: key_material argument is not supported in the shelloutsshclient., allow creating and accepting image members ,add ex_create_multi_value_record method to the route53 driver which allows user to create a record with multiple values with a single call. ,align joyent driver with other drivers and deprecate location argument in the driver constructor in favor of region argument.,"for consistency with other drivers, update rackspace driver to set record.name attribute for the records which refer to the bare domain to none instead of setting them to fqdn. ",added an integration test api and a test suite for validating functionality without mocking any libcloud subsystems ,add extra dictionary to the cloudstacknode object and include more attributes in the extra dictionary of the network and volume object. ,add new ex_create_balancer_access_rule and ex_create_balancer_access_rule_no_poll method to the rackspace driver. , set the minimum required version of requests to 2.5.0 since requests 2.4.0 and earlier exhibit xml parsing errors of azure storage responses. ,propagate an exception in deploy_node method if user specified an invalid path to the private key file. previously this exception was silently swallowed and ignored. ,create cloudstackfirewallrule class and corresponding methods. ,add hard and soft reboot methods to rackspace driver. ,fix a bug / regression which resulted in increased memory consumption when using download_object method. this method would store whole object content in memory even though there was no need for that.,fix a bug which caused the connection to not be closed when using python 2.6 and calling get_object on an object which doesn t exist in the s3 driver. ,fix a bug which caused the connection to not be closed when using python 2.6 and calling get_object on an object which doesn t exist in the s3 driver. ,"if openstack auth 2.0 api is used, also parse out tenant id and name and save it on the connection class . ",add new g2 instances to the ec2 driver. ,new driver for kt ucloud (link based on the cloudstack driver. ,modify openstackauthconnection and change auth_token_expires attribute to be a datetime object instead of a string. , update s3 driver so a single driver class can be used for different regions.,update ec2 instance type map and pricing data. high storage instances are now also available in sydney and singapore region. ,also update the code so it doesn t crash if an unknown node state which is not defined locally is returned by the api when listing nodes. such states are now mapped to unknown. ,fix authentication with temporary iam role credentials in the ec2 driver. ,add support for ssd disks to google compute driver. ,allow user to associate arbitrary key/value pairs with a node by passing ex_metadata argument to create_node method in the ec2 driver. those values are associated with a node using tags functionality. ,changes with apache libcloud 0.13.1,changes with apache libcloud 0.13.1,added additional parameters to the rackspace driver in list_balancers for filtering and searching. ,"append ord1 to available rackspace location, but keep in the same node as dfw1, because it s not readable or writeable from the api. ","if you are unable to upgrade, you can use the following workaround, as long as you only use code which supports / works with authentication signature algorithm version 4:","fix an inconsistency in opsource driver and make sure public_ips is an empty list , not unknown ","fix a bug in consuming stdout and stderr strams in paramiko ssh client. in some cases , exit_status_ready gets set immediately even before the while loop to consume the streams kicks in. in those cases, we will not have consumed the streams at all. ",add unittest2 library dependency for tests and update some tests to use it. ,fixed malformed xml requests with dimension data driver. ,change public_ip and private_ip attribute on the node object to the public_ips and private_ips since both of the objects are always a list.,fix a regression with calling encode_container_name instead of encode_object_name on object name in get_object method. reported by ben meng ,include a better message in the exception which is thrown when a request in the rackspace driver ends up in an error state. ,add new ex_virtual_network_name and ex_network_config argument to the create_node` method in the azure driver. with those arguments user can now specify which virtual network to use. ,fix an issue with mutating connectioncls.host attribute in the azure driver. this bug prevented user from having multiple azure drivers with different keys instantiated at the same time. ,reintroduce s3 multipart upload support with signature v4 , fix node s block device mapping was parsed from incorrect mapping. ebsinstanceblockdevice is different from ebsblockdevice. ,fix a bug in the linode driver and remove extra newline which is added when generating a random root password in create_node. ,"when creating volume snapshot, the arguments name and description are truely optional when working with newer openstack versions. the openstack driver will now only post thost arguments if they are non-nonetype. ", update create_node method so it throws an exception if node location can t be inferred and location is not specified by the user ., fix a bug and make sure we also correctly handle scenario in get_object method when the object size is returned in x-goog-stored-content-length and not content-length header.,support for iterating over records and zones in the aurora dns driver. ,note: the openstack.py base driver no longer works by default with rackspace nova. the default endpoint parsed from the service catalog is the default compute endpoint for devstack. ,changes with apache libcloud 0.5.2,changes with apache libcloud 0.5.2,changes with apache libcloud 1.0.0-pre1,changes with apache libcloud 1.0.0-pre1,use lxml library for parsing xml. this should substantially reduce parsing time and memory usage for large xml responses . ,modify vmware vcloud driver and implement new features for the vcloud version 1.5. ,this was achieved by implementing two changes on the paramikosshclient class:,fix caching of auth tokens in the google compute engine drivers. now we make sure that the file is truncated before writing a new token. not truncating the file would cause issues if the new token is shorted then the existing one which is cached in the file. ,"add timeout argument to the paramikosshclient.run method. if this argument is specified and the command passed to run method doesn t finish in the defined timeout, sshcommandtimeouterror is throw and the connection to the remote server is closed.","in most cases, this won t matter and sanitzing double slashes is a safer default, but in some cases such as s3, where double slashes can be a valid path , this option may come handy."," fix a bug with driver incorrectly handling the value of ex_hourly argument in the create_node method which caused nodes to always be created with hourly billing, even if this argument was set to false. ",add support for multiple api versions to the eucalyptus driver and allows user to pass api_version argument to the driver constructor. ,add option to expunge vm on destroy in cloudstack driver. ,"allow user to specify which ip to use when calling deploy_node. . previously it only worked with public ip, now user can pass private_ips as an argument and ssh client will try to connect to the node first private ip address. ",enable paramiko library debug log level if libcloud_debug is used and paramiko is installed. , update list_sizes method so it accepts ex_project_id argument and works with project api tokens. , support for http proxies with backendservices. ,use more consistent name for gogrid driver and use http post method for unsafe operations ,fix a regression with get_driver method not working if provider argument value was a string instead of get_driver).,allow user to limit a list of internet gateways which are returned by passing gateway_ids and filters argument to the ex_list_internet_gateways method in the ec2 driver. ," add sync / ex_sync argument to the ex_stop_node, ex_start_node and destroy_node method. when this argument is set to false, method will return immediately without waiting polling and waiting for a long running api operation to finish before returning. for backward compatibility reasons, it defaults to true. ",add support for automatic sni using the hostname supplied to connect to.,"currently those methods are implemented for the local storage azure blobs, cloudfiles, s3 and any other provider driver which is based on the s3 one . ", allow for old and new style service account client email address , allow for old and new style service account client email address ,update ex_describe_tags method in the ec2 driver and allow user to list tags for any supported resource. previously you could only list tags for a node or a storage volume. ,fix a race condition on gce driver list_nodes- invoking gce s list_nodes while some vms are being shutdown can result in the following libcloud.common.google.resourcenotfounderror exception to be raised. ,added support for adding a family to an image on google compute driver ,fix a problem in deploy_node - make it work with providers which don t instantly return created node in the list_node response. also add __str__ and __repr__ method to deploymenterror so the error message is more useful. ,refactor cloudstack connection class so it looks more like other connection classes and user can specify which attributes to send as part of query parameters in the get request and which inside the body of a post request. , fix list_nodes method so it correctly handles pagination and returns all the nodes if there are more than 500 nodes available in total., allow delete instances from managed group ,properly handle record creation when user doesn t provider a record name and wants to create a record for the actual domain. reported by matt perry , bugfix values with wildcards failed signature validation. ,update storage drivers to default to application/octet-stream content-type if none is provided and none can be guessed. ,use assertisnone instead of assertequal with none in tests ,changes with apache libcloud 0.7.1,changes with apache libcloud 0.7.1,fix a bug which would cause some prepared requests with empty bodies to be chunked which would cause some of the provider apis such as openstack to return http 400 errors. ,add extension method for modifying node attributes and changing the node size. ,update ca_certs_path to also look for ca cert bundle which comes with openssl homebrew formula on os x . ,changes with apache libcloud 0.11.4,changes with apache libcloud 0.11.4,add support for sa-east-1 region to the amazon s3 driver. ,use ipaddress and privateipaddress attribute for the ec 2node public and private ip. , make sure driver works correctly for objects with ~ in the name., make sure driver works correctly for objects with ~ in the name.,also add a new key_material argument. this argument can contain raw string version of a private key.," fix upload_object_via_stream method so it also works with iterators which don t implement seek method. if the iterator doesn t support seek, entire iterator content will be buffered in memory. ", add support for modifyvolume and describevolumesmodifications ,"update openstack 1.1 driver to comply with the api specs. need to make another call to retrieve node name and ip addresses when creating a node, because the first call only returns an id an the password. ", fix a regression introduced in v3.3.0 which would break ec2 driver for some regions because the driver would incorrectly try to use signature version 2 for all the regions whereas some newer regions require signature version 4 to be used.,allow user to specify a condition and weight when adding a member in the rackspace driver. ,add deprecated attribute to the node object in the google compute engine driver. ,"allow users to filter objects starting with a prefix by passing ex_prefix argument to the list_container_objects method in the s3, google storage and cloudfiles driver. ","add a standard api and methods for managing storage volumes to the ec2 and cloudstack drivers. base api consistent of the following methods: create_volume, destroy_volume, attach_volume, detach_volume. ",add new driver for vmware vsphere (link based clouds. ,add support for health monitors and connection throttling,also improve how reading a file in chunks works with drivers which support chunked encoding - always try to fill a chunk with chunk_size bytes instead of directly streaming the chunk which iterator returns.,add ex_import_keypair_from_string and ex_import_keypair method to the cloudstack driver. ,note: backblaze api doesn t upload streaming uploads so when using upload_object_via_stream whole file is read and buffered in memory. ,implement ex_edit_node method for gogrid driver which allows changing node attributes like amount of ram or description. ,add utility get_regions and get_service_names methods to the openstackservicecatalog class. ,disable cache busting functionality in the openstack and rackspace next-gen driver and enable it only for rackspace first-gen driver. ,changes with apache libcloud 0.17.0,changes with apache libcloud 0.17.0,add fault attribute to the extra dictionary of the node instance returned by the openstack driver. ,add missing regions in aws storage and compute drivers ,new driver for serverlove.com and skalicloud.com , add support for private ip addresses in gce instance creation ,now majority of the import time is spent in importing requests library. ,fix libcloud_debug_pretty_print_response functionality and make sure it works correctly under python 3 when response.read function returns unicode and not bytes.," fix method for create instance properties, it previously ignored the disk type parameter and defaulted to pd-standard. ",add support for elastichosts new united states and canada locations. ,"gce driver now raises resourcenotfounderror when the specified image is not found in any image project. previously, this would return none but now raises the not-found exception instead. this fixes a bug where returning none caused ex_delete_image to raise an attributeerror. "," update the driver to throw more user-friendly error message if user is using driver for a region x, but trying to upload / download object to / from a region y. ", make filedeployment class much faster and more efficient when working with large files or when running multiple filedeployment steps on a single node.,throw a more user-friendly exception if a client fails to establish ssl / tls connection with a server because of an unsupported ssl / tls version. , added setmachinetype method to allow for changing sizes of instances ,fix a bug which prevented user to connect and instantiate multiple ec2 driver instances for different regions at the same time. ,"current opennebula occi implementation does not support a proper restart method. rather it suspends and resumes. therefore, restart_node has been removed from the opennebula driver. ",introduce a new libcloud.backup api for backup as a service projects and products. ,add support for managing floating ip addresses to the openstack driver. ,update google drivers to allow simultaneous authornization for all the supported google services. ," update create_node so an exception is thrown if user passes ex_use_managed_disks=false, but doesn t provide a value for the ex_storage_account argument. ",changes with apache libcloud 0.20.0,changes with apache libcloud 0.20.0,changes with apache libcloud 0.12.1,changes with apache libcloud 0.12.1,changes with apache libcloud 0.13.3,changes with apache libcloud 0.13.3, fix gcenodedriver.ex_get_volume when zone param is of class gcezone or nodelocation ," the scheme and port no longer need to be explicitly specified, allowing a user to simply copy in the string provided to them from rancher. ",throw an exception in deploy_node if paramiko library is not available ,update route53 driver so it supports handling records with multiple values . ,minor improvements in the hostvirtual driver and add new ex_get_node and ex_build_node extension method. ,fix a bug in rackspace cloud dns driver and make sure to throw an exception if an unexpected status code is returned. reported by jeblair . ,added import snapshot and describe import snapshot to ec2 compute driver ,use match_hostname function from backports.ssl_match_hostname package to verify the ssl certificate hostname instead of relying on our own logic. ,new putfo method has been added to the paramikosshclient class which utilizes the underlying sftp.putfo method.,add new driver for durable dns service , fix retry functionality when creating port forwards and add support for automatically refresing the jwt auth token inside the connection class if it s about to expire in 60 seconds or less. ,add a common module for handling xml-rpc requests using libcloud http layer.,"add new libcloud.loadbalancers api, with initial support for:",add support for retrying failed http requests., fix upload_object_via_stream and ensure we start from the beginning when calculating hash for the provided iterator. this way we avoid hash mismatch errors in scenario where provided iterator is already iterated / seeked upon before calculating the hash. ,libcloud.pricing.get_size_price function has been updated so it only caches pricing data in memory for the requested drivers.,"fix the request signature generation in the base ec2 compute driver. if the endpoint is using a non-standard port , append it to the hostname used to generate the signature. ","implement ex_edit_image method which allows changing image attributes like name, description and make image public or private.","update ec2 driver, m3 instance types are now available in all the regions except brazil.","added additional kwargs to the create_node method for dimension data driver, allowing the user to specify the ram and cpu upfront. added a ex_reconfigure_node method and ex_list_customer_images as well as updating the api to 2.1. ",add extra attribute to the loadbalancer object and retrieve all the virtual ip addresses in the rackspace driver. ,if node is launching remap halted state to pending , add new methods for managing services which allows users to expose ports for the vms . ,add ex_create_tags and ex_delete_tags method to the cloudstack driver. ,allow user to specify volume type and number of iops when creating a new volume in the ec2 driver by passing ex_volume_type and ex_iops argument to the create_volume method. ,"also modify create_volume_snapshot method to correctly handle name argument. previous, name argument was used as a snapshot description, now it s used as a tag with a key name . ",update default kernel versions which are used when creating a linode server.,add new us-east-2 and us-east-3 region to the joyent driver. , add r4 instance types for aws , fix a bug with retrieving floating ip address when a device_owner of a port is compute:none. ,using libcloud in multi-threaded and async environments,fix a bug with handling compressed responses in the linode driver. ,allow user to pass mode argument to sshclient.put method and default it to w . , allow filtering lists by prefix ,modify list_sizes method in the openstack driver to include openstacknodesize object which includes vcpus attribute which holds a number of virtual cpus for this size. ,improved documentation for all classes and methods.,"update openstack swift driver constructor so it accepts region , ex_force_service_type and ex_force_service_name argument. ",this should cover all of the functionality offered by the rackspace dns api in regards to rdns. ,changes with apache libcloud 1.1.0,changes with apache libcloud 1.1.0,updated the extra parameter in update_record to be optional in aurora driver. ,make deploy_node functionality more robust and don t start deployment if node public_ip attribute is an empty list. ,changes with apache libcloud 0.14.1,changes with apache libcloud 0.14.1,"update network related extension methods so they work correctly with both, openstack and rackspace driver. ",add support for new i2 instance types to amazon ec2 driver. also update pricing file. ,add support for setting an acl when uploading and object. ,"add support for handling compressed responses . also send accept-encoding gzip,deflate header with all the requests. ",added new deployment and bootstrap api.,"unify extension argument names for assigning a node to security groups in ec2 and openstack driver. argument in the ec2 driver has been renamed from ex_securitygroup to ex_security_groups. for backward compatibility reasons, old argument will continue to work until the next major release. ","add ex_member_address argument to the rackspace driver list_balancers method. if this argument is provided, only loadbalancers which have a member with the provided ip address attached are returned. ",note: this change is backward incompatible which means you need to update your code if you rely on the old behavior. ,update rackspace driver to support paginating through zones and records. ,improve public and private ip address handling in openstack 1.1 driver. assume every ip address which doesn t have a label public or internet is private. ,add a new generator based method for listing / iterating over the containers . ,add support for network management for advanced zones in the cloudstack driver. ,remove public_ip and private_ip property which has been deprecated in 0.7.0 from the node object. ,also retry failed http requests upon transient read operation timed out ssl error. ,changes with apache libcloud 0.20.1,changes with apache libcloud 0.20.1,fix a bug in the openstack based drivers with not correctly checking if the auth token has expired before re-using it. , adapt _to_port function to work with old openstack versions , fix upload object code so uploaded data md5 checksum check is not performed at the end of the upload when aws kms server side encryption is used.,changes with apache libcloud 0.5.0,changes with apache libcloud 0.5.0,add support for aws signature version 4.,using an http / https proxy,changes with apache libcloud 0.12.3,changes with apache libcloud 0.12.3,add new nodestate.stopped node state. update hostvirual and ec2 driver to also recognize this new state. ,add lots of api output information to node and image extra attributes,change attribute name in the extra dictionary of ec2 and cloudstack node object from keyname to key_name . ," enable the azure storage driver to be used with azure government, azure china, and azure private link by setting the driver host argument to the endpoint suffix for the environment.",support for passing the image id as a string instead of an instance of image when creating nodes in dimension data driver. ,added m4 pricing and instance information to ec2 driver , allow user to override which signature algorithm version is used for authentication by passing signature_version keyword argument to the ec2 driver constructor. ,"add new libcloud.storage api, with initial support for:",allow user to specify openstack service catalog parameters . this way base openstack driver can be used with different providers without needing to subclass. ,properly handle response errors in the rackspace driver and only throw invalidcredserror if the returned status code is 401 ,previously it incorrectly tried to retry on such exception. this means the exception would only bubble up after all the retry attempts have been exhausted. ,previously it incorrectly tried to retry on such exception. this means the exception would only bubble up after all the retry attempts have been exhausted. ,fix a bug in ex_get_console_output in the ec2 driver which would cause an exception to be thrown if there was no console output for a particular node.,use node id attribute instead of the name for the lconfig label in the linode driver. this way the label is never longer than 48 characters. ,fix a bug with deploy_node not respecting timeout kwarg. ,"fixed api compatibility for docker container driver with api 1.24, set driver to use versioned url for all communication. backported changes to 1.21 api ", added ex_encrypted and ex_kms_key_id optional parameters to the create volume method , fix to allow multiple node creation with subnets. ,add tests for networking functionality in the openstack and rackspace driver. ,"previously, user would see an error similar to failed after 3 tries: utf-8 codec can t decode byte 0xc0 in position 37: invalid start byte .","previously, user would see an error similar to failed after 3 tries: utf-8 codec can t decode byte 0xc0 in position 37: invalid start byte .",fix paramikosshclient.run and deploy_node method to work correctly under python 3. ,fix bug where custom port and secure flag would not get propagated to connection class. ,add support image guest os features in gce driver. ,fix issue with overwriting the server memory values in the rimuhosting driver. ,allow location of the datacenter to be supplied in profitbricks driver ,cleaned up and corrected third-party drivers documentation ,add a new driver for outscale sas and outscale inc cloud ,update create_record in the worldwidedns driver so it automatically selects a slot if one is not provided by the user via extra argument. ,update issue with inexistent zone / record handling in the get_zone and get_record method in the linode driver. those issues were related to changes in the linode api. , fix download_object_as_stream method in the cloudfiles driver. this regression / bug was inadvertently introduced when migrating code to requests. ,correctly categorize node ip addresses into public and private when dealing with openstack floating ips. , add option to create static public ip , update openstack identity driver so a custom project can be selected using domain_name keyword argument containing a project id.,add new experimental libvirt driver. ,add support for api version 5.1 to the vcloud driver and accept any value which is a multiple of four for ex_vm_memory kwarg in create_node method. ,note: this fixes a security issue with a potential leak of data contained on the destroyed node which only affects users of the digitalocean driver. ,"fix certificateconnection not correctly signing requests in 2.0rc1, impacted azure classic driver, openstack and docker driver ","when creating volumes on openstack with defaults for location or volume_type, newer openstack versions would throw errors. the openstack driver will now only post those arguments if non-nonetype. ", add support for accelerators ,new start_node and stop_node methods have been added to the base libcloud compute api nodedriver class.,"fix debug mode, also add support for using io.stringio as the file handle when calling libcloud.enable_debug. ",allow user to specify priority extra argument when creating a mx or srv record. ,this makes various issues easier to debug since the whole error context is included. ,update compute demo and change the syntax of test credentials stored in test/secrets.py-dist. ,allow user to pass alternate ssh usernames to deploy_node which are used for authentication if the default one doesn t work. ,"added node.created_at which, on supported drivers, contains the datetime the node was first started. ", fix a bug with the header value returned by the export_zone_to_bind_format method containing an invalid timestamp .,changes with apache libcloud 0.11.3,changes with apache libcloud 0.11.3,changes with apache libcloud 0.13.0,changes with apache libcloud 0.13.0,add ex_set_password and ex_set_server_name to rackspace driver. ,add two new default node states - nodestate.suspended and nodestate.error. ,allow variable api versions , add i3 instance types for aws ,add ptr to the supported record types in the rackspace driver. ,allow user to explicitly specify which ca file is used for verifying the server certificate by setting ssl_cert_file environment variable.,passing cache_all=true might come handy in situations where you know the application will work with a lot of different drivers - this way you can avoid multiple disk reads when requesting pricing data for different drivers. ,changes with apache libcloud 0.11.1,changes with apache libcloud 0.11.1, authentify with updated identity api , add ssl uri support ,changes with apache libcloud 0.9.1,changes with apache libcloud 0.9.1,"for backward compatibility reasons, default value of none still means to use a default service account. ",adds missing docs for param ex_prefix & adds to dummystore. add ex_prefix kwarg to the list_container_objects methods in the base and dummy classes. ,refuse installation with python 2.6 and python 3.3 ,changes with apache libcloud 0.14.0-beta3,changes with apache libcloud 0.14.0-beta3,fix update_record method in the route56 driver so it works correctly for records with multiple values. ,"emits warning when not verifying, or ca certs not found",changes with apache libcloud 0.18.0,changes with apache libcloud 0.18.0,"introduction of container based drivers for docker, rkt and container-as-a-service providers ",changes with apache libcloud 0.16.0,changes with apache libcloud 0.16.0,fix to join networks properly in deploy_node in the cloudstack driver. ,add extension method for listing reserved instances to the ec2 driver. ,"add support in vmware vcloud driver for v5.5 api, with snapshot support ",openstack driver: deprecated ex_create_snapshot and ex_delete_snapshot in favor of create_volume_snapshot and destroy_volume_snapshot. updated base driver method create_storage_volume argument name to be optional. ,add extension methods for managing keypairs to the cloudstack driver. ,"note: for backward compatibility you can still access public_ip and private_ip attributes, but this will be removed in the next release. ",fix libcloud.enable_debug function so it doesn t leak open file handle and closes the open file when the program exits when a debug mode is used. ,changes with apache libcloud 0.4.0 ,changes with apache libcloud 0.4.0 ,"in some scenarios, connection may get closed by the server for whatever reason before finishing all the deployment steps and in this case only re-connecting would help and result in a successful outcome. ", add a new driver for the outscale provider. existing outscale driver utilizes the ec2 compatible api and this one utilizes native outscale api. ,gogrid and rackspace drivers: add ex_save_image extra call to convert running node to an image ,changes with apache libcloud 0.6.0-beta1,changes with apache libcloud 0.6.0-beta1,add a new driver for kt ucloud based on the openstack swift driver. . ,also allow name argument to be empty . this way cloudstack automatically uses node s uuid for the name. ,changes with apache libcloud 0.15.0,changes with apache libcloud 0.15.0,fix zerigo driver to set record.name attribute for records which refer to the bare domain to none instead of an empty string. ,fix a minor bug in debug mode which has been introduced when adding python 3 compatibility layer. ,add support for aws signature v4 to the outscale storage driver. ,don t throw an exception if a node object is missing an image attribute in the list nodes / get node response.,add extra attribute in list_images for cloudstack driver. , add new x1.16xlarge and x1e.32xlarge instance type. ,"fix aliyun ecs, load balancer and storage adapters when using unicode utf-8 characters in the names of resources in 2.0.0rc2 < it would fail as a malformedresponseerror, python 2.7 element tree was raising a unicode error ",add new xmlresponse and jsonresponse base class and modify all the driver-specific response classes to inherit from one of those two classes where applicable. ,update paramiko ssh client to throw a more user-friendly error if a private key file in an unsupported format is used. , add new wait_period argument to the deploy_node method and default it to 5 seconds.,add filedeployment class to libcloud.compute.deployment module. this can be used as a replacement for ex_files argument if the provider supports deployment functionality. ,various fixes and improvements in the ex_authorize_security_group_ingress in the cloudstack driver. ,add extension methods for managing security groups to the cloudstack driver. ,add new driver for dnsimple service ,"if the file exists, read pricing data from ~/.libcloud/pricing.json by default. if the file doesn t exist, fall back to the old behavior and use pricing data which is bundled with the release. ",modify drivers for public cloud providers which use http basic authentication to not allow insecure connections by default.,add new driver for cloudframes ,include py.typed data file to signal that this package contains type annotations / hints.,implement password handling and add deployment support for gogrid nodes. ,populate loadbalancer extra dictionary with more attributes,new driver for google storage based on the v1.0 / legacy api ,allow user to pass filters via arguments to the ex_list_port_forwarding_rules in the cloudstack driver. , support for aws eu-west-2 and ca-central-1 regions ,add new driver for google dns. ,allow user to filter which nodes are returned by passing ex_filters argument to the list_nodes method in the ec2 driver. ,right now those are not exposed yet to the deploy_node method. ,add new download_object_range and download_object_range_as_stream methods for downloading part of the object content to the base storage api.,changes with apache libcloud 0.13.2,changes with apache libcloud 0.13.2,changes with apache libcloud 0.3.1 ,changes with apache libcloud 0.3.1 ,also update pricing to reflect new prices. ,fix a bug where a numeric instead of a string value was used for the content-length header in vcloud driver. ,fix a bug where a numeric instead of a string value was used for the content-length header in vcloud driver. ,allow user to filter nodes by location by adding optional location argument to the list_nodes method in the cloudstack driver. ,add ex_get_node and ex_get_volume methods to cloudstack driver. ,fix parsing of slicehost nodes with multiple public ip addresses. ,hook up deploy_node functionality in the cloudstack driver and unify extension arguments for handling security groups. ,this was broken in the 0.14.0-beta3 release when we migrated all the rackspace drivers to use auth 2.0 by default. ,also refactor existing drivers which use xmlrpclib directly to use this module.,add ex_set_metadata_entry and ex_get_metadata method to the vcloud driver. ,supported python versions,introduce type annotations for the base compute api methods. this means you can now leverage mypy to type check your code which utilizes libcloud compute api standard api methods.,update gce driver to allow for authentication with internal metadata service. ,update ibm sbc driver so it works with ibm smart cloud enterprise. ,updates to apache license blocks to correctly reflect status as an,fix a bug with cdn requests in the cloudfiles driver. ,add new hong kong endpoint to rackspace driver. ,add new hong kong endpoint to rackspace driver. ,"when creating a node, use the name argument to set a tag with the value. ", add method to modify snapshot attribute for ec2 ,"when fetching the node details of a non-existing node, openstack would raise a basehttperror instead of returning none, as was intended. fixed tests and code. ",add new c3 instance types to the ec2 driver. ,fixed bug in rackspace and rimuhosting when using multiple threads.," to make debugging and troubleshooting easier, add __repr__ and __str__ method to the scriptdeployment class. ","keep in mind that at this point, type annotations are only available for standard compute api methods. ",add support for temporary iam role credentials to the aws elb driver. ,changes with apache libcloud 0.8.0,changes with apache libcloud 0.8.0, use disk size and storage tier also when creating node from template ,note ssd drive_type doesn t work with the api yet. , add priority to the extra dictionary in record instances ,fix bug where custom port would not get propagated to connection. ," packet driver has been renamed to equinix metal. if your code uses packet.net driver, you need to update it as per example in upgrade notes documentation section. ", added managed instance groups. , handle missing user enabled attribute , fix detach_volume method so it works with v2 volumes. ,add new driver for google compute engine ,add new driver for google compute engine ,"because of that, a lot of the compute drivers which support deploy functionality needed to use **kwargs in create_node method signature which made code hard to read and error prone.",add ex_creaate_balancer method to the rackspace driver and allow user to pass vip argument to it. ,fix a bug with repeated urls in some requests the vcloud driver. ,don t include body_regex attribute in the rackspace driver body if body_regex is none or empty string. ,fix a bug in pollingconnection class - actually use and don t ignore the poll_interval , allow faster list_nodes with ex_fetch_power_state=false , update the driver and make sure it matches the latest service / api updates. ,allow user to pass all supported extension arguments to ex_rebuild_server method in the openstack driver. , fix error when using ssh key auth with python 3 ,changes with apache libcloud 1.0.0-rc2,changes with apache libcloud 1.0.0-rc2,fix deploy_node method and make it more robust ,update api endpoint hostnames in the elastichost driver and use hostnames which return a valid ssl certificate. ,add an additional argument to libcloud.compute.drivers.gcenodedriver.create_node to allow for creation of preemptible gce instances ,add new driver for vcl cloud ,add ex_copy_image and ex_create_image_from_node method to the ec2 driver. ,changes with apache libcloud 1.0.0,changes with apache libcloud 1.0.0,"various improvements and bugs fixes in the gce driver. for a list, see link ",add new openstackidentity_3_0_connection class for working with openstack identity service api v3. ,fix debug module so it works with python 3 , add support for ams3 region ,"add support for ds, ptr, ssfhfp and tlsa record type to the aurora dns driver. ", fix issue with authentication methods crashing ,changes with apache libcloud 0.11.2,changes with apache libcloud 0.6.2,changes with apache libcloud 0.11.2,changes with apache libcloud 0.6.2,fix a regression with removed ex_force_service_region constructor kwarg in the cloudfiles driver. ,supported providers,add new driver for packet ,allow user to specify disk partitioning mode using ex_disk_config argument in the openstack based drivers. ,added vpc support and egress firewall rule support fo cloudstack ,add new m3.medium and m3.large instance information to the ec2 driver. ,"fix bug in utils.decorators wrap exception method, used by vsphere driver ", add new ex_set_volume_labels method for managing volume labels to the driver. ,"with this argument, user can specify an optional run timeout for that deployment step run. ","with this argument, user can specify an optional run timeout for that deployment step run. ", allow adding labels to images ,fix a bug with python 3 support in the following drivers - zerigo ,allow users to use a list of tuples for the query string parameters inside the openstack connection classes. this way same key can be specified multiple times ,test code with python 3.8 and advertise that we also support python 3.8. ," added support for 2.4 api, added support for image import, cloning. add feature for changing nic vlans, add feature for changing nic order for a server. ", fixes the location name in image and instance type classes ,allow running tests with http_proxy set ,allow reverse dns updates for cloud ip extensions, add new driver for gig g8 provider ,fix a bug in the cloudfiles driver which prevented it to work with accounts which use a non ord endpoint. ,changes with apache libcloud 0.2.0 ,changes with apache libcloud 0.2.0 , optimize ec2 driver imports and move all the large constant files to separate modules in libcloud/compute/constants/ec2_*.py files., added script to automatically get ec2 instance sizes ,fix a bug with python 3 support in the following drivers - atmos - google storage - amazon s3 ,"volumesnapshots now have a created attribute that is a datetime field showing the creation datetime of the snapshot. the field in volumesnapshot.extra containing the original string is maintained, so this is a backwards-compatible change. ",add support for geo recordtype to zerigo driver. ,"all nodestate, storagevolumestate, volumesnapshotstate and provider attributes are now strings instead of integers. ",adds status to the member object and conditions an enum . ,"fix a bug in elasticstack node creation method where it would raise exceptions because of missing data in a response, and also fix pulling the ip from the proper data item. ",update if type checks in the update_record methods to behave correctly if users passes in recordtype.a with a value of 0 - if type is not none. ,update if type checks in the update_record methods to behave correctly if users passes in recordtype.a with a value of 0 - if type is not none. ,various bug fixes and improvements in the hostvirtual driver. ,add new driver for cloudflare dns ,those drivers have moved to single provider constant + region constructor argument model. ,add ssh_key feature to brigthbox driver. this way it works with deploy_node. ,also update related deployment classes so they correctly handle situation when we are executing commands on a windows server. ,"if you want to revert to old behavior , you can do that by passing cache_all=true argument to that function or set libcloud.pricing.cache_all_pricing_data module level variable to true.",update libvirt driver so it returns false if a non-local libvirt url is used . ,"fix to set default signature version for aws seoul region to v4, removed non-supported size ",add ex_list_networks method and missing tests for list_templates to the cloudstack driver. ,fix a regression in paramikosshclient.run method which caused this methid to only work as expected if you passed an absolute or a relative path to the script to it. ,gce driver update to support json format service account files and a py3 fix from siim p der for libcloud-627. ,fix a deployment issue which would some times cause a process to hang if the executed deployment script printed a lot of output to stdout or stderr. ,slicehost api has been shut down in 2012 so it makes no sense to keep this driver. , add optional cpuplatform and mincpuplatform attributes to the node.extra dictionary. , allow user to pass arbitrary filters to list_volumes method by passing a dictionary with filters as ex_filters method argument value. ,add support for changing vm admin password in vmware driver. ,add extenstion methods for block storage volume management to the cloudstack driver. , new keep_alive and use_compression arguments have been added to the paramikosshclient class constructor.,add support for url recordtype to zerigo driver. ,"switch rawresponse class to use content body instead of text body, up to 10x performance improvement for methods like storagedriver.download_object ",drivers for linode dns and zerigo dns ,update ec2 driver and test fixtures for new api. ,update paramiko ssh deployment client so it automatically tries to convert private keys in pem format with a header which paramiko doesn t recognize into a format which paramiko recognizes.,"if you want to use this driver, you need to install pyvmomi dependency - pip install pyvmomi ", fix driver so it doesn t throw if a node is in resizing state. ,"add a support for a new aws frankfurt, germany region to the ec2 driver using aws signature v4. ", add support for multiple regions to the driver. user can select a region by passing location argument to the driver constructor . ,also update various affected drivers to explicitly declare supported arguments in the create_node method signature .,add new driver for runabove ,allow user to specify target tags using target_tags attribute when creating a firewall rule in the gce driver. ,modify cloudstack driver to correctly throw invalidcredserror exception if invalid credentials are provided. ,make sure we normalize header values and cast all the numbers to strings in base connection classes used by tests. ,add support for amazon security token to the amazon drivers. ,add new t2 instance types to the ec2 driver. , add ex_get_network to the openstack driver to make it possible to retrieve a single network by using the id.,changes with apache libcloud 0.10.1,changes with apache libcloud 0.10.1,changes with apache libcloud 0.3.0 ,changes with apache libcloud 0.3.0 ,fix a bug so you can now upload 0 bytes sized objects using multipart upload in the s3 driver. ,fix node name and tag handling in the amazon ec2 driver , add support for creating sshfp records. , fix the driver so list_nodes method doesn t throw if there is a node in a suspended state.,make sure auth_user_info variable on the openstack identify connection class is populated when using auth version 3.x_password and 3.x_oidc_access_token., update ec2 driver to throw a more user-friendly exception if a user / developer tries to provide an invalid value type for an item value in the request params dictionary., update paramikosshclient.put method so it returns a correct path when commands are being executed on a windows machine.,"add new perth, australia and manila, philippines region to the cloudsigma v2 driver. ",this way credentials can t accidentally be sent in plain text over the write.,"implement iterate_* methods in the route53 driver and makes it work correctly if there are more results which can fit on a single page. previously, only first 100 results were returned. ",add timeout attribute to base connection class and pass it to the connection class constructor if python version is not 2.5. ,don t split load balancer ip addresses into public and private list. include all the addresses in the virtualips variable in the extra dictionary . , extra attributes for node creation on vultr. ,add ex_enable_static_website and ex_set_error_page method to the cloudfiles driver. , add ena support for ec2 compute images ,add extension methods for routes and route table management to the ec2 driver , update prices and fix some region names ,add an extension method for attaching multiple members to a load balancer in the rackspace driver. ,add ipv6 support to public ip list, refactor create_node for mcp2 to support caas api 2.3 feature. can now specify network adapter name for primary and additional nic. parameters in create_node function is tailored for mcp2. ,added pricing module and improved pricing handling. ,gce projects support common instance metadata and usage export buckets. ,removed hd attribute from the abiquo compute driver to support the 3.4 api. ,add userdata and server group extensions to create_node,"modify paramikosshclient.connect so it supports authentication using a key file, ","note: api v2.0 is now used by default. to use the old api v1.0, pass api_version='1.0' argument to the driver constructor. ", fix string representation of the vhdimage type and fix listing of public ip addresses , add g3 instance types , add g3 instance types ,update azure vm pricing information and add information for new d instance types. ,update us-west-1 region in the ec2 driver to include c3 instance types. also include pricing information. , add missing eu-north-1 region to the s3 driver. ,changes with apache libcloud 0.19.0,changes with apache libcloud 0.19.0,"fix container name encoding in the iterate_container_objects and get_container_cdn_url method in the cloudfiles driver. previously, those methods would throw an exception if user passed in a container name which contained a whitespace.", make sure private_ips attribute on the node object is correctly populated when listing nodes. also add additional values to the node.extra dictionary. , add support for tags in list_nodes ,update fixtures to represent actual api output,fix regression and error in gogrid driver for parsing node objects. ,add support for the new amazon region . ,"previously, we would immediately throw if we can connect, but the ssh key hasn t been installed yet. ", allow adding license strings to images ,add methods in cloudstack driver to manage mutiple nics per vm. ,add new driver for the dimension data provider based on the opsource driver. ,add additional provider specific attributes to the extra dictionary of the node object in the ec2 driver. ,use string instead of integer for recordtype enum value.,modify get_container method to use a more efficient head approach instead of calling list_containers + doing late filterting. ,allow user to specify which arguments are passed to list_nodes method which is called inside wait_until_running by passing ex_list_nodes_kwargs argument to the wait_until_running method. . ,introduced new rancher driver ,fix a bug with handling of the ex_keyname argument in the softlayer driver. ,add new driver for hp public cloud available via provider.hpcloud constant. , add new ex_image_ref argument to the create_volume method. this way bootable volumes can be created from specific images. ,add more attributes to the extra dictionary in the ec2 driver. ,add capacity information to vdc objects and implement power operations. ,add support for forcing detachment of ebs volumes to ec2 driver ,note: this regression has been inadvertently introduced in v2.8.0. , re-generate and update available ec2 instance sizes and pricing data. ,modify openstackauthconnection to support re-using of the existing auth token if it s still valid instead of re-authenticating on every authenticate call. ,add node lookup by uuid for libvirt driver. ,changes with apache libcloud 0.11.0,changes with apache libcloud 0.11.0,this could happen if node is in an error state. ,this argument tells libcloud how long to wait between each poll interval when waiting for a node to come online and have ip address assigned to it.,update api endpoints which are used in the hostvirtual drivers. ," add various extension methods to the driver. for information on available extenion methods, please refer to the driver documentation. ",gce nodes can be launched in a subnetwork ,add methods for managing storage volumes to the gandi driver. ,improve handling of gogrid accounts with limited access api keys. ,add a new driver for cloudsigma api v2.0. ," fix for txt and spf records, when user didn t escapsulate data in quotes, the api would fire error. as reported by @glyph ","dimension data - added additional testing, fixed bug on client response naming, added support for adding backup clients to a backup enabled node. ",reported by jonathan harden - @jfharden. ,googlestoragedriver can now use either our s3 authentication or other google cloud platform oauth2 authentication methods. ,note: deprecated argument will continue to work until the next major release. ,note: paramiko only supports keys in pem format. this means keys which start with -begin <type> private key . keys in pkcs#8 and newer openssh format are not supported.,"if aws kms server side object encryption is used, etag header value in the response doesn t contain data md5 digest so we can t perform a checksum check.",add support for amazon new south america location. ,fix create_node in openstack driver to work correctly if adminpass attribute is not present in the response. ,fix create_node in openstack driver to work correctly if adminpass attribute is not present in the response. , add new driver for gridscale provider ,"add update node, update vmware tools, add storage, change storage size or speed, remove storage to dimension data driver. ",also update it to use a more recent ubuntu version and python 3 for running tox target. ,add optional project parameters for ex_list_networks to cloudstack driver ,allow user to specify iam profile to use when creating an ec2 node. ,add network_association_id to ex_list_public_ips and cloudstackaddress object ,gogrid driver: add support for creating sandbox server and populate issandbox flag in node s extra information. ,"add two new supported algorithms: weighted_round_robin, weighted_least_connections",change _wait_until_running method so it supports waiting on multiple nodes and make it public . ,allow user to wait for a resource to reach a desired state in the dimension data driver by using new ex_wait_for_state method. ,allow user to retrieve container images using ex_get_image method in the google compute engine driver. ,add joyent compute driver. ,"update route53 driver, make sure ttl attribute in the record extra dictionary is always an int. ",fix bug in rimuhosting driver which caused driver not to work when the provider returned compressed response. ,fix a bug with exception being throw inside the cloudstack driver when the provider returned no error message in the body. ,add ex_get_metadata method to ec2 and openstack driver. this method reads metadata dictionary from the node object. ,fix logging connection class so it also works when data type is bytearray or bytes. ,add support for volume related functions to opennebula driver. 
scrapely/NEWS at master Â· scrapy/scrapely Â· GitHub,- replaced deprecated functions,- add c extension to speed up parsing and extraction,- number extractor now supports numbers with a sign.,- add python3 support for `url_to_page` function,/,about,- several bug fixes and improvements to the ibl extraction logic;,- unicode improvements for scrapely.tool.
filterpy/changelog.txt at master Â· rlabbe/filterpy Â· GitHub,"now the sigma point and weight generation is done with a separate class,",* sped up computation in cubature and ensemble filters by using ,"classes now have attributes wm and wc, and weights was deleted.",* added better default values for f and h in kalmanfilter,"* deprecated plot_gaussian in favor of plot_gaussian_pdf,","include the test directories, and include the changelog and license.",* fixed and included the fixed lag smoother algorithm.,* added ability to order q matrix by dimension or derivative with the helper,"is < 0.5 or so, but then the filter diverges when r is larger. i'm not seeing","* fixed bug using to copy data instead of np.copy, which is",at perhaps the cost of being a bit harder to read and learn. but i didn't want to,"the change to _dt was stupid in 0.0.13 . i put it back to _dt, and",this requires installation of numpy doc with,* partially removed dependence on matplotlib. matplotlib is only imported,"* fixed #105 - this was just test code, and it turns out the code as was was correct, so i deleted the second return statement","h and f is now done by kwargs, not tuples. the sigma point",several important bug fixes and additions for the ukf filter. it is very,* changed log likelihood and likelihood to methods to avoid the,only changes are to make the install work - i had to move,added optional parameter specifying a saver object to be passed into all of the,* added likelihood and log-likelihood to the kalmanfilter,"original formulation, and for the scaled ukf. but they are all the same thing,","* moved some code to a new /examples directory to reduce clutter. it is worth noting that the code in there does not run now - it is based on the old procedural unscented kf code, not the new oo based code. however, the test_ukf.py code basically implements this example as a test using the new code. this is more a change for the future.",modified the update and predict functions to work in the,"use k+1, not k. this caused poor smoothing performance when either f or q are",* added tests for imm and mmae filters,"* restructured directories so source code is under filterpy/,",* github issue #37. rts_smoother uses the wrong index for f and q: they should,and the ukf class just performs the algorithm. this is much more configurable,* changes log-likelihood and likelihood back into attributes/properties,* added some tests for dimensionality of input to functions. it is far,"basically, and there were differing levels of support - the scaled version didn't",* mostly a change in the pypi install so that the pip install will,* github #60 - added separate computation of prior and posterior,* added function to create kinematic filters,fixed build error in python 2.7 due to using print function without importing,"* implemented a fixed-point smoother, but it is not working all that well.",it got absurd to be using 3 digits for version numbers. we are,* added function to compute update in the presense of,* breaking change: _dt in ukf is now named dt to allow users to,then added an optional dt parameter to the predict function.,"* #49 added tests to distribution, as they contain a lot of examples",added attribute z to most of the filter classes. this is mostly so the,* added display of semi-axis for covariance ellipses,* fixed bugs due to calling .dot on float64 values,"* reverted the name change of .x to .x in the various classes. i have no idea what i was thinking - x is a vector, so it should be lower case.","filtering class. replaces kalmanfilter.saver, which only worked for the",residual and unscented transform functions.,* made an exception more human readable by including the size of the,* kalmanfilter.batch_filter now accepts lists of all the kf matrices,this smoother actually being used in practice. i will give this a bit,* github #151 - added ability to specify unscented transform function for,"existing code will no longer run. sorry, but it had to be done.",* i pushed a broken version! this should fix that. do not use 1.2.2.,* tests and fixes for the extendedkalmanfilter,"matrix would be computed incorrectly,.",* you couldn't call update more than once in a row or the covariance,* removed deprecated filterpy.kalman.saver class (use ,and added to several classes so the imm code works uniformally across all,* altered rts_smoother algorithm to also return the,* lots of docstring corrections and additions,"* fix #42: for conda-build to work, correct setup.py and manifest.in",* added args parameters to hx and hjacobian of the extendedkalmanfilter,"or an single array, depending on the shape of the arrays and the size of the",* added saving of posterior state to classes,docs\conf.py has been modified to use numpydoc.,* #113 added plotting of 3d covariance ellipsoid with plot_3d_covariance,* #88 fixed hinfinity.batch_filter to not use r,"input. rather than try and obscurely fail, make the user pass the correctly",* github #138. attributes were not being set when z == none on call to,significant changes to unscented filter. now separate classes for the different,* added function to compute nees,/,* minor name changes for the methods that compute q in common,"module. i did not add or change anything, just move functions.","* name change - all z and zs to z and zs. they are vectors, not matrices.",* many minor typos in docstring and comments fixes,* allow kalmanfilter.b to be set to a scalar.,"update, meaning things like log-likelihood and mahalanobis had incorrect",this is a potentially breaking change to your scripts. i tried to test,* let plot_covariance_ellipse use fc and ec for facecolor,* modified all filters to allow a 1d array for the state vector x.,"* mahalanobis, log-likelihood, and likelihood only computed when requested;","installation still messed up, this is a revert to 0.0.23",* github issue #40. fixed behavior of multivariate_gaussian to accept list as,"github #147. in general it is impossible to tell if you have a list of matrices,",and get floats back.,* this push sucks in some minor documentation and pep8 changes to a few files.,* got code in compliance with pylint,added monte_carlo module which contains routines for mcmc - mostly,* added flatten to saver as an convienent way to flatten column vectors, vectors for you so you do not have to do anything special with column vectors.,* added simplex points for ukf,so they will display nicely in the repl.,move to minor version numbering doesn't mean anything other than,and remove from trunk. someone will have to tackle this on a rainy day.,* added way to specify subtract routine in the sigma point classes.,* added jerk option to the computation of q. github issue #83,about, do not support the allow_singular keyword. but it also flattens out the,* added a saver class to save the state of the kalmanfilter,* github #154 fixed bug in leastsquaresfilter causing it to diverge,with the imm.,due to floating point underflow,"distribution files, so i had to make a new version number.","if you get an import error, this is probably why! switch import","* fixed bug in likelihood to never return 0, which can happen",a bunch of small changes and bug fixes. documentation improvements.,* removed ability to pass in single matrix to batch_filter functions/methods.,* github 125: used itertools.repeat instead of *n to get,i also fixed a bug that did not provide a default value for `kappa`,* fix #53: ukf rts_smoother does not use residual functions,"filter that i have found in various book - simon, crassidis, and grewal.",* added plot_gaussian_cdf and plot_discrete_cdf.,* added a fast inverse of a diagonal matrix function common.inv_diagonal,and edgecolor. just to make code shorter in book!,* fixed assert in ukf module that incorrectly required kappa,"* bug in q_continuous_white_noise. the first term in the matrix should be /3, not /3.",* bug: ukf smoother had an important bug in it. do not use the rts_smoother,rename. you will get an exception if you try to use _dt for now.,none seem to work very well. i have code that works pretty good when r, stats.multivariate_normal.logpdf as older versions of that function,which is a more descriptive name.,as of version 0.0.18 there were separate classes for the ukf ,#102 - bug: ukf was using slow code path when using np.subtract.,* fixed bug where likelihood returned none,"all of the possibilities, but bug may remain.",important to update your code to this release if you are using the ukf.,* added an rts_smoother method to the unscentedkalmanfilter class,* optional h parameter in kalmanfilter.update to override the h matrix. useful if you have a variable number of measurements on each update.,"sigma computations, and predict/update split out. provision for supplying your own",* bug fix in gh code that ignored k ,* compute log-likelihood and mahalanobis only when requested github #139.,source files in it. pypi no longer allows you to refresh,* added logpdf to stats. computes logpdf - mostly a wrapper around,* brought docstrings into compliance with numpy documentation style.,* improved documentation of method parameters,but me.,"more effort, and if i can't get something reliable i'll put it in a branch",einsum instead of a for loop.,"added filterpy.common.saver class, which can save all the attribute of any",to some_dir/filterpy you will need to change it to some_dir.,* github #155 mahalanobis computations in several filters did not include,"i messed up the installation on 0.0.23 on pypi, it had no"
pgmpy/CHANGELOG.md at dev Â· pgmpy/pgmpy Â· GitHub,fixes problems with xmlbif and bif reader and writer classes to be consistent.,refactor hillclimbsearch with a new feature to specify fixed edges in the model.,"the format is based on keep a changelog, and this project adheres to semantic versioning.","pc estimator with original, stable, and parallel variants.",bayesianmodel.to_markov_model fixed to work with disconnected graphs.,documentation updated to include structural equation models and causal inference.,improved indepenedence tests with changes in argument.,removed,removed,removed,removed,query methods check for common variabls in variable and evidence argument.,/,overhaul of ci and setup infrastructure.,adds new method pgmpy.base.dag.to_daft to easily convert models into publishable plots.,added,added,added,added,added,all notable changes to this project will be documented in this file.,xmlbifreader and bifreader not accepts argument for specifying state name type.,new conditional independence tests for discrete variables,changed,changed,changed,changed,changed,about,bdeuscore is renamed to bdeuscore.,copy method of tabularcpd and discretefactor now makes a copy of state names.,refactors constraintbasedestimators into pc with a lot of general improvements.,adds support for python 3.9.,dag.moralize gives consistent results for disconnected graphs.,improves remove_factors and add_factors methods of factorgraph,bayesianmodel.predict has a new argument stochastic which returns stochastic results instead of map.,code quality check moved to codacy from landscape,adds get_value and set_value method to discretefactor to get/set a single value.,discretefactor.reduce accepts both state names and state numbers for variables.
Release notes Â· andrewssobral/bgslibrary Wiki Â· GitHub,version 1.1.0: added type2-fuzzy gmm um and uv added support to calculate average time of algorithms ,"version 2.0.0: new release! added a new platform-independent gui based on qt. new python and matlab wrappers. new api and added three new algorithms: pawcs, twopoints and vibe.",version 1.9.2: added subsense and lobster algorithms of pierre-luc et al. .,version 1.9.0: added a new framework for background subtraction using multiple cues of seungjong noh and moongu jeon . added opencv 2.4.8 support .,/,installation instructions ubuntu or osx,"version 3.0.0: new release! changed software license from gpl-v3 to mit. big refactoring of the source code to be compatible with opencv 4.x. improved python installation. fixed bugs, issues, ...",compiling bgslibrary with opencv 3.x and visual studio 2015 from cmake,about,"version 1.6.0: added kde of a. elgammal, d. harwood, l. s. davis, non-parametric model for background subtraction eccv'00 . added texture-based background subtraction of marko heikkila and matti pietikainen a texture-based method for modeling the background and detecting moving objects pami'06. added opencv 2.4.5 support, some improvements and bug fixes, ...","version 1.7.0: added texture-based foreground detection with mrf of csaba kert sz . some improvements and bug fixes, ...",compiling bgslibrary with visual studio 2010 and opencv 2.4.x,"version 1.3.0: added fuzzy sugeno and choquet integral with adaptive-selective background model update foreground mask analysis upgrade, now with number of true positives , true negatives , false positives , false negatives , detection rate, precision, fmeasure, accuracy, false negative rate , false positive rate , true positive rate and roc images added opencv 2.4 support some improvements, bug fixes, ...",compiling bgslibrary with opencv 2.4.x and visual studio 2013 from cmake,version 1.9.1: added sigma-delta background subtraction algorithm of manzanera and richefeu .,"version 1.4.0: added pbas of m. hofmann, p. tiefenbacher and g. rigoll. added t2f-gmm with mrf of zhenjie zhao, thierry bouwmans, xubo zhang and yongchun fang. added gmg of a. godbehere, a. matsukawa, k. goldberg . added opencv 2.4.3 support , some improvements and bug fixes, ...",how to integrate bgslibrary in your own cpp code
stumpy/CHANGELOG.md at main Â· TDAmeritrade/stumpy Â· GitHub,replaced bokeh with matplotlib,renamed tutorials with underscores for consistency,replaced name of naive_mass with naive_stamp,replaced existing rolling functions with fast welford nanstd and nanvar functions,added include and discords handling to subspace,added github discussions to readme and rtd,added egress for stumpi and egress is now the default behavior,renamed utils.py to naive.py and updated corresponding function calls,disabled bidirectional and left indices for floss,added notes and derivations for pearson correlation and centered-sum-of-products,replaced order variable with the more obvious diag name,removed incorrect compatibility with py35,replaced ._illegal attribute with a more obvious ._t_isfinite attribute,added github actions and badge,refactored and improved aampi and stumpi update performance,replaced ms word docs with latex notebooks,changed all readme hyperlinks to double underscores,added support for constant subsequences and added unit tests,replaced np.roll with slice indexing in stumpy.floss,added missing and improved docstrings,added floss and fluss to rtd api,fixed incorrect cancelling of dask data that was being scattered with hash=false,replaced python install with python -m pip install .,updated formatting and added newline before logo,features,features,features,features,features,features,features,features,features,features,features,features,features,features,features,added black and flake8 checks,check for linux os and add tbb dynamically especially for ci,added left and right matrix profile indices to scrump and converted to pearson correlation,fixed incorrect gpu output for self joins,"updated performance table and plots with stumpy.2, gpu-stump.1, gpu-stump.2, gpu-stump.dgx1, and gpu-stump.dgx2 results","replaced sep=""\s+"" with sep=""\\s+"" in tutorials",removed all aamp references as normalize=false should be used instead,corrected absolute stumpy import to be relative import,replaced array comparison in core.are_arrays_equal with np.array_equal,fixed gpu function signatures that were being displayed on rtd,added stumpi for incrementally updating matrix profiles with streaming data,improved stability for integration with other packages,added parallel gpu-stump using python multiprocessing and file i/o,added a mass_absolute function for non-normalized distance calculation with fft convolution,added ability to handle nan and inf values in all matrix profile algorithms ,replaced rolling window isfinite with a much faster function,modified exclusion zone to be symmetrical,added api links to readme,added stumpi and scrump to stumpy api ,added fluss and floss,added maamp and maamped functions,added gpu support ,added version attr,"updated readme with if __name__ == ""__main__"" for dask and jupyter notebooks",added centered-sum-of-products and pearson correlation in place of sliding dot products,fixed function docstrings and typos in api docs,added default values to docstrings,added more unit tests and rearranged test order,updated to latest version of black for better formatting,added ostinato paper to readme references,updated docstring dois with urls to primary references,added ci for minimum version dependencies,added gpu_stump example to readme,added constrained inclusion motif search for mstump/mstumped,replaced stddev computation with a memory efficient rolling chunked stddev,set up ci with azure pipelines,/,fixed warning and check when time series has inappropriate dtype,updated stumpi tutorial with egress=false,fixed scenarios where subsequence contains zero mean,added changelog,added changelog,removed python type hints or type annotations,added stumpy docs and github code repo to resources section of tutorials,updated gpu-stump example with multi-gpu support,fixed driver not found function when no gpu present,update docstrings to be less verbose for api documentation,added aamp reference to readme,added discord support for mstump/mstumped,updated string formatting to conform to flake8,added fluss to readme,added ostinato function for computing consensus motifs,added environment.yml for easier installation of dependencies,replaced nabdconf motivation video with pydata global video,added unit test for inappropriate dtype inputs,refactored tutorials for clarity,fixed inconsistent mstump/mstumped output to match description in published work,added a series of new unit tests ,about,"removed redundant ""caption"" in rtd toc",fixed ab-join so that it now matches the published definition ,added new approach for retrieving the most central consensus motif from ostinato,"added commands to remove build/, dist/, and stumpy.egg/ after pypi upload",added aamped,added gpu_stump api to rtf,added custom css to sphinx theme,added motif discovery to exisiting tutorial,added reference to semantic segmentation,added tutorials,bumped minimum numpy version to use np.array_equal,added contribute notebook to rtd table of contents for first time contributors,fixed floating point imprecision in computing distances with mass_absolute,added core.apply_exclusion_zone for consistent exclusion zone across functions,"test.sh now accepts unit, custom, and coverage keywords",changed sorting to pure numpy in mstump/mstumped for better performance,added additional references to original matrix profile papers,added several np.asarray calls to input arrays,added explicit pr trigger to azure pipelines,"updated performance table with new performance results, better color scheme, intuitive hardware grouping",added nan/inf support for stumpi,moved stumpy thresholds to global parameters in config.py,added non-normalized support to floss,added global variables for controlling chunking in compute_mean_std,added binder support,added additional stumpy logos,added aamp with non-normalized euclidean distance ,updated api list on rtd
Voluptuous Changelog - pyup.io,- removed use of `pypandoc` as markdown is now supported by `setup`., - (link allow to use nested schema and allow any validator to be compiled., - (link fixed issue with 'required' not being set properly and added test,changelog not kept for 0.9.3 and earlier releases., - (link add support for sets and frozensets., this resulted in o complexity where n is the number of keys in the dict being validated and m is the number of keys in the schema.," `{}` and `` now always evaluate as is, instead of as any dict or any list.", - (link extend tests for `schema` with empty list or dict," modify `__lt__` in marker class to allow comparison with non marker objects, such as str and int.",pipfiles and docker, - ` with `any` to allow it to be compiled., empty lists are evaluated as is., default values must now pass validation just as any regular value. this is a backward incompatible change if a schema uses default values that don't pass validation against the specified schema., - (link fixed regression with `any` and `required` flag., the fix ensures that each key in the dict is matched against the relevant schema keys only. it now works in o.," - (link added additional tests for range, clamp and length + catch typeerror exceptions", - ` usage consistent with `schema`., - (link added support for default values in `inclusive` instances., change the encoding of keys in error messages from unicode to utf-8., - (link grouped `maybe` tests plus added another `range` test, fix a performance issue of exponential complexity where all of the dict keys were matched against all keys in the schema., - (link allow partial validation when using validate decorator.,- fixed issue with opening readme file in `setup.py`., - for `in` and `notin` + fix tests, - (link use absolute imports to avoid import conflicts.,send a mail to and we'll get back to you shortly., - (link fixed typos + made spelling more consistent,a changelog finder and parser., include actual value in error messages for easier debugging ., - (link handle incomparable values in range,"pyup safety actively tracks 310,197 python packages for vulnerabilities and notifies you when to upgrade.", add argument validation decorator., add `maybe`., - (link fix `date` behaviour when a custom format is specified., add `contains`.," to specify a free-form list, use `list` instead of ``. to specify a", add script for updating `gh-pages`., - (link add `schema.infer` method for basic schema inference., `exactsequence` checks sequences are the same length.,support, changelog, add support for `ordereddict` validation.
Changelog â€” Tenacity documentation,new features,new features,built with sphinx using a theme provided by read the docs.,use str.format to format the logs internally to make logging compatible with other logger such as loguru.,edit on github,unit tests can now mock nap.sleep for testing in all tenacity usage styles,changelog,changelog,api reference,add reno ,other notes,bug fixes
python-miio/CHANGELOG.md at master Â· rytilahti/python-miio Â· GitHub,philips moonlight: rgb values are expected and delivered as tuples instead of an integer,vacuum: returning a list for clean_details is deprecated and to be removed in the future.,"this release removes the version pinning for ""construct"" library as its api has been stabilized and we don't want to force our downstreams for our version choices. another notable change is dropping the ""mirobo"" package which has been deprecated for a very long time, and everyone using it should have had converted to use ""miio"" already. furthermore the client tools work now with click's version 7+.",supported devices added to readme.md and version bumped #39 ,this release includes small improvements for powerstrip and vacuum support. furthermore this is the first release with proper documentation. generated docs are available at link - patches to improve them are more than welcome!,air humidifier ca added to the list of supported and discovered devices by mdns ,i can not get load_power with my set is xiaomi smart wifi with two usb #549,pinned versions loosed and cryptography dependency bumped to new major version ,a bug exposed in python-miio when using version 2.8.17 or newer of the underlying construct library -- causing timeouts and inability to control devices -- has also been fixed in this release.,"additionally, a compatibility issue when using construct version 2.9.23 and greater -- causing timeouts and inability to control devices -- has been fixed again.",discovery now uses mdns instead of handshake protocol. old behavior still available with --handshake true,the initial udp handshake is sent now several times to accommodate spotty networks,air purifier: some additional models added to the list of supported and discovered devices by mdns ,chuangmi.plug.v3: works now with updated firmware version,supports for the following new devices thanks to syssi and kuduka:,air purifier 2s added to the list of supported and discovered devices by mdns ,"this release adds support for several new devices, and contains improvements and fixes on several existing integrations. instead of summarizing all changes here, this library seeks to move completely automated changelogs based on the pull request tags to facilitate faster release cycles. until that happens, the full list of changes is listed below as usual.",retry and timeout can be change by setting a class attribute #884 ,"firmware updates for vacuums , the most prominent use case being installing custom firmwares . installing sound packs is also streamlined with a self-hosting server.","this release brings support to a couple of new devices, and contains fixes for some already supported ones. all thanks for the improvements in this release go to syssi!","considering how far this project has evolved from being just an interface for the xiaomi vacuum, it is time to leave 0.1 series behind and call this 0.2.0.",vacuum objects can now be queried for supported fanspeeds,this is a bugfix release which provides improved stability and compatibility.,add basic support for yunmi.waterpuri.lx9 and lx11 #826 ,"good bye to python-mirobo, say hello to python-miio! as the library is getting more mature and supports so many other devices besides the vacuum sporting the miio protocol, it was decided that the project deserves a new name. the name python-miio was previously used by a fork of python-mirobo, and we are thankful to schumyhao for releasing the name for us.","the protocol quirks handling was extended to handle invalid messages from the cloud , improving interoperability for dustcloud.",dependency management is now done using poetry & pyproject.toml,"the most significant change for this release is unbreaking the communication when using a recent versions of construct library . on top of that there are various smaller fixes and improvements, e.g. support for sound packs and running python-miio on windows.",fix exception on devices with removed lan_ctrl #1028 ,add indicator led support of the chuangmi.remote.h102a03 and chuangmi.remote.v2 #500 ,rename of strip to powerstrip to avoid confusion with led strips #97 ,strip has been renamed to powerstrip to avoid confusion,don t require typing with python 3.5 and newer #123 ,"this release is mainly to re-add mapping parameter to miotdevice constructor for backwards-compatibility reasons, but adds also pyyaml dependency and improves miot support to allow limiting how many properties to query at once.",power strip: the wifi led and power price can be controlled now ,fixes communication with newer firmwares,mi vacuum 2nd generation is now detected by discovery,fan: sa1 and za1 support added as well as various fixes and improvements ,this is a bugfix release because of further breaking changes of the underlying library construct.,"the highlight of this release is a crisp, unified and scalable command line interface called miiocli . each supported device of this library is already integrated.","in order to simplify the initial configuration, a tool to extract tokens from a mi home's backup or its database is added. it will also decrypt the tokens if needed, a change which was introduced recently how they are stored in the database of ios devices.",device errors are now wrapped in a exception for easier handling.,"respond with an error after the retry counter is down to zero, log retries into debug logger #252 ",vacuum: vacuumstate's 'dnd' and 'in_cleaning' properties are deprecated in favor of 'dnd_status' and 'is_on'.,"support for several new devices, improvements to existing devices and various fixes thanks to @syssi.","this release provides support for some new devices, improved support of existing devices and various fixes.","this release provides support for some new devices, improved support of existing devices and various fixes.",added new commands app_goto_target and app_zoned_clean #310 ,* this change log was automatically generated by github_changelog_generator,"goodbye python 3.4! this release marks end of support for python versions older than 3.5, paving a way for cleaner code and a nicer api for a future asyncio support. highlights of this release:","powerstrip: expose correct load power, works also now without cloud connectivity",supporting raw and pronto optional parameter without type specifier. #199,air humidifier: device support tested and improved ,this release brings support for air conditioner companion along some improvements and an increase in the test coverage for future-proofing the code-base. special thanks for this release goes to @syssi & to all new contributors!,power strip: both versions are fully supported now ,xiaomi power strip v1 is unable to handle some v2 properties #302, need a delay between pause and charge commands to return to dock #918,power strip support extended by additional attributes #288 ,improve the contribution process with better checks and docs #568 ,"due to a mistake during the release process, some changes were completely left out from the release. this release simply bases itself on the current master to fix that.",this is a bugfix release which provides improved compatibility.,add miottemplate tool to simplify adding support for new miot devices #656 ,add miottemplate tool to simplify adding support for new miot devices #656 ,"command line interface: make discovery to work with no ip addr and token, courtesy of @m0ses ","add control for persistent maps, no-go zones and barriers #438 ",add json output for easier integration with other tools #98,miplug module is not working from python scrips #621,"add ""lumi.acpartner.v3"" since it also works with this code #769 ",minimum supported version of construct specified #196 ,zoned cleanup start and stops imediately #355,add support for wifi plugs ,xiaomi power strip v1 is unable to handle some v2 properties #303 ,"this release also changes the behavior of vacuum's got_error property to signal properly if an error has occured. the previous behavior was based on checking the state instead of the error number, which changed after an error to 'idle' after a short while.",features of mixed air purifier models added #188 ,xiaomi ceiling lamp: some refactoring and fault tolerance if a philips light ball is used #45 ,add section for getting tokens from rooted devices #966 ,device.send accepts extra_parameters to allow passing values to the main payload body. this is useful at least for gateway devices.,unified and scalable command line interface ,this release adds support for the following new devices:,this release adds support for the following new devices:,this release adds support for the following new devices:,this release adds support for the following new devices:,this release adds support for the following new devices:,this release adds support for the following new devices:,this release adds support for the following new devices:,replaced typing by pyyaml #945 ,constant spam of: unable to discover a device at address and got exception while fetching the state: unable to discover the device #407,aqarasmartbulbe27 support added in #729 is not work #771,this release provides major improvements for various supported devices. special thanks goes to @yawor for his awesome work!,add support for other devices using the same protocol #17,"for downstream developers, this release adds two new exceptions to allow better control in situations where the response payloads from the device are something unexpected. this is useful for gracefully fallbacks when automatic device type discovery fails.","vacuum: add control for persistent maps, no-go zones and barriers","make discovery to work with no ip addr and token, courtesy of m0ses #198 ",properties common for several devices are now named more consistently,load power of the powerstrip fixed and removed from the plug #117 ,typeerror: build takes 2 positional arguments but 3 were given #201,new supported devices:,new supported devices:,new supported devices:,new supported devices:,add a note about miio-extract-tokens #79 ,use pause instead of stop for home command #411 ,/,improved support for the following devices:,wifi repeater: wifi roaming and signal strange indicator added ,not working with newest firmware version 3.3.9_003073 #14,remove pretty_cron and typing dependencies from requirements.txt,special thanks go to both @petrkotek and @foxel for making this possible. the ground work they did will make adding support for other new miot devices possible.,some typing hints added and the code order aligned #96 ,"implement adding, deleting and updating the timer #78 ",air conditioning companion: extended parsing of model and state #297 ,construct version bumped ,revise error handling to be more consistent for library users ,force parameters to be an empty list if none is given #408 ,refactor & improve support for gateway devices #924 ,moonlight: night mode support and additional scenes,vacuum: new commands app_goto_target and app_zoned_clean added ,vacuum refuses to answer if the access to internet is blocked #353,rfc: add a script to simplify finding supported properties for miio #919,p.s. there is now a matrix room (link so feel free to hop in for any reason.,generalize and move configure_wifi to the device class ,air conditioning companion: support for captured infrared commands added ,report more specific exception when airdehumidifer is off #963 ,"add support for vacuum's carpet mode, which requires a recent firmware version #299 ",ac partner: add swing mode 7 with unknown meaning #431 ,"the old ""mirobo"" package will continue working for the foreseeable future, however, developers using this package are encouraged to port their code over to use the the new ""miio"" package. the old command-line tools remain as they are.",gateway: add name + model property to subdevice & add loads of subdevices #724 ,"add azure pipeline for tests, and enforce black, flake8 and isort for commits #566 ",fix airpurifier_airdog x5 and x7sm to derive from the x3 base class #903 ,after updating to new firmware - can #37,power strip: load power is returned now correctly,unified and scalable command line interface #191 ,add sphinxcontrib.apidoc to doc builds to keep the api index up-to-date #764 ,add support for next generation of the xiaomi mi smart plug #428 ,xiaomi camera : add orientation controls and alarm #663 ,try to fix decrypted payload quirks if it fails to parse as json ,add automatic labeling for prs #768 ,fixes & enhancements:,fixes & enhancements:,fixes & enhancements:,fixes & enhancements:,fixes & enhancements:,fixes & enhancements:,fixes & enhancements:,added support for zhimi.humidifier.cb2 #917 ,replace pretty-cron dependency with cron_descriptor #423,invalid cron expression when using xiaomi_miio integration in home assistant #847,the most noteworthy change in this release is the work undertaken by @starkillerog to improve the support for xiaomi gateway devices. see the pr description for more details at link .,"xiaomi is slowly moving to use new protocol dubbed miot on the newer devices. to celebrate the integration of initial support for this protocol, it is time to jump from 0.4 to 0.5 series! shout-out to @rezmus for the insightful notes, links, clarifications on #543 to help to understand how the protocol works!",corrected link in discovery.rst and xiaomi air purifier pro fix #465 ,"fan za3, got token, but does not work #720",air conditioning partner: add swing mode 7 with unknown meaning,"for those who are interested in adding support to new miot devices can check out devtools directory in the git repository, which now hosts a tool to simplify the process. as always, contributions are welcome!",add a more helpful error message when info fails with an empty payload #164 ,about,make communication more robust by retrying automatically on errors,add retries to discovery requests #754 ,"convert to use pyproject.toml and poetry, extend tests to more platforms #674 ","this release brings several improvements to the gateway support, thanks to @starkillerog as well as some minor improvements and fixes to some other parts.",air humidifier: strong mode property added and docstrings updated #300 ,add support for dmaker.fan.p9 and dmaker.fan.p10 #819 ,extend miio-extract-tokens to allow extraction from yeelight app db #462 ,generalize and move configure_wifi to the device class #250 ,revise error handling to be more consistent for library users #180 ,posibillity for local push instead of poll? #638,wifi repeater: wifi roaming and signal strange indicator added #285 ,xiaomi phillips smart led ball lamp and api token for home assistant #445,error timeout - adding supported to viomi-vacuum-v8_miio 309248236 #666,add support for scishare coffee maker #858 ,strict check for version equality of construct ,add support for xiaomi scishare coffee machine #833,try to fix decrypted payload quirks if it fails to parse as json #236 ,device support of the xiaomi power strip updated #81 ,pedestal fan: improved support of both versions,vacuum: add ability to configure used wifi network,added air purifier 2s to supported devices #161 ,add preliminary support for managing sound files #154 ,improved support of the xiaomi smart fan #244,bump cryptography dependency to new major version #824 ,fix pep8 lint issue: unexpected spaces around keyword / parameter equals #416 ,improved support of the xiaomi smart fan #306 ,use of both app and script not possible? #30,"return type of the property ""volume"" should be optional #172 ",add a base to allow easier testing of devices #99 ,expand documentation for token from android backup #382 ,construct version bumped #280 ,support for the xiaomi mi wifi repeater 2 added #278 ,support of the unified command line interface for all devices #289 ,air humidifier: parsing of the firmware version improved,vacuum: added sound pack handling and ability to change the sound volume ,additional commands for vacuum #607,can control but not get info from the vacuum #912,fix miio-extract-tokens for devices without tokens #469 ,xiaomi styj02ym discovered but not responding #628,fan: ability to disable delayed turn off,unable to get xiaomi miplug working on ha #350,add initial support for aqara camera #375 ,some concern about the new version #3,gateway: add support for aqaraswitchonechannel and aqaraswitchtwochannels #708 ,miio-extract-tokens: fix for devices without tokens,mirobo updater -- no request was made #557,device support for the xiaomi smart wifi socket added #29 ,not working with rockrobo xiaowa #364,ignore cli and test files from test coverage to get correct coverage percentage #361 ,check for empty clean_history instead of crashing on it #472 ,could you pls add support to gateway's functions of security and light? #340,when i try to send a command #277,add the ability to define a timezone for configure_wifi #107 ,add initial support for xiao ai smart alarm clock #558 ,create separate api doc pages per module #765 ,ac partner v3: add socket support,better documentation and presentation of the documentation ,two new exceptions to give more control to downstream developers:,add fan_speed_presets for querying available fan speeds #643 ,add fan_speed_presets for querying available fan speeds #643 ,impossible to get the last version or even the 0.4.4 #489,air purifier pro: support for sound volume level and fix for bright propery #157 ,add property led to the xiaomi air fresh #390 
NumCpp: Release Notes,improved installation and usage with cmake find_package support,"dropped support of c++11, now requires a c++14 or higher compiler",added replace option into random::choice,"added complete and incomplete elliptical integrals of the first, second, and third kind to special namespace ","compile with no_use_boost definition to remove the boost libraries as a dependency, with reduced functionality:",gcd with a pair of values ,lcm with a pair of values ,added option for user defined bin edges in histogram function,added no_multithread compile definition to turn off algorithm multithreading from compliant compilers,lu_decomposition and pivotlu_decomposition added to linalg namespace,added exponential integral to special namespace ,added rodriguesrotation and wahbasproblem to rotations namespace,added additional where overloads to match numpy functionality,new stl iterators added to ndarray,fixed a build error for multiply defined symbols of islittleendian,examples,namespaces,added ability to use ndarray as container for generic structs,"added more ndarray constructors for stl containers including std::vector<std::vector<t>>, closing issue #59"
Rauth Changelog â€” rauth 0.7.2 documentation,added custom decoder param for request and access token getters,bugfix added caseinsensitivedict to ensure headers are properly updated,updated documentation to include changelog,"removed examples without correct, functioning credentials",updated test runner to not fail when yanc is missing,default basic auth removed from oauth2service.get_access_token,added an ad hoc check against double signing in oauth 1.0/a,added changelog,allow optional query parameters #175,added get_raw_access token to oauth1 and oauth2service,updated readme,default oauth_callback removed from oauth1service.get_raw_request_token,this provides a list of changes to rauth by release.,bugfix corrected multiple quoting of oauth_token,added plaintext signature support #147,test suite completely rewritten for more robust request checking,made service and session objects serializable,fixed oauth1 unicode encoding issues,removed bash requirement from test runner,changes in version 0.5.5,changes in version 0.5.5,changes in version 0.5.4,changes in version 0.5.4,bugfix corrected adding header to oauth 2.0 where no access token existed,added unified requests session wrappers for each respective service,default oauth parameter setting removed from all wrapper methods,default remote_user removed from oflyservice.get_authorize_url,changes in version 0.5.2,changes in version 0.5.2,all http methods moved to session objects,bugfix fixed upstream caseinsensitivedict api changes,fixed requests token saving in headers #137,changes in version 0.5.3,changes in version 0.5.3,all request injection now happens on session objects,"enter search terms or a module, class or function name.","hook module removed, replaced by session module",changes in version 0.6.0,changes in version 0.6.0,changes in version 0.7.2,changes in version 0.7.2,added ability to pass in key name for get_token methods ,changes in version 0.7.1,changes in version 0.7.1,default redirect_uri removed from all service wrapper helper methods,added ofly md5 signing option,added ability to pass in custom decoder for get_token methods (excluding,changes in version 0.5.0,changes in version 0.5.0,updated docstring to correct incorrect documentation,changes in version 0.5.1,changes in version 0.5.1,default connection timeouts moved into session module logic,fixed encoding of tilde bug in urlencode #186,added better error reporting for get_token methods ,added get_session method to service wrappers,added get_auth_session method to service wrappers,default response_type removed from oauth2service.get_authorize_url,added requirements.txt,bugfix corrected improper oauth 1.0/a handling of entity-methods,raise_for_status removed from all service wrapper helper methods,cleaned up oauth2service.get_access_token
abseil-py/CHANGELOG.md at master Â· abseil/abseil-py Â· GitHub," define_enum_class and define_mutlti_enum_class accept a case_sensitive argument. when false , strings are mapped to enum member names without case sensitivity, and member names are serialized in lowercase form. flag definitions for enums whose members include duplicates when case is ignored must now explicitly pass case_sensitive=true.", alias default values now matched the aliased default value., pickling flags now raises an clear error instead of a cryptic one. pickling flags isn't supported; instead use flags_into_string to serialize flags., testcase.enter_context: allows using context managers in setup and having them automatically exited when a test finishes.," multi-flags now accept any iterable type for the default value instead of only lists. strings are still special cased as before. this allows sets, generators, views, etc to be used naturally.", added public flag holders for --test_srcdir and --test_tmpdir. users should use absltest.test_srcdir.value and absltest.test_tmpdir.value instead of flags.test_srcdir and flags.test_tmpdir.,the format is based on keep a changelog.," as a deterrent for misuse, flagholder objects will now raise a typeerror exception when used in a conditional statement or equality expression.", an exception is now raised instead of logging.fatal when logging directories cannot be found., flagsaver overrides can now be specified in terms of flagholder.," added --pdb flag: when true, uncaught exceptions will be handled by pdb.post_mortem. this is an alias for --pdb_post_mortem.",tempfile management apis for tests: read/write/manage tempfiles for test purposes easily and correctly. see testcase.create_temp{file/dir} and the corresponding commit for more info.," @parameterized.parameters now treats a single abc.mapping as a single test case, consistent with named_parameters. previously the abc.mapping is treated as if only its keys are passed as a list of test cases. if you were relying on the old inconsistent behavior, explicitly convert the abc.mapping to a list.", alias present counter now correctly reflects command line usage., surplus entries in assertionerror stack traces from absltest are now suppressed and no longer reported in the xml_reporter.,#94: license files are now included in sdist.,xml test output is written at the end of all test execution., flag serialization is now deterministic: this improves bazel build caching for tools that are affected by flag serialization.,/,all notable changes to python absl are recorded here.," parameterized.product: allows testing a method over cartesian product of parameters values, specified as a sequences of values for each parameter or as kwargs-like dicts of parameter values.", absltest now integrates better with --pdb_post_mortem.,"absltest.mock: alias to unittest.mock for better unittest drop-in replacement. for py2, it will be available if mock is importable.", logging.vlog_is_on: helper to tell if a vlog call will actually log anything. this allows avoiding computing expansive inputs to a logging call when logging isn't enabled for that level.,added,added,added,added,added,added,added,added,added,added,flags enum support: flags.define_enum_class allows using an enum derived class to define the allowed values for a flag.,test output now includes start/end markers for each test ran. this is to help distinguish output from tests clearly., _tempdir and _tempfile now implement __fspath__ to satisfy os.pathlike,changed,changed,changed,changed,changed,changed,changed,about," bazel 0.23+ or 0.22+ is now required for building/testing. specifically, a bazel version that supports @bazel_tools//tools/python:python_version for selecting the python version.", aliasing a multi flag no longer causes the default value to be appended to.," flags serialization works better: the resulting serialized value, when deserialized, won't cause --help to be invoked, thus ending the process.", several flag fixes to make them behave more like the absl c++ flags: empty --flagfile is allowed; --nohelp and --help=false don't display help," testonly=1 has been removed from the testing libraries, which allows their use outside of testing contexts.",app.call_after_init: register functions to be called after app.run is called. useful for program-wide initialization that library code may need., flags.validate_all_flags: a new method that validates all flags and raises an exception if one fails., defining an alias no longer marks the aliased flag as always present on the command line., asserttotallyordered no longer requires objects to implement __hash__.," flags.mark_bool_flags_as_mutual_exclusive: convenience function to check that only one, or at most one, flag among a set of boolean flags are true.", multiple flags are now set together before their validators run. this resolves an issue where multi-flag validators rely on specific flag combinations.," both python 2 and python 3 versions of tests are now created. to only run one major python version, use bazel test --test_tag_filters=-python to ignore the other version.",argparse integration: absl-registered flags can now be accessed via argparse using absl.flags.argparse_flags: see that module for more information.," xml_reporter now includes timestamps to testcases, test_suite, test_suites elements.",make --helpfull work with unicode flag help strings.,fixed,fixed,fixed,fixed,fixed,fixed,fixed,fixed,fixed,"logging.log_every_n_seconds: like log_every_n, but based on elapsed time between logging calls.", absltest.expectedfailureif: a variant of unittest.expectedfailure that allows a condition to be given., building with bazel 0.2.0 works without extra incompatiblity disable build flags.
shodan-python/CHANGELOG.md at master Â· achillean/shodan-python Â· GitHub,new api methods api.search_facets and api.search_filters to get a list of available facets and filters.,convert line endings of shodan/client.py and tests/test_shodan.py to unix,add history and type parameters to shodan.dns.domain_info method and cli command,"include timestamp, vulns and tags in csv converter ",the changelog is now part of the packages.,improved unicode handling ,remove deprecated api wrapper for shodanhq.com/api,"stream: handle timeout=none, none can't be compared with integers ","fixed the bug #47 which was caused by the cli using a timeout value of ""0"" which resulted in the ""requests"" library failing to connect",/,override environment configured settings if explicit proxy settings are supplied ,add support for new vulnerability streaming endpoints,new optional parameter proxies for all interfaces to specify a proxy array for the requests library ,fixed bug that caused an exception when parsing uncompressed data files in python3,add basic support for the bulk data api,new method to edit the list of ips for an existing network alert,add library methods for the new notifications api,add the ability to save results from host lookups via the cli ,about,"fixed bug that prevented an open port from being shown in ""shodan host"" ",ability to specify list of fields to include when converting to csv/ excel ,add support for paging through the domain information,python3 fixes for outputting images ,support put requests in the api request helper method,fix bug when converting data file to csv using python3,improved exception handling to improve debugging shodan init ,new command shodan alert disable to disable a notification trigger,improved unicode handling in python2 ,remove unused imports,updated docs to make them python3 compatible,new command shodan alert enable to enable a notification trigger,"stream: automatically decode to unicode, fixes streaming on python3 ",include docs in packages ,allow a single network alert to monitor multiple ip ranges ,"new option ""-d"" for shodan domain to lookup open ports for ips in the results","new option ""--skip"" for download command to help users resume a download",new command shodan alert triggers to list the available notification triggers,show user-friendly error messages when running shodan radar without permission or in a window that's too small ,new command shodan scan list to list recently launched scans,fixed bug that prevented shodan scan submit from finishing ,changelog,shodan cli now installs properly on windows ,"new option ""-s"" for shodan domain to save results from the lookup",sign up,"added ""images"" convert output format to let users extract images from shodan data files ",fix excel file conversion that resulted in empty .xlsx files,change bare 'except:' statements to 'except exception:' or more specific ones,add new methods to ignore/ unignore trigger notifications,skip to content,"improved output of ""shodan host"" ",fix bug that caused unicode error when printing domain information ,terms,sign in,add flag to let users get their ipv6 address shodan myip -6,"added ""shodan radar"" command",only change api_key file permissions if needed ,explore,new command shodan alert info to show details of a specific alert,raw
Changelog â€” dateutil 2.8.1 documentation,the use of both the until and count parameters is now deprecated as inconsistent with rfc2445 ,"switched setup.py to use find_packages, and started testing against pip installed versions of dateutil in ci. fixed issue with parser import discovered by @jreback in pandas-dev/pandas#18141. ",fixed issue with the addition and subtraction of certain relativedeltas. reported and fixed by @kootenpv ,"implemented of __hash__ for relativedelta and weekday, reported and fixed by @mrigor ",corrected readme to reflect that tests are now run in pytest. reported and fixed by @m-dz ,"made some changes to the ci and codecov to test against newer versions of python and pypy, and to adjust the code coverage requirements. for the moment, full pypy3 compatibility is not supported until a new release is available, due to upstream bugs in the old version affecting pep-495 support. ",an issue with string encoding causing exceptions under certain circumstances when tzname is called was fixed. ,moved parser module into parser/_parser.py and officially deprecated the use of several private functions and classes from that module. ,"a replace method has been added to rrule objects by @jendas1, which creates new rrule with modified attributes, analogous to datetime.replace ","added some flexibility in subclassing timelex, and switched the default behavior over to using string methods rather than comparing against a fixed list. ",several deprecated functions were replaced in the tests by @moreati ,changed python setup.py test to print an error to stderr and exit with 1 instead of 0. reported and fixed by @hroncok ,fix an issue with relativedelta and freezegun ,refactored build and release sections and added setup instructions to contributing. reported and fixed by @kynan ,"deprecated the idiosyncratic tzstr format mentioned in several examples but evidently designed exclusively for dateutil, and very likely not used by any current users. ","fixed a bug with base offset changes during dst in tzfile, and refactored the way base offset changes are detected. originally reported on stack overflow by @martinthoma. ",fixed issue with fuzzy parsing where tokens similar to am/pm that are in the end skipped were dropped in the fuzzy_with_tokens list. reported and fixed by @jbrockmendel .,fixed issue with tzwin and tzwinlocal where dst transitions were incorrectly parsed from the registry. ,"added support for parser weekdays with less than 3 characters. reported by @arcadefoam , fixed by @jonemo ",added pep-495-compatible methods to address ambiguous and imaginary dates in time zones in a backwards-compatible way. ambiguous dates and times can now be safely represented by all dateutil time zones. many thanks to alexander belopolski and tim peters @tim-one for their inputs on how to address this. original issues reported by yupeng and @zed .,fix and add test for python 2.x compatibility with boolean checking of relativedelta objects. implemented by @nimasmi and c dric krier ,"fixed to assertion logic in parser to support dates like 2015-15-may , reported and fixed by @jbrockmendel ",improve error message when rrule s dtstart and until are not both naive or both aware. reported and fixed by @ryanpetrello ,"fixed indexerror in parser on dates with trailing colons, reported and fixed by @jbrockmendel ",an issue where the wkst parameter was improperly rendering in str was reported and fixed by daniel lepage . ,removed duplicate test name that was preventing a test from being run. reported and fixed by @jdufresne ,"started enforcing that within vtimezone, the value parameter can only be omitted or date-time, per rfc 5545. reported by @unrud ","switched the tzoffset, tzstr and gettz caches over to using weak references, so that the cache expires when no other references to the original tzinfo objects exist. this cache-expiry behavior is not guaranteed in the public interface and may change in the future. to improve performance in the case where transient references to the same time zones are repeatedly created but no strong reference is continuously held, a smaller strong value cache was also added. weak value cache implemented by @cs-cordero , strong cache added by g k en nurlu ",fixed issue with parsing an unambiguous string representation of an ambiguous datetime such that if possible the correct value for fold is set. fixes issue reported by @jordonphillips and @pganssle ,fixed issue with tz.gettz for tz variables that start with a colon. reported and fixed by @lapointexavier ,added support for more than 6 fractional digits in isoparse. reported and fixed by @jayschwa .,"corrected parse documentation to reflect proper integer offset units, reported and fixed by @abrugh ",started including the license file in wheels. reported and fixed by @jdufresne ,fixed relativedelta.weeks property getter and setter to work for both negative and positive values. reported and fixed by @souliane ,"added rrule: prefix to rrule strings generated by rrule.__str__, in compliance with the rfc. reported by @andrewpashkin , fixed by @jarondl and @mlorant ","added new methods for working with ambiguous and imaginary dates to the tz module. datetime_ambiguous determines if a datetime is ambiguous for a given zone and datetime_exists determines if a datetime exists in a given zone. this works for all fold-aware datetimes, not just those provided by dateutil. ","deprecated zoneinfo.gettz due to confusion with tz.gettz, in favor of get method of zoneinfo.zoneinfofile objects. ",replaced parse calls with explicit datetime objects in unit tests unrelated to parser. ,"tweaked parser error message to include rejected string format, added by @pbiering ","improved the logic in travis and appveyor to alleviate issues where builds were failing due to connection issues when downloading the iana timezone files. in addition to adding our own mirror for the files , the download is now retried a number of times ",added a pyproject.toml file with build requirements and an explicitly specified build backend. ,style improvement to zoneinfo.tzfile that was confusing to static type checkers. reported and fixed by @quodlibetor ,"add support for parsing bytesarray, reported by @uckelman and fixed by @uckelman and @pganssle ","fixed an issue where dateutil timezones were not compatible with basic time objects. one of many, many timezone related issues contributed and tested by @labrys. ",fixed case where tzrange.utcoffset and tzrange.dst might fail due to a date being used where a datetime was expected .,"updated the documentation for relativedelta. removed references to tuple arguments for weekday, explained effect of weekday and better explained the order of operations that relativedelta applies. fixed by @kvn219 @huangy22 and @elliotjh ",fixed an issue where parser.parse would raise decimal-specific errors instead of a standard valueerror if certain malformed values were parsed . reported and fixed by @amureki .,added time zone inference when initializing an rrule with a specified until but without an explicitly specified dtstart; the time zone of the generated dtstart will now be taken from the until rule. reported by @href . fixed by @absreim .,"fixed issue where passing whole number floats to the months or years arguments of the relativedelta constructor would lead to errors during addition. reported by @arouanet , fixed by @lkollar ","rrule performance under certain conditions has been significantly improved thanks to a patch contributed by @dekoza, based on an article by brian beck ",fixed issue with parsing dates of the form x m yy. reported by @jbrockmendel. ,"fixed parser issue where commas were not a valid separator between seconds and microseconds, preventing parsing of iso 8601 dates. contributed by @ryanss ","fixed rrule.between for cases where after is achieved before even starting, as reported by andreas k hler.",fixed parser bug where yearfirst and dayfirst parameters were not being respected when no separator was present. ,added a lock to tz.tzical s cache. reported and fixed by @unrud ,python 3.5 was added to the supported platforms in the metadata and the test suites .,"fixed testing of folds and gaps, particularly on windows ","refactored tzwin and tzrange as a subclass of a common class, tzrangebase, as there was substantial overlapping functionality. as part of this change, tzrange and tzstr now expose a transitions function, which returns the dst on and off transitions for a given year. ","changed many aspects of dealing with the zone info file. instead of a cache, all the zones are loaded to memory, but symbolic links are loaded only once, so not much memory is used.","implemented internal timezone information with binary timezone files. datautil.tz.gettz function will now try to use the system timezone files, and fallback to the internal versions. it s also possible to ask for the internal versions directly by using dateutil.zoneinfo.gettz.",implemented __abs__ for relativedelta. reported by @binnisb and @pferreir ,an issue that arose when timezone locale changes during runtime has been fixed by @carlosxl and @mjschultz ,an issue with tox failing without unittest2 installed in python 2.6 was fixed by @moreati ,"switched release.py over to using pep517.build for creating releases, rather than direct invocations of setup.py. fixed by @smeng10 .",features,performance improvement to parser from removing certain min calls. reported and fixed by @jbrockmendel ,relativedelta weeks parameter can now be set and retrieved as a property of relativedelta instances. ,"fixed deprecated escape characters in regular expressions. reported by @nascheme and @thierryba , fixed by @thierryba ",add doctest examples to tzfile documentation. done by @weatherpattern and @pganssle ,improved documentation on the use of until and count parameters in rrule. fixed by @lucaferocino .,fixed an issue where tzfile objects were not properly handling dst and tzname when attached to datetime.time objects. reported by @ovacephaloid. ,several classes have been marked as explicitly unhashable to maintain identical behavior between python 2 and 3. submitted by roy williams ,fixed issue where test_tzlocal_offset_equal would fail in certain environments due to an invalid assumption about what time zone names are provided. reported and fixed by kubilay kocak .,fixed an issue with the setup script running in non-utf-8 environment. reported and fixed by @gergondet ,added a cache to tz.gettz so that by default it will return the same object for identical inputs. this will change the semantics of certain operations between datetimes constructed with tzinfo=tz.gettz. ,"fixed bug in constructor of parser, and converted parser classes to new-style classes. original report and patch by michael elsd rfer.",changed handling of t24:00 to be compliant with the standard. t24:00 now represents midnight on the following day. fixed by @cheukting ,parser issue where calling parse on dates with no day specified when the day of the month in the default datetime is greater than the number of days in the parsed month was fixed ,started raising a warning when the parser finds a timezone string that it cannot construct a tzinfo instance for . reported and fixed by @jbrockmendel ,"fixed two digit zero-year parsing , as reported by jim abramson, and included test case for this.","calls like gettz and gettz will now return the expected values, instead of the tz variable behavior.","relativedelta now explicitly supports fractional relative weeks, days, hours, minutes and seconds. fractional values in absolute parameters are now deprecated. ",changed licensing scheme so all new contributions are dual licensed under apache 2.0 and bsd. ,fixed an issue where tzwin was not being properly imported on windows. contributed by @labrys. ,bug in zoneinfo file on platforms such as google app engine which do not do not allow importing of subprocess.check_call was reported and fixed by @savraj ,"many rrule changes and fixes by @pganssle ,","update documentation to reflect that the parser can raise typeerror, reported and fixed by @tomchuk ",formatting fixes to documentation of rrule and readme.rst.,"added .instance alternate constructors for tz.tzoffset and tz.tzstr, to allow the construction of a new instance if desired. ",added an example of how to use a custom parserinfo subclass to parse non-standard datetime formats in the examples documentation for parser. added by @prdickson ,expand definition of tz.tzlocal equality so that the local zone is allow equality with tzoffset and tzutc. ,fixed issue with several time zone classes around dst transitions in any zones with +0 standard offset ,all code is compatible with new-style division.,"as reported by mathieu bridon, rrules were matching the bysecond rules incorrectly against byminute in some circumstances when the secondly frequency was in use, due to a copy & paste bug. the problem has been unittested and corrected.",improved the contributing documentation to clarify where to put new changelog files. contributed by @andrewcbennett ,add documentation for the dateutil.tz.win module and mocked out certain windows-specific modules so that autodoc can still be run on non-windows systems. ,expanded the description and examples in the relativedelta class. contributed by @andrewcbennett ,"fixed an issue with fold support on certain python 3 implementations that used the pre-3.6 pure python implementation of datetime.replace, most notably pypy3 .","dateutil now works on python 2.6, 2.7 and 3.2 from same codebase ","fixed bug where hours were not validated, leading to improper parse. reported by @heappro , fixed by @jbrockmendel ","zoneinfo_metadata file version increased to 2.0 - the updated updatezinfo.py script will work with older zoneinfo_metadata.json files, but new metadata files will not work with older updatezinfo.py versions. additionally, we have started hosting our own mirror of the olson databases on a github pages site ","corrected setup.py metadata to reflect author vs. maintainer, ",fixed issue with tzwin encoding in locales with non-latin alphabets ,dateutil zoneinfo tarballs now contain the full zoneinfo_metadata file used to generate them. ,additional documentation for parser and rrule.,"parsing an empty string will now raise a valueerror, rather than returning the datetime passed to the default parameter. ","the package is now zip-safe, and universal-wheelable, thanks to changes in the handling of the zoneinfo file.",refactored relativedelta.weekday and rrule.weekday into a common base class to reduce code duplication. ,relativedelta objects previously did not use microseconds to determine of two relativedelta objects were equal. this oversight has been corrected. contributed by @elprans ,fixed issue where dateutil.tz was using a backported version of contextlib.nullcontext even in python 3.7 due to a malformed import statement. .,changed order of keywords in rrule docstring. reported and fixed by @rmahajan14 .,"fixed incorrect parsing of certain dates earlier than 100 ad when represented in the form %b.%y.%d , e.g. december.0031.30 . ","switched to setuptools_scm for version management, automatically calculating a version number from the git metadata. reported by @jreback , implemented by @sulley38 ",added support for value=date-time for dtstart in rrulestr. reported by @potuz and fixed by @unrud ,built with sphinx using a theme provided by read the docs.,bug with lang=c fixed by mike gilbert,changed private _byxxx from sets to sorted tuples and fixed one currently unreachable bug in _construct_byset. ,"fixed issue with improper rounding of fractional components. reported by @dddmello , fixed by @m-dz ",fixed an issue where isoparser.parse_isotime was unable to handle the 24:00 variant representation of midnight. ,tzwinlocal objects now have a meaningful repr and str implementation ,fixed parsing of xxhxxm formatted time after day/month/year has been parsed.,/usr/share/lib/zoneinfo was added to tzpaths for compatibility with solaris systems. reported by @dhduvall ,relativedelta can now be safely subclassed without derived objects reverting to base relativedelta objects as a result of arithmetic operations. ,tzoffset and tzrange objects now accept either a number of seconds or a datetime.timedelta object wherever previously only a number of seconds was allowed. ,added support for tzid parameter for dtstart in rrulestr. reported and fixed by @ryanpetrello ,the full pgp signing key fingerprint was added to the readme.md in favor of the previously used long-id. reported by @valholl ,added python_requires to setup.py so that pip will distribute the right version of dateutil. fixed by @jakec-github ,"fix a parser issue where am and pm tokens were showing up in fuzzy date stamps, triggering inappropriate errors. gh #56 , gh pr #63.",fix bug in rrule introduced in 2.4.0 where byweekday parameter was not handled properly. ,"removed bare string exceptions, as reported and fixed by wilfredo s nchez vega.","changed manifest.in to explicitly include test suite in source distributions, with help from @koobs ","added support for exdate parameters when parsing rrule strings. reported by @mlorant , fixed by @nicoe .",fixed problem parsing strings in %b-%y-%d format. reported and fixed by @jbrockmendel ,updated all references to rfc 2445 to point to rfc 5545. fixed by @mariocj89 ,"fixed issue with parsing of tzstr on python 2.7.x; tzstr will now be decoded if not a unicode type. gh #51 , gh pr #55.",switched ci over to use tox. fixed by @gaborbernat , fix an issue with source distributions not including the test suite.,moved many examples from the examples documentation into their appropriate module documentation pages. fixed by @tomasz-kluczkowski and @jakec-github ,"fixed many misspellings, typos and styling errors in the comments and documentation. patch by hugo van kemenade .","fix error where parser allowed some invalid dates, overwriting existing hours with the last 2-digit number in the string. ",dropped the use of assert in the parser. fixed by @jbrockmendel ,"parsing errors will now raise parsererror, a subclass of valueerror, which has a nicer string representation. patch by @gfyoung .",added explicit check for valid hours if am/pm is specified in parser. ,changed to an explicit error when rrulestr strings contain a missing byday ,fixed a problem causing issues importing zoneinfo in certain circumstances. issue and solution contributed by @alexxv ,added an explicit warning when running python setup.py explaining how to run the test suites with pytest. fixed by @lkollar. ,fixed recursive import issue with tz module ,now tz.gettz returns a tzlocal instance when not given any arguments and no other timezone information is found.,trailing whitespace in easter.py has been removed. submitted by @omgimalexis ,fixed parser issue causing fuzzy_with_tokens to raise an unexpected exception in certain circumstances. contributed by @michaelaquilina ,"fixed another parser precision problem on conversion of decimal seconds to microseconds, as reported by erik brown. now these issues are gone for real since it s not using floating point arithmetic anymore.",tzfile now correctly handles files containing leapcnt . contributed by @hjoukl ,improved performance and inspection properties of tzname methods. ,added changelog to documentation. ,added changelog to documentation. ,"datetime.timedelta objects can now be added to relativedelta objects. reported and added by alec nikolas reiter (gh issue #282, pr #283","extensive improvements to the parser test suite, including the adoption of pytest-style tests and the addition of parametrization of several test cases. patches by @jbrockmendel .",corrected link syntax and updated url to https for iso year week number notation in relativedelta examples. ,fixed an issue with improper caching behavior in rruleset objects ,moved version information into _version.py and set up the versions more granularly.,fixed parsing of unicode date strings.,fixed parser bug where unambiguous datetimes fail to parse when dayfirst is set to true. ,"fixed issue where the count parameter of rrules was ignored if 0. fixed by @mshenfield , reported by @vaultah .",add support for iso 8601 times with comma as the decimal separator in the dateutil.parser.isoparse function. ,significantly refactored parser code by @jbrockmendel and @pganssle ,added within_delta function to utils - added by @justanr ,several unused imports were removed by @jdufresne. ,"version is now published in dateutil.__version__, as requested by darren dale.",fixed issue where the tz.tzstr constructor would erroneously succeed if passed an invalid value for tzstr. fixed by @pablogsal ,"added dedicated iso 8601 parsing function isoparse . initial implementation by @pganssle in gh pr #489 and #622, with a pre-release fix by @kirit93 .","sort exdate and rdate before iterating over them, so that it s not necessary to sort them before adding to the rruleset, as reported by nicholas piper.",changed error message raised when when passing a bytes object as the time zone name to gettz in python 3. reported and fixed by @labrys .,added the tz.gettz.nocache function to allow explicit retrieval of a new instance of the relevant tzinfo. ,reduced number of ci builds on appveyor. fixed by @kirit93 ,"changed the behavior of tz.tzoffset to return the same object when passed the same inputs, with a corresponding performance improvement ","switched isinstance to callable, which is available on all supported python versions. implemented by @jdufresne ","updated many modules to use tz.utc in favor of tz.tzutc internally, to avoid an unnecessary function call. ."
Changelog â€” PyCryptodome 3.9.9 documentation,the old sha-1 and md5 hash functions are available even when python s own hashlib does not include them.,method update of a cmac object was not throwing an exception after the digest was computed or verify).,introduced export_key and deprecated exportkey for dsa and rsa key objects.,api documentation is made with sphinx instead of epydoc.,code that uses such methods is doomed anyway. it should be fixed asap to use the algorithms available in crypto.signature and crypto.cipher.,gh#426: the shamir s secret sharing implementation is not actually compatible with ssss. added an optional parameter to enable interoperability.,undefined warning was raised with libgmp version < 5,add support for loading pem files encrypted with aes192-cbc and aes256-gcm.,cmac raises an exception whenever the message length is found to be too large and the chance of collisions not negligeable.,contribute and support,"added a native extension in pure c for modular exponentiation, optimized for sse2 on x86. in the process, we drop support for the arbitrary arithmetic library mpir on windows, which is painful to compile and deploy. the custom modular exponentiation is 130% slower on an intel cpu in 32-bit mode, compared to mpir. still, that is much faster that cpython s own pow function which is 900% slower than mpir. support for the gmp library on unix remains.",reduced the amount of c code by almost 40% . modularized and simplified all code related to block ciphers. pycryptodome is now free of cpython extensions.,ctr cipher objects accept parameter nonce and possibly initial_value in alternative to counter .,gh#341: prevent key_to_english from creating invalid data when fed with keys of length not multiple of 8. thanks to vstoykovbg.,"symmetric ciphers do not have a default mode anymore . an expression like aes.new will now fail. if ecb is the desired mode, one has to explicitly use aes.new.","replaced hmac code with a bsd implementation. clarified that starting from the fork, all contributions are released under the bsd license.","new parameter output for crypto.util.strxor.strxor, crypto.util.strxor.strxor_c, encrypt and decrypt methods in symmetric ciphers . output is a pre-allocated buffer where the result must be stored. this requires less memory for very large payloads; it is also more efficient when encrypting several small payloads.",new attribute oid for hash objects with asn.1 object id,features,the allow_wraparound parameter of crypto.util.counter is ignored. an exception is always generated if the counter is reused.,gh#187: fixed incorrect aes encryption/decryption with aes acceleration on x86 due to gcc s optimization and strict aliasing rules.,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,new features,"when importing ecc keys in pem format, ignore the redundant ec params section that was included by certain openssl commands.", removed implementation of deprecated quick check feature of pgp block cipher mode.,"point_at_infinity becomes an instance method for crypto.publickey.ecc.ecckey, from a static one.","for ocb ciphers, a final call without parameters to encrypt must end a sequence of calls to encrypt with data .",fixed a warning about type mismatch raised by recent versions of cffi,compatibility with pycrypto,added hash functions blake2b and blake2s.,import and export of ecc curves in compressed form.,crypto.io.pem and crypto.io.pkcs8 used to accept empty passphrases.,aes-gcm is 9x faster,add support for left multiplication of an ec point by a scalar.,gh#142. fix mismatch with declaration and definition of addmul128.,added support for sha-512/224 and sha-512/256.,gh#121. the record list was still not correct due to pep3147 and __pycache__ directories. thanks again to john o brien.,added certain resistance against side-channel attacks for ghash and dsa.,add support for loading pem files encrypted with aes256-cbc.,built with sphinx using a theme provided by read the docs.,the dsa parameter p prime was created with 255 bits cleared .,"on windows, mpir library was stilled pulled in if renamed to gmp.dll.",reverted to original pycrypto behavior of method verify in pkcs1_v1_5 and pkcs1_pss.,"for performance reasons, ccm cipher optionally accepted a pre-declaration of the length of the associated data, but never checked if the actual data passed to the cipher really matched that length. such check is now enforced.",gh#188: more prime number candidates than necessary where discarded as composite due to the limited way d values were searched in the lucas test.,"gmp headers and static libraries are not required anymore at the time pycryptodome is built. instead, the code will automatically use the gmp dynamic library if found in the system at runtime.","added dedicated tests for all cipher modes, including nist test vectors",added support for nist p-384 and p-521 curves.,human-friendly messages for padding errors with ecb and cbc.,"for cfb/openpgp cipher object, encrypt and decrypt do not require the plaintext or ciphertext pieces to have length multiple of the cfb segment size.",the library can also be compiled using mingw.,added support for manylinux wheels.,simplified build process by removing autoconf.,gh#381: make notarization possible again on os x when using wheels. thanks to colin atkinson.,the salt for pbkdf2 can be either a string or bytes .,"removed unused sha-3 and keccak test vectors, therefore significantly reducing the package from 13mb to 3mb.","gh#65. keccak, sha3, shake and the seek functionality for chacha20 were not working on big endian machines. fixed. thanks to mike gilbert.",include type stub files for crypto.io and crypto.util.,added type stubs to enable static type checking with mypy. thanks to michael nix.,add support for importing ecc and rsa keys in the new openssh format.,"ciphers and hash functions accept data as bytearray, not just binary strings.",fixed compilation problem with mingw.,"method encrypt of aes siv cipher could be still called, whereas only encrypt_and_digest is allowed.","gh#308: align stack of functions using sse2 intrinsics to avoid crashes, when compiled with gcc on 32-bit x86 platforms.",added crypto.signature.pss and crypto.signature.pkcs1_15,faster pbkdf2 for hmac-based prfs . thanks to christian heimes for pointing out the implementation was under-optimized.,rsa and dsa keys are checked for consistency as they are imported.,gh#266: aes-gcm hangs when processing more than 4gb at a time on x86 with pclmulqdq instruction.,aes-ecb and aes-ctr are 3x faster,ciphers and hash functions accept memoryview objects in input.,unsuccessful verification of a signature will now raise an exception .,added size_in_bits and size_in_bytes methods to rsakey.,"with the old python 2.6, use only ctypes to interface to native code.",ctr mode does not modify anymore counter parameter passed to new method.,added shake128 and shake256 ,"for cbc/cfb/ofb/ctr cipher objects, encrypt and decrypt cannot be intermixed.",the counter parameter of a ctr mode cipher must be generated via crypto.util.counter. it cannot be a generic callable anymore.,"key size for arc2, arc4 and blowfish must be at least 40 bits long .",crypto.random stops being a userspace csprng. it is now a pure wrapper over os.urandom.,forgot inclusion of alloca.h,removed support for python < 2.6.,add python 3.8 wheels for linux and windows.,gh#129. pycryptodomex could only be installed via wheels.,"method update of an eax cipher object was returning the underlying cmac object, instead of the eax object itself.",removed use of alloca.,remove crypto.util.py3compat.unhexlify and crypto.util.py3compat.hexlify.,"gh#322: remove blanket -o3 optimization for gcc and clang, to cope with buggy compilers.",the initial counter for a cipher in ctr mode can be a byte string .,added support for poly1305 mac .,gh#106. not all docs were included in the tar ball. thanks to christopher hoskin.,added rsa.import_key as an alias to the deprecated rsa.importkey .,add support for ci in windows via appveyor.,start using importlib instead of imp where available.,removed ability to update a blake2 hash after the first call to digest,"added crypto.publickey.ecc module , including export/import of ecc keys.",fixed resoucewarnings and deprecationwarnings.,gh#420: fix incorrect cfb decryption when the input and the output are the same buffer.,removed attribute crypto.publickey.rsa.algorithmidentifier.,removed the parameters disabled_shortcut and overflow from crypto.util.counter.new.,"all iv/iv and nonce parameters are optional. if not provided, they will be randomly generated .",benchmarks work again (they broke when ecb stopped working if an iv was passed. patch by richard mitchell.,gh#312: it was not possible to invert an ec point anymore.,pem files with windows newlines could not be imported.,"cbc/cfb/ofb, the cipher objects have both iv and iv attributes. new accepts iv as well as iv as parameter.","when creating elgamal keys, the generator wasn t a square residue: elgamal encryption done with those keys cannot be secure under the ddh assumption. thanks to weikeng chen.",fix renaming of package for install command.,removed ability to update a sha-3 hash after the first call to digest,ecckey has new methods size_in_bits and size_in_bytes.,"speed up execution of public key algorithms on pypy, when backed by the gnu multiprecision library.","removed ambiguous method size from rsa, dsa and elgamal keys.",initial support for pypy.,added option to install the library under the cryptodome package .,windows wheels are automatically built on appveyor,improved the performance of scrypt by converting some python to c.,gh#317: dsa.generate was not always using the randfunc input.,gh#232: fixed problem with gcc 4.x when compiling ghash_clmul.c.,add support for msvc.,ability to test installation with a simple python -m crypto.selftest.,"minimal length for blowfish cipher is 32 bits, not 40 bits.",add support for xchacha20 and xchacha20-poly1305 ciphers.,der objects were not rejected if their length field had a leading zero.,gh#175: fixed incorrect results for ctr encryption/decryption with more than 8 blocks.,gh#338: deal with gcc installations that don t have x86intrin.h.,gh#372: fixed memory leak for operations that use memoryviews when cffi is not installed.,removed the following methods from all 3 public key object types :,new dependency on ctypes with python 2.4.,gh#198: fix vulnerability on aesni ecb with payloads smaller than 16 bytes .,"in crypto.util.number, functions floor_div and exact_div have been removed. also, ceil_div is limited to non-negative terms only.",read the docs: private repos and priority support. try read the docs for business today!,fix building of wheels for os x by explicitly setting sysroot location.,in certain circumstances aes gcm produced wrong ciphertexts.,allow legacy rc2 ciphers to have 40-bit keys.,gh#121. the record list was not always correctly filled for the pycryptodomex package. thanks to john w. o brien.,examples,edit on github,"added original keccak hash family . in the process, simplified the c code base for sha-3.",added stream cipher chacha20.,removed method copy from blake2 hashes,removed support for python < 2.4.,other changes,gh#123 and #125. the sse2 command line switch was not always passed on 32-bit x86 platforms.
aiyprojects-raspbian/CHANGES.md at aiyprojects Â· google/aiyprojects-raspbian Â· GitHub,compatible with voice hat and vision bonnet.,add new code examples and update existing ones,compatible with voice hat.,add vision unit tests for all models and examples,debian packages are now hosted at link,original raspbian image is modified in the minimal way ,new board.py to access button and led on all boards,add get_inference_state and resest to vision bonnet protocol,"compatible with voice hat, voice bonnet, and vision bonnet.","compatible with voice hat, voice bonnet, and vision bonnet.","compatible with voice hat, voice bonnet, and vision bonnet.","compatible with voice hat, voice bonnet, and vision bonnet.","compatible with voice hat, voice bonnet, and vision bonnet.","compatible with voice hat, voice bonnet, and vision bonnet.","compatible with voice hat, voice bonnet, and vision bonnet.",/,add makefile for common shortcuts,fix assistant_grpc_demo.service: add display environment variable and proper systemd dependencies,based on the raspbian buster with desktop.,based on the raspberry pi os with desktop from march 4th 2021.,about,based on the raspberry pi os with desktop from august 20th 2020.,add google cloud iot support ,add changes.md to track release changes,remove unnecessary files ,fixes,fixes,fixes,fixes,fixes,fix pulseaudio infinite loop with voice bonnet,add sparse representation for output tensors to increase data transfer rate,upgrade colab tf version to 1.13.1,"to update your kit, see the system updates guide. all system images can be downloaded from the github releases page.",add video streaming support ,driver source code added to this repository,sign up,hacking.md instructions for vision bonnet and voice hat
Releases Â· patrikhuber/eos Â· GitHub,"this release updates the renderer and texture extraction, with full support for perspective projection , and contains various other smaller improvements and fixes.",updated v2::softwarerenderer and related code to compile with the latest eos changes and without opencv,the api and functionality of eos have been quite stable for a while now and proven themselves robust and useful. this release mainly constitutes the exciting bump to v1.0!,"removed render_affine, this was used in the old texture extraction and is no longer needed .",this is a release with quite a few nice changes and improvements. please read through the release notes carefully.,"added python bindings for eos::core::rect and eos::core::landmark<eigen::vector2f>. the python bindings are now using landmark and landmarkcollection natively, without having to keep a separate list of landmark identifiers.","note: whereas previously, meshes without vertex colour would be rendered with the colour , in the new renderer, they will have default colour black . in any case, it does not make sense to try and render a mesh without vertex colours or texture.","other recent changes & improvements include supporting uv coordinates with seams, support for landmark/vertex definitions in the morphablemodel class to give certain vertices a fixed semantic meaning, and lots of other things. see the release notes from v0.17.0 and v0.18.0 for more details.","removed the old render function, moved v2::softwarerenderer to the render namespace, and added a convenience function for the new renderer that can be called like the old renderer - calling code needs slight adjustments. the core of the new renderer is the same, but the architecture has been changed to mirror more closely the hardware pipeline, with vertex- and fragment shaders. results should be exactly the same, and they have the same parameters.","moved v2::extract_texture to the eos::render namespace and made it the new default . calling code needs to be adjusted slightly, but the function's parameters are very similar. this new texture extraction uses the rasterizer of the new renderer, and supports both orthographic and perspective projection.",it also contains a number of other minor improvements and an updated documentation.,"write_obj now also inverts the y axis of the uv coords, to be consistent with write_textured_obj ","this release was in the devel branch for a few months, and never actually left the devel branch. the morphablemodel format version was increased to 3, from adding landmark_definitions. since there are quite a few model files with this version in circulation, it was deemed best to make it an ""official"" model version and release it as v0.17.0.","eos/@patrikhuber is now part of github sponsors. if you are finding eos valuable, there is now the possibility of becoming a sponsor.","this might actually have been causing wrong code to be run or some bad memory access to - the assert that checks for that in sample_to_mesh is not triggered in release and relwithdebinfo builds, therefore we haven't caught this for a while.",added clear_buffers function to softwarerenderer and rasterizer to clear the colour- and depth buffers ,added functions to compute face and vertex normals of a mesh ,"moved write_obj and write_textured_obj into a separate header, eos/core/write_obj.hpp, so that including mesh.hpp doesn't result in transitively including <fstream> and <string> ","removed estimate_affine_camera. see the commit message, for people that were still using this. ","this release mainly fixes the write_obj and write_textured_obj functions to now also write out the texture triangle indices , when they're present in a mesh. previously for meshes who used a different set of texture triangle indices, this could cause weird artefacts on the top of the head because the tti were not written to the obj. ",improved softwarerenderer::render to correctly deal with texture maps with seams ,"added vertex visibility check function that supports both orthographic and perspective projection . introduced an enum class projectiontype, which specifies whether orthographic or perspective projection should be used.",these are in-progress changes on new rendering/texture extraction stuff in the render::v2 namespace - these work in principle but are not too thoroughly tested or used in eos yet.,"this release adds support for texture maps with seams. when a texture map contains seams, the vertices at the seams are usually duplicated, and then some of the triangle indices are different in uv space from the triangulation of the 3d vertices. this change allows to support the texture coordinates of the full-head 4d face model .","this is a minor update that slightly improves the internals of loading .scm models from cvssp from the university of surrey, and also adds load_scm_model to the python bindings, so these models can be loaded directly in python.","texture_triangle_indices is now correctly passed along to sample_to_mesh in all morphablemodel member functions . previously, get_mean and the draw_sample functions would have returned a mesh without the texture triangle indices .",updated extract_texture to support uv coordinates with seams ,"removed the opencv dependency of eos/morphablemodel/io/cvssp.hpp, and clarified the documentation slightly ",the updated release is also available on pypi.,the morphablemodel file format version was increased to 4 to store an additional member containing the uv triangulation ,"small maintenance release with updated python bindings, fixed demo.py script , and fixed bfm2009/2017 converter scripts."," the update also includes the most recent version of pybind11, and addition of sample_to_mesh to the python bindings.","and as always, various small improvements to the code style and to the documentation.",uncommented v2::extract_texture and updated all affected code ,"models can now optionally store landmark/vertex definitions, for example mappings like ""eye.right.outer_corner"" <=> 177 from a generic name to vertex ids - and then a second mappings file can be used, that maps from 2d landmark identifiers to these generic names . this separates the vertex definition from a particular set of 2d landmarks.","removed the old extract_texture function, which only supported affine cameras ","this release contains an important fix for models that have separate texture_triangle_indices, like e.g. the 4dfm.",improved v2::extract_texture to not crash when the projected model is partially outside the image ,"subsequently, the utils can now be built without opencv ",improved v2::extract_texture to support texture coordinates with seams ,the documentation at link is now updated to eos v1.1.0,see the v1.2.0 release notes for all the changes and improvements in this release!,added new draw_wireframe function that doesn't need opencv and added python binding for it ,/,prefixed all header guards with eos_ in the eos::core namespace to reduce possible name collisions ,the updated release is available on pypi.,revamped the image class to a better and more future-proof design ,"improved read_obj a bit to handle a few more cases. still, don't rely on it to parse every .obj file, it's not meant to do that. use your own or assimp or something like that.",please also have a look at the changes in v0.17.0.,added project function to pcamodel ,"renamed ""isomap"" to ""texturemap"" throughout, and the <filename>.isomap.png output of the example apps to <filename>.texture.png ",created new directory eos/core/image/ and moved image_opencv_interop.hpp there ,moved render::rect to core namespace,about,"now we always handle models correctly that contain texture triangle indices, like the 4dfm.","note: the storage order is now row-major, as opposed to col-major before. in the future, we may add means to choose the storage order.",updated mpark::variant to their latest master . this should fix a few compile errors with certain compilers when compiling eos in c++14 mode.,added simple image resize function ,"updated pybind11 to their latest master commit, and changed the visual studio cmake generator for the python bindings from vs 2017 to vs 2019 .",improve error messaging when loading morphablemodels with odd versions ,this is a follow-up update pushing the python bindings to pypi:,added missing inline to draw_sample ,"one major recent addition is support for the 4d face model, 4dfm, a full-head 3d morphable face model with 36 expressions/action units, from 4dface.io.",fixed constructing a 4x4 rotation matrix r instead of 3x3 in the python bindings of scaledorthoprojectionparameters 
Changelog â€” AmpliGraph 1.3.0 documentation,option to skip unseen entities checks when train_test_split is used ,"corrupt_sides : can now generate corruptions for training on both sides, or only on subject or object",save models with custom names. ,fixed issues in train_test_split_no_unseen api and updated api ,"continuous integration with circleci, integrated on github ",fixed some bugs on discover_facts with strategies exhaustive and graph_degree ,"probability calibration using platt scaling, both with provided negatives or synthetic negative statements ",updated the negative generation to speed up evaluation for default protocol.,added md5 checksum for datasets ,evaluation protocol now ranks object and subjects corruptions separately,refactoring of models into separate files ,corruption generation can now use entities from current batch only,quick fix for the overflow issue for datasets with a million entities. ,updated string comparison to use equality instead of identity.,fixed bug on subsequent calls of model.predict on the gpu ,added tensorboard embedding projector support ,support for visualization of embeddings using tensorboard ,fixed bug where the number of epochs did not exactly match the provided number by the user ,you are not reading the most recent version of this documentation. 1.3.2 is the latest version available.,about,addressed issue of ambiguous dataset loaders ,system-wide bugfixes and minor improvements,api change: model.predict does not return ranks anymore,added unit test cases for better coverage of the code,renamed type parameter in models.get_embeddings to fix masking built-in function,option to add reciprocal relations ,removed some unused arguments,support for large number of entities ,examples,edit on github,changes to evaluate_performance api ,minor fixes to convkb ,generic loader for csv files,minor fixes in large graph mode ,added convkb model,moved save_model and restore_model to ampligraph.utils .,experiment campaign with multiclass-loss,reach over 7 million devs each month when you advertise with read the docs.,changelog,changelog,sponsored ads served ethically,how to contribute,"fb15k-237, wn18rr loaders filter out unseen triples by default",note,reduced logging verbosity,implemented nuclear-3 norm ,fixed some bugs on randombaseline model ,improved documentation
4. Release Notes â€” Buildbot 3.1.1 documentation,removed support for deprecated builder categories which have been replaced by tags.,avatar caching is now working properly and size argument is now handled correctly.,removed deprecated support for constructing build steps from class and arguments in buildfactory.addstep.,a new www.ws_ping_interval configuration option was added to avoid websocket timeouts when using reverse proxies and cdns ,removed support for deprecated nextworker function signature that accepts two parameters instead of three.,the deprecated send function that can be overridden by custom reporters has been removed.,fixed errors when an email address matches github commits but the user is unknown to it.,removed deprecated support for block_device_map argument of ec2latentworker being not a list.,avatargithub class has been enhanced to handle avatar based on email requests and take size argument into account,"ssh connections are now run with -o batchmode=yes to prevent interactive prompts which may tie up a step, reporter or change source until it times out.",fixed regression in pending buildrequests ui where owner is not displayed anymore .,removed deprecated encoding argument to bitbucketpullrequestpoller.,"the deprecated mtr step has been removed. contributors are welcome to step in, migrate this step to newer apis and add a proper test suite to restore this step in buildbot.",improved consistency of log messages produced by the reconfig script. note that this output is not part of public api of buildbot and may change at any time.,this release includes all changes up to buildbot 2.10.2.,"added pullrequesturl property to the following pollers and change hooks: bitbucketpullrequestpoller, githubpullrequestpoller, githubeventhandler. this unifies all bitbucket and github pollers with the shared property interface.",messageformatter will receive the actual builder name instead of whole buildset when used from buildsetstatusgenerator.,"removed deprecated support for template_filename, template_dir and subject_filename configuration parameters of message formatters.",improved error message when try client cannot create a build due to builder being not configured on master side.,added support for default pylint message that was changed in v2.0.,removed support for deprecated db_poll_interval configuration setting.,"plugin database will no longer issue warnings on load, but only when a particular entry is accessed.",removed support for the following deprecated parameters of messageformatter report formatter: template_name.,built with sphinx using a theme provided by read the docs.,brought back the old behavior of the filedownload step to act more gracefully by returning failure instead of raising an exception when the file doesn t exist on master. this makes use cases such as filedownload possible again.,updated buildbot requirements to specify sqlalchemy 1.4 and newer as not supported yet.,"removed support for deprecated loghorizon, eventhorizon and buildhorizon configuration settings.","fixed issue with getnewestcompletetime which was returning no completed builds, although it could.",fixed exception when submitting builds via try jobdir client when the branch was not explicitly specified.,fixed missing data in owners and worker columns in changes and workers pages .,python 3.5 is no longer supported for running buildbot master.,re-added support for lazylogfiles argument of shellcommand that was available in old style steps.,removed support for old-style steps.,fixed usage of invalid characters in temporary file names by git-related steps ,added support for fossil user objects for use by the buildbot-fossil plugin.,removed display of hidden steps in the build summary tooltip.,removed deprecated status configuration setting.,the deprecated buildbot.status module has been removed.,bitbucketpullrequestpoller has been enhanced to optionally authorize bitbucket api.,allow usage of basic authentication to access github api when looking for avatars,implemented report generator for new build requests,fixed incorrect state string of a finished buildstep being sent via message queue .,fixed handling of secrets in nested folders by the vault provider.,fixed parsing of urls of the form link in bitbucketstatuspush. these urls are in the sourcestamps returned by the bitbucket cloud hook.,fixed a race condition in log handling of rpmlint and warningcountingshellcommand steps resulting in steps crashing occasionally.,removed deprecated buildbot.test.fake.httpclientservice.httpclientservice.getfakeservice function.,implemented support for configurable timeout in the reconfig script via new progress_timeout command-line parameter which determines how long it waits between subsequent progress updates in the logs before declaring a timeout.
Release Downloads | volatilityfoundation,fix an issue with the memmap and memdump offsets being inconsistent ," the main goal of this release was mac os x and android arm support. we also included a number of other exciting new capabilities, such as dumping cached files, exploring process privileges, analyzing virtualbox and vmware saved state and snapshot files, and carving ie history urls and mft records.","this is the first release to support all major 64-bit versions of windows. it also included the ability to convert raw memory images to crash dumps, extract command history and console input/output buffers, and an api for accessing cached registry keys and values from memory. ten new plugins were added with a specific focus on malware analysis.","this first major release from the 1.x series added over 40 new plugins and took volatility beyond windows xp. it supported 2003 server, vista, 2008 server, and 7. it also introduced a new scanning framework and a pluggable address space system with examples such as ewf and firewire.","this is the first release since the publication of the art of memory forensics! it adds support for windows 10 , linux kernels 4.2.3, and mac os x el capitan. additionally, the unified output rendering gives users the flexibility of asking for results in various formats while simplifying things for plugin developers. in short, less code leads to more functionality. this is especially useful for framework designers , because you can interface with a plugin directly and ask for json, which you then store, process, or modify however you want. "," starting with this release, we also provide linux and mac binary builds, which means you can use volatility on all major platforms without installing python or any dependencies. ",imagecopy and raw2dmp can display the number of bytes copied or converted ,"this release improves support for windows 10 and adds support for windows server 2016, mac os sierra 10.12, and linux with kaslr kernels. a lot of bug fixes went into this release as well as performance enhancements . see below for a more detailed list of the changes in this version. ",new plugin to identify applications with promiscuous sockets ," the release of this version coincides with the publication of the art of memory forensics. it adds support for windows 8, 8.1, 2012, and 2012 r2 memory dumps and mac os x mavericks . new plugins include the ability to extract cached truecrypt passphrases and master keys from windows and linux memory dumps, investigate mac user activity , and analyze advanced linux rootkits. ",verinfo plugin updated and moved into core framework ,fix an issue with vadtree's graphviz fill colors not being rendered by some viewers," this release introduced support for 32- and 64-bit linux memory samples, an address space for lime , and a suite of 14 new plugins to investigate windows gui space--including clipboard contents, desktop windows, and screenshots.",added profiles and support for mac 10.10 yosemite and 10.11 el capitan, restructured and depolluted namespace,plugins to scan linux process and kernel memory with yara signatures,majority of existing plugins updated with x64 support," this release also coincides with the community repo - a collection of volatility plugins written and maintained by authors in the forensics community. many of these are the result of the last 4 years of volatility plugin contests, but some were just written for fun. either way, its an entire arsenal of plugins that you can easily extend into your existing volatility installation. "," this release also coincides with the community repo - a collection of volatility plugins written and maintained by authors in the forensics community. many of these are the result of the last 3 years of volatility plugin contests, but some were just written for fun. either way, its an entire arsenal of plugins that you can easily extend into your existing volatility installation. ","recover sent and received adium messages, including those protected by otr ",detect api hooks in both userland processes and the kernel,malfind plugin detects injected code with erased pe headers,find api hooks in both the kernel and process memory,dlllist shows load count to distinguish between static and dynamic loaded dlls,new macho address space for 32- and 64-bit mac memory samples,new pluggable address spaces with automated election,added support for memory dumps from the most recent virtualbox version,added a plugin to find and print text on the notepad application's heap,add support for kaslr linux kernels,converting x86 and x64 raw dumps to ms crash dump ,new plugin to print and extract compressed swap data ,ability to reveal clear-text pgp emails sent or received with the mail application ,updated documentation and command reference,new plugin to find hidden threads ,list processes that are using raw sockets,new arm address space for linux and android devices on arm,ability to scan for multiple executive object types concurrently with a single pass through the memory dump ,fix an issue translating strings in pae and x64 images ,added support for virtualbox elf64 core dumps,add options to yarascan to scan process and kernel memory at once ,add apis to paged address spaces to allow easy lookups of pte flags , introduction of linux support ,vadinfo plugin allows --addr to specify one region rather than printing them all ,new plugin to print basic and complex thread data ,new plugin to automatically detect mac os x profiles ,list ip and socket filters,merged malware plugins into volatility core with preliminary x64 support,vmware saved state and snapshot ,vmware saved state and snapshot ,vmware saved state and snapshot ,vmware saved state and snapshot ,addd support for linux kernels up to 4.2.3,"dump lkms to disk, and check tty devices for rootkit hooks",new plugin to print editbox controls from the gui subsystem ,parse ie history/index.dat urls,explore recently unloaded kernel modules,vmware saved state and snapshot files,new plugin to report kauth scopes and listeners ,yarascan plugin allows you to control --size and --reverse ,updated object model and profile subsystems ,evtlogs: parse xp and 2003 event logs from memory,getsids plugin automatically resolves user and service sids ,support for windows bitmap crash dumps ,check the arm system call and exception vector tables for hooks,callbacks and timers plugins work on 64-bit memory images ,approximately 35 new linux plugins,virtualbox core dumps,virtualbox core dumps,virtualbox core dumps,virtualbox core dumps,32- and 64-bit linux kernels up to 3.16 ,new plugin to print the current working directory of processes ,"add support for tagging mac memory ranges as heaps, stacks, etc.",psxview plugin adds two new sources of process listings from the gui api,plugins to extract metadata from all of these new formats,"hashdump, cachedump, and lsadump plugins updated for x64 and win8/2012",about,about,about,about,about,about,about,about,about,about,about,about,about,about,verbose details for kdbgscan and kpcrscan,support for mavericks through 10.9.4,new plugin to detect hidden/unlinked service record structures ,32- and 64-bit macho files,32- and 64-bit macho files,32- and 64-bit macho files,32- and 64-bit macho files,new volshell commands,detect got/plt overwrites,new plugin to print linux dynamic environment variables ,find hidden kernel extensions,extract process elf executables and libraries to disk,all process based plugins accept --name ,support for linux kernels through 3.16,profiling command history and console usage ,"crashinfo displays uptime, systemtime, and dump type",usage and development documentation,find hidden kernel modules,new plugin to dump registry files to disk ,"decrypt configurations for poison ivy, zeus, and citadel",linux string translation added,new output formatting support ,plugin enhancements,new plugin to print the shutdown time from the registry ,update the well known sids reported by the getsids plugin ,dump ssl private and public keys/certs,plugin additions,view the readme,view the readme,view the readme,view the readme,view the readme,view the readme,view the readme,"volshell plugin has new apis proc, addrspace, getprocs, and getmods for easy access",added the cmdline plugin to show process command line arguments ,over 40 new plugins!,improve handling of mprotect linux memory regions ,extract the html content of notes from the notes application 
CHANGELOG â€” rqalpha 4.3.x æ–‡æ¡£,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis ,support auto test with travis , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / , portfolio / account / / / ," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :"," from rqalpha import subscribe_event , :", pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / , pycharm / ,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,read the docs: private repos and priority support. try read the docs for business today!,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github,edit on github, api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / , api withdraw deposit / ,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *,from .account_model import *, tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , tick / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , price_limit / / , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl , / pnl ,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,3.0.8,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,changelog,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically,sponsored ads served ethically, ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api , ide from rqalpha.apis import * api ,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,hotfix unboundlocalerror: local variable 'signature' referenced before assignment,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,config = {,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import subscribe_event,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from rqalpha import run,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,from .position_model import *,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,import ,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix,scheduler bugfix," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , "," sharpe , sortino , information ratio , alpha , , , , ", from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command, from rqalpha import cli mod rqalpha command,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *,from rqalpha.api import *," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg "," sp, eg ", persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist , persist ,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78,fix issue 78, benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark , benchmark benchmark , benchmark , benchmark ,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api,api, api, api, api , api , api, api , api,api, api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , api subscribe_event api , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , python 2.x rqalpha requirements-py2.txt not found , order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, order = event.order, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, mod debug, rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , rqalpha mod uninstall pip 10.0 bug , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price , is_valid_price ,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :,3.x 2.x 3.x :, excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , excel csv , order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, order api, api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , api phase , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , order persist , api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api, api rqalpha api api,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs,read the docs, from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , from rqalpha import run rqalpha , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position , position position ,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous,previous, risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark , risk benchmark ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api ,portfolio api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api , symbol api ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades ,account fast_forward orders trades , rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111, rqalpha mod install xx mod mod_config.yml issue 111,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod ,fix env.config.mod mod , for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, for export_name in api_future.__all__:, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package, module rqalpha.core package,),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),),), clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , clone , python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding, python 2.x sys.setdefaultencoding,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest,latest, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api, # api,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:,def on_trade_handler:, mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , mod rqalpha_mod_sys_booking mod sys_booking mod readme , scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler, scheduler," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {"," ""base"": {", technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples , technical analysis examples ,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,fix issue 101,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod ,mod, mod, mod ,mod , mod mod , def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:, def start_up:,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,rqalpha 4.x 3.x mod ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 ,enhance issue 166 no-stock-t1 t + 1 , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api import * , run_func from rqalpha.api importfrom rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, from rqalpha import export_as_api api, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, # position, python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x , python 2.x ,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 82,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87,fix issue 87
Release Notes â€” nameko 2.12.0 documentation,"compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ","compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ","compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ","compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ","compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ","compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ","compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ","compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ","compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ","compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ","compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ","compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ","compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ","compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ","compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ","compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ","compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ","compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ","compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ","compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ","compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ","compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ","compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ","compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ","compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ","compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ","compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ","compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ","compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ","compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ","compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ","compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ","compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ","compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ","compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ","compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ","compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ","compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ","compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ","compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ","compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ","compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ","compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ","compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ","compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ","compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ","compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ","compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ","compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ","compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ","compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ","compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ","compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ","compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ","compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ","compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ","compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ","compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ","compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ","compatibility with kombu 4 and pyamqp 2+, minimum supported kombu version is now 4.2 ",enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,enhanced replace_dependencies to allow specific replacement values to be provided with named arguments.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,standalone rpc proxy interface changed to class with contextmanager interface and manual start and stop methods.,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,enhanced entrypoint_waiter. the new implementation is backwards compatible but additionally:,"environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.","environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.","environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.","environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.","environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.","environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.","environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.","environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.","environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.","environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.","environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.","environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.","environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.","environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.","environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.","environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.","environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.","environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.","environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.","environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.","environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.","environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.","environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.","environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.","environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.","environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.","environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.","environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.","environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.","environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.","environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.","environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.","environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.","environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.","environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.","environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.","environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.","environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.","environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.","environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.","environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.","environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.","environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.","environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.","environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.","environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.","environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.","environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.","environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.","environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.","environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.","environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.","environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.","environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.","environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.","environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.","environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.","environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.","environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.","environment variables substituted into config files are now interpreted as yaml rather than bare values, allowing use of rich data types.",entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,entrypoint providers handle_result is now able to manipulate and modify and return the tuple. this enables default post-processing ,now requires eventlet>=0.16.1 because older versions were removed from pypi,now requires eventlet>=0.16.1 because older versions were removed from pypi,now requires eventlet>=0.16.1 because older versions were removed from pypi,now requires eventlet>=0.16.1 because older versions were removed from pypi,now requires eventlet>=0.16.1 because older versions were removed from pypi,now requires eventlet>=0.16.1 because older versions were removed from pypi,now requires eventlet>=0.16.1 because older versions were removed from pypi,now requires eventlet>=0.16.1 because older versions were removed from pypi,now requires eventlet>=0.16.1 because older versions were removed from pypi,now requires eventlet>=0.16.1 because older versions were removed from pypi,now requires eventlet>=0.16.1 because older versions were removed from pypi,now requires eventlet>=0.16.1 because older versions were removed from pypi,now requires eventlet>=0.16.1 because older versions were removed from pypi,now requires eventlet>=0.16.1 because older versions were removed from pypi,now requires eventlet>=0.16.1 because older versions were removed from pypi,now requires eventlet>=0.16.1 because older versions were removed from pypi,now requires eventlet>=0.16.1 because older versions were removed from pypi,now requires eventlet>=0.16.1 because older versions were removed from pypi,now requires eventlet>=0.16.1 because older versions were removed from pypi,now requires eventlet>=0.16.1 because older versions were removed from pypi,now requires eventlet>=0.16.1 because older versions were removed from pypi,now requires eventlet>=0.16.1 because older versions were removed from pypi,now requires eventlet>=0.16.1 because older versions were removed from pypi,now requires eventlet>=0.16.1 because older versions were removed from pypi,now requires eventlet>=0.16.1 because older versions were removed from pypi,now requires eventlet>=0.16.1 because older versions were removed from pypi,now requires eventlet>=0.16.1 because older versions were removed from pypi,now requires eventlet>=0.16.1 because older versions were removed from pypi,now requires eventlet>=0.16.1 because older versions were removed from pypi,now requires eventlet>=0.16.1 because older versions were removed from pypi,now requires eventlet>=0.16.1 because older versions were removed from pypi,now requires eventlet>=0.16.1 because older versions were removed from pypi,now requires eventlet>=0.16.1 because older versions were removed from pypi,now requires eventlet>=0.16.1 because older versions were removed from pypi,now requires eventlet>=0.16.1 because older versions were removed from pypi,now requires eventlet>=0.16.1 because older versions were removed from pypi,now requires eventlet>=0.16.1 because older versions were removed from pypi,now requires eventlet>=0.16.1 because older versions were removed from pypi,now requires eventlet>=0.16.1 because older versions were removed from pypi,now requires eventlet>=0.16.1 because older versions were removed from pypi,now requires eventlet>=0.16.1 because older versions were removed from pypi,now requires eventlet>=0.16.1 because older versions were removed from pypi,now requires eventlet>=0.16.1 because older versions were removed from pypi,now requires eventlet>=0.16.1 because older versions were removed from pypi,now requires eventlet>=0.16.1 because older versions were removed from pypi,now requires eventlet>=0.16.1 because older versions were removed from pypi,now requires eventlet>=0.16.1 because older versions were removed from pypi,now requires eventlet>=0.16.1 because older versions were removed from pypi,now requires eventlet>=0.16.1 because older versions were removed from pypi,now requires eventlet>=0.16.1 because older versions were removed from pypi,now requires eventlet>=0.16.1 because older versions were removed from pypi,now requires eventlet>=0.16.1 because older versions were removed from pypi,now requires eventlet>=0.16.1 because older versions were removed from pypi,now requires eventlet>=0.16.1 because older versions were removed from pypi,now requires eventlet>=0.16.1 because older versions were removed from pypi,now requires eventlet>=0.16.1 because older versions were removed from pypi,now requires eventlet>=0.16.1 because older versions were removed from pypi,now requires eventlet>=0.16.1 because older versions were removed from pypi,now requires eventlet>=0.16.1 because older versions were removed from pypi,now requires eventlet>=0.16.1 because older versions were removed from pypi,timer is also improved to avoid drift ,timer is also improved to avoid drift ,timer is also improved to avoid drift ,timer is also improved to avoid drift ,timer is also improved to avoid drift ,timer is also improved to avoid drift ,timer is also improved to avoid drift ,timer is also improved to avoid drift ,timer is also improved to avoid drift ,timer is also improved to avoid drift ,timer is also improved to avoid drift ,timer is also improved to avoid drift ,timer is also improved to avoid drift ,timer is also improved to avoid drift ,timer is also improved to avoid drift ,timer is also improved to avoid drift ,timer is also improved to avoid drift ,timer is also improved to avoid drift ,timer is also improved to avoid drift ,timer is also improved to avoid drift ,timer is also improved to avoid drift ,timer is also improved to avoid drift ,timer is also improved to avoid drift ,timer is also improved to avoid drift ,timer is also improved to avoid drift ,timer is also improved to avoid drift ,timer is also improved to avoid drift ,timer is also improved to avoid drift ,timer is also improved to avoid drift ,timer is also improved to avoid drift ,timer is also improved to avoid drift ,timer is also improved to avoid drift ,timer is also improved to avoid drift ,timer is also improved to avoid drift ,timer is also improved to avoid drift ,timer is also improved to avoid drift ,timer is also improved to avoid drift ,timer is also improved to avoid drift ,timer is also improved to avoid drift ,timer is also improved to avoid drift ,timer is also improved to avoid drift ,timer is also improved to avoid drift ,timer is also improved to avoid drift ,timer is also improved to avoid drift ,timer is also improved to avoid drift ,timer is also improved to avoid drift ,timer is also improved to avoid drift ,timer is also improved to avoid drift ,timer is also improved to avoid drift ,timer is also improved to avoid drift ,timer is also improved to avoid drift ,timer is also improved to avoid drift ,timer is also improved to avoid drift ,timer is also improved to avoid drift ,timer is also improved to avoid drift ,timer is also improved to avoid drift ,timer is also improved to avoid drift ,timer is also improved to avoid drift ,timer is also improved to avoid drift ,timer is also improved to avoid drift ,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,raise incorrectsignature instead of remoteerror: typeerror if an rpc method is called with invalid arguments.,"remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","remove the context_keys attribute of the workercontext, which was previously used to whitelist worker context data passed from call to call. it was a feature that leaked from a specific implementation into the main framework, and not useful enough in its own right to continue to be supported.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.","class attributes for configuring use_confirms, retry and retry_policy have been deprecated from the publisher, eventdispatcher, and rpc methodproxy classes. if you were subclassing these classes to set these options, you should now set them at class instantiation time.",dropping headers with a none value because they can t be serialized by amqp,dropping headers with a none value because they can t be serialized by amqp,dropping headers with a none value because they can t be serialized by amqp,dropping headers with a none value because they can t be serialized by amqp,dropping headers with a none value because they can t be serialized by amqp,dropping headers with a none value because they can t be serialized by amqp,dropping headers with a none value because they can t be serialized by amqp,dropping headers with a none value because they can t be serialized by amqp,dropping headers with a none value because they can t be serialized by amqp,dropping headers with a none value because they can t be serialized by amqp,dropping headers with a none value because they can t be serialized by amqp,dropping headers with a none value because they can t be serialized by amqp,dropping headers with a none value because they can t be serialized by amqp,dropping headers with a none value because they can t be serialized by amqp,dropping headers with a none value because they can t be serialized by amqp,dropping headers with a none value because they can t be serialized by amqp,dropping headers with a none value because they can t be serialized by amqp,dropping headers with a none value because they can t be serialized by amqp,dropping headers with a none value because they can t be serialized by amqp,dropping headers with a none value because they can t be serialized by amqp,dropping headers with a none value because they can t be serialized by amqp,dropping headers with a none value because they can t be serialized by amqp,dropping headers with a none value because they can t be serialized by amqp,dropping headers with a none value because they can t be serialized by amqp,dropping headers with a none value because they can t be serialized by amqp,dropping headers with a none value because they can t be serialized by amqp,dropping headers with a none value because they can t be serialized by amqp,dropping headers with a none value because they can t be serialized by amqp,dropping headers with a none value because they can t be serialized by amqp,dropping headers with a none value because they can t be serialized by amqp,dropping headers with a none value because they can t be serialized by amqp,dropping headers with a none value because they can t be serialized by amqp,dropping headers with a none value because they can t be serialized by amqp,dropping headers with a none value because they can t be serialized by amqp,dropping headers with a none value because they can t be serialized by amqp,dropping headers with a none value because they can t be serialized by amqp,dropping headers with a none value because they can t be serialized by amqp,dropping headers with a none value because they can t be serialized by amqp,dropping headers with a none value because they can t be serialized by amqp,dropping headers with a none value because they can t be serialized by amqp,dropping headers with a none value because they can t be serialized by amqp,dropping headers with a none value because they can t be serialized by amqp,dropping headers with a none value because they can t be serialized by amqp,dropping headers with a none value because they can t be serialized by amqp,dropping headers with a none value because they can t be serialized by amqp,dropping headers with a none value because they can t be serialized by amqp,dropping headers with a none value because they can t be serialized by amqp,dropping headers with a none value because they can t be serialized by amqp,dropping headers with a none value because they can t be serialized by amqp,dropping headers with a none value because they can t be serialized by amqp,dropping headers with a none value because they can t be serialized by amqp,dropping headers with a none value because they can t be serialized by amqp,dropping headers with a none value because they can t be serialized by amqp,dropping headers with a none value because they can t be serialized by amqp,dropping headers with a none value because they can t be serialized by amqp,dropping headers with a none value because they can t be serialized by amqp,dropping headers with a none value because they can t be serialized by amqp,dropping headers with a none value because they can t be serialized by amqp,dropping headers with a none value because they can t be serialized by amqp,dropping headers with a none value because they can t be serialized by amqp,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,revert changes to legacy exception serialization to maintain backwards compatibility with old clients.,"deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.","deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.","deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.","deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.","deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.","deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.","deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.","deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.","deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.","deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.","deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.","deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.","deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.","deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.","deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.","deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.","deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.","deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.","deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.","deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.","deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.","deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.","deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.","deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.","deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.","deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.","deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.","deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.","deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.","deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.","deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.","deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.","deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.","deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.","deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.","deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.","deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.","deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.","deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.","deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.","deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.","deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.","deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.","deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.","deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.","deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.","deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.","deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.","deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.","deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.","deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.","deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.","deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.","deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.","deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.","deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.","deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.","deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.","deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.","deprecate the keyword arguments to run_services, servicecontainer and servicerunner.add_service for specifying a custom workercontext class. custom workercontext classes can now only be specified with a custom servicecontainer class that defines the worker_ctx_cls attribute.",add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,add a default implementation for acquire_injection for dependency providers that are used for side-effects rather than injecting dependencies.,"rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.","rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.","rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.","rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.","rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.","rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.","rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.","rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.","rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.","rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.","rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.","rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.","rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.","rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.","rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.","rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.","rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.","rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.","rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.","rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.","rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.","rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.","rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.","rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.","rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.","rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.","rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.","rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.","rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.","rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.","rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.","rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.","rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.","rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.","rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.","rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.","rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.","rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.","rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.","rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.","rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.","rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.","rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.","rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.","rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.","rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.","rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.","rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.","rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.","rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.","rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.","rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.","rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.","rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.","rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.","rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.","rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.","rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.","rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.","rpc reply queues are now set to expire rather than auto-delete, and are no longer exclusive, allowing clients reconnect. fixes #359.",enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enhanced :class: ~nameko.web.server.webserver with get_wsgi_app and get_wsgi_server to allow easy usage of wsgi middleware and modifications of the wsgi server.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,enabled reliable delivery on broadcast events when combined with a custom broadcast_identity. reliable delivery now defaults to enabled for all handler types. it must be explicitly turned off with broadcast mode unless you override the default broadcast_identity.,add pytest plugin with common fixtures,add pytest plugin with common fixtures,add pytest plugin with common fixtures,add pytest plugin with common fixtures,add pytest plugin with common fixtures,add pytest plugin with common fixtures,add pytest plugin with common fixtures,add pytest plugin with common fixtures,add pytest plugin with common fixtures,add pytest plugin with common fixtures,add pytest plugin with common fixtures,add pytest plugin with common fixtures,add pytest plugin with common fixtures,add pytest plugin with common fixtures,add pytest plugin with common fixtures,add pytest plugin with common fixtures,add pytest plugin with common fixtures,add pytest plugin with common fixtures,add pytest plugin with common fixtures,add pytest plugin with common fixtures,add pytest plugin with common fixtures,add pytest plugin with common fixtures,add pytest plugin with common fixtures,add pytest plugin with common fixtures,add pytest plugin with common fixtures,add pytest plugin with common fixtures,add pytest plugin with common fixtures,add pytest plugin with common fixtures,add pytest plugin with common fixtures,add pytest plugin with common fixtures,add pytest plugin with common fixtures,add pytest plugin with common fixtures,add pytest plugin with common fixtures,add pytest plugin with common fixtures,add pytest plugin with common fixtures,add pytest plugin with common fixtures,add pytest plugin with common fixtures,add pytest plugin with common fixtures,add pytest plugin with common fixtures,add pytest plugin with common fixtures,add pytest plugin with common fixtures,add pytest plugin with common fixtures,add pytest plugin with common fixtures,add pytest plugin with common fixtures,add pytest plugin with common fixtures,add pytest plugin with common fixtures,add pytest plugin with common fixtures,add pytest plugin with common fixtures,add pytest plugin with common fixtures,add pytest plugin with common fixtures,add pytest plugin with common fixtures,add pytest plugin with common fixtures,add pytest plugin with common fixtures,add pytest plugin with common fixtures,add pytest plugin with common fixtures,add pytest plugin with common fixtures,add pytest plugin with common fixtures,add pytest plugin with common fixtures,add pytest plugin with common fixtures,add pytest plugin with common fixtures,"rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.","rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.","rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.","rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.","rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.","rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.","rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.","rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.","rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.","rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.","rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.","rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.","rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.","rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.","rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.","rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.","rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.","rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.","rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.","rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.","rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.","rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.","rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.","rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.","rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.","rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.","rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.","rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.","rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.","rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.","rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.","rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.","rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.","rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.","rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.","rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.","rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.","rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.","rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.","rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.","rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.","rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.","rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.","rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.","rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.","rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.","rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.","rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.","rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.","rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.","rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.","rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.","rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.","rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.","rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.","rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.","rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.","rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.","rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.","rename the standalone rpc proxy to servicerpcproxy and add a clusterrpcproxy, using a single reply queue for communicating with multiple remote services.",added cli and console script,added cli and console script,added cli and console script,added cli and console script,added cli and console script,added cli and console script,added cli and console script,added cli and console script,added cli and console script,added cli and console script,added cli and console script,added cli and console script,added cli and console script,added cli and console script,added cli and console script,added cli and console script,added cli and console script,added cli and console script,added cli and console script,added cli and console script,added cli and console script,added cli and console script,added cli and console script,added cli and console script,added cli and console script,added cli and console script,added cli and console script,added cli and console script,added cli and console script,added cli and console script,added cli and console script,added cli and console script,added cli and console script,added cli and console script,added cli and console script,added cli and console script,added cli and console script,added cli and console script,added cli and console script,added cli and console script,added cli and console script,added cli and console script,added cli and console script,added cli and console script,added cli and console script,added cli and console script,added cli and console script,added cli and console script,added cli and console script,added cli and console script,added cli and console script,added cli and console script,added cli and console script,added cli and console script,added cli and console script,added cli and console script,added cli and console script,added cli and console script,added cli and console script,added cli and console script,environment variables are now interpreted as native yaml data types rather than just strings,environment variables are now interpreted as native yaml data types rather than just strings,environment variables are now interpreted as native yaml data types rather than just strings,environment variables are now interpreted as native yaml data types rather than just strings,environment variables are now interpreted as native yaml data types rather than just strings,environment variables are now interpreted as native yaml data types rather than just strings,environment variables are now interpreted as native yaml data types rather than just strings,environment variables are now interpreted as native yaml data types rather than just strings,environment variables are now interpreted as native yaml data types rather than just strings,environment variables are now interpreted as native yaml data types rather than just strings,environment variables are now interpreted as native yaml data types rather than just strings,environment variables are now interpreted as native yaml data types rather than just strings,environment variables are now interpreted as native yaml data types rather than just strings,environment variables are now interpreted as native yaml data types rather than just strings,environment variables are now interpreted as native yaml data types rather than just strings,environment variables are now interpreted as native yaml data types rather than just strings,environment variables are now interpreted as native yaml data types rather than just strings,environment variables are now interpreted as native yaml data types rather than just strings,environment variables are now interpreted as native yaml data types rather than just strings,environment variables are now interpreted as native yaml data types rather than just strings,environment variables are now interpreted as native yaml data types rather than just strings,environment variables are now interpreted as native yaml data types rather than just strings,environment variables are now interpreted as native yaml data types rather than just strings,environment variables are now interpreted as native yaml data types rather than just strings,environment variables are now interpreted as native yaml data types rather than just strings,environment variables are now interpreted as native yaml data types rather than just strings,environment variables are now interpreted as native yaml data types rather than just strings,environment variables are now interpreted as native yaml data types rather than just strings,environment variables are now interpreted as native yaml data types rather than just strings,environment variables are now interpreted as native yaml data types rather than just strings,environment variables are now interpreted as native yaml data types rather than just strings,environment variables are now interpreted as native yaml data types rather than just strings,environment variables are now interpreted as native yaml data types rather than just strings,environment variables are now interpreted as native yaml data types rather than just strings,environment variables are now interpreted as native yaml data types rather than just strings,environment variables are now interpreted as native yaml data types rather than just strings,environment variables are now interpreted as native yaml data types rather than just strings,environment variables are now interpreted as native yaml data types rather than just strings,environment variables are now interpreted as native yaml data types rather than just strings,environment variables are now interpreted as native yaml data types rather than just strings,environment variables are now interpreted as native yaml data types rather than just strings,environment variables are now interpreted as native yaml data types rather than just strings,environment variables are now interpreted as native yaml data types rather than just strings,environment variables are now interpreted as native yaml data types rather than just strings,environment variables are now interpreted as native yaml data types rather than just strings,environment variables are now interpreted as native yaml data types rather than just strings,environment variables are now interpreted as native yaml data types rather than just strings,environment variables are now interpreted as native yaml data types rather than just strings,environment variables are now interpreted as native yaml data types rather than just strings,environment variables are now interpreted as native yaml data types rather than just strings,environment variables are now interpreted as native yaml data types rather than just strings,environment variables are now interpreted as native yaml data types rather than just strings,environment variables are now interpreted as native yaml data types rather than just strings,environment variables are now interpreted as native yaml data types rather than just strings,environment variables are now interpreted as native yaml data types rather than just strings,environment variables are now interpreted as native yaml data types rather than just strings,environment variables are now interpreted as native yaml data types rather than just strings,environment variables are now interpreted as native yaml data types rather than just strings,environment variables are now interpreted as native yaml data types rather than just strings,environment variables are now interpreted as native yaml data types rather than just strings,fix examples in documentation and add tests to prevent future breakage,fix examples in documentation and add tests to prevent future breakage,fix examples in documentation and add tests to prevent future breakage,fix examples in documentation and add tests to prevent future breakage,fix examples in documentation and add tests to prevent future breakage,fix examples in documentation and add tests to prevent future breakage,fix examples in documentation and add tests to prevent future breakage,fix examples in documentation and add tests to prevent future breakage,fix examples in documentation and add tests to prevent future breakage,fix examples in documentation and add tests to prevent future breakage,fix examples in documentation and add tests to prevent future breakage,fix examples in documentation and add tests to prevent future breakage,fix examples in documentation and add tests to prevent future breakage,fix examples in documentation and add tests to prevent future breakage,fix examples in documentation and add tests to prevent future breakage,fix examples in documentation and add tests to prevent future breakage,fix examples in documentation and add tests to prevent future breakage,fix examples in documentation and add tests to prevent future breakage,fix examples in documentation and add tests to prevent future breakage,fix examples in documentation and add tests to prevent future breakage,fix examples in documentation and add tests to prevent future breakage,fix examples in documentation and add tests to prevent future breakage,fix examples in documentation and add tests to prevent future breakage,fix examples in documentation and add tests to prevent future breakage,fix examples in documentation and add tests to prevent future breakage,fix examples in documentation and add tests to prevent future breakage,fix examples in documentation and add tests to prevent future breakage,fix examples in documentation and add tests to prevent future breakage,fix examples in documentation and add tests to prevent future breakage,fix examples in documentation and add tests to prevent future breakage,fix examples in documentation and add tests to prevent future breakage,fix examples in documentation and add tests to prevent future breakage,fix examples in documentation and add tests to prevent future breakage,fix examples in documentation and add tests to prevent future breakage,fix examples in documentation and add tests to prevent future breakage,fix examples in documentation and add tests to prevent future breakage,fix examples in documentation and add tests to prevent future breakage,fix examples in documentation and add tests to prevent future breakage,fix examples in documentation and add tests to prevent future breakage,fix examples in documentation and add tests to prevent future breakage,fix examples in documentation and add tests to prevent future breakage,fix examples in documentation and add tests to prevent future breakage,fix examples in documentation and add tests to prevent future breakage,fix examples in documentation and add tests to prevent future breakage,fix examples in documentation and add tests to prevent future breakage,fix examples in documentation and add tests to prevent future breakage,fix examples in documentation and add tests to prevent future breakage,fix examples in documentation and add tests to prevent future breakage,fix examples in documentation and add tests to prevent future breakage,fix examples in documentation and add tests to prevent future breakage,fix examples in documentation and add tests to prevent future breakage,fix examples in documentation and add tests to prevent future breakage,fix examples in documentation and add tests to prevent future breakage,fix examples in documentation and add tests to prevent future breakage,fix examples in documentation and add tests to prevent future breakage,fix examples in documentation and add tests to prevent future breakage,fix examples in documentation and add tests to prevent future breakage,fix examples in documentation and add tests to prevent future breakage,fix examples in documentation and add tests to prevent future breakage,fix examples in documentation and add tests to prevent future breakage,changed httprequesthandler to allow override how web exceptions are handled,changed httprequesthandler to allow override how web exceptions are handled,changed httprequesthandler to allow override how web exceptions are handled,changed httprequesthandler to allow override how web exceptions are handled,changed httprequesthandler to allow override how web exceptions are handled,changed httprequesthandler to allow override how web exceptions are handled,changed httprequesthandler to allow override how web exceptions are handled,changed httprequesthandler to allow override how web exceptions are handled,changed httprequesthandler to allow override how web exceptions are handled,changed httprequesthandler to allow override how web exceptions are handled,changed httprequesthandler to allow override how web exceptions are handled,changed httprequesthandler to allow override how web exceptions are handled,changed httprequesthandler to allow override how web exceptions are handled,changed httprequesthandler to allow override how web exceptions are handled,changed httprequesthandler to allow override how web exceptions are handled,changed httprequesthandler to allow override how web exceptions are handled,changed httprequesthandler to allow override how web exceptions are handled,changed httprequesthandler to allow override how web exceptions are handled,changed httprequesthandler to allow override how web exceptions are handled,changed httprequesthandler to allow override how web exceptions are handled,changed httprequesthandler to allow override how web exceptions are handled,changed httprequesthandler to allow override how web exceptions are handled,changed httprequesthandler to allow override how web exceptions are handled,changed httprequesthandler to allow override how web exceptions are handled,changed httprequesthandler to allow override how web exceptions are handled,changed httprequesthandler to allow override how web exceptions are handled,changed httprequesthandler to allow override how web exceptions are handled,changed httprequesthandler to allow override how web exceptions are handled,changed httprequesthandler to allow override how web exceptions are handled,changed httprequesthandler to allow override how web exceptions are handled,changed httprequesthandler to allow override how web exceptions are handled,changed httprequesthandler to allow override how web exceptions are handled,changed httprequesthandler to allow override how web exceptions are handled,changed httprequesthandler to allow override how web exceptions are handled,changed httprequesthandler to allow override how web exceptions are handled,changed httprequesthandler to allow override how web exceptions are handled,changed httprequesthandler to allow override how web exceptions are handled,changed httprequesthandler to allow override how web exceptions are handled,changed httprequesthandler to allow override how web exceptions are handled,changed httprequesthandler to allow override how web exceptions are handled,changed httprequesthandler to allow override how web exceptions are handled,changed httprequesthandler to allow override how web exceptions are handled,changed httprequesthandler to allow override how web exceptions are handled,changed httprequesthandler to allow override how web exceptions are handled,changed httprequesthandler to allow override how web exceptions are handled,changed httprequesthandler to allow override how web exceptions are handled,changed httprequesthandler to allow override how web exceptions are handled,changed httprequesthandler to allow override how web exceptions are handled,changed httprequesthandler to allow override how web exceptions are handled,changed httprequesthandler to allow override how web exceptions are handled,changed httprequesthandler to allow override how web exceptions are handled,changed httprequesthandler to allow override how web exceptions are handled,changed httprequesthandler to allow override how web exceptions are handled,changed httprequesthandler to allow override how web exceptions are handled,changed httprequesthandler to allow override how web exceptions are handled,changed httprequesthandler to allow override how web exceptions are handled,changed httprequesthandler to allow override how web exceptions are handled,changed httprequesthandler to allow override how web exceptions are handled,changed httprequesthandler to allow override how web exceptions are handled,changed httprequesthandler to allow override how web exceptions are handled,use inspect.getcallargs instead of shadow lambda for rpc argument checking,use inspect.getcallargs instead of shadow lambda for rpc argument checking,use inspect.getcallargs instead of shadow lambda for rpc argument checking,use inspect.getcallargs instead of shadow lambda for rpc argument checking,use inspect.getcallargs instead of shadow lambda for rpc argument checking,use inspect.getcallargs instead of shadow lambda for rpc argument checking,use inspect.getcallargs instead of shadow lambda for rpc argument checking,use inspect.getcallargs instead of shadow lambda for rpc argument checking,use inspect.getcallargs instead of shadow lambda for rpc argument checking,use inspect.getcallargs instead of shadow lambda for rpc argument checking,use inspect.getcallargs instead of shadow lambda for rpc argument checking,use inspect.getcallargs instead of shadow lambda for rpc argument checking,use inspect.getcallargs instead of shadow lambda for rpc argument checking,use inspect.getcallargs instead of shadow lambda for rpc argument checking,use inspect.getcallargs instead of shadow lambda for rpc argument checking,use inspect.getcallargs instead of shadow lambda for rpc argument checking,use inspect.getcallargs instead of shadow lambda for rpc argument checking,use inspect.getcallargs instead of shadow lambda for rpc argument checking,use inspect.getcallargs instead of shadow lambda for rpc argument checking,use inspect.getcallargs instead of shadow lambda for rpc argument checking,use inspect.getcallargs instead of shadow lambda for rpc argument checking,use inspect.getcallargs instead of shadow lambda for rpc argument checking,use inspect.getcallargs instead of shadow lambda for rpc argument checking,use inspect.getcallargs instead of shadow lambda for rpc argument checking,use inspect.getcallargs instead of shadow lambda for rpc argument checking,use inspect.getcallargs instead of shadow lambda for rpc argument checking,use inspect.getcallargs instead of shadow lambda for rpc argument checking,use inspect.getcallargs instead of shadow lambda for rpc argument checking,use inspect.getcallargs instead of shadow lambda for rpc argument checking,use inspect.getcallargs instead of shadow lambda for rpc argument checking,use inspect.getcallargs instead of shadow lambda for rpc argument checking,use inspect.getcallargs instead of shadow lambda for rpc argument checking,use inspect.getcallargs instead of shadow lambda for rpc argument checking,use inspect.getcallargs instead of shadow lambda for rpc argument checking,use inspect.getcallargs instead of shadow lambda for rpc argument checking,use inspect.getcallargs instead of shadow lambda for rpc argument checking,use inspect.getcallargs instead of shadow lambda for rpc argument checking,use inspect.getcallargs instead of shadow lambda for rpc argument checking,use inspect.getcallargs instead of shadow lambda for rpc argument checking,use inspect.getcallargs instead of shadow lambda for rpc argument checking,use inspect.getcallargs instead of shadow lambda for rpc argument checking,use inspect.getcallargs instead of shadow lambda for rpc argument checking,use inspect.getcallargs instead of shadow lambda for rpc argument checking,use inspect.getcallargs instead of shadow lambda for rpc argument checking,use inspect.getcallargs instead of shadow lambda for rpc argument checking,use inspect.getcallargs instead of shadow lambda for rpc argument checking,use inspect.getcallargs instead of shadow lambda for rpc argument checking,use inspect.getcallargs instead of shadow lambda for rpc argument checking,use inspect.getcallargs instead of shadow lambda for rpc argument checking,use inspect.getcallargs instead of shadow lambda for rpc argument checking,use inspect.getcallargs instead of shadow lambda for rpc argument checking,use inspect.getcallargs instead of shadow lambda for rpc argument checking,use inspect.getcallargs instead of shadow lambda for rpc argument checking,use inspect.getcallargs instead of shadow lambda for rpc argument checking,use inspect.getcallargs instead of shadow lambda for rpc argument checking,use inspect.getcallargs instead of shadow lambda for rpc argument checking,use inspect.getcallargs instead of shadow lambda for rpc argument checking,use inspect.getcallargs instead of shadow lambda for rpc argument checking,use inspect.getcallargs instead of shadow lambda for rpc argument checking,use inspect.getcallargs instead of shadow lambda for rpc argument checking,"spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.","spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.","spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.","spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.","spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.","spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.","spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.","spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.","spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.","spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.","spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.","spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.","spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.","spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.","spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.","spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.","spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.","spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.","spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.","spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.","spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.","spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.","spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.","spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.","spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.","spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.","spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.","spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.","spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.","spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.","spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.","spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.","spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.","spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.","spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.","spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.","spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.","spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.","spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.","spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.","spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.","spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.","spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.","spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.","spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.","spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.","spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.","spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.","spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.","spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.","spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.","spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.","spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.","spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.","spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.","spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.","spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.","spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.","spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.","spawn_worker now throws containerbeingkilled if a kill is in progress, since some providers may already be dead. providers should catch this and e.g. requeue rpc messages. there is a race condition between completing the kill sequence and remaining entrypoints firing.",fixes compatibility with latest bpython and ipython shells ,fixes compatibility with latest bpython and ipython shells ,fixes compatibility with latest bpython and ipython shells ,fixes compatibility with latest bpython and ipython shells ,fixes compatibility with latest bpython and ipython shells ,fixes compatibility with latest bpython and ipython shells ,fixes compatibility with latest bpython and ipython shells ,fixes compatibility with latest bpython and ipython shells ,fixes compatibility with latest bpython and ipython shells ,fixes compatibility with latest bpython and ipython shells ,fixes compatibility with latest bpython and ipython shells ,fixes compatibility with latest bpython and ipython shells ,fixes compatibility with latest bpython and ipython shells ,fixes compatibility with latest bpython and ipython shells ,fixes compatibility with latest bpython and ipython shells ,fixes compatibility with latest bpython and ipython shells ,fixes compatibility with latest bpython and ipython shells ,fixes compatibility with latest bpython and ipython shells ,fixes compatibility with latest bpython and ipython shells ,fixes compatibility with latest bpython and ipython shells ,fixes compatibility with latest bpython and ipython shells ,fixes compatibility with latest bpython and ipython shells ,fixes compatibility with latest bpython and ipython shells ,fixes compatibility with latest bpython and ipython shells ,fixes compatibility with latest bpython and ipython shells ,fixes compatibility with latest bpython and ipython shells ,fixes compatibility with latest bpython and ipython shells ,fixes compatibility with latest bpython and ipython shells ,fixes compatibility with latest bpython and ipython shells ,fixes compatibility with latest bpython and ipython shells ,fixes compatibility with latest bpython and ipython shells ,fixes compatibility with latest bpython and ipython shells ,fixes compatibility with latest bpython and ipython shells ,fixes compatibility with latest bpython and ipython shells ,fixes compatibility with latest bpython and ipython shells ,fixes compatibility with latest bpython and ipython shells ,fixes compatibility with latest bpython and ipython shells ,fixes compatibility with latest bpython and ipython shells ,fixes compatibility with latest bpython and ipython shells ,fixes compatibility with latest bpython and ipython shells ,fixes compatibility with latest bpython and ipython shells ,fixes compatibility with latest bpython and ipython shells ,fixes compatibility with latest bpython and ipython shells ,fixes compatibility with latest bpython and ipython shells ,fixes compatibility with latest bpython and ipython shells ,fixes compatibility with latest bpython and ipython shells ,fixes compatibility with latest bpython and ipython shells ,fixes compatibility with latest bpython and ipython shells ,fixes compatibility with latest bpython and ipython shells ,fixes compatibility with latest bpython and ipython shells ,fixes compatibility with latest bpython and ipython shells ,fixes compatibility with latest bpython and ipython shells ,fixes compatibility with latest bpython and ipython shells ,fixes compatibility with latest bpython and ipython shells ,fixes compatibility with latest bpython and ipython shells ,fixes compatibility with latest bpython and ipython shells ,fixes compatibility with latest bpython and ipython shells ,fixes compatibility with latest bpython and ipython shells ,fixes compatibility with latest bpython and ipython shells ,fixes compatibility with latest bpython and ipython shells ,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,rpc calls to non-existent services now raise an exception instead of hanging indefinitely. note that calls to existing but non-running services behave as before.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,refactor servicecontainer internals for better separation between managed and worker threads. improved logging when threads are killed.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,remove the pytest log-level argument added by the pytest plugin since this conflicts with newer versions of pytest . for older versions this can be restored by installing the pytest-catchlog package.,"now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.","now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.","now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.","now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.","now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.","now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.","now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.","now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.","now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.","now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.","now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.","now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.","now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.","now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.","now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.","now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.","now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.","now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.","now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.","now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.","now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.","now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.","now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.","now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.","now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.","now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.","now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.","now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.","now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.","now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.","now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.","now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.","now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.","now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.","now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.","now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.","now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.","now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.","now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.","now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.","now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.","now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.","now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.","now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.","now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.","now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.","now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.","now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.","now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.","now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.","now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.","now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.","now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.","now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.","now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.","now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.","now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.","now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.","now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.","now passing exc_info tuples instead of bare exceptions to worker_result and handle_result, to enable exception processing in non-worker greenthreads.",added http entrypoints and experimental websocket support ,added http entrypoints and experimental websocket support ,added http entrypoints and experimental websocket support ,added http entrypoints and experimental websocket support ,added http entrypoints and experimental websocket support ,added http entrypoints and experimental websocket support ,added http entrypoints and experimental websocket support ,added http entrypoints and experimental websocket support ,added http entrypoints and experimental websocket support ,added http entrypoints and experimental websocket support ,added http entrypoints and experimental websocket support ,added http entrypoints and experimental websocket support ,added http entrypoints and experimental websocket support ,added http entrypoints and experimental websocket support ,added http entrypoints and experimental websocket support ,added http entrypoints and experimental websocket support ,added http entrypoints and experimental websocket support ,added http entrypoints and experimental websocket support ,added http entrypoints and experimental websocket support ,added http entrypoints and experimental websocket support ,added http entrypoints and experimental websocket support ,added http entrypoints and experimental websocket support ,added http entrypoints and experimental websocket support ,added http entrypoints and experimental websocket support ,added http entrypoints and experimental websocket support ,added http entrypoints and experimental websocket support ,added http entrypoints and experimental websocket support ,added http entrypoints and experimental websocket support ,added http entrypoints and experimental websocket support ,added http entrypoints and experimental websocket support ,added http entrypoints and experimental websocket support ,added http entrypoints and experimental websocket support ,added http entrypoints and experimental websocket support ,added http entrypoints and experimental websocket support ,added http entrypoints and experimental websocket support ,added http entrypoints and experimental websocket support ,added http entrypoints and experimental websocket support ,added http entrypoints and experimental websocket support ,added http entrypoints and experimental websocket support ,added http entrypoints and experimental websocket support ,added http entrypoints and experimental websocket support ,added http entrypoints and experimental websocket support ,added http entrypoints and experimental websocket support ,added http entrypoints and experimental websocket support ,added http entrypoints and experimental websocket support ,added http entrypoints and experimental websocket support ,added http entrypoints and experimental websocket support ,added http entrypoints and experimental websocket support ,added http entrypoints and experimental websocket support ,added http entrypoints and experimental websocket support ,added http entrypoints and experimental websocket support ,added http entrypoints and experimental websocket support ,added http entrypoints and experimental websocket support ,added http entrypoints and experimental websocket support ,added http entrypoints and experimental websocket support ,added http entrypoints and experimental websocket support ,added http entrypoints and experimental websocket support ,added http entrypoints and experimental websocket support ,added http entrypoints and experimental websocket support ,added http entrypoints and experimental websocket support ,the wsgi server now uses an explicit logger so it can be controlled using a logging config,the wsgi server now uses an explicit logger so it can be controlled using a logging config,the wsgi server now uses an explicit logger so it can be controlled using a logging config,the wsgi server now uses an explicit logger so it can be controlled using a logging config,the wsgi server now uses an explicit logger so it can be controlled using a logging config,the wsgi server now uses an explicit logger so it can be controlled using a logging config,the wsgi server now uses an explicit logger so it can be controlled using a logging config,the wsgi server now uses an explicit logger so it can be controlled using a logging config,the wsgi server now uses an explicit logger so it can be controlled using a logging config,the wsgi server now uses an explicit logger so it can be controlled using a logging config,the wsgi server now uses an explicit logger so it can be controlled using a logging config,the wsgi server now uses an explicit logger so it can be controlled using a logging config,the wsgi server now uses an explicit logger so it can be controlled using a logging config,the wsgi server now uses an explicit logger so it can be controlled using a logging config,the wsgi server now uses an explicit logger so it can be controlled using a logging config,the wsgi server now uses an explicit logger so it can be controlled using a logging config,the wsgi server now uses an explicit logger so it can be controlled using a logging config,the wsgi server now uses an explicit logger so it can be controlled using a logging config,the wsgi server now uses an explicit logger so it can be controlled using a logging config,the wsgi server now uses an explicit logger so it can be controlled using a logging config,the wsgi server now uses an explicit logger so it can be controlled using a logging config,the wsgi server now uses an explicit logger so it can be controlled using a logging config,the wsgi server now uses an explicit logger so it can be controlled using a logging config,the wsgi server now uses an explicit logger so it can be controlled using a logging config,the wsgi server now uses an explicit logger so it can be controlled using a logging config,the wsgi server now uses an explicit logger so it can be controlled using a logging config,the wsgi server now uses an explicit logger so it can be controlled using a logging config,the wsgi server now uses an explicit logger so it can be controlled using a logging config,the wsgi server now uses an explicit logger so it can be controlled using a logging config,the wsgi server now uses an explicit logger so it can be controlled using a logging config,the wsgi server now uses an explicit logger so it can be controlled using a logging config,the wsgi server now uses an explicit logger so it can be controlled using a logging config,the wsgi server now uses an explicit logger so it can be controlled using a logging config,the wsgi server now uses an explicit logger so it can be controlled using a logging config,the wsgi server now uses an explicit logger so it can be controlled using a logging config,the wsgi server now uses an explicit logger so it can be controlled using a logging config,the wsgi server now uses an explicit logger so it can be controlled using a logging config,the wsgi server now uses an explicit logger so it can be controlled using a logging config,the wsgi server now uses an explicit logger so it can be controlled using a logging config,the wsgi server now uses an explicit logger so it can be controlled using a logging config,the wsgi server now uses an explicit logger so it can be controlled using a logging config,the wsgi server now uses an explicit logger so it can be controlled using a logging config,the wsgi server now uses an explicit logger so it can be controlled using a logging config,the wsgi server now uses an explicit logger so it can be controlled using a logging config,the wsgi server now uses an explicit logger so it can be controlled using a logging config,the wsgi server now uses an explicit logger so it can be controlled using a logging config,the wsgi server now uses an explicit logger so it can be controlled using a logging config,the wsgi server now uses an explicit logger so it can be controlled using a logging config,the wsgi server now uses an explicit logger so it can be controlled using a logging config,the wsgi server now uses an explicit logger so it can be controlled using a logging config,the wsgi server now uses an explicit logger so it can be controlled using a logging config,the wsgi server now uses an explicit logger so it can be controlled using a logging config,the wsgi server now uses an explicit logger so it can be controlled using a logging config,the wsgi server now uses an explicit logger so it can be controlled using a logging config,the wsgi server now uses an explicit logger so it can be controlled using a logging config,the wsgi server now uses an explicit logger so it can be controlled using a logging config,the wsgi server now uses an explicit logger so it can be controlled using a logging config,the wsgi server now uses an explicit logger so it can be controlled using a logging config,the wsgi server now uses an explicit logger so it can be controlled using a logging config,the wsgi server now uses an explicit logger so it can be controlled using a logging config,compatibility with latest dependencies ,compatibility with latest dependencies ,compatibility with latest dependencies ,compatibility with latest dependencies ,compatibility with latest dependencies ,compatibility with latest dependencies ,compatibility with latest dependencies ,compatibility with latest dependencies ,compatibility with latest dependencies ,compatibility with latest dependencies ,compatibility with latest dependencies ,compatibility with latest dependencies ,compatibility with latest dependencies ,compatibility with latest dependencies ,compatibility with latest dependencies ,compatibility with latest dependencies ,compatibility with latest dependencies ,compatibility with latest dependencies ,compatibility with latest dependencies ,compatibility with latest dependencies ,compatibility with latest dependencies ,compatibility with latest dependencies ,compatibility with latest dependencies ,compatibility with latest dependencies ,compatibility with latest dependencies ,compatibility with latest dependencies ,compatibility with latest dependencies ,compatibility with latest dependencies ,compatibility with latest dependencies ,compatibility with latest dependencies ,compatibility with latest dependencies ,compatibility with latest dependencies ,compatibility with latest dependencies ,compatibility with latest dependencies ,compatibility with latest dependencies ,compatibility with latest dependencies ,compatibility with latest dependencies ,compatibility with latest dependencies ,compatibility with latest dependencies ,compatibility with latest dependencies ,compatibility with latest dependencies ,compatibility with latest dependencies ,compatibility with latest dependencies ,compatibility with latest dependencies ,compatibility with latest dependencies ,compatibility with latest dependencies ,compatibility with latest dependencies ,compatibility with latest dependencies ,compatibility with latest dependencies ,compatibility with latest dependencies ,compatibility with latest dependencies ,compatibility with latest dependencies ,compatibility with latest dependencies ,compatibility with latest dependencies ,compatibility with latest dependencies ,compatibility with latest dependencies ,compatibility with latest dependencies ,compatibility with latest dependencies ,compatibility with latest dependencies ,compatibility with latest dependencies ,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,add the ability to specify a custom servicecontainer class via config key. deprecate the keyword arguments to servicerunner and run_services for the same purpose.,introduced rpc entrypoints compatible with the legacy proxy.,introduced rpc entrypoints compatible with the legacy proxy.,introduced rpc entrypoints compatible with the legacy proxy.,introduced rpc entrypoints compatible with the legacy proxy.,introduced rpc entrypoints compatible with the legacy proxy.,introduced rpc entrypoints compatible with the legacy proxy.,introduced rpc entrypoints compatible with the legacy proxy.,introduced rpc entrypoints compatible with the legacy proxy.,introduced rpc entrypoints compatible with the legacy proxy.,introduced rpc entrypoints compatible with the legacy proxy.,introduced rpc entrypoints compatible with the legacy proxy.,introduced rpc entrypoints compatible with the legacy proxy.,introduced rpc entrypoints compatible with the legacy proxy.,introduced rpc entrypoints compatible with the legacy proxy.,introduced rpc entrypoints compatible with the legacy proxy.,introduced rpc entrypoints compatible with the legacy proxy.,introduced rpc entrypoints compatible with the legacy proxy.,introduced rpc entrypoints compatible with the legacy proxy.,introduced rpc entrypoints compatible with the legacy proxy.,introduced rpc entrypoints compatible with the legacy proxy.,introduced rpc entrypoints compatible with the legacy proxy.,introduced rpc entrypoints compatible with the legacy proxy.,introduced rpc entrypoints compatible with the legacy proxy.,introduced rpc entrypoints compatible with the legacy proxy.,introduced rpc entrypoints compatible with the legacy proxy.,introduced rpc entrypoints compatible with the legacy proxy.,introduced rpc entrypoints compatible with the legacy proxy.,introduced rpc entrypoints compatible with the legacy proxy.,introduced rpc entrypoints compatible with the legacy proxy.,introduced rpc entrypoints compatible with the legacy proxy.,introduced rpc entrypoints compatible with the legacy proxy.,introduced rpc entrypoints compatible with the legacy proxy.,introduced rpc entrypoints compatible with the legacy proxy.,introduced rpc entrypoints compatible with the legacy proxy.,introduced rpc entrypoints compatible with the legacy proxy.,introduced rpc entrypoints compatible with the legacy proxy.,introduced rpc entrypoints compatible with the legacy proxy.,introduced rpc entrypoints compatible with the legacy proxy.,introduced rpc entrypoints compatible with the legacy proxy.,introduced rpc entrypoints compatible with the legacy proxy.,introduced rpc entrypoints compatible with the legacy proxy.,introduced rpc entrypoints compatible with the legacy proxy.,introduced rpc entrypoints compatible with the legacy proxy.,introduced rpc entrypoints compatible with the legacy proxy.,introduced rpc entrypoints compatible with the legacy proxy.,introduced rpc entrypoints compatible with the legacy proxy.,introduced rpc entrypoints compatible with the legacy proxy.,introduced rpc entrypoints compatible with the legacy proxy.,introduced rpc entrypoints compatible with the legacy proxy.,introduced rpc entrypoints compatible with the legacy proxy.,introduced rpc entrypoints compatible with the legacy proxy.,introduced rpc entrypoints compatible with the legacy proxy.,introduced rpc entrypoints compatible with the legacy proxy.,introduced rpc entrypoints compatible with the legacy proxy.,introduced rpc entrypoints compatible with the legacy proxy.,introduced rpc entrypoints compatible with the legacy proxy.,introduced rpc entrypoints compatible with the legacy proxy.,introduced rpc entrypoints compatible with the legacy proxy.,introduced rpc entrypoints compatible with the legacy proxy.,introduced rpc entrypoints compatible with the legacy proxy.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,add expected_exceptions kwarg to the rpc entrypoint to enable different exception handling for user vs system errors.,enables publish confirms by default for all amqp message publishers,enables publish confirms by default for all amqp message publishers,enables publish confirms by default for all amqp message publishers,enables publish confirms by default for all amqp message publishers,enables publish confirms by default for all amqp message publishers,enables publish confirms by default for all amqp message publishers,enables publish confirms by default for all amqp message publishers,enables publish confirms by default for all amqp message publishers,enables publish confirms by default for all amqp message publishers,enables publish confirms by default for all amqp message publishers,enables publish confirms by default for all amqp message publishers,enables publish confirms by default for all amqp message publishers,enables publish confirms by default for all amqp message publishers,enables publish confirms by default for all amqp message publishers,enables publish confirms by default for all amqp message publishers,enables publish confirms by default for all amqp message publishers,enables publish confirms by default for all amqp message publishers,enables publish confirms by default for all amqp message publishers,enables publish confirms by default for all amqp message publishers,enables publish confirms by default for all amqp message publishers,enables publish confirms by default for all amqp message publishers,enables publish confirms by default for all amqp message publishers,enables publish confirms by default for all amqp message publishers,enables publish confirms by default for all amqp message publishers,enables publish confirms by default for all amqp message publishers,enables publish confirms by default for all amqp message publishers,enables publish confirms by default for all amqp message publishers,enables publish confirms by default for all amqp message publishers,enables publish confirms by default for all amqp message publishers,enables publish confirms by default for all amqp message publishers,enables publish confirms by default for all amqp message publishers,enables publish confirms by default for all amqp message publishers,enables publish confirms by default for all amqp message publishers,enables publish confirms by default for all amqp message publishers,enables publish confirms by default for all amqp message publishers,enables publish confirms by default for all amqp message publishers,enables publish confirms by default for all amqp message publishers,enables publish confirms by default for all amqp message publishers,enables publish confirms by default for all amqp message publishers,enables publish confirms by default for all amqp message publishers,enables publish confirms by default for all amqp message publishers,enables publish confirms by default for all amqp message publishers,enables publish confirms by default for all amqp message publishers,enables publish confirms by default for all amqp message publishers,enables publish confirms by default for all amqp message publishers,enables publish confirms by default for all amqp message publishers,enables publish confirms by default for all amqp message publishers,enables publish confirms by default for all amqp message publishers,enables publish confirms by default for all amqp message publishers,enables publish confirms by default for all amqp message publishers,enables publish confirms by default for all amqp message publishers,enables publish confirms by default for all amqp message publishers,enables publish confirms by default for all amqp message publishers,enables publish confirms by default for all amqp message publishers,enables publish confirms by default for all amqp message publishers,enables publish confirms by default for all amqp message publishers,enables publish confirms by default for all amqp message publishers,enables publish confirms by default for all amqp message publishers,enables publish confirms by default for all amqp message publishers,enables publish confirms by default for all amqp message publishers,introduction of nameko extensions and nomenclature clarification,introduction of nameko extensions and nomenclature clarification,introduction of nameko extensions and nomenclature clarification,introduction of nameko extensions and nomenclature clarification,introduction of nameko extensions and nomenclature clarification,introduction of nameko extensions and nomenclature clarification,introduction of nameko extensions and nomenclature clarification,introduction of nameko extensions and nomenclature clarification,introduction of nameko extensions and nomenclature clarification,introduction of nameko extensions and nomenclature clarification,introduction of nameko extensions and nomenclature clarification,introduction of nameko extensions and nomenclature clarification,introduction of nameko extensions and nomenclature clarification,introduction of nameko extensions and nomenclature clarification,introduction of nameko extensions and nomenclature clarification,introduction of nameko extensions and nomenclature clarification,introduction of nameko extensions and nomenclature clarification,introduction of nameko extensions and nomenclature clarification,introduction of nameko extensions and nomenclature clarification,introduction of nameko extensions and nomenclature clarification,introduction of nameko extensions and nomenclature clarification,introduction of nameko extensions and nomenclature clarification,introduction of nameko extensions and nomenclature clarification,introduction of nameko extensions and nomenclature clarification,introduction of nameko extensions and nomenclature clarification,introduction of nameko extensions and nomenclature clarification,introduction of nameko extensions and nomenclature clarification,introduction of nameko extensions and nomenclature clarification,introduction of nameko extensions and nomenclature clarification,introduction of nameko extensions and nomenclature clarification,introduction of nameko extensions and nomenclature clarification,introduction of nameko extensions and nomenclature clarification,introduction of nameko extensions and nomenclature clarification,introduction of nameko extensions and nomenclature clarification,introduction of nameko extensions and nomenclature clarification,introduction of nameko extensions and nomenclature clarification,introduction of nameko extensions and nomenclature clarification,introduction of nameko extensions and nomenclature clarification,introduction of nameko extensions and nomenclature clarification,introduction of nameko extensions and nomenclature clarification,introduction of nameko extensions and nomenclature clarification,introduction of nameko extensions and nomenclature clarification,introduction of nameko extensions and nomenclature clarification,introduction of nameko extensions and nomenclature clarification,introduction of nameko extensions and nomenclature clarification,introduction of nameko extensions and nomenclature clarification,introduction of nameko extensions and nomenclature clarification,introduction of nameko extensions and nomenclature clarification,introduction of nameko extensions and nomenclature clarification,introduction of nameko extensions and nomenclature clarification,introduction of nameko extensions and nomenclature clarification,introduction of nameko extensions and nomenclature clarification,introduction of nameko extensions and nomenclature clarification,introduction of nameko extensions and nomenclature clarification,introduction of nameko extensions and nomenclature clarification,introduction of nameko extensions and nomenclature clarification,introduction of nameko extensions and nomenclature clarification,introduction of nameko extensions and nomenclature clarification,introduction of nameko extensions and nomenclature clarification,introduction of nameko extensions and nomenclature clarification,enhanced environment variable substitution including recursive references. see #515.,enhanced environment variable substitution including recursive references. see #515.,enhanced environment variable substitution including recursive references. see #515.,enhanced environment variable substitution including recursive references. see #515.,enhanced environment variable substitution including recursive references. see #515.,enhanced environment variable substitution including recursive references. see #515.,enhanced environment variable substitution including recursive references. see #515.,enhanced environment variable substitution including recursive references. see #515.,enhanced environment variable substitution including recursive references. see #515.,enhanced environment variable substitution including recursive references. see #515.,enhanced environment variable substitution including recursive references. see #515.,enhanced environment variable substitution including recursive references. see #515.,enhanced environment variable substitution including recursive references. see #515.,enhanced environment variable substitution including recursive references. see #515.,enhanced environment variable substitution including recursive references. see #515.,enhanced environment variable substitution including recursive references. see #515.,enhanced environment variable substitution including recursive references. see #515.,enhanced environment variable substitution including recursive references. see #515.,enhanced environment variable substitution including recursive references. see #515.,enhanced environment variable substitution including recursive references. see #515.,enhanced environment variable substitution including recursive references. see #515.,enhanced environment variable substitution including recursive references. see #515.,enhanced environment variable substitution including recursive references. see #515.,enhanced environment variable substitution including recursive references. see #515.,enhanced environment variable substitution including recursive references. see #515.,enhanced environment variable substitution including recursive references. see #515.,enhanced environment variable substitution including recursive references. see #515.,enhanced environment variable substitution including recursive references. see #515.,enhanced environment variable substitution including recursive references. see #515.,enhanced environment variable substitution including recursive references. see #515.,enhanced environment variable substitution including recursive references. see #515.,enhanced environment variable substitution including recursive references. see #515.,enhanced environment variable substitution including recursive references. see #515.,enhanced environment variable substitution including recursive references. see #515.,enhanced environment variable substitution including recursive references. see #515.,enhanced environment variable substitution including recursive references. see #515.,enhanced environment variable substitution including recursive references. see #515.,enhanced environment variable substitution including recursive references. see #515.,enhanced environment variable substitution including recursive references. see #515.,enhanced environment variable substitution including recursive references. see #515.,enhanced environment variable substitution including recursive references. see #515.,enhanced environment variable substitution including recursive references. see #515.,enhanced environment variable substitution including recursive references. see #515.,enhanced environment variable substitution including recursive references. see #515.,enhanced environment variable substitution including recursive references. see #515.,enhanced environment variable substitution including recursive references. see #515.,enhanced environment variable substitution including recursive references. see #515.,enhanced environment variable substitution including recursive references. see #515.,enhanced environment variable substitution including recursive references. see #515.,enhanced environment variable substitution including recursive references. see #515.,enhanced environment variable substitution including recursive references. see #515.,enhanced environment variable substitution including recursive references. see #515.,enhanced environment variable substitution including recursive references. see #515.,enhanced environment variable substitution including recursive references. see #515.,enhanced environment variable substitution including recursive references. see #515.,enhanced environment variable substitution including recursive references. see #515.,enhanced environment variable substitution including recursive references. see #515.,enhanced environment variable substitution including recursive references. see #515.,enhanced environment variable substitution including recursive references. see #515.,enhanced environment variable substitution including recursive references. see #515.,add default retry policies to all publishers,add default retry policies to all publishers,add default retry policies to all publishers,add default retry policies to all publishers,add default retry policies to all publishers,add default retry policies to all publishers,add default retry policies to all publishers,add default retry policies to all publishers,add default retry policies to all publishers,add default retry policies to all publishers,add default retry policies to all publishers,add default retry policies to all publishers,add default retry policies to all publishers,add default retry policies to all publishers,add default retry policies to all publishers,add default retry policies to all publishers,add default retry policies to all publishers,add default retry policies to all publishers,add default retry policies to all publishers,add default retry policies to all publishers,add default retry policies to all publishers,add default retry policies to all publishers,add default retry policies to all publishers,add default retry policies to all publishers,add default retry policies to all publishers,add default retry policies to all publishers,add default retry policies to all publishers,add default retry policies to all publishers,add default retry policies to all publishers,add default retry policies to all publishers,add default retry policies to all publishers,add default retry policies to all publishers,add default retry policies to all publishers,add default retry policies to all publishers,add default retry policies to all publishers,add default retry policies to all publishers,add default retry policies to all publishers,add default retry policies to all publishers,add default retry policies to all publishers,add default retry policies to all publishers,add default retry policies to all publishers,add default retry policies to all publishers,add default retry policies to all publishers,add default retry policies to all publishers,add default retry policies to all publishers,add default retry policies to all publishers,add default retry policies to all publishers,add default retry policies to all publishers,add default retry policies to all publishers,add default retry policies to all publishers,add default retry policies to all publishers,add default retry policies to all publishers,add default retry policies to all publishers,add default retry policies to all publishers,add default retry policies to all publishers,add default retry policies to all publishers,add default retry policies to all publishers,add default retry policies to all publishers,add default retry policies to all publishers,add default retry policies to all publishers,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,handles an uncaught exception caused by a fast-disconnecting client under python 3 ,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,add a new exception malformedrequest that rpc providers can raise if they detect an invalid message. raise this exception in the default rpc provider if args or kwargs keys are missing from the message.,drops several backwards-compatibility shims that were marked as being maintained only until this release,drops several backwards-compatibility shims that were marked as being maintained only until this release,drops several backwards-compatibility shims that were marked as being maintained only until this release,drops several backwards-compatibility shims that were marked as being maintained only until this release,drops several backwards-compatibility shims that were marked as being maintained only until this release,drops several backwards-compatibility shims that were marked as being maintained only until this release,drops several backwards-compatibility shims that were marked as being maintained only until this release,drops several backwards-compatibility shims that were marked as being maintained only until this release,drops several backwards-compatibility shims that were marked as being maintained only until this release,drops several backwards-compatibility shims that were marked as being maintained only until this release,drops several backwards-compatibility shims that were marked as being maintained only until this release,drops several backwards-compatibility shims that were marked as being maintained only until this release,drops several backwards-compatibility shims that were marked as being maintained only until this release,drops several backwards-compatibility shims that were marked as being maintained only until this release,drops several backwards-compatibility shims that were marked as being maintained only until this release,drops several backwards-compatibility shims that were marked as being maintained only until this release,drops several backwards-compatibility shims that were marked as being maintained only until this release,drops several backwards-compatibility shims that were marked as being maintained only until this release,drops several backwards-compatibility shims that were marked as being maintained only until this release,drops several backwards-compatibility shims that were marked as being maintained only until this release,drops several backwards-compatibility shims that were marked as being maintained only until this release,drops several backwards-compatibility shims that were marked as being maintained only until this release,drops several backwards-compatibility shims that were marked as being maintained only until this release,drops several backwards-compatibility shims that were marked as being maintained only until this release,drops several backwards-compatibility shims that were marked as being maintained only until this release,drops several backwards-compatibility shims that were marked as being maintained only until this release,drops several backwards-compatibility shims that were marked as being maintained only until this release,drops several backwards-compatibility shims that were marked as being maintained only until this release,drops several backwards-compatibility shims that were marked as being maintained only until this release,drops several backwards-compatibility shims that were marked as being maintained only until this release,drops several backwards-compatibility shims that were marked as being maintained only until this release,drops several backwards-compatibility shims that were marked as being maintained only until this release,drops several backwards-compatibility shims that were marked as being maintained only until this release,drops several backwards-compatibility shims that were marked as being maintained only until this release,drops several backwards-compatibility shims that were marked as being maintained only until this release,drops several backwards-compatibility shims that were marked as being maintained only until this release,drops several backwards-compatibility shims that were marked as being maintained only until this release,drops several backwards-compatibility shims that were marked as being maintained only until this release,drops several backwards-compatibility shims that were marked as being maintained only until this release,drops several backwards-compatibility shims that were marked as being maintained only until this release,drops several backwards-compatibility shims that were marked as being maintained only until this release,drops several backwards-compatibility shims that were marked as being maintained only until this release,drops several backwards-compatibility shims that were marked as being maintained only until this release,drops several backwards-compatibility shims that were marked as being maintained only until this release,drops several backwards-compatibility shims that were marked as being maintained only until this release,drops several backwards-compatibility shims that were marked as being maintained only until this release,drops several backwards-compatibility shims that were marked as being maintained only until this release,drops several backwards-compatibility shims that were marked as being maintained only until this release,drops several backwards-compatibility shims that were marked as being maintained only until this release,drops several backwards-compatibility shims that were marked as being maintained only until this release,drops several backwards-compatibility shims that were marked as being maintained only until this release,drops several backwards-compatibility shims that were marked as being maintained only until this release,drops several backwards-compatibility shims that were marked as being maintained only until this release,drops several backwards-compatibility shims that were marked as being maintained only until this release,drops several backwards-compatibility shims that were marked as being maintained only until this release,drops several backwards-compatibility shims that were marked as being maintained only until this release,drops several backwards-compatibility shims that were marked as being maintained only until this release,drops several backwards-compatibility shims that were marked as being maintained only until this release,drops several backwards-compatibility shims that were marked as being maintained only until this release,drops several backwards-compatibility shims that were marked as being maintained only until this release,serialization errors now generate a specific error message rather than bubbling into the container.,serialization errors now generate a specific error message rather than bubbling into the container.,serialization errors now generate a specific error message rather than bubbling into the container.,serialization errors now generate a specific error message rather than bubbling into the container.,serialization errors now generate a specific error message rather than bubbling into the container.,serialization errors now generate a specific error message rather than bubbling into the container.,serialization errors now generate a specific error message rather than bubbling into the container.,serialization errors now generate a specific error message rather than bubbling into the container.,serialization errors now generate a specific error message rather than bubbling into the container.,serialization errors now generate a specific error message rather than bubbling into the container.,serialization errors now generate a specific error message rather than bubbling into the container.,serialization errors now generate a specific error message rather than bubbling into the container.,serialization errors now generate a specific error message rather than bubbling into the container.,serialization errors now generate a specific error message rather than bubbling into the container.,serialization errors now generate a specific error message rather than bubbling into the container.,serialization errors now generate a specific error message rather than bubbling into the container.,serialization errors now generate a specific error message rather than bubbling into the container.,serialization errors now generate a specific error message rather than bubbling into the container.,serialization errors now generate a specific error message rather than bubbling into the container.,serialization errors now generate a specific error message rather than bubbling into the container.,serialization errors now generate a specific error message rather than bubbling into the container.,serialization errors now generate a specific error message rather than bubbling into the container.,serialization errors now generate a specific error message rather than bubbling into the container.,serialization errors now generate a specific error message rather than bubbling into the container.,serialization errors now generate a specific error message rather than bubbling into the container.,serialization errors now generate a specific error message rather than bubbling into the container.,serialization errors now generate a specific error message rather than bubbling into the container.,serialization errors now generate a specific error message rather than bubbling into the container.,serialization errors now generate a specific error message rather than bubbling into the container.,serialization errors now generate a specific error message rather than bubbling into the container.,serialization errors now generate a specific error message rather than bubbling into the container.,serialization errors now generate a specific error message rather than bubbling into the container.,serialization errors now generate a specific error message rather than bubbling into the container.,serialization errors now generate a specific error message rather than bubbling into the container.,serialization errors now generate a specific error message rather than bubbling into the container.,serialization errors now generate a specific error message rather than bubbling into the container.,serialization errors now generate a specific error message rather than bubbling into the container.,serialization errors now generate a specific error message rather than bubbling into the container.,serialization errors now generate a specific error message rather than bubbling into the container.,serialization errors now generate a specific error message rather than bubbling into the container.,serialization errors now generate a specific error message rather than bubbling into the container.,serialization errors now generate a specific error message rather than bubbling into the container.,serialization errors now generate a specific error message rather than bubbling into the container.,serialization errors now generate a specific error message rather than bubbling into the container.,serialization errors now generate a specific error message rather than bubbling into the container.,serialization errors now generate a specific error message rather than bubbling into the container.,serialization errors now generate a specific error message rather than bubbling into the container.,serialization errors now generate a specific error message rather than bubbling into the container.,serialization errors now generate a specific error message rather than bubbling into the container.,serialization errors now generate a specific error message rather than bubbling into the container.,serialization errors now generate a specific error message rather than bubbling into the container.,serialization errors now generate a specific error message rather than bubbling into the container.,serialization errors now generate a specific error message rather than bubbling into the container.,serialization errors now generate a specific error message rather than bubbling into the container.,serialization errors now generate a specific error message rather than bubbling into the container.,serialization errors now generate a specific error message rather than bubbling into the container.,serialization errors now generate a specific error message rather than bubbling into the container.,serialization errors now generate a specific error message rather than bubbling into the container.,serialization errors now generate a specific error message rather than bubbling into the container.,serialization errors now generate a specific error message rather than bubbling into the container.,improvements to kill enabling better tracebacks and cleaner teardown:,improvements to kill enabling better tracebacks and cleaner teardown:,improvements to kill enabling better tracebacks and cleaner teardown:,improvements to kill enabling better tracebacks and cleaner teardown:,improvements to kill enabling better tracebacks and cleaner teardown:,improvements to kill enabling better tracebacks and cleaner teardown:,improvements to kill enabling better tracebacks and cleaner teardown:,improvements to kill enabling better tracebacks and cleaner teardown:,improvements to kill enabling better tracebacks and cleaner teardown:,improvements to kill enabling better tracebacks and cleaner teardown:,improvements to kill enabling better tracebacks and cleaner teardown:,improvements to kill enabling better tracebacks and cleaner teardown:,improvements to kill enabling better tracebacks and cleaner teardown:,improvements to kill enabling better tracebacks and cleaner teardown:,improvements to kill enabling better tracebacks and cleaner teardown:,improvements to kill enabling better tracebacks and cleaner teardown:,improvements to kill enabling better tracebacks and cleaner teardown:,improvements to kill enabling better tracebacks and cleaner teardown:,improvements to kill enabling better tracebacks and cleaner teardown:,improvements to kill enabling better tracebacks and cleaner teardown:,improvements to kill enabling better tracebacks and cleaner teardown:,improvements to kill enabling better tracebacks and cleaner teardown:,improvements to kill enabling better tracebacks and cleaner teardown:,improvements to kill enabling better tracebacks and cleaner teardown:,improvements to kill enabling better tracebacks and cleaner teardown:,improvements to kill enabling better tracebacks and cleaner teardown:,improvements to kill enabling better tracebacks and cleaner teardown:,improvements to kill enabling better tracebacks and cleaner teardown:,improvements to kill enabling better tracebacks and cleaner teardown:,improvements to kill enabling better tracebacks and cleaner teardown:,improvements to kill enabling better tracebacks and cleaner teardown:,improvements to kill enabling better tracebacks and cleaner teardown:,improvements to kill enabling better tracebacks and cleaner teardown:,improvements to kill enabling better tracebacks and cleaner teardown:,improvements to kill enabling better tracebacks and cleaner teardown:,improvements to kill enabling better tracebacks and cleaner teardown:,improvements to kill enabling better tracebacks and cleaner teardown:,improvements to kill enabling better tracebacks and cleaner teardown:,improvements to kill enabling better tracebacks and cleaner teardown:,improvements to kill enabling better tracebacks and cleaner teardown:,improvements to kill enabling better tracebacks and cleaner teardown:,improvements to kill enabling better tracebacks and cleaner teardown:,improvements to kill enabling better tracebacks and cleaner teardown:,improvements to kill enabling better tracebacks and cleaner teardown:,improvements to kill enabling better tracebacks and cleaner teardown:,improvements to kill enabling better tracebacks and cleaner teardown:,improvements to kill enabling better tracebacks and cleaner teardown:,improvements to kill enabling better tracebacks and cleaner teardown:,improvements to kill enabling better tracebacks and cleaner teardown:,improvements to kill enabling better tracebacks and cleaner teardown:,improvements to kill enabling better tracebacks and cleaner teardown:,improvements to kill enabling better tracebacks and cleaner teardown:,improvements to kill enabling better tracebacks and cleaner teardown:,improvements to kill enabling better tracebacks and cleaner teardown:,improvements to kill enabling better tracebacks and cleaner teardown:,improvements to kill enabling better tracebacks and cleaner teardown:,improvements to kill enabling better tracebacks and cleaner teardown:,improvements to kill enabling better tracebacks and cleaner teardown:,improvements to kill enabling better tracebacks and cleaner teardown:,improvements to kill enabling better tracebacks and cleaner teardown:,"add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider","add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider","add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider","add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider","add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider","add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider","add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider","add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider","add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider","add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider","add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider","add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider","add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider","add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider","add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider","add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider","add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider","add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider","add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider","add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider","add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider","add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider","add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider","add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider","add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider","add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider","add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider","add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider","add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider","add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider","add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider","add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider","add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider","add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider","add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider","add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider","add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider","add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider","add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider","add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider","add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider","add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider","add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider","add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider","add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider","add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider","add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider","add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider","add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider","add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider","add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider","add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider","add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider","add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider","add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider","add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider","add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider","add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider","add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider","add event_handler_cls kwarg to the event_handler entrypoint, for using a custom subclass of the eventhandler provider",add support for alternative serializers in amqp messages,add support for alternative serializers in amqp messages,add support for alternative serializers in amqp messages,add support for alternative serializers in amqp messages,add support for alternative serializers in amqp messages,add support for alternative serializers in amqp messages,add support for alternative serializers in amqp messages,add support for alternative serializers in amqp messages,add support for alternative serializers in amqp messages,add support for alternative serializers in amqp messages,add support for alternative serializers in amqp messages,add support for alternative serializers in amqp messages,add support for alternative serializers in amqp messages,add support for alternative serializers in amqp messages,add support for alternative serializers in amqp messages,add support for alternative serializers in amqp messages,add support for alternative serializers in amqp messages,add support for alternative serializers in amqp messages,add support for alternative serializers in amqp messages,add support for alternative serializers in amqp messages,add support for alternative serializers in amqp messages,add support for alternative serializers in amqp messages,add support for alternative serializers in amqp messages,add support for alternative serializers in amqp messages,add support for alternative serializers in amqp messages,add support for alternative serializers in amqp messages,add support for alternative serializers in amqp messages,add support for alternative serializers in amqp messages,add support for alternative serializers in amqp messages,add support for alternative serializers in amqp messages,add support for alternative serializers in amqp messages,add support for alternative serializers in amqp messages,add support for alternative serializers in amqp messages,add support for alternative serializers in amqp messages,add support for alternative serializers in amqp messages,add support for alternative serializers in amqp messages,add support for alternative serializers in amqp messages,add support for alternative serializers in amqp messages,add support for alternative serializers in amqp messages,add support for alternative serializers in amqp messages,add support for alternative serializers in amqp messages,add support for alternative serializers in amqp messages,add support for alternative serializers in amqp messages,add support for alternative serializers in amqp messages,add support for alternative serializers in amqp messages,add support for alternative serializers in amqp messages,add support for alternative serializers in amqp messages,add support for alternative serializers in amqp messages,add support for alternative serializers in amqp messages,add support for alternative serializers in amqp messages,add support for alternative serializers in amqp messages,add support for alternative serializers in amqp messages,add support for alternative serializers in amqp messages,add support for alternative serializers in amqp messages,add support for alternative serializers in amqp messages,add support for alternative serializers in amqp messages,add support for alternative serializers in amqp messages,add support for alternative serializers in amqp messages,add support for alternative serializers in amqp messages,add support for alternative serializers in amqp messages,pins kombu back to a compatible release ,pins kombu back to a compatible release ,pins kombu back to a compatible release ,pins kombu back to a compatible release ,pins kombu back to a compatible release ,pins kombu back to a compatible release ,pins kombu back to a compatible release ,pins kombu back to a compatible release ,pins kombu back to a compatible release ,pins kombu back to a compatible release ,pins kombu back to a compatible release ,pins kombu back to a compatible release ,pins kombu back to a compatible release ,pins kombu back to a compatible release ,pins kombu back to a compatible release ,pins kombu back to a compatible release ,pins kombu back to a compatible release ,pins kombu back to a compatible release ,pins kombu back to a compatible release ,pins kombu back to a compatible release ,pins kombu back to a compatible release ,pins kombu back to a compatible release ,pins kombu back to a compatible release ,pins kombu back to a compatible release ,pins kombu back to a compatible release ,pins kombu back to a compatible release ,pins kombu back to a compatible release ,pins kombu back to a compatible release ,pins kombu back to a compatible release ,pins kombu back to a compatible release ,pins kombu back to a compatible release ,pins kombu back to a compatible release ,pins kombu back to a compatible release ,pins kombu back to a compatible release ,pins kombu back to a compatible release ,pins kombu back to a compatible release ,pins kombu back to a compatible release ,pins kombu back to a compatible release ,pins kombu back to a compatible release ,pins kombu back to a compatible release ,pins kombu back to a compatible release ,pins kombu back to a compatible release ,pins kombu back to a compatible release ,pins kombu back to a compatible release ,pins kombu back to a compatible release ,pins kombu back to a compatible release ,pins kombu back to a compatible release ,pins kombu back to a compatible release ,pins kombu back to a compatible release ,pins kombu back to a compatible release ,pins kombu back to a compatible release ,pins kombu back to a compatible release ,pins kombu back to a compatible release ,pins kombu back to a compatible release ,pins kombu back to a compatible release ,pins kombu back to a compatible release ,pins kombu back to a compatible release ,pins kombu back to a compatible release ,pins kombu back to a compatible release ,pins kombu back to a compatible release ,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,add dictionary access to standalone.rpc.clusterproxy to allow the proxy to call services whose name is not a legal identifier in python .,"timer now waits for the spawned entrypoint to complete before firing again, as documented ","timer now waits for the spawned entrypoint to complete before firing again, as documented ","timer now waits for the spawned entrypoint to complete before firing again, as documented ","timer now waits for the spawned entrypoint to complete before firing again, as documented ","timer now waits for the spawned entrypoint to complete before firing again, as documented ","timer now waits for the spawned entrypoint to complete before firing again, as documented ","timer now waits for the spawned entrypoint to complete before firing again, as documented ","timer now waits for the spawned entrypoint to complete before firing again, as documented ","timer now waits for the spawned entrypoint to complete before firing again, as documented ","timer now waits for the spawned entrypoint to complete before firing again, as documented ","timer now waits for the spawned entrypoint to complete before firing again, as documented ","timer now waits for the spawned entrypoint to complete before firing again, as documented ","timer now waits for the spawned entrypoint to complete before firing again, as documented ","timer now waits for the spawned entrypoint to complete before firing again, as documented ","timer now waits for the spawned entrypoint to complete before firing again, as documented ","timer now waits for the spawned entrypoint to complete before firing again, as documented ","timer now waits for the spawned entrypoint to complete before firing again, as documented ","timer now waits for the spawned entrypoint to complete before firing again, as documented ","timer now waits for the spawned entrypoint to complete before firing again, as documented ","timer now waits for the spawned entrypoint to complete before firing again, as documented ","timer now waits for the spawned entrypoint to complete before firing again, as documented ","timer now waits for the spawned entrypoint to complete before firing again, as documented ","timer now waits for the spawned entrypoint to complete before firing again, as documented ","timer now waits for the spawned entrypoint to complete before firing again, as documented ","timer now waits for the spawned entrypoint to complete before firing again, as documented ","timer now waits for the spawned entrypoint to complete before firing again, as documented ","timer now waits for the spawned entrypoint to complete before firing again, as documented ","timer now waits for the spawned entrypoint to complete before firing again, as documented ","timer now waits for the spawned entrypoint to complete before firing again, as documented ","timer now waits for the spawned entrypoint to complete before firing again, as documented ","timer now waits for the spawned entrypoint to complete before firing again, as documented ","timer now waits for the spawned entrypoint to complete before firing again, as documented ","timer now waits for the spawned entrypoint to complete before firing again, as documented ","timer now waits for the spawned entrypoint to complete before firing again, as documented ","timer now waits for the spawned entrypoint to complete before firing again, as documented ","timer now waits for the spawned entrypoint to complete before firing again, as documented ","timer now waits for the spawned entrypoint to complete before firing again, as documented ","timer now waits for the spawned entrypoint to complete before firing again, as documented ","timer now waits for the spawned entrypoint to complete before firing again, as documented ","timer now waits for the spawned entrypoint to complete before firing again, as documented ","timer now waits for the spawned entrypoint to complete before firing again, as documented ","timer now waits for the spawned entrypoint to complete before firing again, as documented ","timer now waits for the spawned entrypoint to complete before firing again, as documented ","timer now waits for the spawned entrypoint to complete before firing again, as documented ","timer now waits for the spawned entrypoint to complete before firing again, as documented ","timer now waits for the spawned entrypoint to complete before firing again, as documented ","timer now waits for the spawned entrypoint to complete before firing again, as documented ","timer now waits for the spawned entrypoint to complete before firing again, as documented ","timer now waits for the spawned entrypoint to complete before firing again, as documented ","timer now waits for the spawned entrypoint to complete before firing again, as documented ","timer now waits for the spawned entrypoint to complete before firing again, as documented ","timer now waits for the spawned entrypoint to complete before firing again, as documented ","timer now waits for the spawned entrypoint to complete before firing again, as documented ","timer now waits for the spawned entrypoint to complete before firing again, as documented ","timer now waits for the spawned entrypoint to complete before firing again, as documented ","timer now waits for the spawned entrypoint to complete before firing again, as documented ","timer now waits for the spawned entrypoint to complete before firing again, as documented ","timer now waits for the spawned entrypoint to complete before firing again, as documented ","timer now waits for the spawned entrypoint to complete before firing again, as documented ","timer now waits for the spawned entrypoint to complete before firing again, as documented ",raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,raise a specific rpctimeout error in the rpc proxy rather than socket.timeout to avoid confusing kombu s connection.ensure,add a new nameko context key user_agent to support including such info in the rpc header.,add a new nameko context key user_agent to support including such info in the rpc header.,add a new nameko context key user_agent to support including such info in the rpc header.,add a new nameko context key user_agent to support including such info in the rpc header.,add a new nameko context key user_agent to support including such info in the rpc header.,add a new nameko context key user_agent to support including such info in the rpc header.,add a new nameko context key user_agent to support including such info in the rpc header.,add a new nameko context key user_agent to support including such info in the rpc header.,add a new nameko context key user_agent to support including such info in the rpc header.,add a new nameko context key user_agent to support including such info in the rpc header.,add a new nameko context key user_agent to support including such info in the rpc header.,add a new nameko context key user_agent to support including such info in the rpc header.,add a new nameko context key user_agent to support including such info in the rpc header.,add a new nameko context key user_agent to support including such info in the rpc header.,add a new nameko context key user_agent to support including such info in the rpc header.,add a new nameko context key user_agent to support including such info in the rpc header.,add a new nameko context key user_agent to support including such info in the rpc header.,add a new nameko context key user_agent to support including such info in the rpc header.,add a new nameko context key user_agent to support including such info in the rpc header.,add a new nameko context key user_agent to support including such info in the rpc header.,add a new nameko context key user_agent to support including such info in the rpc header.,add a new nameko context key user_agent to support including such info in the rpc header.,add a new nameko context key user_agent to support including such info in the rpc header.,add a new nameko context key user_agent to support including such info in the rpc header.,add a new nameko context key user_agent to support including such info in the rpc header.,add a new nameko context key user_agent to support including such info in the rpc header.,add a new nameko context key user_agent to support including such info in the rpc header.,add a new nameko context key user_agent to support including such info in the rpc header.,add a new nameko context key user_agent to support including such info in the rpc header.,add a new nameko context key user_agent to support including such info in the rpc header.,add a new nameko context key user_agent to support including such info in the rpc header.,add a new nameko context key user_agent to support including such info in the rpc header.,add a new nameko context key user_agent to support including such info in the rpc header.,add a new nameko context key user_agent to support including such info in the rpc header.,add a new nameko context key user_agent to support including such info in the rpc header.,add a new nameko context key user_agent to support including such info in the rpc header.,add a new nameko context key user_agent to support including such info in the rpc header.,add a new nameko context key user_agent to support including such info in the rpc header.,add a new nameko context key user_agent to support including such info in the rpc header.,add a new nameko context key user_agent to support including such info in the rpc header.,add a new nameko context key user_agent to support including such info in the rpc header.,add a new nameko context key user_agent to support including such info in the rpc header.,add a new nameko context key user_agent to support including such info in the rpc header.,add a new nameko context key user_agent to support including such info in the rpc header.,add a new nameko context key user_agent to support including such info in the rpc header.,add a new nameko context key user_agent to support including such info in the rpc header.,add a new nameko context key user_agent to support including such info in the rpc header.,add a new nameko context key user_agent to support including such info in the rpc header.,add a new nameko context key user_agent to support including such info in the rpc header.,add a new nameko context key user_agent to support including such info in the rpc header.,add a new nameko context key user_agent to support including such info in the rpc header.,add a new nameko context key user_agent to support including such info in the rpc header.,add a new nameko context key user_agent to support including such info in the rpc header.,add a new nameko context key user_agent to support including such info in the rpc header.,add a new nameko context key user_agent to support including such info in the rpc header.,add a new nameko context key user_agent to support including such info in the rpc header.,add a new nameko context key user_agent to support including such info in the rpc header.,add a new nameko context key user_agent to support including such info in the rpc header.,add a new nameko context key user_agent to support including such info in the rpc header.,add a new nameko context key user_agent to support including such info in the rpc header.,add helper for manipulating an amqp uri into a dict,add helper for manipulating an amqp uri into a dict,add helper for manipulating an amqp uri into a dict,add helper for manipulating an amqp uri into a dict,add helper for manipulating an amqp uri into a dict,add helper for manipulating an amqp uri into a dict,add helper for manipulating an amqp uri into a dict,add helper for manipulating an amqp uri into a dict,add helper for manipulating an amqp uri into a dict,add helper for manipulating an amqp uri into a dict,add helper for manipulating an amqp uri into a dict,add helper for manipulating an amqp uri into a dict,add helper for manipulating an amqp uri into a dict,add helper for manipulating an amqp uri into a dict,add helper for manipulating an amqp uri into a dict,add helper for manipulating an amqp uri into a dict,add helper for manipulating an amqp uri into a dict,add helper for manipulating an amqp uri into a dict,add helper for manipulating an amqp uri into a dict,add helper for manipulating an amqp uri into a dict,add helper for manipulating an amqp uri into a dict,add helper for manipulating an amqp uri into a dict,add helper for manipulating an amqp uri into a dict,add helper for manipulating an amqp uri into a dict,add helper for manipulating an amqp uri into a dict,add helper for manipulating an amqp uri into a dict,add helper for manipulating an amqp uri into a dict,add helper for manipulating an amqp uri into a dict,add helper for manipulating an amqp uri into a dict,add helper for manipulating an amqp uri into a dict,add helper for manipulating an amqp uri into a dict,add helper for manipulating an amqp uri into a dict,add helper for manipulating an amqp uri into a dict,add helper for manipulating an amqp uri into a dict,add helper for manipulating an amqp uri into a dict,add helper for manipulating an amqp uri into a dict,add helper for manipulating an amqp uri into a dict,add helper for manipulating an amqp uri into a dict,add helper for manipulating an amqp uri into a dict,add helper for manipulating an amqp uri into a dict,add helper for manipulating an amqp uri into a dict,add helper for manipulating an amqp uri into a dict,add helper for manipulating an amqp uri into a dict,add helper for manipulating an amqp uri into a dict,add helper for manipulating an amqp uri into a dict,add helper for manipulating an amqp uri into a dict,add helper for manipulating an amqp uri into a dict,add helper for manipulating an amqp uri into a dict,add helper for manipulating an amqp uri into a dict,add helper for manipulating an amqp uri into a dict,add helper for manipulating an amqp uri into a dict,add helper for manipulating an amqp uri into a dict,add helper for manipulating an amqp uri into a dict,add helper for manipulating an amqp uri into a dict,add helper for manipulating an amqp uri into a dict,add helper for manipulating an amqp uri into a dict,add helper for manipulating an amqp uri into a dict,add helper for manipulating an amqp uri into a dict,add helper for manipulating an amqp uri into a dict,add helper for manipulating an amqp uri into a dict,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,revert prefetch count change from 2.5.3 and ack messages outside of the queueconsumer thread. ,nameko shell changed to not catch exceptions when used in non-tty mode ,nameko shell changed to not catch exceptions when used in non-tty mode ,nameko shell changed to not catch exceptions when used in non-tty mode ,nameko shell changed to not catch exceptions when used in non-tty mode ,nameko shell changed to not catch exceptions when used in non-tty mode ,nameko shell changed to not catch exceptions when used in non-tty mode ,nameko shell changed to not catch exceptions when used in non-tty mode ,nameko shell changed to not catch exceptions when used in non-tty mode ,nameko shell changed to not catch exceptions when used in non-tty mode ,nameko shell changed to not catch exceptions when used in non-tty mode ,nameko shell changed to not catch exceptions when used in non-tty mode ,nameko shell changed to not catch exceptions when used in non-tty mode ,nameko shell changed to not catch exceptions when used in non-tty mode ,nameko shell changed to not catch exceptions when used in non-tty mode ,nameko shell changed to not catch exceptions when used in non-tty mode ,nameko shell changed to not catch exceptions when used in non-tty mode ,nameko shell changed to not catch exceptions when used in non-tty mode ,nameko shell changed to not catch exceptions when used in non-tty mode ,nameko shell changed to not catch exceptions when used in non-tty mode ,nameko shell changed to not catch exceptions when used in non-tty mode ,nameko shell changed to not catch exceptions when used in non-tty mode ,nameko shell changed to not catch exceptions when used in non-tty mode ,nameko shell changed to not catch exceptions when used in non-tty mode ,nameko shell changed to not catch exceptions when used in non-tty mode ,nameko shell changed to not catch exceptions when used in non-tty mode ,nameko shell changed to not catch exceptions when used in non-tty mode ,nameko shell changed to not catch exceptions when used in non-tty mode ,nameko shell changed to not catch exceptions when used in non-tty mode ,nameko shell changed to not catch exceptions when used in non-tty mode ,nameko shell changed to not catch exceptions when used in non-tty mode ,nameko shell changed to not catch exceptions when used in non-tty mode ,nameko shell changed to not catch exceptions when used in non-tty mode ,nameko shell changed to not catch exceptions when used in non-tty mode ,nameko shell changed to not catch exceptions when used in non-tty mode ,nameko shell changed to not catch exceptions when used in non-tty mode ,nameko shell changed to not catch exceptions when used in non-tty mode ,nameko shell changed to not catch exceptions when used in non-tty mode ,nameko shell changed to not catch exceptions when used in non-tty mode ,nameko shell changed to not catch exceptions when used in non-tty mode ,nameko shell changed to not catch exceptions when used in non-tty mode ,nameko shell changed to not catch exceptions when used in non-tty mode ,nameko shell changed to not catch exceptions when used in non-tty mode ,nameko shell changed to not catch exceptions when used in non-tty mode ,nameko shell changed to not catch exceptions when used in non-tty mode ,nameko shell changed to not catch exceptions when used in non-tty mode ,nameko shell changed to not catch exceptions when used in non-tty mode ,nameko shell changed to not catch exceptions when used in non-tty mode ,nameko shell changed to not catch exceptions when used in non-tty mode ,nameko shell changed to not catch exceptions when used in non-tty mode ,nameko shell changed to not catch exceptions when used in non-tty mode ,nameko shell changed to not catch exceptions when used in non-tty mode ,nameko shell changed to not catch exceptions when used in non-tty mode ,nameko shell changed to not catch exceptions when used in non-tty mode ,nameko shell changed to not catch exceptions when used in non-tty mode ,nameko shell changed to not catch exceptions when used in non-tty mode ,nameko shell changed to not catch exceptions when used in non-tty mode ,nameko shell changed to not catch exceptions when used in non-tty mode ,nameko shell changed to not catch exceptions when used in non-tty mode ,nameko shell changed to not catch exceptions when used in non-tty mode ,nameko shell changed to not catch exceptions when used in non-tty mode ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,fixes a bug where the container crashed if the connection to rabbitmq was lost while an amqp entrypoint was running ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,workaround for a kombu bug causing new sockets to sometimes have short timeouts. ,changed default amqp uri so examples work with an unconfigured rabbitmq.,changed default amqp uri so examples work with an unconfigured rabbitmq.,changed default amqp uri so examples work with an unconfigured rabbitmq.,changed default amqp uri so examples work with an unconfigured rabbitmq.,changed default amqp uri so examples work with an unconfigured rabbitmq.,changed default amqp uri so examples work with an unconfigured rabbitmq.,changed default amqp uri so examples work with an unconfigured rabbitmq.,changed default amqp uri so examples work with an unconfigured rabbitmq.,changed default amqp uri so examples work with an unconfigured rabbitmq.,changed default amqp uri so examples work with an unconfigured rabbitmq.,changed default amqp uri so examples work with an unconfigured rabbitmq.,changed default amqp uri so examples work with an unconfigured rabbitmq.,changed default amqp uri so examples work with an unconfigured rabbitmq.,changed default amqp uri so examples work with an unconfigured rabbitmq.,changed default amqp uri so examples work with an unconfigured rabbitmq.,changed default amqp uri so examples work with an unconfigured rabbitmq.,changed default amqp uri so examples work with an unconfigured rabbitmq.,changed default amqp uri so examples work with an unconfigured rabbitmq.,changed default amqp uri so examples work with an unconfigured rabbitmq.,changed default amqp uri so examples work with an unconfigured rabbitmq.,changed default amqp uri so examples work with an unconfigured rabbitmq.,changed default amqp uri so examples work with an unconfigured rabbitmq.,changed default amqp uri so examples work with an unconfigured rabbitmq.,changed default amqp uri so examples work with an unconfigured rabbitmq.,changed default amqp uri so examples work with an unconfigured rabbitmq.,changed default amqp uri so examples work with an unconfigured rabbitmq.,changed default amqp uri so examples work with an unconfigured rabbitmq.,changed default amqp uri so examples work with an unconfigured rabbitmq.,changed default amqp uri so examples work with an unconfigured rabbitmq.,changed default amqp uri so examples work with an unconfigured rabbitmq.,changed default amqp uri so examples work with an unconfigured rabbitmq.,changed default amqp uri so examples work with an unconfigured rabbitmq.,changed default amqp uri so examples work with an unconfigured rabbitmq.,changed default amqp uri so examples work with an unconfigured rabbitmq.,changed default amqp uri so examples work with an unconfigured rabbitmq.,changed default amqp uri so examples work with an unconfigured rabbitmq.,changed default amqp uri so examples work with an unconfigured rabbitmq.,changed default amqp uri so examples work with an unconfigured rabbitmq.,changed default amqp uri so examples work with an unconfigured rabbitmq.,changed default amqp uri so examples work with an unconfigured rabbitmq.,changed default amqp uri so examples work with an unconfigured rabbitmq.,changed default amqp uri so examples work with an unconfigured rabbitmq.,changed default amqp uri so examples work with an unconfigured rabbitmq.,changed default amqp uri so examples work with an unconfigured rabbitmq.,changed default amqp uri so examples work with an unconfigured rabbitmq.,changed default amqp uri so examples work with an unconfigured rabbitmq.,changed default amqp uri so examples work with an unconfigured rabbitmq.,changed default amqp uri so examples work with an unconfigured rabbitmq.,changed default amqp uri so examples work with an unconfigured rabbitmq.,changed default amqp uri so examples work with an unconfigured rabbitmq.,changed default amqp uri so examples work with an unconfigured rabbitmq.,changed default amqp uri so examples work with an unconfigured rabbitmq.,changed default amqp uri so examples work with an unconfigured rabbitmq.,changed default amqp uri so examples work with an unconfigured rabbitmq.,changed default amqp uri so examples work with an unconfigured rabbitmq.,changed default amqp uri so examples work with an unconfigured rabbitmq.,changed default amqp uri so examples work with an unconfigured rabbitmq.,changed default amqp uri so examples work with an unconfigured rabbitmq.,changed default amqp uri so examples work with an unconfigured rabbitmq.,changed default amqp uri so examples work with an unconfigured rabbitmq.,support for providing an alternative reply listener to the standalone rpc proxy,support for providing an alternative reply listener to the standalone rpc proxy,support for providing an alternative reply listener to the standalone rpc proxy,support for providing an alternative reply listener to the standalone rpc proxy,support for providing an alternative reply listener to the standalone rpc proxy,support for providing an alternative reply listener to the standalone rpc proxy,support for providing an alternative reply listener to the standalone rpc proxy,support for providing an alternative reply listener to the standalone rpc proxy,support for providing an alternative reply listener to the standalone rpc proxy,support for providing an alternative reply listener to the standalone rpc proxy,support for providing an alternative reply listener to the standalone rpc proxy,support for providing an alternative reply listener to the standalone rpc proxy,support for providing an alternative reply listener to the standalone rpc proxy,support for providing an alternative reply listener to the standalone rpc proxy,support for providing an alternative reply listener to the standalone rpc proxy,support for providing an alternative reply listener to the standalone rpc proxy,support for providing an alternative reply listener to the standalone rpc proxy,support for providing an alternative reply listener to the standalone rpc proxy,support for providing an alternative reply listener to the standalone rpc proxy,support for providing an alternative reply listener to the standalone rpc proxy,support for providing an alternative reply listener to the standalone rpc proxy,support for providing an alternative reply listener to the standalone rpc proxy,support for providing an alternative reply listener to the standalone rpc proxy,support for providing an alternative reply listener to the standalone rpc proxy,support for providing an alternative reply listener to the standalone rpc proxy,support for providing an alternative reply listener to the standalone rpc proxy,support for providing an alternative reply listener to the standalone rpc proxy,support for providing an alternative reply listener to the standalone rpc proxy,support for providing an alternative reply listener to the standalone rpc proxy,support for providing an alternative reply listener to the standalone rpc proxy,support for providing an alternative reply listener to the standalone rpc proxy,support for providing an alternative reply listener to the standalone rpc proxy,support for providing an alternative reply listener to the standalone rpc proxy,support for providing an alternative reply listener to the standalone rpc proxy,support for providing an alternative reply listener to the standalone rpc proxy,support for providing an alternative reply listener to the standalone rpc proxy,support for providing an alternative reply listener to the standalone rpc proxy,support for providing an alternative reply listener to the standalone rpc proxy,support for providing an alternative reply listener to the standalone rpc proxy,support for providing an alternative reply listener to the standalone rpc proxy,support for providing an alternative reply listener to the standalone rpc proxy,support for providing an alternative reply listener to the standalone rpc proxy,support for providing an alternative reply listener to the standalone rpc proxy,support for providing an alternative reply listener to the standalone rpc proxy,support for providing an alternative reply listener to the standalone rpc proxy,support for providing an alternative reply listener to the standalone rpc proxy,support for providing an alternative reply listener to the standalone rpc proxy,support for providing an alternative reply listener to the standalone rpc proxy,support for providing an alternative reply listener to the standalone rpc proxy,support for providing an alternative reply listener to the standalone rpc proxy,support for providing an alternative reply listener to the standalone rpc proxy,support for providing an alternative reply listener to the standalone rpc proxy,support for providing an alternative reply listener to the standalone rpc proxy,support for providing an alternative reply listener to the standalone rpc proxy,support for providing an alternative reply listener to the standalone rpc proxy,support for providing an alternative reply listener to the standalone rpc proxy,support for providing an alternative reply listener to the standalone rpc proxy,support for providing an alternative reply listener to the standalone rpc proxy,support for providing an alternative reply listener to the standalone rpc proxy,support for providing an alternative reply listener to the standalone rpc proxy,add forwards compatibility for future clients that wish to serialize exceptions into more data,add forwards compatibility for future clients that wish to serialize exceptions into more data,add forwards compatibility for future clients that wish to serialize exceptions into more data,add forwards compatibility for future clients that wish to serialize exceptions into more data,add forwards compatibility for future clients that wish to serialize exceptions into more data,add forwards compatibility for future clients that wish to serialize exceptions into more data,add forwards compatibility for future clients that wish to serialize exceptions into more data,add forwards compatibility for future clients that wish to serialize exceptions into more data,add forwards compatibility for future clients that wish to serialize exceptions into more data,add forwards compatibility for future clients that wish to serialize exceptions into more data,add forwards compatibility for future clients that wish to serialize exceptions into more data,add forwards compatibility for future clients that wish to serialize exceptions into more data,add forwards compatibility for future clients that wish to serialize exceptions into more data,add forwards compatibility for future clients that wish to serialize exceptions into more data,add forwards compatibility for future clients that wish to serialize exceptions into more data,add forwards compatibility for future clients that wish to serialize exceptions into more data,add forwards compatibility for future clients that wish to serialize exceptions into more data,add forwards compatibility for future clients that wish to serialize exceptions into more data,add forwards compatibility for future clients that wish to serialize exceptions into more data,add forwards compatibility for future clients that wish to serialize exceptions into more data,add forwards compatibility for future clients that wish to serialize exceptions into more data,add forwards compatibility for future clients that wish to serialize exceptions into more data,add forwards compatibility for future clients that wish to serialize exceptions into more data,add forwards compatibility for future clients that wish to serialize exceptions into more data,add forwards compatibility for future clients that wish to serialize exceptions into more data,add forwards compatibility for future clients that wish to serialize exceptions into more data,add forwards compatibility for future clients that wish to serialize exceptions into more data,add forwards compatibility for future clients that wish to serialize exceptions into more data,add forwards compatibility for future clients that wish to serialize exceptions into more data,add forwards compatibility for future clients that wish to serialize exceptions into more data,add forwards compatibility for future clients that wish to serialize exceptions into more data,add forwards compatibility for future clients that wish to serialize exceptions into more data,add forwards compatibility for future clients that wish to serialize exceptions into more data,add forwards compatibility for future clients that wish to serialize exceptions into more data,add forwards compatibility for future clients that wish to serialize exceptions into more data,add forwards compatibility for future clients that wish to serialize exceptions into more data,add forwards compatibility for future clients that wish to serialize exceptions into more data,add forwards compatibility for future clients that wish to serialize exceptions into more data,add forwards compatibility for future clients that wish to serialize exceptions into more data,add forwards compatibility for future clients that wish to serialize exceptions into more data,add forwards compatibility for future clients that wish to serialize exceptions into more data,add forwards compatibility for future clients that wish to serialize exceptions into more data,add forwards compatibility for future clients that wish to serialize exceptions into more data,add forwards compatibility for future clients that wish to serialize exceptions into more data,add forwards compatibility for future clients that wish to serialize exceptions into more data,add forwards compatibility for future clients that wish to serialize exceptions into more data,add forwards compatibility for future clients that wish to serialize exceptions into more data,add forwards compatibility for future clients that wish to serialize exceptions into more data,add forwards compatibility for future clients that wish to serialize exceptions into more data,add forwards compatibility for future clients that wish to serialize exceptions into more data,add forwards compatibility for future clients that wish to serialize exceptions into more data,add forwards compatibility for future clients that wish to serialize exceptions into more data,add forwards compatibility for future clients that wish to serialize exceptions into more data,add forwards compatibility for future clients that wish to serialize exceptions into more data,add forwards compatibility for future clients that wish to serialize exceptions into more data,add forwards compatibility for future clients that wish to serialize exceptions into more data,add forwards compatibility for future clients that wish to serialize exceptions into more data,add forwards compatibility for future clients that wish to serialize exceptions into more data,add forwards compatibility for future clients that wish to serialize exceptions into more data,add forwards compatibility for future clients that wish to serialize exceptions into more data,update bundled pytest fixtures to use a random vhost in rabbitmq by default,update bundled pytest fixtures to use a random vhost in rabbitmq by default,update bundled pytest fixtures to use a random vhost in rabbitmq by default,update bundled pytest fixtures to use a random vhost in rabbitmq by default,update bundled pytest fixtures to use a random vhost in rabbitmq by default,update bundled pytest fixtures to use a random vhost in rabbitmq by default,update bundled pytest fixtures to use a random vhost in rabbitmq by default,update bundled pytest fixtures to use a random vhost in rabbitmq by default,update bundled pytest fixtures to use a random vhost in rabbitmq by default,update bundled pytest fixtures to use a random vhost in rabbitmq by default,update bundled pytest fixtures to use a random vhost in rabbitmq by default,update bundled pytest fixtures to use a random vhost in rabbitmq by default,update bundled pytest fixtures to use a random vhost in rabbitmq by default,update bundled pytest fixtures to use a random vhost in rabbitmq by default,update bundled pytest fixtures to use a random vhost in rabbitmq by default,update bundled pytest fixtures to use a random vhost in rabbitmq by default,update bundled pytest fixtures to use a random vhost in rabbitmq by default,update bundled pytest fixtures to use a random vhost in rabbitmq by default,update bundled pytest fixtures to use a random vhost in rabbitmq by default,update bundled pytest fixtures to use a random vhost in rabbitmq by default,update bundled pytest fixtures to use a random vhost in rabbitmq by default,update bundled pytest fixtures to use a random vhost in rabbitmq by default,update bundled pytest fixtures to use a random vhost in rabbitmq by default,update bundled pytest fixtures to use a random vhost in rabbitmq by default,update bundled pytest fixtures to use a random vhost in rabbitmq by default,update bundled pytest fixtures to use a random vhost in rabbitmq by default,update bundled pytest fixtures to use a random vhost in rabbitmq by default,update bundled pytest fixtures to use a random vhost in rabbitmq by default,update bundled pytest fixtures to use a random vhost in rabbitmq by default,update bundled pytest fixtures to use a random vhost in rabbitmq by default,update bundled pytest fixtures to use a random vhost in rabbitmq by default,update bundled pytest fixtures to use a random vhost in rabbitmq by default,update bundled pytest fixtures to use a random vhost in rabbitmq by default,update bundled pytest fixtures to use a random vhost in rabbitmq by default,update bundled pytest fixtures to use a random vhost in rabbitmq by default,update bundled pytest fixtures to use a random vhost in rabbitmq by default,update bundled pytest fixtures to use a random vhost in rabbitmq by default,update bundled pytest fixtures to use a random vhost in rabbitmq by default,update bundled pytest fixtures to use a random vhost in rabbitmq by default,update bundled pytest fixtures to use a random vhost in rabbitmq by default,update bundled pytest fixtures to use a random vhost in rabbitmq by default,update bundled pytest fixtures to use a random vhost in rabbitmq by default,update bundled pytest fixtures to use a random vhost in rabbitmq by default,update bundled pytest fixtures to use a random vhost in rabbitmq by default,update bundled pytest fixtures to use a random vhost in rabbitmq by default,update bundled pytest fixtures to use a random vhost in rabbitmq by default,update bundled pytest fixtures to use a random vhost in rabbitmq by default,update bundled pytest fixtures to use a random vhost in rabbitmq by default,update bundled pytest fixtures to use a random vhost in rabbitmq by default,update bundled pytest fixtures to use a random vhost in rabbitmq by default,update bundled pytest fixtures to use a random vhost in rabbitmq by default,update bundled pytest fixtures to use a random vhost in rabbitmq by default,update bundled pytest fixtures to use a random vhost in rabbitmq by default,update bundled pytest fixtures to use a random vhost in rabbitmq by default,update bundled pytest fixtures to use a random vhost in rabbitmq by default,update bundled pytest fixtures to use a random vhost in rabbitmq by default,update bundled pytest fixtures to use a random vhost in rabbitmq by default,update bundled pytest fixtures to use a random vhost in rabbitmq by default,update bundled pytest fixtures to use a random vhost in rabbitmq by default,update bundled pytest fixtures to use a random vhost in rabbitmq by default,use magicmock for dependency replacement in test utilities,use magicmock for dependency replacement in test utilities,use magicmock for dependency replacement in test utilities,use magicmock for dependency replacement in test utilities,use magicmock for dependency replacement in test utilities,use magicmock for dependency replacement in test utilities,use magicmock for dependency replacement in test utilities,use magicmock for dependency replacement in test utilities,use magicmock for dependency replacement in test utilities,use magicmock for dependency replacement in test utilities,use magicmock for dependency replacement in test utilities,use magicmock for dependency replacement in test utilities,use magicmock for dependency replacement in test utilities,use magicmock for dependency replacement in test utilities,use magicmock for dependency replacement in test utilities,use magicmock for dependency replacement in test utilities,use magicmock for dependency replacement in test utilities,use magicmock for dependency replacement in test utilities,use magicmock for dependency replacement in test utilities,use magicmock for dependency replacement in test utilities,use magicmock for dependency replacement in test utilities,use magicmock for dependency replacement in test utilities,use magicmock for dependency replacement in test utilities,use magicmock for dependency replacement in test utilities,use magicmock for dependency replacement in test utilities,use magicmock for dependency replacement in test utilities,use magicmock for dependency replacement in test utilities,use magicmock for dependency replacement in test utilities,use magicmock for dependency replacement in test utilities,use magicmock for dependency replacement in test utilities,use magicmock for dependency replacement in test utilities,use magicmock for dependency replacement in test utilities,use magicmock for dependency replacement in test utilities,use magicmock for dependency replacement in test utilities,use magicmock for dependency replacement in test utilities,use magicmock for dependency replacement in test utilities,use magicmock for dependency replacement in test utilities,use magicmock for dependency replacement in test utilities,use magicmock for dependency replacement in test utilities,use magicmock for dependency replacement in test utilities,use magicmock for dependency replacement in test utilities,use magicmock for dependency replacement in test utilities,use magicmock for dependency replacement in test utilities,use magicmock for dependency replacement in test utilities,use magicmock for dependency replacement in test utilities,use magicmock for dependency replacement in test utilities,use magicmock for dependency replacement in test utilities,use magicmock for dependency replacement in test utilities,use magicmock for dependency replacement in test utilities,use magicmock for dependency replacement in test utilities,use magicmock for dependency replacement in test utilities,use magicmock for dependency replacement in test utilities,use magicmock for dependency replacement in test utilities,use magicmock for dependency replacement in test utilities,use magicmock for dependency replacement in test utilities,use magicmock for dependency replacement in test utilities,use magicmock for dependency replacement in test utilities,use magicmock for dependency replacement in test utilities,use magicmock for dependency replacement in test utilities,use magicmock for dependency replacement in test utilities,add ability to make asynchronous rpc calls using the rpc proxy.,add ability to make asynchronous rpc calls using the rpc proxy.,add ability to make asynchronous rpc calls using the rpc proxy.,add ability to make asynchronous rpc calls using the rpc proxy.,add ability to make asynchronous rpc calls using the rpc proxy.,add ability to make asynchronous rpc calls using the rpc proxy.,add ability to make asynchronous rpc calls using the rpc proxy.,add ability to make asynchronous rpc calls using the rpc proxy.,add ability to make asynchronous rpc calls using the rpc proxy.,add ability to make asynchronous rpc calls using the rpc proxy.,add ability to make asynchronous rpc calls using the rpc proxy.,add ability to make asynchronous rpc calls using the rpc proxy.,add ability to make asynchronous rpc calls using the rpc proxy.,add ability to make asynchronous rpc calls using the rpc proxy.,add ability to make asynchronous rpc calls using the rpc proxy.,add ability to make asynchronous rpc calls using the rpc proxy.,add ability to make asynchronous rpc calls using the rpc proxy.,add ability to make asynchronous rpc calls using the rpc proxy.,add ability to make asynchronous rpc calls using the rpc proxy.,add ability to make asynchronous rpc calls using the rpc proxy.,add ability to make asynchronous rpc calls using the rpc proxy.,add ability to make asynchronous rpc calls using the rpc proxy.,add ability to make asynchronous rpc calls using the rpc proxy.,add ability to make asynchronous rpc calls using the rpc proxy.,add ability to make asynchronous rpc calls using the rpc proxy.,add ability to make asynchronous rpc calls using the rpc proxy.,add ability to make asynchronous rpc calls using the rpc proxy.,add ability to make asynchronous rpc calls using the rpc proxy.,add ability to make asynchronous rpc calls using the rpc proxy.,add ability to make asynchronous rpc calls using the rpc proxy.,add ability to make asynchronous rpc calls using the rpc proxy.,add ability to make asynchronous rpc calls using the rpc proxy.,add ability to make asynchronous rpc calls using the rpc proxy.,add ability to make asynchronous rpc calls using the rpc proxy.,add ability to make asynchronous rpc calls using the rpc proxy.,add ability to make asynchronous rpc calls using the rpc proxy.,add ability to make asynchronous rpc calls using the rpc proxy.,add ability to make asynchronous rpc calls using the rpc proxy.,add ability to make asynchronous rpc calls using the rpc proxy.,add ability to make asynchronous rpc calls using the rpc proxy.,add ability to make asynchronous rpc calls using the rpc proxy.,add ability to make asynchronous rpc calls using the rpc proxy.,add ability to make asynchronous rpc calls using the rpc proxy.,add ability to make asynchronous rpc calls using the rpc proxy.,add ability to make asynchronous rpc calls using the rpc proxy.,add ability to make asynchronous rpc calls using the rpc proxy.,add ability to make asynchronous rpc calls using the rpc proxy.,add ability to make asynchronous rpc calls using the rpc proxy.,add ability to make asynchronous rpc calls using the rpc proxy.,add ability to make asynchronous rpc calls using the rpc proxy.,add ability to make asynchronous rpc calls using the rpc proxy.,add ability to make asynchronous rpc calls using the rpc proxy.,add ability to make asynchronous rpc calls using the rpc proxy.,add ability to make asynchronous rpc calls using the rpc proxy.,add ability to make asynchronous rpc calls using the rpc proxy.,add ability to make asynchronous rpc calls using the rpc proxy.,add ability to make asynchronous rpc calls using the rpc proxy.,add ability to make asynchronous rpc calls using the rpc proxy.,add ability to make asynchronous rpc calls using the rpc proxy.,add ability to make asynchronous rpc calls using the rpc proxy.,minor test changes to enable testing on shared rabbit brokers.,minor test changes to enable testing on shared rabbit brokers.,minor test changes to enable testing on shared rabbit brokers.,minor test changes to enable testing on shared rabbit brokers.,minor test changes to enable testing on shared rabbit brokers.,minor test changes to enable testing on shared rabbit brokers.,minor test changes to enable testing on shared rabbit brokers.,minor test changes to enable testing on shared rabbit brokers.,minor test changes to enable testing on shared rabbit brokers.,minor test changes to enable testing on shared rabbit brokers.,minor test changes to enable testing on shared rabbit brokers.,minor test changes to enable testing on shared rabbit brokers.,minor test changes to enable testing on shared rabbit brokers.,minor test changes to enable testing on shared rabbit brokers.,minor test changes to enable testing on shared rabbit brokers.,minor test changes to enable testing on shared rabbit brokers.,minor test changes to enable testing on shared rabbit brokers.,minor test changes to enable testing on shared rabbit brokers.,minor test changes to enable testing on shared rabbit brokers.,minor test changes to enable testing on shared rabbit brokers.,minor test changes to enable testing on shared rabbit brokers.,minor test changes to enable testing on shared rabbit brokers.,minor test changes to enable testing on shared rabbit brokers.,minor test changes to enable testing on shared rabbit brokers.,minor test changes to enable testing on shared rabbit brokers.,minor test changes to enable testing on shared rabbit brokers.,minor test changes to enable testing on shared rabbit brokers.,minor test changes to enable testing on shared rabbit brokers.,minor test changes to enable testing on shared rabbit brokers.,minor test changes to enable testing on shared rabbit brokers.,minor test changes to enable testing on shared rabbit brokers.,minor test changes to enable testing on shared rabbit brokers.,minor test changes to enable testing on shared rabbit brokers.,minor test changes to enable testing on shared rabbit brokers.,minor test changes to enable testing on shared rabbit brokers.,minor test changes to enable testing on shared rabbit brokers.,minor test changes to enable testing on shared rabbit brokers.,minor test changes to enable testing on shared rabbit brokers.,minor test changes to enable testing on shared rabbit brokers.,minor test changes to enable testing on shared rabbit brokers.,minor test changes to enable testing on shared rabbit brokers.,minor test changes to enable testing on shared rabbit brokers.,minor test changes to enable testing on shared rabbit brokers.,minor test changes to enable testing on shared rabbit brokers.,minor test changes to enable testing on shared rabbit brokers.,minor test changes to enable testing on shared rabbit brokers.,minor test changes to enable testing on shared rabbit brokers.,minor test changes to enable testing on shared rabbit brokers.,minor test changes to enable testing on shared rabbit brokers.,minor test changes to enable testing on shared rabbit brokers.,minor test changes to enable testing on shared rabbit brokers.,minor test changes to enable testing on shared rabbit brokers.,minor test changes to enable testing on shared rabbit brokers.,minor test changes to enable testing on shared rabbit brokers.,minor test changes to enable testing on shared rabbit brokers.,minor test changes to enable testing on shared rabbit brokers.,minor test changes to enable testing on shared rabbit brokers.,minor test changes to enable testing on shared rabbit brokers.,minor test changes to enable testing on shared rabbit brokers.,minor test changes to enable testing on shared rabbit brokers.,bugfix to exception handling in nameko.legacy.dependencies,bugfix to exception handling in nameko.legacy.dependencies,bugfix to exception handling in nameko.legacy.dependencies,bugfix to exception handling in nameko.legacy.dependencies,bugfix to exception handling in nameko.legacy.dependencies,bugfix to exception handling in nameko.legacy.dependencies,bugfix to exception handling in nameko.legacy.dependencies,bugfix to exception handling in nameko.legacy.dependencies,bugfix to exception handling in nameko.legacy.dependencies,bugfix to exception handling in nameko.legacy.dependencies,bugfix to exception handling in nameko.legacy.dependencies,bugfix to exception handling in nameko.legacy.dependencies,bugfix to exception handling in nameko.legacy.dependencies,bugfix to exception handling in nameko.legacy.dependencies,bugfix to exception handling in nameko.legacy.dependencies,bugfix to exception handling in nameko.legacy.dependencies,bugfix to exception handling in nameko.legacy.dependencies,bugfix to exception handling in nameko.legacy.dependencies,bugfix to exception handling in nameko.legacy.dependencies,bugfix to exception handling in nameko.legacy.dependencies,bugfix to exception handling in nameko.legacy.dependencies,bugfix to exception handling in nameko.legacy.dependencies,bugfix to exception handling in nameko.legacy.dependencies,bugfix to exception handling in nameko.legacy.dependencies,bugfix to exception handling in nameko.legacy.dependencies,bugfix to exception handling in nameko.legacy.dependencies,bugfix to exception handling in nameko.legacy.dependencies,bugfix to exception handling in nameko.legacy.dependencies,bugfix to exception handling in nameko.legacy.dependencies,bugfix to exception handling in nameko.legacy.dependencies,bugfix to exception handling in nameko.legacy.dependencies,bugfix to exception handling in nameko.legacy.dependencies,bugfix to exception handling in nameko.legacy.dependencies,bugfix to exception handling in nameko.legacy.dependencies,bugfix to exception handling in nameko.legacy.dependencies,bugfix to exception handling in nameko.legacy.dependencies,bugfix to exception handling in nameko.legacy.dependencies,bugfix to exception handling in nameko.legacy.dependencies,bugfix to exception handling in nameko.legacy.dependencies,bugfix to exception handling in nameko.legacy.dependencies,bugfix to exception handling in nameko.legacy.dependencies,bugfix to exception handling in nameko.legacy.dependencies,bugfix to exception handling in nameko.legacy.dependencies,bugfix to exception handling in nameko.legacy.dependencies,bugfix to exception handling in nameko.legacy.dependencies,bugfix to exception handling in nameko.legacy.dependencies,bugfix to exception handling in nameko.legacy.dependencies,bugfix to exception handling in nameko.legacy.dependencies,bugfix to exception handling in nameko.legacy.dependencies,bugfix to exception handling in nameko.legacy.dependencies,bugfix to exception handling in nameko.legacy.dependencies,bugfix to exception handling in nameko.legacy.dependencies,bugfix to exception handling in nameko.legacy.dependencies,bugfix to exception handling in nameko.legacy.dependencies,bugfix to exception handling in nameko.legacy.dependencies,bugfix to exception handling in nameko.legacy.dependencies,bugfix to exception handling in nameko.legacy.dependencies,bugfix to exception handling in nameko.legacy.dependencies,bugfix to exception handling in nameko.legacy.dependencies,bugfix to exception handling in nameko.legacy.dependencies,"added language, auth_token and user_id dependency providers to make context data available to service workers.","added language, auth_token and user_id dependency providers to make context data available to service workers.","added language, auth_token and user_id dependency providers to make context data available to service workers.","added language, auth_token and user_id dependency providers to make context data available to service workers.","added language, auth_token and user_id dependency providers to make context data available to service workers.","added language, auth_token and user_id dependency providers to make context data available to service workers.","added language, auth_token and user_id dependency providers to make context data available to service workers.","added language, auth_token and user_id dependency providers to make context data available to service workers.","added language, auth_token and user_id dependency providers to make context data available to service workers.","added language, auth_token and user_id dependency providers to make context data available to service workers.","added language, auth_token and user_id dependency providers to make context data available to service workers.","added language, auth_token and user_id dependency providers to make context data available to service workers.","added language, auth_token and user_id dependency providers to make context data available to service workers.","added language, auth_token and user_id dependency providers to make context data available to service workers.","added language, auth_token and user_id dependency providers to make context data available to service workers.","added language, auth_token and user_id dependency providers to make context data available to service workers.","added language, auth_token and user_id dependency providers to make context data available to service workers.","added language, auth_token and user_id dependency providers to make context data available to service workers.","added language, auth_token and user_id dependency providers to make context data available to service workers.","added language, auth_token and user_id dependency providers to make context data available to service workers.","added language, auth_token and user_id dependency providers to make context data available to service workers.","added language, auth_token and user_id dependency providers to make context data available to service workers.","added language, auth_token and user_id dependency providers to make context data available to service workers.","added language, auth_token and user_id dependency providers to make context data available to service workers.","added language, auth_token and user_id dependency providers to make context data available to service workers.","added language, auth_token and user_id dependency providers to make context data available to service workers.","added language, auth_token and user_id dependency providers to make context data available to service workers.","added language, auth_token and user_id dependency providers to make context data available to service workers.","added language, auth_token and user_id dependency providers to make context data available to service workers.","added language, auth_token and user_id dependency providers to make context data available to service workers.","added language, auth_token and user_id dependency providers to make context data available to service workers.","added language, auth_token and user_id dependency providers to make context data available to service workers.","added language, auth_token and user_id dependency providers to make context data available to service workers.","added language, auth_token and user_id dependency providers to make context data available to service workers.","added language, auth_token and user_id dependency providers to make context data available to service workers.","added language, auth_token and user_id dependency providers to make context data available to service workers.","added language, auth_token and user_id dependency providers to make context data available to service workers.","added language, auth_token and user_id dependency providers to make context data available to service workers.","added language, auth_token and user_id dependency providers to make context data available to service workers.","added language, auth_token and user_id dependency providers to make context data available to service workers.","added language, auth_token and user_id dependency providers to make context data available to service workers.","added language, auth_token and user_id dependency providers to make context data available to service workers.","added language, auth_token and user_id dependency providers to make context data available to service workers.","added language, auth_token and user_id dependency providers to make context data available to service workers.","added language, auth_token and user_id dependency providers to make context data available to service workers.","added language, auth_token and user_id dependency providers to make context data available to service workers.","added language, auth_token and user_id dependency providers to make context data available to service workers.","added language, auth_token and user_id dependency providers to make context data available to service workers.","added language, auth_token and user_id dependency providers to make context data available to service workers.","added language, auth_token and user_id dependency providers to make context data available to service workers.","added language, auth_token and user_id dependency providers to make context data available to service workers.","added language, auth_token and user_id dependency providers to make context data available to service workers.","added language, auth_token and user_id dependency providers to make context data available to service workers.","added language, auth_token and user_id dependency providers to make context data available to service workers.","added language, auth_token and user_id dependency providers to make context data available to service workers.","added language, auth_token and user_id dependency providers to make context data available to service workers.","added language, auth_token and user_id dependency providers to make context data available to service workers.","added language, auth_token and user_id dependency providers to make context data available to service workers.","added language, auth_token and user_id dependency providers to make context data available to service workers.","added language, auth_token and user_id dependency providers to make context data available to service workers.","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ","ssl connections now supported by all amqp extensions, configurable using the amqp_ssl config key. ",it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,it s now possible to accept messages in multiple serialization formats. adds config-based mechanism for specifying custom serializers. see #535.,update worker_factory to raise if asked to replace a non-existent injection.,update worker_factory to raise if asked to replace a non-existent injection.,update worker_factory to raise if asked to replace a non-existent injection.,update worker_factory to raise if asked to replace a non-existent injection.,update worker_factory to raise if asked to replace a non-existent injection.,update worker_factory to raise if asked to replace a non-existent injection.,update worker_factory to raise if asked to replace a non-existent injection.,update worker_factory to raise if asked to replace a non-existent injection.,update worker_factory to raise if asked to replace a non-existent injection.,update worker_factory to raise if asked to replace a non-existent injection.,update worker_factory to raise if asked to replace a non-existent injection.,update worker_factory to raise if asked to replace a non-existent injection.,update worker_factory to raise if asked to replace a non-existent injection.,update worker_factory to raise if asked to replace a non-existent injection.,update worker_factory to raise if asked to replace a non-existent injection.,update worker_factory to raise if asked to replace a non-existent injection.,update worker_factory to raise if asked to replace a non-existent injection.,update worker_factory to raise if asked to replace a non-existent injection.,update worker_factory to raise if asked to replace a non-existent injection.,update worker_factory to raise if asked to replace a non-existent injection.,update worker_factory to raise if asked to replace a non-existent injection.,update worker_factory to raise if asked to replace a non-existent injection.,update worker_factory to raise if asked to replace a non-existent injection.,update worker_factory to raise if asked to replace a non-existent injection.,update worker_factory to raise if asked to replace a non-existent injection.,update worker_factory to raise if asked to replace a non-existent injection.,update worker_factory to raise if asked to replace a non-existent injection.,update worker_factory to raise if asked to replace a non-existent injection.,update worker_factory to raise if asked to replace a non-existent injection.,update worker_factory to raise if asked to replace a non-existent injection.,update worker_factory to raise if asked to replace a non-existent injection.,update worker_factory to raise if asked to replace a non-existent injection.,update worker_factory to raise if asked to replace a non-existent injection.,update worker_factory to raise if asked to replace a non-existent injection.,update worker_factory to raise if asked to replace a non-existent injection.,update worker_factory to raise if asked to replace a non-existent injection.,update worker_factory to raise if asked to replace a non-existent injection.,update worker_factory to raise if asked to replace a non-existent injection.,update worker_factory to raise if asked to replace a non-existent injection.,update worker_factory to raise if asked to replace a non-existent injection.,update worker_factory to raise if asked to replace a non-existent injection.,update worker_factory to raise if asked to replace a non-existent injection.,update worker_factory to raise if asked to replace a non-existent injection.,update worker_factory to raise if asked to replace a non-existent injection.,update worker_factory to raise if asked to replace a non-existent injection.,update worker_factory to raise if asked to replace a non-existent injection.,update worker_factory to raise if asked to replace a non-existent injection.,update worker_factory to raise if asked to replace a non-existent injection.,update worker_factory to raise if asked to replace a non-existent injection.,update worker_factory to raise if asked to replace a non-existent injection.,update worker_factory to raise if asked to replace a non-existent injection.,update worker_factory to raise if asked to replace a non-existent injection.,update worker_factory to raise if asked to replace a non-existent injection.,update worker_factory to raise if asked to replace a non-existent injection.,update worker_factory to raise if asked to replace a non-existent injection.,update worker_factory to raise if asked to replace a non-existent injection.,update worker_factory to raise if asked to replace a non-existent injection.,update worker_factory to raise if asked to replace a non-existent injection.,update worker_factory to raise if asked to replace a non-existent injection.,update worker_factory to raise if asked to replace a non-existent injection.,"don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ","don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ","don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ","don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ","don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ","don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ","don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ","don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ","don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ","don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ","don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ","don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ","don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ","don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ","don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ","don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ","don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ","don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ","don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ","don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ","don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ","don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ","don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ","don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ","don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ","don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ","don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ","don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ","don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ","don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ","don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ","don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ","don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ","don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ","don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ","don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ","don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ","don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ","don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ","don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ","don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ","don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ","don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ","don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ","don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ","don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ","don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ","don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ","don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ","don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ","don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ","don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ","don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ","don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ","don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ","don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ","don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ","don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ","don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ","don t block the queueconsumer thread on the worker pool, which could cause service deadlock and occasional dropped amqp connections ",correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,correction to workercontext.immediate_call_id which actually referred to the id of original call. adds workercontext.origin_call_id to replicate the previous behaviour.,refactored constants into their own module.,refactored constants into their own module.,refactored constants into their own module.,refactored constants into their own module.,refactored constants into their own module.,refactored constants into their own module.,refactored constants into their own module.,refactored constants into their own module.,refactored constants into their own module.,refactored constants into their own module.,refactored constants into their own module.,refactored constants into their own module.,refactored constants into their own module.,refactored constants into their own module.,refactored constants into their own module.,refactored constants into their own module.,refactored constants into their own module.,refactored constants into their own module.,refactored constants into their own module.,refactored constants into their own module.,refactored constants into their own module.,refactored constants into their own module.,refactored constants into their own module.,refactored constants into their own module.,refactored constants into their own module.,refactored constants into their own module.,refactored constants into their own module.,refactored constants into their own module.,refactored constants into their own module.,refactored constants into their own module.,refactored constants into their own module.,refactored constants into their own module.,refactored constants into their own module.,refactored constants into their own module.,refactored constants into their own module.,refactored constants into their own module.,refactored constants into their own module.,refactored constants into their own module.,refactored constants into their own module.,refactored constants into their own module.,refactored constants into their own module.,refactored constants into their own module.,refactored constants into their own module.,refactored constants into their own module.,refactored constants into their own module.,refactored constants into their own module.,refactored constants into their own module.,refactored constants into their own module.,refactored constants into their own module.,refactored constants into their own module.,refactored constants into their own module.,refactored constants into their own module.,refactored constants into their own module.,refactored constants into their own module.,refactored constants into their own module.,refactored constants into their own module.,refactored constants into their own module.,refactored constants into their own module.,refactored constants into their own module.,refactored constants into their own module.,support for timeouts in the standalone rpc proxy,support for timeouts in the standalone rpc proxy,support for timeouts in the standalone rpc proxy,support for timeouts in the standalone rpc proxy,support for timeouts in the standalone rpc proxy,support for timeouts in the standalone rpc proxy,support for timeouts in the standalone rpc proxy,support for timeouts in the standalone rpc proxy,support for timeouts in the standalone rpc proxy,support for timeouts in the standalone rpc proxy,support for timeouts in the standalone rpc proxy,support for timeouts in the standalone rpc proxy,support for timeouts in the standalone rpc proxy,support for timeouts in the standalone rpc proxy,support for timeouts in the standalone rpc proxy,support for timeouts in the standalone rpc proxy,support for timeouts in the standalone rpc proxy,support for timeouts in the standalone rpc proxy,support for timeouts in the standalone rpc proxy,support for timeouts in the standalone rpc proxy,support for timeouts in the standalone rpc proxy,support for timeouts in the standalone rpc proxy,support for timeouts in the standalone rpc proxy,support for timeouts in the standalone rpc proxy,support for timeouts in the standalone rpc proxy,support for timeouts in the standalone rpc proxy,support for timeouts in the standalone rpc proxy,support for timeouts in the standalone rpc proxy,support for timeouts in the standalone rpc proxy,support for timeouts in the standalone rpc proxy,support for timeouts in the standalone rpc proxy,support for timeouts in the standalone rpc proxy,support for timeouts in the standalone rpc proxy,support for timeouts in the standalone rpc proxy,support for timeouts in the standalone rpc proxy,support for timeouts in the standalone rpc proxy,support for timeouts in the standalone rpc proxy,support for timeouts in the standalone rpc proxy,support for timeouts in the standalone rpc proxy,support for timeouts in the standalone rpc proxy,support for timeouts in the standalone rpc proxy,support for timeouts in the standalone rpc proxy,support for timeouts in the standalone rpc proxy,support for timeouts in the standalone rpc proxy,support for timeouts in the standalone rpc proxy,support for timeouts in the standalone rpc proxy,support for timeouts in the standalone rpc proxy,support for timeouts in the standalone rpc proxy,support for timeouts in the standalone rpc proxy,support for timeouts in the standalone rpc proxy,support for timeouts in the standalone rpc proxy,support for timeouts in the standalone rpc proxy,support for timeouts in the standalone rpc proxy,support for timeouts in the standalone rpc proxy,support for timeouts in the standalone rpc proxy,support for timeouts in the standalone rpc proxy,support for timeouts in the standalone rpc proxy,support for timeouts in the standalone rpc proxy,support for timeouts in the standalone rpc proxy,support for timeouts in the standalone rpc proxy,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,raise methodnotfound instead of remoteerror: methodnotfound if a non-existent rpc method is called.,added serialization safety to legacy rpc entrypoint.,added serialization safety to legacy rpc entrypoint.,added serialization safety to legacy rpc entrypoint.,added serialization safety to legacy rpc entrypoint.,added serialization safety to legacy rpc entrypoint.,added serialization safety to legacy rpc entrypoint.,added serialization safety to legacy rpc entrypoint.,added serialization safety to legacy rpc entrypoint.,added serialization safety to legacy rpc entrypoint.,added serialization safety to legacy rpc entrypoint.,added serialization safety to legacy rpc entrypoint.,added serialization safety to legacy rpc entrypoint.,added serialization safety to legacy rpc entrypoint.,added serialization safety to legacy rpc entrypoint.,added serialization safety to legacy rpc entrypoint.,added serialization safety to legacy rpc entrypoint.,added serialization safety to legacy rpc entrypoint.,added serialization safety to legacy rpc entrypoint.,added serialization safety to legacy rpc entrypoint.,added serialization safety to legacy rpc entrypoint.,added serialization safety to legacy rpc entrypoint.,added serialization safety to legacy rpc entrypoint.,added serialization safety to legacy rpc entrypoint.,added serialization safety to legacy rpc entrypoint.,added serialization safety to legacy rpc entrypoint.,added serialization safety to legacy rpc entrypoint.,added serialization safety to legacy rpc entrypoint.,added serialization safety to legacy rpc entrypoint.,added serialization safety to legacy rpc entrypoint.,added serialization safety to legacy rpc entrypoint.,added serialization safety to legacy rpc entrypoint.,added serialization safety to legacy rpc entrypoint.,added serialization safety to legacy rpc entrypoint.,added serialization safety to legacy rpc entrypoint.,added serialization safety to legacy rpc entrypoint.,added serialization safety to legacy rpc entrypoint.,added serialization safety to legacy rpc entrypoint.,added serialization safety to legacy rpc entrypoint.,added serialization safety to legacy rpc entrypoint.,added serialization safety to legacy rpc entrypoint.,added serialization safety to legacy rpc entrypoint.,added serialization safety to legacy rpc entrypoint.,added serialization safety to legacy rpc entrypoint.,added serialization safety to legacy rpc entrypoint.,added serialization safety to legacy rpc entrypoint.,added serialization safety to legacy rpc entrypoint.,added serialization safety to legacy rpc entrypoint.,added serialization safety to legacy rpc entrypoint.,added serialization safety to legacy rpc entrypoint.,added serialization safety to legacy rpc entrypoint.,added serialization safety to legacy rpc entrypoint.,added serialization safety to legacy rpc entrypoint.,added serialization safety to legacy rpc entrypoint.,added serialization safety to legacy rpc entrypoint.,added serialization safety to legacy rpc entrypoint.,added serialization safety to legacy rpc entrypoint.,added serialization safety to legacy rpc entrypoint.,added serialization safety to legacy rpc entrypoint.,added serialization safety to legacy rpc entrypoint.,added serialization safety to legacy rpc entrypoint.,inspect the service class in worker_factory. works better with descriptors.,inspect the service class in worker_factory. works better with descriptors.,inspect the service class in worker_factory. works better with descriptors.,inspect the service class in worker_factory. works better with descriptors.,inspect the service class in worker_factory. works better with descriptors.,inspect the service class in worker_factory. works better with descriptors.,inspect the service class in worker_factory. works better with descriptors.,inspect the service class in worker_factory. works better with descriptors.,inspect the service class in worker_factory. works better with descriptors.,inspect the service class in worker_factory. works better with descriptors.,inspect the service class in worker_factory. works better with descriptors.,inspect the service class in worker_factory. works better with descriptors.,inspect the service class in worker_factory. works better with descriptors.,inspect the service class in worker_factory. works better with descriptors.,inspect the service class in worker_factory. works better with descriptors.,inspect the service class in worker_factory. works better with descriptors.,inspect the service class in worker_factory. works better with descriptors.,inspect the service class in worker_factory. works better with descriptors.,inspect the service class in worker_factory. works better with descriptors.,inspect the service class in worker_factory. works better with descriptors.,inspect the service class in worker_factory. works better with descriptors.,inspect the service class in worker_factory. works better with descriptors.,inspect the service class in worker_factory. works better with descriptors.,inspect the service class in worker_factory. works better with descriptors.,inspect the service class in worker_factory. works better with descriptors.,inspect the service class in worker_factory. works better with descriptors.,inspect the service class in worker_factory. works better with descriptors.,inspect the service class in worker_factory. works better with descriptors.,inspect the service class in worker_factory. works better with descriptors.,inspect the service class in worker_factory. works better with descriptors.,inspect the service class in worker_factory. works better with descriptors.,inspect the service class in worker_factory. works better with descriptors.,inspect the service class in worker_factory. works better with descriptors.,inspect the service class in worker_factory. works better with descriptors.,inspect the service class in worker_factory. works better with descriptors.,inspect the service class in worker_factory. works better with descriptors.,inspect the service class in worker_factory. works better with descriptors.,inspect the service class in worker_factory. works better with descriptors.,inspect the service class in worker_factory. works better with descriptors.,inspect the service class in worker_factory. works better with descriptors.,inspect the service class in worker_factory. works better with descriptors.,inspect the service class in worker_factory. works better with descriptors.,inspect the service class in worker_factory. works better with descriptors.,inspect the service class in worker_factory. works better with descriptors.,inspect the service class in worker_factory. works better with descriptors.,inspect the service class in worker_factory. works better with descriptors.,inspect the service class in worker_factory. works better with descriptors.,inspect the service class in worker_factory. works better with descriptors.,inspect the service class in worker_factory. works better with descriptors.,inspect the service class in worker_factory. works better with descriptors.,inspect the service class in worker_factory. works better with descriptors.,inspect the service class in worker_factory. works better with descriptors.,inspect the service class in worker_factory. works better with descriptors.,inspect the service class in worker_factory. works better with descriptors.,inspect the service class in worker_factory. works better with descriptors.,inspect the service class in worker_factory. works better with descriptors.,inspect the service class in worker_factory. works better with descriptors.,inspect the service class in worker_factory. works better with descriptors.,inspect the service class in worker_factory. works better with descriptors.,inspect the service class in worker_factory. works better with descriptors.,doesn t fire until the worker is completely torn down,doesn t fire until the worker is completely torn down,doesn t fire until the worker is completely torn down,doesn t fire until the worker is completely torn down,doesn t fire until the worker is completely torn down,doesn t fire until the worker is completely torn down,doesn t fire until the worker is completely torn down,doesn t fire until the worker is completely torn down,doesn t fire until the worker is completely torn down,doesn t fire until the worker is completely torn down,doesn t fire until the worker is completely torn down,doesn t fire until the worker is completely torn down,doesn t fire until the worker is completely torn down,doesn t fire until the worker is completely torn down,doesn t fire until the worker is completely torn down,doesn t fire until the worker is completely torn down,doesn t fire until the worker is completely torn down,doesn t fire until the worker is completely torn down,doesn t fire until the worker is completely torn down,doesn t fire until the worker is completely torn down,doesn t fire until the worker is completely torn down,doesn t fire until the worker is completely torn down,doesn t fire until the worker is completely torn down,doesn t fire until the worker is completely torn down,doesn t fire until the worker is completely torn down,doesn t fire until the worker is completely torn down,doesn t fire until the worker is completely torn down,doesn t fire until the worker is completely torn down,doesn t fire until the worker is completely torn down,doesn t fire until the worker is completely torn down,doesn t fire until the worker is completely torn down,doesn t fire until the worker is completely torn down,doesn t fire until the worker is completely torn down,doesn t fire until the worker is completely torn down,doesn t fire until the worker is completely torn down,doesn t fire until the worker is completely torn down,doesn t fire until the worker is completely torn down,doesn t fire until the worker is completely torn down,doesn t fire until the worker is completely torn down,doesn t fire until the worker is completely torn down,doesn t fire until the worker is completely torn down,doesn t fire until the worker is completely torn down,doesn t fire until the worker is completely torn down,doesn t fire until the worker is completely torn down,doesn t fire until the worker is completely torn down,doesn t fire until the worker is completely torn down,doesn t fire until the worker is completely torn down,doesn t fire until the worker is completely torn down,doesn t fire until the worker is completely torn down,doesn t fire until the worker is completely torn down,doesn t fire until the worker is completely torn down,doesn t fire until the worker is completely torn down,doesn t fire until the worker is completely torn down,doesn t fire until the worker is completely torn down,doesn t fire until the worker is completely torn down,doesn t fire until the worker is completely torn down,doesn t fire until the worker is completely torn down,doesn t fire until the worker is completely torn down,doesn t fire until the worker is completely torn down,doesn t fire until the worker is completely torn down,adds the ability to wait for a specific result,adds the ability to wait for a specific result,adds the ability to wait for a specific result,adds the ability to wait for a specific result,adds the ability to wait for a specific result,adds the ability to wait for a specific result,adds the ability to wait for a specific result,adds the ability to wait for a specific result,adds the ability to wait for a specific result,adds the ability to wait for a specific result,adds the ability to wait for a specific result,adds the ability to wait for a specific result,adds the ability to wait for a specific result,adds the ability to wait for a specific result,adds the ability to wait for a specific result,adds the ability to wait for a specific result,adds the ability to wait for a specific result,adds the ability to wait for a specific result,adds the ability to wait for a specific result,adds the ability to wait for a specific result,adds the ability to wait for a specific result,adds the ability to wait for a specific result,adds the ability to wait for a specific result,adds the ability to wait for a specific result,adds the ability to wait for a specific result,adds the ability to wait for a specific result,adds the ability to wait for a specific result,adds the ability to wait for a specific result,adds the ability to wait for a specific result,adds the ability to wait for a specific result,adds the ability to wait for a specific result,adds the ability to wait for a specific result,adds the ability to wait for a specific result,adds the ability to wait for a specific result,adds the ability to wait for a specific result,adds the ability to wait for a specific result,adds the ability to wait for a specific result,adds the ability to wait for a specific result,adds the ability to wait for a specific result,adds the ability to wait for a specific result,adds the ability to wait for a specific result,adds the ability to wait for a specific result,adds the ability to wait for a specific result,adds the ability to wait for a specific result,adds the ability to wait for a specific result,adds the ability to wait for a specific result,adds the ability to wait for a specific result,adds the ability to wait for a specific result,adds the ability to wait for a specific result,adds the ability to wait for a specific result,adds the ability to wait for a specific result,adds the ability to wait for a specific result,adds the ability to wait for a specific result,adds the ability to wait for a specific result,adds the ability to wait for a specific result,adds the ability to wait for a specific result,adds the ability to wait for a specific result,adds the ability to wait for a specific result,adds the ability to wait for a specific result,adds the ability to wait for a specific result,remove parallel provider in favour of async rpc,remove parallel provider in favour of async rpc,remove parallel provider in favour of async rpc,remove parallel provider in favour of async rpc,remove parallel provider in favour of async rpc,remove parallel provider in favour of async rpc,remove parallel provider in favour of async rpc,remove parallel provider in favour of async rpc,remove parallel provider in favour of async rpc,remove parallel provider in favour of async rpc,remove parallel provider in favour of async rpc,remove parallel provider in favour of async rpc,remove parallel provider in favour of async rpc,remove parallel provider in favour of async rpc,remove parallel provider in favour of async rpc,remove parallel provider in favour of async rpc,remove parallel provider in favour of async rpc,remove parallel provider in favour of async rpc,remove parallel provider in favour of async rpc,remove parallel provider in favour of async rpc,remove parallel provider in favour of async rpc,remove parallel provider in favour of async rpc,remove parallel provider in favour of async rpc,remove parallel provider in favour of async rpc,remove parallel provider in favour of async rpc,remove parallel provider in favour of async rpc,remove parallel provider in favour of async rpc,remove parallel provider in favour of async rpc,remove parallel provider in favour of async rpc,remove parallel provider in favour of async rpc,remove parallel provider in favour of async rpc,remove parallel provider in favour of async rpc,remove parallel provider in favour of async rpc,remove parallel provider in favour of async rpc,remove parallel provider in favour of async rpc,remove parallel provider in favour of async rpc,remove parallel provider in favour of async rpc,remove parallel provider in favour of async rpc,remove parallel provider in favour of async rpc,remove parallel provider in favour of async rpc,remove parallel provider in favour of async rpc,remove parallel provider in favour of async rpc,remove parallel provider in favour of async rpc,remove parallel provider in favour of async rpc,remove parallel provider in favour of async rpc,remove parallel provider in favour of async rpc,remove parallel provider in favour of async rpc,remove parallel provider in favour of async rpc,remove parallel provider in favour of async rpc,remove parallel provider in favour of async rpc,remove parallel provider in favour of async rpc,remove parallel provider in favour of async rpc,remove parallel provider in favour of async rpc,remove parallel provider in favour of async rpc,remove parallel provider in favour of async rpc,remove parallel provider in favour of async rpc,remove parallel provider in favour of async rpc,remove parallel provider in favour of async rpc,remove parallel provider in favour of async rpc,remove parallel provider in favour of async rpc,added support for environment variables in yaml config files,added support for environment variables in yaml config files,added support for environment variables in yaml config files,added support for environment variables in yaml config files,added support for environment variables in yaml config files,added support for environment variables in yaml config files,added support for environment variables in yaml config files,added support for environment variables in yaml config files,added support for environment variables in yaml config files,added support for environment variables in yaml config files,added support for environment variables in yaml config files,added support for environment variables in yaml config files,added support for environment variables in yaml config files,added support for environment variables in yaml config files,added support for environment variables in yaml config files,added support for environment variables in yaml config files,added support for environment variables in yaml config files,added support for environment variables in yaml config files,added support for environment variables in yaml config files,added support for environment variables in yaml config files,added support for environment variables in yaml config files,added support for environment variables in yaml config files,added support for environment variables in yaml config files,added support for environment variables in yaml config files,added support for environment variables in yaml config files,added support for environment variables in yaml config files,added support for environment variables in yaml config files,added support for environment variables in yaml config files,added support for environment variables in yaml config files,added support for environment variables in yaml config files,added support for environment variables in yaml config files,added support for environment variables in yaml config files,added support for environment variables in yaml config files,added support for environment variables in yaml config files,added support for environment variables in yaml config files,added support for environment variables in yaml config files,added support for environment variables in yaml config files,added support for environment variables in yaml config files,added support for environment variables in yaml config files,added support for environment variables in yaml config files,added support for environment variables in yaml config files,added support for environment variables in yaml config files,added support for environment variables in yaml config files,added support for environment variables in yaml config files,added support for environment variables in yaml config files,added support for environment variables in yaml config files,added support for environment variables in yaml config files,added support for environment variables in yaml config files,added support for environment variables in yaml config files,added support for environment variables in yaml config files,added support for environment variables in yaml config files,added support for environment variables in yaml config files,added support for environment variables in yaml config files,added support for environment variables in yaml config files,added support for environment variables in yaml config files,added support for environment variables in yaml config files,added support for environment variables in yaml config files,added support for environment variables in yaml config files,added support for environment variables in yaml config files,added support for environment variables in yaml config files,restore compatibility with eventlet 0.22+ ,restore compatibility with eventlet 0.22+ ,restore compatibility with eventlet 0.22+ ,restore compatibility with eventlet 0.22+ ,restore compatibility with eventlet 0.22+ ,restore compatibility with eventlet 0.22+ ,restore compatibility with eventlet 0.22+ ,restore compatibility with eventlet 0.22+ ,restore compatibility with eventlet 0.22+ ,restore compatibility with eventlet 0.22+ ,restore compatibility with eventlet 0.22+ ,restore compatibility with eventlet 0.22+ ,restore compatibility with eventlet 0.22+ ,restore compatibility with eventlet 0.22+ ,restore compatibility with eventlet 0.22+ ,restore compatibility with eventlet 0.22+ ,restore compatibility with eventlet 0.22+ ,restore compatibility with eventlet 0.22+ ,restore compatibility with eventlet 0.22+ ,restore compatibility with eventlet 0.22+ ,restore compatibility with eventlet 0.22+ ,restore compatibility with eventlet 0.22+ ,restore compatibility with eventlet 0.22+ ,restore compatibility with eventlet 0.22+ ,restore compatibility with eventlet 0.22+ ,restore compatibility with eventlet 0.22+ ,restore compatibility with eventlet 0.22+ ,restore compatibility with eventlet 0.22+ ,restore compatibility with eventlet 0.22+ ,restore compatibility with eventlet 0.22+ ,restore compatibility with eventlet 0.22+ ,restore compatibility with eventlet 0.22+ ,restore compatibility with eventlet 0.22+ ,restore compatibility with eventlet 0.22+ ,restore compatibility with eventlet 0.22+ ,restore compatibility with eventlet 0.22+ ,restore compatibility with eventlet 0.22+ ,restore compatibility with eventlet 0.22+ ,restore compatibility with eventlet 0.22+ ,restore compatibility with eventlet 0.22+ ,restore compatibility with eventlet 0.22+ ,restore compatibility with eventlet 0.22+ ,restore compatibility with eventlet 0.22+ ,restore compatibility with eventlet 0.22+ ,restore compatibility with eventlet 0.22+ ,restore compatibility with eventlet 0.22+ ,restore compatibility with eventlet 0.22+ ,restore compatibility with eventlet 0.22+ ,restore compatibility with eventlet 0.22+ ,restore compatibility with eventlet 0.22+ ,restore compatibility with eventlet 0.22+ ,restore compatibility with eventlet 0.22+ ,restore compatibility with eventlet 0.22+ ,restore compatibility with eventlet 0.22+ ,restore compatibility with eventlet 0.22+ ,restore compatibility with eventlet 0.22+ ,restore compatibility with eventlet 0.22+ ,restore compatibility with eventlet 0.22+ ,restore compatibility with eventlet 0.22+ ,restore compatibility with eventlet 0.22+ ,refactor the standalone queue consumer for more extensibility,refactor the standalone queue consumer for more extensibility,refactor the standalone queue consumer for more extensibility,refactor the standalone queue consumer for more extensibility,refactor the standalone queue consumer for more extensibility,refactor the standalone queue consumer for more extensibility,refactor the standalone queue consumer for more extensibility,refactor the standalone queue consumer for more extensibility,refactor the standalone queue consumer for more extensibility,refactor the standalone queue consumer for more extensibility,refactor the standalone queue consumer for more extensibility,refactor the standalone queue consumer for more extensibility,refactor the standalone queue consumer for more extensibility,refactor the standalone queue consumer for more extensibility,refactor the standalone queue consumer for more extensibility,refactor the standalone queue consumer for more extensibility,refactor the standalone queue consumer for more extensibility,refactor the standalone queue consumer for more extensibility,refactor the standalone queue consumer for more extensibility,refactor the standalone queue consumer for more extensibility,refactor the standalone queue consumer for more extensibility,refactor the standalone queue consumer for more extensibility,refactor the standalone queue consumer for more extensibility,refactor the standalone queue consumer for more extensibility,refactor the standalone queue consumer for more extensibility,refactor the standalone queue consumer for more extensibility,refactor the standalone queue consumer for more extensibility,refactor the standalone queue consumer for more extensibility,refactor the standalone queue consumer for more extensibility,refactor the standalone queue consumer for more extensibility,refactor the standalone queue consumer for more extensibility,refactor the standalone queue consumer for more extensibility,refactor the standalone queue consumer for more extensibility,refactor the standalone queue consumer for more extensibility,refactor the standalone queue consumer for more extensibility,refactor the standalone queue consumer for more extensibility,refactor the standalone queue consumer for more extensibility,refactor the standalone queue consumer for more extensibility,refactor the standalone queue consumer for more extensibility,refactor the standalone queue consumer for more extensibility,refactor the standalone queue consumer for more extensibility,refactor the standalone queue consumer for more extensibility,refactor the standalone queue consumer for more extensibility,refactor the standalone queue consumer for more extensibility,refactor the standalone queue consumer for more extensibility,refactor the standalone queue consumer for more extensibility,refactor the standalone queue consumer for more extensibility,refactor the standalone queue consumer for more extensibility,refactor the standalone queue consumer for more extensibility,refactor the standalone queue consumer for more extensibility,refactor the standalone queue consumer for more extensibility,refactor the standalone queue consumer for more extensibility,refactor the standalone queue consumer for more extensibility,refactor the standalone queue consumer for more extensibility,refactor the standalone queue consumer for more extensibility,refactor the standalone queue consumer for more extensibility,refactor the standalone queue consumer for more extensibility,refactor the standalone queue consumer for more extensibility,refactor the standalone queue consumer for more extensibility,refactor the standalone queue consumer for more extensibility,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,exposes delivery options and other messaging configuration to amqp-based dependencyproviders. ,bump the minimum supported eventlet version to 0.20.1 ,bump the minimum supported eventlet version to 0.20.1 ,bump the minimum supported eventlet version to 0.20.1 ,bump the minimum supported eventlet version to 0.20.1 ,bump the minimum supported eventlet version to 0.20.1 ,bump the minimum supported eventlet version to 0.20.1 ,bump the minimum supported eventlet version to 0.20.1 ,bump the minimum supported eventlet version to 0.20.1 ,bump the minimum supported eventlet version to 0.20.1 ,bump the minimum supported eventlet version to 0.20.1 ,bump the minimum supported eventlet version to 0.20.1 ,bump the minimum supported eventlet version to 0.20.1 ,bump the minimum supported eventlet version to 0.20.1 ,bump the minimum supported eventlet version to 0.20.1 ,bump the minimum supported eventlet version to 0.20.1 ,bump the minimum supported eventlet version to 0.20.1 ,bump the minimum supported eventlet version to 0.20.1 ,bump the minimum supported eventlet version to 0.20.1 ,bump the minimum supported eventlet version to 0.20.1 ,bump the minimum supported eventlet version to 0.20.1 ,bump the minimum supported eventlet version to 0.20.1 ,bump the minimum supported eventlet version to 0.20.1 ,bump the minimum supported eventlet version to 0.20.1 ,bump the minimum supported eventlet version to 0.20.1 ,bump the minimum supported eventlet version to 0.20.1 ,bump the minimum supported eventlet version to 0.20.1 ,bump the minimum supported eventlet version to 0.20.1 ,bump the minimum supported eventlet version to 0.20.1 ,bump the minimum supported eventlet version to 0.20.1 ,bump the minimum supported eventlet version to 0.20.1 ,bump the minimum supported eventlet version to 0.20.1 ,bump the minimum supported eventlet version to 0.20.1 ,bump the minimum supported eventlet version to 0.20.1 ,bump the minimum supported eventlet version to 0.20.1 ,bump the minimum supported eventlet version to 0.20.1 ,bump the minimum supported eventlet version to 0.20.1 ,bump the minimum supported eventlet version to 0.20.1 ,bump the minimum supported eventlet version to 0.20.1 ,bump the minimum supported eventlet version to 0.20.1 ,bump the minimum supported eventlet version to 0.20.1 ,bump the minimum supported eventlet version to 0.20.1 ,bump the minimum supported eventlet version to 0.20.1 ,bump the minimum supported eventlet version to 0.20.1 ,bump the minimum supported eventlet version to 0.20.1 ,bump the minimum supported eventlet version to 0.20.1 ,bump the minimum supported eventlet version to 0.20.1 ,bump the minimum supported eventlet version to 0.20.1 ,bump the minimum supported eventlet version to 0.20.1 ,bump the minimum supported eventlet version to 0.20.1 ,bump the minimum supported eventlet version to 0.20.1 ,bump the minimum supported eventlet version to 0.20.1 ,bump the minimum supported eventlet version to 0.20.1 ,bump the minimum supported eventlet version to 0.20.1 ,bump the minimum supported eventlet version to 0.20.1 ,bump the minimum supported eventlet version to 0.20.1 ,bump the minimum supported eventlet version to 0.20.1 ,bump the minimum supported eventlet version to 0.20.1 ,bump the minimum supported eventlet version to 0.20.1 ,bump the minimum supported eventlet version to 0.20.1 ,bump the minimum supported eventlet version to 0.20.1 ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,set stopped flag in register_provider to allow pollingqueueconsumer object reuse ,documentation generator accepts a function listing event classes and adds to output accordingly.,documentation generator accepts a function listing event classes and adds to output accordingly.,documentation generator accepts a function listing event classes and adds to output accordingly.,documentation generator accepts a function listing event classes and adds to output accordingly.,documentation generator accepts a function listing event classes and adds to output accordingly.,documentation generator accepts a function listing event classes and adds to output accordingly.,documentation generator accepts a function listing event classes and adds to output accordingly.,documentation generator accepts a function listing event classes and adds to output accordingly.,documentation generator accepts a function listing event classes and adds to output accordingly.,documentation generator accepts a function listing event classes and adds to output accordingly.,documentation generator accepts a function listing event classes and adds to output accordingly.,documentation generator accepts a function listing event classes and adds to output accordingly.,documentation generator accepts a function listing event classes and adds to output accordingly.,documentation generator accepts a function listing event classes and adds to output accordingly.,documentation generator accepts a function listing event classes and adds to output accordingly.,documentation generator accepts a function listing event classes and adds to output accordingly.,documentation generator accepts a function listing event classes and adds to output accordingly.,documentation generator accepts a function listing event classes and adds to output accordingly.,documentation generator accepts a function listing event classes and adds to output accordingly.,documentation generator accepts a function listing event classes and adds to output accordingly.,documentation generator accepts a function listing event classes and adds to output accordingly.,documentation generator accepts a function listing event classes and adds to output accordingly.,documentation generator accepts a function listing event classes and adds to output accordingly.,documentation generator accepts a function listing event classes and adds to output accordingly.,documentation generator accepts a function listing event classes and adds to output accordingly.,documentation generator accepts a function listing event classes and adds to output accordingly.,documentation generator accepts a function listing event classes and adds to output accordingly.,documentation generator accepts a function listing event classes and adds to output accordingly.,documentation generator accepts a function listing event classes and adds to output accordingly.,documentation generator accepts a function listing event classes and adds to output accordingly.,documentation generator accepts a function listing event classes and adds to output accordingly.,documentation generator accepts a function listing event classes and adds to output accordingly.,documentation generator accepts a function listing event classes and adds to output accordingly.,documentation generator accepts a function listing event classes and adds to output accordingly.,documentation generator accepts a function listing event classes and adds to output accordingly.,documentation generator accepts a function listing event classes and adds to output accordingly.,documentation generator accepts a function listing event classes and adds to output accordingly.,documentation generator accepts a function listing event classes and adds to output accordingly.,documentation generator accepts a function listing event classes and adds to output accordingly.,documentation generator accepts a function listing event classes and adds to output accordingly.,documentation generator accepts a function listing event classes and adds to output accordingly.,documentation generator accepts a function listing event classes and adds to output accordingly.,documentation generator accepts a function listing event classes and adds to output accordingly.,documentation generator accepts a function listing event classes and adds to output accordingly.,documentation generator accepts a function listing event classes and adds to output accordingly.,documentation generator accepts a function listing event classes and adds to output accordingly.,documentation generator accepts a function listing event classes and adds to output accordingly.,documentation generator accepts a function listing event classes and adds to output accordingly.,documentation generator accepts a function listing event classes and adds to output accordingly.,documentation generator accepts a function listing event classes and adds to output accordingly.,documentation generator accepts a function listing event classes and adds to output accordingly.,documentation generator accepts a function listing event classes and adds to output accordingly.,documentation generator accepts a function listing event classes and adds to output accordingly.,documentation generator accepts a function listing event classes and adds to output accordingly.,documentation generator accepts a function listing event classes and adds to output accordingly.,documentation generator accepts a function listing event classes and adds to output accordingly.,documentation generator accepts a function listing event classes and adds to output accordingly.,documentation generator accepts a function listing event classes and adds to output accordingly.,documentation generator accepts a function listing event classes and adds to output accordingly.,documentation generator accepts a function listing event classes and adds to output accordingly.,"have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.","have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.","have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.","have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.","have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.","have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.","have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.","have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.","have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.","have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.","have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.","have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.","have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.","have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.","have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.","have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.","have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.","have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.","have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.","have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.","have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.","have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.","have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.","have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.","have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.","have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.","have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.","have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.","have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.","have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.","have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.","have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.","have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.","have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.","have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.","have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.","have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.","have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.","have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.","have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.","have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.","have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.","have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.","have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.","have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.","have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.","have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.","have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.","have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.","have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.","have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.","have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.","have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.","have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.","have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.","have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.","have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.","have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.","have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.","have the standalone rpc proxy mark its reply queues as auto-delete, to stop them staying around after use.",workarounds for rabbitmq bugs described at link,workarounds for rabbitmq bugs described at link,workarounds for rabbitmq bugs described at link,workarounds for rabbitmq bugs described at link,workarounds for rabbitmq bugs described at link,workarounds for rabbitmq bugs described at link,workarounds for rabbitmq bugs described at link,workarounds for rabbitmq bugs described at link,workarounds for rabbitmq bugs described at link,workarounds for rabbitmq bugs described at link,workarounds for rabbitmq bugs described at link,workarounds for rabbitmq bugs described at link,workarounds for rabbitmq bugs described at link,workarounds for rabbitmq bugs described at link,workarounds for rabbitmq bugs described at link,workarounds for rabbitmq bugs described at link,workarounds for rabbitmq bugs described at link,workarounds for rabbitmq bugs described at link,workarounds for rabbitmq bugs described at link,workarounds for rabbitmq bugs described at link,workarounds for rabbitmq bugs described at link,workarounds for rabbitmq bugs described at link,workarounds for rabbitmq bugs described at link,workarounds for rabbitmq bugs described at link,workarounds for rabbitmq bugs described at link,workarounds for rabbitmq bugs described at link,workarounds for rabbitmq bugs described at link,workarounds for rabbitmq bugs described at link,workarounds for rabbitmq bugs described at link,workarounds for rabbitmq bugs described at link,workarounds for rabbitmq bugs described at link,workarounds for rabbitmq bugs described at link,workarounds for rabbitmq bugs described at link,workarounds for rabbitmq bugs described at link,workarounds for rabbitmq bugs described at link,workarounds for rabbitmq bugs described at link,workarounds for rabbitmq bugs described at link,workarounds for rabbitmq bugs described at link,workarounds for rabbitmq bugs described at link,workarounds for rabbitmq bugs described at link,workarounds for rabbitmq bugs described at link,workarounds for rabbitmq bugs described at link,workarounds for rabbitmq bugs described at link,workarounds for rabbitmq bugs described at link,workarounds for rabbitmq bugs described at link,workarounds for rabbitmq bugs described at link,workarounds for rabbitmq bugs described at link,workarounds for rabbitmq bugs described at link,workarounds for rabbitmq bugs described at link,workarounds for rabbitmq bugs described at link,workarounds for rabbitmq bugs described at link,workarounds for rabbitmq bugs described at link,workarounds for rabbitmq bugs described at link,workarounds for rabbitmq bugs described at link,workarounds for rabbitmq bugs described at link,workarounds for rabbitmq bugs described at link,workarounds for rabbitmq bugs described at link,workarounds for rabbitmq bugs described at link,workarounds for rabbitmq bugs described at link,workarounds for rabbitmq bugs described at link
